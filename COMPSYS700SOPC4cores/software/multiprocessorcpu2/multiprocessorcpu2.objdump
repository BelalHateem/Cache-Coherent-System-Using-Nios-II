
multiprocessorcpu2.elf:     file format elf32-littlenios2
multiprocessorcpu2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x06000244

Program Header:
    LOAD off    0x00001000 vaddr 0x06000000 paddr 0x06000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x06000020 paddr 0x06000020 align 2**12
         filesz 0x00005db8 memsz 0x00005db8 flags r-x
    LOAD off    0x00006dd8 vaddr 0x06005dd8 paddr 0x06007868 align 2**12
         filesz 0x00001a90 memsz 0x00001a90 flags rw-
    LOAD off    0x000092f8 vaddr 0x060092f8 paddr 0x060092f8 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  06000000  06000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  06000020  06000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005aac  06000244  06000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  06005cf0  06005cf0  00006cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a90  06005dd8  06007868  00006dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  060092f8  060092f8  000092f8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0600944c  0600944c  00008868  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008868  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00008890  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016a87  00000000  00000000  000092e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000629a  00000000  00000000  0001fd67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006bc3  00000000  00000000  00026001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001768  00000000  00000000  0002cbc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002856  00000000  00000000  0002e32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  00030b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000355d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00035600  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000383a6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000383a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000383ae  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000383af  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000a  00000000  00000000  000383b0  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000a  00000000  00000000  000383ba  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000a  00000000  00000000  000383c4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  000383ce  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000011  00000000  00000000  000383d1  2**0
                  CONTENTS, READONLY
 26 .jdi          000112a5  00000000  00000000  000383e2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000bc226  00000000  00000000  00049687  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
06000000 l    d  .entry	00000000 .entry
06000020 l    d  .exceptions	00000000 .exceptions
06000244 l    d  .text	00000000 .text
06005cf0 l    d  .rodata	00000000 .rodata
06005dd8 l    d  .rwdata	00000000 .rwdata
060092f8 l    d  .bss	00000000 .bss
0600944c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../multiprocessorcpu2_bsp//obj/HAL/src/crt0.o
0600028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 maincpu2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
06000570 l     F .text	00000008 __fp_unlock
06000584 l     F .text	0000019c __sinit.part.1
06000720 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
06005dd8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
060031cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
06003320 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0600334c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
06003438 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
06003518 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
06003604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
060037d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
06007850 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
06003a24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
06003b58 l     F .text	00000034 alt_dev_reg
06003b8c l     F .text	0000003c alt_get_errno
06003bc8 l     F .text	00000068 alt_avalon_mutex_reg
060067ac l     O .rwdata	00001060 jtag_uart2
0600780c l     O .rwdata	00000010 mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
06003ef4 l     F .text	0000020c altera_avalon_jtag_uart_irq
06004100 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
06004738 l     F .text	0000003c alt_get_errno
06004774 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
06004a04 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
06004c24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
06005128 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
06005268 l     F .text	0000003c alt_get_errno
060052a4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
06009320 g     O .bss	00000004 alt_instruction_exception_handler
06002fc4 g     F .text	00000054 _isatty_r
06003714 g     F .text	0000007c alt_main
06000404 g     F .text	000000c0 _puts_r
0600934c g     O .bss	00000100 alt_irq
06002cec g     F .text	00000060 _lseek_r
06007868 g       *ABS*	00000000 __flash_rwdata_start
0600944c g       *ABS*	00000000 __alt_heap_start
060022a0 g     F .text	0000005c __sseek
060008c0 g     F .text	00000010 __sinit
06000728 g     F .text	00000068 __sfmoreglue
060037b4 g     F .text	00000024 __malloc_unlock
0600198c g     F .text	0000015c memmove
060008a8 g     F .text	00000018 _cleanup
060048ac g     F .text	00000040 altera_avalon_mutex_trylock
06005660 g     F .text	00000024 altera_nios2_gen2_irq_init
06000000 g     F .entry	0000001c __reset
06004940 g     F .text	00000074 altera_avalon_mutex_is_mine
06000020 g       *ABS*	00000000 __flash_exceptions_start
06002f68 g     F .text	0000005c _fstat_r
06009304 g     O .bss	00000004 errno
0600221c g     F .text	00000008 __seofread
0600930c g     O .bss	00000004 alt_argv
0600f81c g       *ABS*	00000000 _gp
0600662c g     O .rwdata	00000180 alt_fd_list
06004dc4 g     F .text	00000090 alt_find_dev
0600781c g     O .rwdata	00000004 A
06001844 g     F .text	00000148 memcpy
06000578 g     F .text	0000000c _cleanup_r
060051ec g     F .text	0000007c alt_io_redirect
06005cf0 g       *ABS*	00000000 __DTOR_END__
060004c4 g     F .text	00000014 puts
060058c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
060042f8 g     F .text	0000021c altera_avalon_jtag_uart_read
06003110 g     F .text	00000064 .hidden __udivsi3
06003474 g     F .text	000000a4 isatty
06005830 g     F .text	00000090 alt_icache_flush
06009300 g     O .bss	00000004 __malloc_top_pad
06000910 g     F .text	000004bc __sfvwrite_r
06002174 g     F .text	00000054 _sbrk_r
06002f08 g     F .text	00000060 _read_r
06007848 g     O .rwdata	00000004 alt_max_fd
0600250c g     F .text	000000f0 _fclose_r
06002888 g     F .text	00000030 fflush
060092fc g     O .bss	00000004 __malloc_max_sbrked_mem
06003640 g     F .text	000000d4 lseek
060049b4 g     F .text	00000050 altera_avalon_mutex_first_lock
06007828 g     O .rwdata	00000004 _global_impure_ptr
06001c10 g     F .text	00000564 _realloc_r
0600944c g       *ABS*	00000000 __bss_end
06005038 g     F .text	000000f0 alt_iic_isr_register
06005558 g     F .text	00000108 alt_tick
060008e0 g     F .text	00000018 __fp_lock_all
06004fec g     F .text	0000004c alt_ic_irq_enabled
060054bc g     F .text	0000009c alt_alarm_stop
06009314 g     O .bss	00000004 alt_irq_active
060000fc g     F .exceptions	000000d4 alt_irq_handler
06006604 g     O .rwdata	00000028 alt_dev_null
060047f0 g     F .text	00000054 altera_avalon_mutex_open
060032d8 g     F .text	00000048 alt_dcache_flush_all
06007820 g     O .rwdata	00000004 B
06007868 g       *ABS*	00000000 __ram_rwdata_end
06007840 g     O .rwdata	00000008 alt_dev_list
06003a60 g     F .text	000000f8 write
06007854 g     O .rwdata	00000008 alt_mutex_list
06005dd8 g       *ABS*	00000000 __ram_rodata_end
06003388 g     F .text	000000b0 fstat
06003174 g     F .text	00000058 .hidden __umodsi3
0600944c g       *ABS*	00000000 end
06007824 g     O .rwdata	00000004 C
06003e34 g     F .text	000000c0 altera_avalon_jtag_uart_init
060001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
06005cf0 g       *ABS*	00000000 __CTOR_LIST__
07000000 g       *ABS*	00000000 __alt_stack_pointer
06004a7c g     F .text	0000007c alt_avalon_timer_sc_init
06004514 g     F .text	00000224 altera_avalon_jtag_uart_write
060008d0 g     F .text	00000004 __sfp_lock_acquire
06001760 g     F .text	000000e4 memchr
060029dc g     F .text	00000310 _free_r
06005b3c g     F .text	00000180 __call_exitprocs
06007830 g     O .rwdata	00000004 __malloc_sbrk_base
06000244 g     F .text	0000004c _start
06009318 g     O .bss	00000004 _alt_tick_rate
0600931c g     O .bss	00000004 _alt_nticks
06003814 g     F .text	000000fc read
06003c68 g     F .text	00000068 alt_sys_init
06005a24 g     F .text	00000118 __register_exitproc
060048ec g     F .text	00000054 altera_avalon_mutex_unlock
060041a0 g     F .text	00000068 altera_avalon_jtag_uart_close
06005dd8 g       *ABS*	00000000 __ram_rwdata_start
06005cf0 g       *ABS*	00000000 __ram_rodata_start
06009324 g     O .bss	00000028 __malloc_current_mallinfo
06003cd0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0600578c g     F .text	000000a4 alt_get_fd
060024b8 g     F .text	00000054 _close_r
060059a8 g     F .text	0000007c memcmp
06003d90 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0600944c g       *ABS*	00000000 __alt_stack_base
06003de0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
06002364 g     F .text	00000154 __swsetup_r
06000790 g     F .text	00000118 __sfp
060061fc g     O .rwdata	00000408 __malloc_av_
060008dc g     F .text	00000004 __sinit_lock_release
060021c8 g     F .text	00000054 __sread
06005684 g     F .text	00000108 alt_find_file
06004c60 g     F .text	000000a4 alt_dev_llist_insert
06003790 g     F .text	00000024 __malloc_lock
06003974 g     F .text	000000b0 sbrk
0600282c g     F .text	0000005c _fflush_r
060092f8 g       *ABS*	00000000 __bss_start
06001ae8 g     F .text	00000128 memset
060003a0 g     F .text	00000064 main
06009310 g     O .bss	00000004 alt_envp
060092f8 g     O .bss	00000004 __malloc_max_total_mem
06003d30 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
06000290 g     F .text	00000110 matrix_multiply_part
060022fc g     F .text	00000008 __sclose
07000000 g       *ABS*	00000000 __alt_heap_limit
060025fc g     F .text	00000014 fclose
06004868 g     F .text	00000044 altera_avalon_mutex_lock
06000f54 g     F .text	0000080c _malloc_r
0600784c g     O .rwdata	00000004 alt_errno
06000dcc g     F .text	000000c4 _fwalk
06003018 g     F .text	00000084 .hidden __divsi3
060028b8 g     F .text	00000124 _malloc_trim_r
06005cf0 g       *ABS*	00000000 __CTOR_END__
06005cf0 g       *ABS*	00000000 __flash_rodata_start
06005cf0 g       *ABS*	00000000 __DTOR_LIST__
06003c30 g     F .text	00000038 alt_irq_init
06003910 g     F .text	00000064 alt_release_fd
0600595c g     F .text	00000014 atexit
06002304 g     F .text	00000060 _write_r
0600782c g     O .rwdata	00000004 _impure_ptr
06009308 g     O .bss	00000004 alt_argc
06002610 g     F .text	0000021c __sflush_r
06004d64 g     F .text	00000060 _do_dtors
06000020 g       .exceptions	00000000 alt_irq_entry
060008f8 g     F .text	00000018 __fp_unlock_all
06007838 g     O .rwdata	00000008 alt_fs_list
06000020 g       *ABS*	00000000 __ram_exceptions_start
06004e88 g     F .text	00000050 alt_ic_isr_register
06007868 g       *ABS*	00000000 _edata
0600944c g       *ABS*	00000000 _end
06000244 g       *ABS*	00000000 __ram_exceptions_end
06004208 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
06004f60 g     F .text	0000008c alt_ic_irq_disable
06002224 g     F .text	0000007c __swrite
06007834 g     O .rwdata	00000004 __malloc_trim_threshold
06005970 g     F .text	00000038 exit
06000e90 g     F .text	000000c4 _fwalk_reent
0600309c g     F .text	00000074 .hidden __modsi3
07000000 g       *ABS*	00000000 __alt_data_end
06000020 g     F .exceptions	00000000 alt_exception
060008d4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
06005cbc g     F .text	00000034 _exit
06004af8 g     F .text	0000012c alt_alarm_start
06002d4c g     F .text	000001bc __smakebuf_r
060004d8 g     F .text	00000098 strlen
06005368 g     F .text	00000154 open
06004e54 g     F .text	00000034 alt_icache_flush_all
0600785c g     O .rwdata	00000004 alt_priority_mask
06004ed8 g     F .text	00000088 alt_ic_irq_enable
06004844 g     F .text	00000024 altera_avalon_mutex_close
06007860 g     O .rwdata	00000008 alt_alarm_list
06004d04 g     F .text	00000060 _do_ctors
06003208 g     F .text	000000d0 close
06003580 g     F .text	00000084 alt_load
060008d8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

06000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 6000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 6000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 6000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 600000c:	00bffd16 	blt	zero,r2,6000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 6000010:	00418034 	movhi	at,1536
    ori r1, r1, %lo(_start)
 6000014:	08409114 	ori	at,at,580
    jmp r1
 6000018:	0800683a 	jmp	at
 600001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

06000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 6000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 6000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 6000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 600002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 6000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 6000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 6000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 600003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 6000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 6000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 6000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 600004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 6000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 6000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 6000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 600005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 6000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 6000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 6000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 600006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 6000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 6000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 6000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 600007c:	10000326 	beq	r2,zero,600008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 6000080:	20000226 	beq	r4,zero,600008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 6000084:	60000fc0 	call	60000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 6000088:	00000706 	br	60000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 600008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 6000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 6000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 6000098:	60001d00 	call	60001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 600009c:	1000021e 	bne	r2,zero,60000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 60000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 60000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 60000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 60000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 60000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 60000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 60000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 60000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 60000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 60000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 60000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 60000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 60000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 60000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 60000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 60000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 60000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 60000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 60000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 60000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 60000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 60000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 60000f8:	ef80083a 	eret

060000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 60000fc:	defff904 	addi	sp,sp,-28
 6000100:	dfc00615 	stw	ra,24(sp)
 6000104:	df000515 	stw	fp,20(sp)
 6000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 600010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 6000110:	0005313a 	rdctl	r2,ipending
 6000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 6000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 600011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 6000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 6000124:	00800044 	movi	r2,1
 6000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 600012c:	e0fffb17 	ldw	r3,-20(fp)
 6000130:	e0bffc17 	ldw	r2,-16(fp)
 6000134:	1884703a 	and	r2,r3,r2
 6000138:	10001426 	beq	r2,zero,600018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 600013c:	00818074 	movhi	r2,1537
 6000140:	10a4d304 	addi	r2,r2,-27828
 6000144:	e0fffd17 	ldw	r3,-12(fp)
 6000148:	180690fa 	slli	r3,r3,3
 600014c:	10c5883a 	add	r2,r2,r3
 6000150:	10c00017 	ldw	r3,0(r2)
 6000154:	00818074 	movhi	r2,1537
 6000158:	10a4d304 	addi	r2,r2,-27828
 600015c:	e13ffd17 	ldw	r4,-12(fp)
 6000160:	200890fa 	slli	r4,r4,3
 6000164:	1105883a 	add	r2,r2,r4
 6000168:	10800104 	addi	r2,r2,4
 600016c:	10800017 	ldw	r2,0(r2)
 6000170:	1009883a 	mov	r4,r2
 6000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 6000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 600017c:	0005313a 	rdctl	r2,ipending
 6000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 6000184:	e0bfff17 	ldw	r2,-4(fp)
 6000188:	00000706 	br	60001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 600018c:	e0bffc17 	ldw	r2,-16(fp)
 6000190:	1085883a 	add	r2,r2,r2
 6000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 6000198:	e0bffd17 	ldw	r2,-12(fp)
 600019c:	10800044 	addi	r2,r2,1
 60001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 60001a4:	003fe106 	br	600012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 60001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 60001ac:	e0bffb17 	ldw	r2,-20(fp)
 60001b0:	103fdb1e 	bne	r2,zero,6000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 60001b4:	0001883a 	nop
}
 60001b8:	0001883a 	nop
 60001bc:	e037883a 	mov	sp,fp
 60001c0:	dfc00117 	ldw	ra,4(sp)
 60001c4:	df000017 	ldw	fp,0(sp)
 60001c8:	dec00204 	addi	sp,sp,8
 60001cc:	f800283a 	ret

060001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 60001d0:	defffb04 	addi	sp,sp,-20
 60001d4:	dfc00415 	stw	ra,16(sp)
 60001d8:	df000315 	stw	fp,12(sp)
 60001dc:	df000304 	addi	fp,sp,12
 60001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 60001e4:	000531fa 	rdctl	r2,exception
 60001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 60001ec:	e0bffd17 	ldw	r2,-12(fp)
 60001f0:	10801f0c 	andi	r2,r2,124
 60001f4:	1004d0ba 	srli	r2,r2,2
 60001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 60001fc:	0005333a 	rdctl	r2,badaddr
 6000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 6000204:	d0a6c117 	ldw	r2,-25852(gp)
 6000208:	10000726 	beq	r2,zero,6000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 600020c:	d0a6c117 	ldw	r2,-25852(gp)
 6000210:	e0fffd17 	ldw	r3,-12(fp)
 6000214:	e1bffe17 	ldw	r6,-8(fp)
 6000218:	e17fff17 	ldw	r5,-4(fp)
 600021c:	1809883a 	mov	r4,r3
 6000220:	103ee83a 	callr	r2
 6000224:	00000206 	br	6000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 6000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 600022c:	0005883a 	mov	r2,zero
}
 6000230:	e037883a 	mov	sp,fp
 6000234:	dfc00117 	ldw	ra,4(sp)
 6000238:	df000017 	ldw	fp,0(sp)
 600023c:	dec00204 	addi	sp,sp,8
 6000240:	f800283a 	ret

Disassembly of section .text:

06000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 6000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 6000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 600024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 6000250:	00bffd16 	blt	zero,r2,6000248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 6000254:	06c1c034 	movhi	sp,1792
    ori sp, sp, %lo(__alt_stack_pointer)
 6000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 600025c:	06818034 	movhi	gp,1536
    ori gp, gp, %lo(_gp)
 6000260:	d6be0714 	ori	gp,gp,63516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 6000264:	00818034 	movhi	r2,1536
    ori r2, r2, %lo(__bss_start)
 6000268:	10a4be14 	ori	r2,r2,37624

    movhi r3, %hi(__bss_end)
 600026c:	00c18034 	movhi	r3,1536
    ori r3, r3, %lo(__bss_end)
 6000270:	18e51314 	ori	r3,r3,37964

    beq r2, r3, 1f
 6000274:	10c00326 	beq	r2,r3,6000284 <_start+0x40>

0:
    stw zero, (r2)
 6000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 600027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 6000280:	10fffd36 	bltu	r2,r3,6000278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 6000284:	60035800 	call	6003580 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 6000288:	60037140 	call	6003714 <alt_main>

0600028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 600028c:	003fff06 	br	600028c <__alt_data_end+0xff00028c>

06000290 <matrix_multiply_part>:
// Shared memory addresses
volatile int *A = (int *) SDRAM_BASE;
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
 6000290:	defff904 	addi	sp,sp,-28
 6000294:	df000615 	stw	fp,24(sp)
 6000298:	df000604 	addi	fp,sp,24
 600029c:	e13ffe15 	stw	r4,-8(fp)
 60002a0:	e17fff15 	stw	r5,-4(fp)
    for (int i = start_row; i < end_row; i++) {
 60002a4:	e0bffe17 	ldw	r2,-8(fp)
 60002a8:	e0bffa15 	stw	r2,-24(fp)
 60002ac:	00003406 	br	6000380 <matrix_multiply_part+0xf0>
        for (int j = 0; j < N; j++) {
 60002b0:	e03ffb15 	stw	zero,-20(fp)
 60002b4:	00002c06 	br	6000368 <matrix_multiply_part+0xd8>
            int sum = 0;
 60002b8:	e03ffc15 	stw	zero,-16(fp)
            for (int k = 0; k < N; k++) {
 60002bc:	e03ffd15 	stw	zero,-12(fp)
 60002c0:	00001906 	br	6000328 <matrix_multiply_part+0x98>
                sum += A[i * N + k] * B[k * N + j];
 60002c4:	d0e00017 	ldw	r3,-32768(gp)
 60002c8:	e0bffa17 	ldw	r2,-24(fp)
 60002cc:	100890fa 	slli	r4,r2,3
 60002d0:	e0bffd17 	ldw	r2,-12(fp)
 60002d4:	2085883a 	add	r2,r4,r2
 60002d8:	1085883a 	add	r2,r2,r2
 60002dc:	1085883a 	add	r2,r2,r2
 60002e0:	1885883a 	add	r2,r3,r2
 60002e4:	10c00017 	ldw	r3,0(r2)
 60002e8:	d1200117 	ldw	r4,-32764(gp)
 60002ec:	e0bffd17 	ldw	r2,-12(fp)
 60002f0:	100a90fa 	slli	r5,r2,3
 60002f4:	e0bffb17 	ldw	r2,-20(fp)
 60002f8:	2885883a 	add	r2,r5,r2
 60002fc:	1085883a 	add	r2,r2,r2
 6000300:	1085883a 	add	r2,r2,r2
 6000304:	2085883a 	add	r2,r4,r2
 6000308:	10800017 	ldw	r2,0(r2)
 600030c:	1885383a 	mul	r2,r3,r2
 6000310:	e0fffc17 	ldw	r3,-16(fp)
 6000314:	1885883a 	add	r2,r3,r2
 6000318:	e0bffc15 	stw	r2,-16(fp)

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < N; j++) {
            int sum = 0;
            for (int k = 0; k < N; k++) {
 600031c:	e0bffd17 	ldw	r2,-12(fp)
 6000320:	10800044 	addi	r2,r2,1
 6000324:	e0bffd15 	stw	r2,-12(fp)
 6000328:	e0bffd17 	ldw	r2,-12(fp)
 600032c:	10800210 	cmplti	r2,r2,8
 6000330:	103fe41e 	bne	r2,zero,60002c4 <__alt_data_end+0xff0002c4>
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;  // Store result in shared memory
 6000334:	d0e00217 	ldw	r3,-32760(gp)
 6000338:	e0bffa17 	ldw	r2,-24(fp)
 600033c:	100890fa 	slli	r4,r2,3
 6000340:	e0bffb17 	ldw	r2,-20(fp)
 6000344:	2085883a 	add	r2,r4,r2
 6000348:	1085883a 	add	r2,r2,r2
 600034c:	1085883a 	add	r2,r2,r2
 6000350:	1885883a 	add	r2,r3,r2
 6000354:	e0fffc17 	ldw	r3,-16(fp)
 6000358:	10c00015 	stw	r3,0(r2)
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < N; j++) {
 600035c:	e0bffb17 	ldw	r2,-20(fp)
 6000360:	10800044 	addi	r2,r2,1
 6000364:	e0bffb15 	stw	r2,-20(fp)
 6000368:	e0bffb17 	ldw	r2,-20(fp)
 600036c:	10800210 	cmplti	r2,r2,8
 6000370:	103fd11e 	bne	r2,zero,60002b8 <__alt_data_end+0xff0002b8>
volatile int *A = (int *) SDRAM_BASE;
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
 6000374:	e0bffa17 	ldw	r2,-24(fp)
 6000378:	10800044 	addi	r2,r2,1
 600037c:	e0bffa15 	stw	r2,-24(fp)
 6000380:	e0fffa17 	ldw	r3,-24(fp)
 6000384:	e0bfff17 	ldw	r2,-4(fp)
 6000388:	18bfc916 	blt	r3,r2,60002b0 <__alt_data_end+0xff0002b0>
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;  // Store result in shared memory
        }
    }
}
 600038c:	0001883a 	nop
 6000390:	e037883a 	mov	sp,fp
 6000394:	df000017 	ldw	fp,0(sp)
 6000398:	dec00104 	addi	sp,sp,4
 600039c:	f800283a 	ret

060003a0 <main>:

int main() {
 60003a0:	defffe04 	addi	sp,sp,-8
 60003a4:	dfc00115 	stw	ra,4(sp)
 60003a8:	df000015 	stw	fp,0(sp)
 60003ac:	d839883a 	mov	fp,sp
    // Wait for switches SW[0], SW[1], SW[2], and SW[3] to be on
    printf("CPU 2: Waiting for switches SW[0], SW[1], SW[2], and SW[3] to be on...\n");
 60003b0:	01018034 	movhi	r4,1536
 60003b4:	21173c04 	addi	r4,r4,23792
 60003b8:	60004c40 	call	60004c4 <puts>
    while ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x0F) != 0x0F);
 60003bc:	0001883a 	nop
 60003c0:	00820034 	movhi	r2,2048
 60003c4:	10840804 	addi	r2,r2,4128
 60003c8:	10800037 	ldwio	r2,0(r2)
 60003cc:	108003cc 	andi	r2,r2,15
 60003d0:	108003d8 	cmpnei	r2,r2,15
 60003d4:	103ffa1e 	bne	r2,zero,60003c0 <__alt_data_end+0xff0003c0>

    printf("CPU 2: Switches are on, starting matrix multiplication.\n");
 60003d8:	01018034 	movhi	r4,1536
 60003dc:	21174e04 	addi	r4,r4,23864
 60003e0:	60004c40 	call	60004c4 <puts>

    // Perform matrix multiplication for the third quarter
    matrix_multiply_part(N / 2, 3 * N / 4);
 60003e4:	01400184 	movi	r5,6
 60003e8:	01000104 	movi	r4,4
 60003ec:	60002900 	call	6000290 <matrix_multiply_part>

    printf("CPU 2: Matrix Multiplication complete\n");
 60003f0:	01018034 	movhi	r4,1536
 60003f4:	21175c04 	addi	r4,r4,23920
 60003f8:	60004c40 	call	60004c4 <puts>
    // Flush caches to ensure other CPUs see the updated values
    alt_dcache_flush_all();
 60003fc:	60032d80 	call	60032d8 <alt_dcache_flush_all>

    while (1);  // Loop forever
 6000400:	003fff06 	br	6000400 <__alt_data_end+0xff000400>

06000404 <_puts_r>:
 6000404:	defff604 	addi	sp,sp,-40
 6000408:	dc000715 	stw	r16,28(sp)
 600040c:	2021883a 	mov	r16,r4
 6000410:	2809883a 	mov	r4,r5
 6000414:	dc400815 	stw	r17,32(sp)
 6000418:	dfc00915 	stw	ra,36(sp)
 600041c:	2823883a 	mov	r17,r5
 6000420:	60004d80 	call	60004d8 <strlen>
 6000424:	10c00044 	addi	r3,r2,1
 6000428:	d8800115 	stw	r2,4(sp)
 600042c:	00818034 	movhi	r2,1536
 6000430:	10976604 	addi	r2,r2,23960
 6000434:	d8800215 	stw	r2,8(sp)
 6000438:	00800044 	movi	r2,1
 600043c:	d8800315 	stw	r2,12(sp)
 6000440:	00800084 	movi	r2,2
 6000444:	dc400015 	stw	r17,0(sp)
 6000448:	d8c00615 	stw	r3,24(sp)
 600044c:	dec00415 	stw	sp,16(sp)
 6000450:	d8800515 	stw	r2,20(sp)
 6000454:	80000226 	beq	r16,zero,6000460 <_puts_r+0x5c>
 6000458:	80800e17 	ldw	r2,56(r16)
 600045c:	10001426 	beq	r2,zero,60004b0 <_puts_r+0xac>
 6000460:	81400217 	ldw	r5,8(r16)
 6000464:	2880030b 	ldhu	r2,12(r5)
 6000468:	10c8000c 	andi	r3,r2,8192
 600046c:	1800061e 	bne	r3,zero,6000488 <_puts_r+0x84>
 6000470:	29001917 	ldw	r4,100(r5)
 6000474:	00f7ffc4 	movi	r3,-8193
 6000478:	10880014 	ori	r2,r2,8192
 600047c:	20c6703a 	and	r3,r4,r3
 6000480:	2880030d 	sth	r2,12(r5)
 6000484:	28c01915 	stw	r3,100(r5)
 6000488:	d9800404 	addi	r6,sp,16
 600048c:	8009883a 	mov	r4,r16
 6000490:	60009100 	call	6000910 <__sfvwrite_r>
 6000494:	1000091e 	bne	r2,zero,60004bc <_puts_r+0xb8>
 6000498:	00800284 	movi	r2,10
 600049c:	dfc00917 	ldw	ra,36(sp)
 60004a0:	dc400817 	ldw	r17,32(sp)
 60004a4:	dc000717 	ldw	r16,28(sp)
 60004a8:	dec00a04 	addi	sp,sp,40
 60004ac:	f800283a 	ret
 60004b0:	8009883a 	mov	r4,r16
 60004b4:	60008c00 	call	60008c0 <__sinit>
 60004b8:	003fe906 	br	6000460 <__alt_data_end+0xff000460>
 60004bc:	00bfffc4 	movi	r2,-1
 60004c0:	003ff606 	br	600049c <__alt_data_end+0xff00049c>

060004c4 <puts>:
 60004c4:	00818034 	movhi	r2,1536
 60004c8:	109e0b04 	addi	r2,r2,30764
 60004cc:	200b883a 	mov	r5,r4
 60004d0:	11000017 	ldw	r4,0(r2)
 60004d4:	60004041 	jmpi	6000404 <_puts_r>

060004d8 <strlen>:
 60004d8:	208000cc 	andi	r2,r4,3
 60004dc:	10002026 	beq	r2,zero,6000560 <strlen+0x88>
 60004e0:	20800007 	ldb	r2,0(r4)
 60004e4:	10002026 	beq	r2,zero,6000568 <strlen+0x90>
 60004e8:	2005883a 	mov	r2,r4
 60004ec:	00000206 	br	60004f8 <strlen+0x20>
 60004f0:	10c00007 	ldb	r3,0(r2)
 60004f4:	18001826 	beq	r3,zero,6000558 <strlen+0x80>
 60004f8:	10800044 	addi	r2,r2,1
 60004fc:	10c000cc 	andi	r3,r2,3
 6000500:	183ffb1e 	bne	r3,zero,60004f0 <__alt_data_end+0xff0004f0>
 6000504:	10c00017 	ldw	r3,0(r2)
 6000508:	01ffbff4 	movhi	r7,65279
 600050c:	39ffbfc4 	addi	r7,r7,-257
 6000510:	00ca303a 	nor	r5,zero,r3
 6000514:	01a02074 	movhi	r6,32897
 6000518:	19c7883a 	add	r3,r3,r7
 600051c:	31a02004 	addi	r6,r6,-32640
 6000520:	1946703a 	and	r3,r3,r5
 6000524:	1986703a 	and	r3,r3,r6
 6000528:	1800091e 	bne	r3,zero,6000550 <strlen+0x78>
 600052c:	10800104 	addi	r2,r2,4
 6000530:	10c00017 	ldw	r3,0(r2)
 6000534:	19cb883a 	add	r5,r3,r7
 6000538:	00c6303a 	nor	r3,zero,r3
 600053c:	28c6703a 	and	r3,r5,r3
 6000540:	1986703a 	and	r3,r3,r6
 6000544:	183ff926 	beq	r3,zero,600052c <__alt_data_end+0xff00052c>
 6000548:	00000106 	br	6000550 <strlen+0x78>
 600054c:	10800044 	addi	r2,r2,1
 6000550:	10c00007 	ldb	r3,0(r2)
 6000554:	183ffd1e 	bne	r3,zero,600054c <__alt_data_end+0xff00054c>
 6000558:	1105c83a 	sub	r2,r2,r4
 600055c:	f800283a 	ret
 6000560:	2005883a 	mov	r2,r4
 6000564:	003fe706 	br	6000504 <__alt_data_end+0xff000504>
 6000568:	0005883a 	mov	r2,zero
 600056c:	f800283a 	ret

06000570 <__fp_unlock>:
 6000570:	0005883a 	mov	r2,zero
 6000574:	f800283a 	ret

06000578 <_cleanup_r>:
 6000578:	01418034 	movhi	r5,1536
 600057c:	29494304 	addi	r5,r5,9484
 6000580:	6000e901 	jmpi	6000e90 <_fwalk_reent>

06000584 <__sinit.part.1>:
 6000584:	defff704 	addi	sp,sp,-36
 6000588:	00c18034 	movhi	r3,1536
 600058c:	dfc00815 	stw	ra,32(sp)
 6000590:	ddc00715 	stw	r23,28(sp)
 6000594:	dd800615 	stw	r22,24(sp)
 6000598:	dd400515 	stw	r21,20(sp)
 600059c:	dd000415 	stw	r20,16(sp)
 60005a0:	dcc00315 	stw	r19,12(sp)
 60005a4:	dc800215 	stw	r18,8(sp)
 60005a8:	dc400115 	stw	r17,4(sp)
 60005ac:	dc000015 	stw	r16,0(sp)
 60005b0:	18c15e04 	addi	r3,r3,1400
 60005b4:	24000117 	ldw	r16,4(r4)
 60005b8:	20c00f15 	stw	r3,60(r4)
 60005bc:	2080bb04 	addi	r2,r4,748
 60005c0:	00c000c4 	movi	r3,3
 60005c4:	20c0b915 	stw	r3,740(r4)
 60005c8:	2080ba15 	stw	r2,744(r4)
 60005cc:	2000b815 	stw	zero,736(r4)
 60005d0:	05c00204 	movi	r23,8
 60005d4:	00800104 	movi	r2,4
 60005d8:	2025883a 	mov	r18,r4
 60005dc:	b80d883a 	mov	r6,r23
 60005e0:	81001704 	addi	r4,r16,92
 60005e4:	000b883a 	mov	r5,zero
 60005e8:	80000015 	stw	zero,0(r16)
 60005ec:	80000115 	stw	zero,4(r16)
 60005f0:	80000215 	stw	zero,8(r16)
 60005f4:	8080030d 	sth	r2,12(r16)
 60005f8:	80001915 	stw	zero,100(r16)
 60005fc:	8000038d 	sth	zero,14(r16)
 6000600:	80000415 	stw	zero,16(r16)
 6000604:	80000515 	stw	zero,20(r16)
 6000608:	80000615 	stw	zero,24(r16)
 600060c:	6001ae80 	call	6001ae8 <memset>
 6000610:	05818034 	movhi	r22,1536
 6000614:	94400217 	ldw	r17,8(r18)
 6000618:	05418034 	movhi	r21,1536
 600061c:	05018034 	movhi	r20,1536
 6000620:	04c18034 	movhi	r19,1536
 6000624:	b5887204 	addi	r22,r22,8648
 6000628:	ad488904 	addi	r21,r21,8740
 600062c:	a508a804 	addi	r20,r20,8864
 6000630:	9cc8bf04 	addi	r19,r19,8956
 6000634:	85800815 	stw	r22,32(r16)
 6000638:	85400915 	stw	r21,36(r16)
 600063c:	85000a15 	stw	r20,40(r16)
 6000640:	84c00b15 	stw	r19,44(r16)
 6000644:	84000715 	stw	r16,28(r16)
 6000648:	00800284 	movi	r2,10
 600064c:	8880030d 	sth	r2,12(r17)
 6000650:	00800044 	movi	r2,1
 6000654:	b80d883a 	mov	r6,r23
 6000658:	89001704 	addi	r4,r17,92
 600065c:	000b883a 	mov	r5,zero
 6000660:	88000015 	stw	zero,0(r17)
 6000664:	88000115 	stw	zero,4(r17)
 6000668:	88000215 	stw	zero,8(r17)
 600066c:	88001915 	stw	zero,100(r17)
 6000670:	8880038d 	sth	r2,14(r17)
 6000674:	88000415 	stw	zero,16(r17)
 6000678:	88000515 	stw	zero,20(r17)
 600067c:	88000615 	stw	zero,24(r17)
 6000680:	6001ae80 	call	6001ae8 <memset>
 6000684:	94000317 	ldw	r16,12(r18)
 6000688:	00800484 	movi	r2,18
 600068c:	8c400715 	stw	r17,28(r17)
 6000690:	8d800815 	stw	r22,32(r17)
 6000694:	8d400915 	stw	r21,36(r17)
 6000698:	8d000a15 	stw	r20,40(r17)
 600069c:	8cc00b15 	stw	r19,44(r17)
 60006a0:	8080030d 	sth	r2,12(r16)
 60006a4:	00800084 	movi	r2,2
 60006a8:	80000015 	stw	zero,0(r16)
 60006ac:	80000115 	stw	zero,4(r16)
 60006b0:	80000215 	stw	zero,8(r16)
 60006b4:	80001915 	stw	zero,100(r16)
 60006b8:	8080038d 	sth	r2,14(r16)
 60006bc:	80000415 	stw	zero,16(r16)
 60006c0:	80000515 	stw	zero,20(r16)
 60006c4:	80000615 	stw	zero,24(r16)
 60006c8:	b80d883a 	mov	r6,r23
 60006cc:	000b883a 	mov	r5,zero
 60006d0:	81001704 	addi	r4,r16,92
 60006d4:	6001ae80 	call	6001ae8 <memset>
 60006d8:	00800044 	movi	r2,1
 60006dc:	84000715 	stw	r16,28(r16)
 60006e0:	85800815 	stw	r22,32(r16)
 60006e4:	85400915 	stw	r21,36(r16)
 60006e8:	85000a15 	stw	r20,40(r16)
 60006ec:	84c00b15 	stw	r19,44(r16)
 60006f0:	90800e15 	stw	r2,56(r18)
 60006f4:	dfc00817 	ldw	ra,32(sp)
 60006f8:	ddc00717 	ldw	r23,28(sp)
 60006fc:	dd800617 	ldw	r22,24(sp)
 6000700:	dd400517 	ldw	r21,20(sp)
 6000704:	dd000417 	ldw	r20,16(sp)
 6000708:	dcc00317 	ldw	r19,12(sp)
 600070c:	dc800217 	ldw	r18,8(sp)
 6000710:	dc400117 	ldw	r17,4(sp)
 6000714:	dc000017 	ldw	r16,0(sp)
 6000718:	dec00904 	addi	sp,sp,36
 600071c:	f800283a 	ret

06000720 <__fp_lock>:
 6000720:	0005883a 	mov	r2,zero
 6000724:	f800283a 	ret

06000728 <__sfmoreglue>:
 6000728:	defffc04 	addi	sp,sp,-16
 600072c:	dc400115 	stw	r17,4(sp)
 6000730:	2c7fffc4 	addi	r17,r5,-1
 6000734:	8c401a24 	muli	r17,r17,104
 6000738:	dc800215 	stw	r18,8(sp)
 600073c:	2825883a 	mov	r18,r5
 6000740:	89401d04 	addi	r5,r17,116
 6000744:	dc000015 	stw	r16,0(sp)
 6000748:	dfc00315 	stw	ra,12(sp)
 600074c:	6000f540 	call	6000f54 <_malloc_r>
 6000750:	1021883a 	mov	r16,r2
 6000754:	10000726 	beq	r2,zero,6000774 <__sfmoreglue+0x4c>
 6000758:	11000304 	addi	r4,r2,12
 600075c:	10000015 	stw	zero,0(r2)
 6000760:	14800115 	stw	r18,4(r2)
 6000764:	11000215 	stw	r4,8(r2)
 6000768:	89801a04 	addi	r6,r17,104
 600076c:	000b883a 	mov	r5,zero
 6000770:	6001ae80 	call	6001ae8 <memset>
 6000774:	8005883a 	mov	r2,r16
 6000778:	dfc00317 	ldw	ra,12(sp)
 600077c:	dc800217 	ldw	r18,8(sp)
 6000780:	dc400117 	ldw	r17,4(sp)
 6000784:	dc000017 	ldw	r16,0(sp)
 6000788:	dec00404 	addi	sp,sp,16
 600078c:	f800283a 	ret

06000790 <__sfp>:
 6000790:	defffb04 	addi	sp,sp,-20
 6000794:	dc000015 	stw	r16,0(sp)
 6000798:	04018034 	movhi	r16,1536
 600079c:	841e0a04 	addi	r16,r16,30760
 60007a0:	dcc00315 	stw	r19,12(sp)
 60007a4:	2027883a 	mov	r19,r4
 60007a8:	81000017 	ldw	r4,0(r16)
 60007ac:	dfc00415 	stw	ra,16(sp)
 60007b0:	dc800215 	stw	r18,8(sp)
 60007b4:	20800e17 	ldw	r2,56(r4)
 60007b8:	dc400115 	stw	r17,4(sp)
 60007bc:	1000021e 	bne	r2,zero,60007c8 <__sfp+0x38>
 60007c0:	60005840 	call	6000584 <__sinit.part.1>
 60007c4:	81000017 	ldw	r4,0(r16)
 60007c8:	2480b804 	addi	r18,r4,736
 60007cc:	047fffc4 	movi	r17,-1
 60007d0:	91000117 	ldw	r4,4(r18)
 60007d4:	94000217 	ldw	r16,8(r18)
 60007d8:	213fffc4 	addi	r4,r4,-1
 60007dc:	20000a16 	blt	r4,zero,6000808 <__sfp+0x78>
 60007e0:	8080030f 	ldh	r2,12(r16)
 60007e4:	10000c26 	beq	r2,zero,6000818 <__sfp+0x88>
 60007e8:	80c01d04 	addi	r3,r16,116
 60007ec:	00000206 	br	60007f8 <__sfp+0x68>
 60007f0:	18bfe60f 	ldh	r2,-104(r3)
 60007f4:	10000826 	beq	r2,zero,6000818 <__sfp+0x88>
 60007f8:	213fffc4 	addi	r4,r4,-1
 60007fc:	1c3ffd04 	addi	r16,r3,-12
 6000800:	18c01a04 	addi	r3,r3,104
 6000804:	247ffa1e 	bne	r4,r17,60007f0 <__alt_data_end+0xff0007f0>
 6000808:	90800017 	ldw	r2,0(r18)
 600080c:	10001d26 	beq	r2,zero,6000884 <__sfp+0xf4>
 6000810:	1025883a 	mov	r18,r2
 6000814:	003fee06 	br	60007d0 <__alt_data_end+0xff0007d0>
 6000818:	00bfffc4 	movi	r2,-1
 600081c:	8080038d 	sth	r2,14(r16)
 6000820:	00800044 	movi	r2,1
 6000824:	8080030d 	sth	r2,12(r16)
 6000828:	80001915 	stw	zero,100(r16)
 600082c:	80000015 	stw	zero,0(r16)
 6000830:	80000215 	stw	zero,8(r16)
 6000834:	80000115 	stw	zero,4(r16)
 6000838:	80000415 	stw	zero,16(r16)
 600083c:	80000515 	stw	zero,20(r16)
 6000840:	80000615 	stw	zero,24(r16)
 6000844:	01800204 	movi	r6,8
 6000848:	000b883a 	mov	r5,zero
 600084c:	81001704 	addi	r4,r16,92
 6000850:	6001ae80 	call	6001ae8 <memset>
 6000854:	8005883a 	mov	r2,r16
 6000858:	80000c15 	stw	zero,48(r16)
 600085c:	80000d15 	stw	zero,52(r16)
 6000860:	80001115 	stw	zero,68(r16)
 6000864:	80001215 	stw	zero,72(r16)
 6000868:	dfc00417 	ldw	ra,16(sp)
 600086c:	dcc00317 	ldw	r19,12(sp)
 6000870:	dc800217 	ldw	r18,8(sp)
 6000874:	dc400117 	ldw	r17,4(sp)
 6000878:	dc000017 	ldw	r16,0(sp)
 600087c:	dec00504 	addi	sp,sp,20
 6000880:	f800283a 	ret
 6000884:	01400104 	movi	r5,4
 6000888:	9809883a 	mov	r4,r19
 600088c:	60007280 	call	6000728 <__sfmoreglue>
 6000890:	90800015 	stw	r2,0(r18)
 6000894:	103fde1e 	bne	r2,zero,6000810 <__alt_data_end+0xff000810>
 6000898:	00800304 	movi	r2,12
 600089c:	98800015 	stw	r2,0(r19)
 60008a0:	0005883a 	mov	r2,zero
 60008a4:	003ff006 	br	6000868 <__alt_data_end+0xff000868>

060008a8 <_cleanup>:
 60008a8:	00818034 	movhi	r2,1536
 60008ac:	109e0a04 	addi	r2,r2,30760
 60008b0:	11000017 	ldw	r4,0(r2)
 60008b4:	01418034 	movhi	r5,1536
 60008b8:	29494304 	addi	r5,r5,9484
 60008bc:	6000e901 	jmpi	6000e90 <_fwalk_reent>

060008c0 <__sinit>:
 60008c0:	20800e17 	ldw	r2,56(r4)
 60008c4:	10000126 	beq	r2,zero,60008cc <__sinit+0xc>
 60008c8:	f800283a 	ret
 60008cc:	60005841 	jmpi	6000584 <__sinit.part.1>

060008d0 <__sfp_lock_acquire>:
 60008d0:	f800283a 	ret

060008d4 <__sfp_lock_release>:
 60008d4:	f800283a 	ret

060008d8 <__sinit_lock_acquire>:
 60008d8:	f800283a 	ret

060008dc <__sinit_lock_release>:
 60008dc:	f800283a 	ret

060008e0 <__fp_lock_all>:
 60008e0:	00818034 	movhi	r2,1536
 60008e4:	109e0b04 	addi	r2,r2,30764
 60008e8:	11000017 	ldw	r4,0(r2)
 60008ec:	01418034 	movhi	r5,1536
 60008f0:	2941c804 	addi	r5,r5,1824
 60008f4:	6000dcc1 	jmpi	6000dcc <_fwalk>

060008f8 <__fp_unlock_all>:
 60008f8:	00818034 	movhi	r2,1536
 60008fc:	109e0b04 	addi	r2,r2,30764
 6000900:	11000017 	ldw	r4,0(r2)
 6000904:	01418034 	movhi	r5,1536
 6000908:	29415c04 	addi	r5,r5,1392
 600090c:	6000dcc1 	jmpi	6000dcc <_fwalk>

06000910 <__sfvwrite_r>:
 6000910:	30800217 	ldw	r2,8(r6)
 6000914:	10006726 	beq	r2,zero,6000ab4 <__sfvwrite_r+0x1a4>
 6000918:	28c0030b 	ldhu	r3,12(r5)
 600091c:	defff404 	addi	sp,sp,-48
 6000920:	dd400715 	stw	r21,28(sp)
 6000924:	dd000615 	stw	r20,24(sp)
 6000928:	dc000215 	stw	r16,8(sp)
 600092c:	dfc00b15 	stw	ra,44(sp)
 6000930:	df000a15 	stw	fp,40(sp)
 6000934:	ddc00915 	stw	r23,36(sp)
 6000938:	dd800815 	stw	r22,32(sp)
 600093c:	dcc00515 	stw	r19,20(sp)
 6000940:	dc800415 	stw	r18,16(sp)
 6000944:	dc400315 	stw	r17,12(sp)
 6000948:	1880020c 	andi	r2,r3,8
 600094c:	2821883a 	mov	r16,r5
 6000950:	202b883a 	mov	r21,r4
 6000954:	3029883a 	mov	r20,r6
 6000958:	10002726 	beq	r2,zero,60009f8 <__sfvwrite_r+0xe8>
 600095c:	28800417 	ldw	r2,16(r5)
 6000960:	10002526 	beq	r2,zero,60009f8 <__sfvwrite_r+0xe8>
 6000964:	1880008c 	andi	r2,r3,2
 6000968:	a4400017 	ldw	r17,0(r20)
 600096c:	10002a26 	beq	r2,zero,6000a18 <__sfvwrite_r+0x108>
 6000970:	05a00034 	movhi	r22,32768
 6000974:	0027883a 	mov	r19,zero
 6000978:	0025883a 	mov	r18,zero
 600097c:	b5bf0004 	addi	r22,r22,-1024
 6000980:	980d883a 	mov	r6,r19
 6000984:	a809883a 	mov	r4,r21
 6000988:	90004626 	beq	r18,zero,6000aa4 <__sfvwrite_r+0x194>
 600098c:	900f883a 	mov	r7,r18
 6000990:	b480022e 	bgeu	r22,r18,600099c <__sfvwrite_r+0x8c>
 6000994:	01e00034 	movhi	r7,32768
 6000998:	39ff0004 	addi	r7,r7,-1024
 600099c:	80800917 	ldw	r2,36(r16)
 60009a0:	81400717 	ldw	r5,28(r16)
 60009a4:	103ee83a 	callr	r2
 60009a8:	0080570e 	bge	zero,r2,6000b08 <__sfvwrite_r+0x1f8>
 60009ac:	a0c00217 	ldw	r3,8(r20)
 60009b0:	98a7883a 	add	r19,r19,r2
 60009b4:	90a5c83a 	sub	r18,r18,r2
 60009b8:	1885c83a 	sub	r2,r3,r2
 60009bc:	a0800215 	stw	r2,8(r20)
 60009c0:	103fef1e 	bne	r2,zero,6000980 <__alt_data_end+0xff000980>
 60009c4:	0005883a 	mov	r2,zero
 60009c8:	dfc00b17 	ldw	ra,44(sp)
 60009cc:	df000a17 	ldw	fp,40(sp)
 60009d0:	ddc00917 	ldw	r23,36(sp)
 60009d4:	dd800817 	ldw	r22,32(sp)
 60009d8:	dd400717 	ldw	r21,28(sp)
 60009dc:	dd000617 	ldw	r20,24(sp)
 60009e0:	dcc00517 	ldw	r19,20(sp)
 60009e4:	dc800417 	ldw	r18,16(sp)
 60009e8:	dc400317 	ldw	r17,12(sp)
 60009ec:	dc000217 	ldw	r16,8(sp)
 60009f0:	dec00c04 	addi	sp,sp,48
 60009f4:	f800283a 	ret
 60009f8:	800b883a 	mov	r5,r16
 60009fc:	a809883a 	mov	r4,r21
 6000a00:	60023640 	call	6002364 <__swsetup_r>
 6000a04:	1000eb1e 	bne	r2,zero,6000db4 <__sfvwrite_r+0x4a4>
 6000a08:	80c0030b 	ldhu	r3,12(r16)
 6000a0c:	a4400017 	ldw	r17,0(r20)
 6000a10:	1880008c 	andi	r2,r3,2
 6000a14:	103fd61e 	bne	r2,zero,6000970 <__alt_data_end+0xff000970>
 6000a18:	1880004c 	andi	r2,r3,1
 6000a1c:	10003f1e 	bne	r2,zero,6000b1c <__sfvwrite_r+0x20c>
 6000a20:	0039883a 	mov	fp,zero
 6000a24:	0025883a 	mov	r18,zero
 6000a28:	90001a26 	beq	r18,zero,6000a94 <__sfvwrite_r+0x184>
 6000a2c:	1880800c 	andi	r2,r3,512
 6000a30:	84c00217 	ldw	r19,8(r16)
 6000a34:	10002126 	beq	r2,zero,6000abc <__sfvwrite_r+0x1ac>
 6000a38:	982f883a 	mov	r23,r19
 6000a3c:	94c09336 	bltu	r18,r19,6000c8c <__sfvwrite_r+0x37c>
 6000a40:	1881200c 	andi	r2,r3,1152
 6000a44:	10009e1e 	bne	r2,zero,6000cc0 <__sfvwrite_r+0x3b0>
 6000a48:	81000017 	ldw	r4,0(r16)
 6000a4c:	b80d883a 	mov	r6,r23
 6000a50:	e00b883a 	mov	r5,fp
 6000a54:	600198c0 	call	600198c <memmove>
 6000a58:	80c00217 	ldw	r3,8(r16)
 6000a5c:	81000017 	ldw	r4,0(r16)
 6000a60:	9005883a 	mov	r2,r18
 6000a64:	1ce7c83a 	sub	r19,r3,r19
 6000a68:	25cf883a 	add	r7,r4,r23
 6000a6c:	84c00215 	stw	r19,8(r16)
 6000a70:	81c00015 	stw	r7,0(r16)
 6000a74:	a0c00217 	ldw	r3,8(r20)
 6000a78:	e0b9883a 	add	fp,fp,r2
 6000a7c:	90a5c83a 	sub	r18,r18,r2
 6000a80:	18a7c83a 	sub	r19,r3,r2
 6000a84:	a4c00215 	stw	r19,8(r20)
 6000a88:	983fce26 	beq	r19,zero,60009c4 <__alt_data_end+0xff0009c4>
 6000a8c:	80c0030b 	ldhu	r3,12(r16)
 6000a90:	903fe61e 	bne	r18,zero,6000a2c <__alt_data_end+0xff000a2c>
 6000a94:	8f000017 	ldw	fp,0(r17)
 6000a98:	8c800117 	ldw	r18,4(r17)
 6000a9c:	8c400204 	addi	r17,r17,8
 6000aa0:	003fe106 	br	6000a28 <__alt_data_end+0xff000a28>
 6000aa4:	8cc00017 	ldw	r19,0(r17)
 6000aa8:	8c800117 	ldw	r18,4(r17)
 6000aac:	8c400204 	addi	r17,r17,8
 6000ab0:	003fb306 	br	6000980 <__alt_data_end+0xff000980>
 6000ab4:	0005883a 	mov	r2,zero
 6000ab8:	f800283a 	ret
 6000abc:	81000017 	ldw	r4,0(r16)
 6000ac0:	80800417 	ldw	r2,16(r16)
 6000ac4:	11005736 	bltu	r2,r4,6000c24 <__sfvwrite_r+0x314>
 6000ac8:	85c00517 	ldw	r23,20(r16)
 6000acc:	95c05536 	bltu	r18,r23,6000c24 <__sfvwrite_r+0x314>
 6000ad0:	00a00034 	movhi	r2,32768
 6000ad4:	10bfffc4 	addi	r2,r2,-1
 6000ad8:	9009883a 	mov	r4,r18
 6000adc:	1480012e 	bgeu	r2,r18,6000ae4 <__sfvwrite_r+0x1d4>
 6000ae0:	1009883a 	mov	r4,r2
 6000ae4:	b80b883a 	mov	r5,r23
 6000ae8:	60030180 	call	6003018 <__divsi3>
 6000aec:	15cf383a 	mul	r7,r2,r23
 6000af0:	81400717 	ldw	r5,28(r16)
 6000af4:	80800917 	ldw	r2,36(r16)
 6000af8:	e00d883a 	mov	r6,fp
 6000afc:	a809883a 	mov	r4,r21
 6000b00:	103ee83a 	callr	r2
 6000b04:	00bfdb16 	blt	zero,r2,6000a74 <__alt_data_end+0xff000a74>
 6000b08:	8080030b 	ldhu	r2,12(r16)
 6000b0c:	10801014 	ori	r2,r2,64
 6000b10:	8080030d 	sth	r2,12(r16)
 6000b14:	00bfffc4 	movi	r2,-1
 6000b18:	003fab06 	br	60009c8 <__alt_data_end+0xff0009c8>
 6000b1c:	0027883a 	mov	r19,zero
 6000b20:	0011883a 	mov	r8,zero
 6000b24:	0039883a 	mov	fp,zero
 6000b28:	0025883a 	mov	r18,zero
 6000b2c:	90001f26 	beq	r18,zero,6000bac <__sfvwrite_r+0x29c>
 6000b30:	40005a26 	beq	r8,zero,6000c9c <__sfvwrite_r+0x38c>
 6000b34:	982d883a 	mov	r22,r19
 6000b38:	94c0012e 	bgeu	r18,r19,6000b40 <__sfvwrite_r+0x230>
 6000b3c:	902d883a 	mov	r22,r18
 6000b40:	81000017 	ldw	r4,0(r16)
 6000b44:	80800417 	ldw	r2,16(r16)
 6000b48:	b02f883a 	mov	r23,r22
 6000b4c:	81c00517 	ldw	r7,20(r16)
 6000b50:	1100032e 	bgeu	r2,r4,6000b60 <__sfvwrite_r+0x250>
 6000b54:	80c00217 	ldw	r3,8(r16)
 6000b58:	38c7883a 	add	r3,r7,r3
 6000b5c:	1d801816 	blt	r3,r22,6000bc0 <__sfvwrite_r+0x2b0>
 6000b60:	b1c03e16 	blt	r22,r7,6000c5c <__sfvwrite_r+0x34c>
 6000b64:	80800917 	ldw	r2,36(r16)
 6000b68:	81400717 	ldw	r5,28(r16)
 6000b6c:	e00d883a 	mov	r6,fp
 6000b70:	da000115 	stw	r8,4(sp)
 6000b74:	a809883a 	mov	r4,r21
 6000b78:	103ee83a 	callr	r2
 6000b7c:	102f883a 	mov	r23,r2
 6000b80:	da000117 	ldw	r8,4(sp)
 6000b84:	00bfe00e 	bge	zero,r2,6000b08 <__alt_data_end+0xff000b08>
 6000b88:	9de7c83a 	sub	r19,r19,r23
 6000b8c:	98001f26 	beq	r19,zero,6000c0c <__sfvwrite_r+0x2fc>
 6000b90:	a0800217 	ldw	r2,8(r20)
 6000b94:	e5f9883a 	add	fp,fp,r23
 6000b98:	95e5c83a 	sub	r18,r18,r23
 6000b9c:	15efc83a 	sub	r23,r2,r23
 6000ba0:	a5c00215 	stw	r23,8(r20)
 6000ba4:	b83f8726 	beq	r23,zero,60009c4 <__alt_data_end+0xff0009c4>
 6000ba8:	903fe11e 	bne	r18,zero,6000b30 <__alt_data_end+0xff000b30>
 6000bac:	8f000017 	ldw	fp,0(r17)
 6000bb0:	8c800117 	ldw	r18,4(r17)
 6000bb4:	0011883a 	mov	r8,zero
 6000bb8:	8c400204 	addi	r17,r17,8
 6000bbc:	003fdb06 	br	6000b2c <__alt_data_end+0xff000b2c>
 6000bc0:	180d883a 	mov	r6,r3
 6000bc4:	e00b883a 	mov	r5,fp
 6000bc8:	da000115 	stw	r8,4(sp)
 6000bcc:	d8c00015 	stw	r3,0(sp)
 6000bd0:	600198c0 	call	600198c <memmove>
 6000bd4:	d8c00017 	ldw	r3,0(sp)
 6000bd8:	80800017 	ldw	r2,0(r16)
 6000bdc:	800b883a 	mov	r5,r16
 6000be0:	a809883a 	mov	r4,r21
 6000be4:	10c5883a 	add	r2,r2,r3
 6000be8:	80800015 	stw	r2,0(r16)
 6000bec:	d8c00015 	stw	r3,0(sp)
 6000bf0:	600282c0 	call	600282c <_fflush_r>
 6000bf4:	d8c00017 	ldw	r3,0(sp)
 6000bf8:	da000117 	ldw	r8,4(sp)
 6000bfc:	103fc21e 	bne	r2,zero,6000b08 <__alt_data_end+0xff000b08>
 6000c00:	182f883a 	mov	r23,r3
 6000c04:	9de7c83a 	sub	r19,r19,r23
 6000c08:	983fe11e 	bne	r19,zero,6000b90 <__alt_data_end+0xff000b90>
 6000c0c:	800b883a 	mov	r5,r16
 6000c10:	a809883a 	mov	r4,r21
 6000c14:	600282c0 	call	600282c <_fflush_r>
 6000c18:	103fbb1e 	bne	r2,zero,6000b08 <__alt_data_end+0xff000b08>
 6000c1c:	0011883a 	mov	r8,zero
 6000c20:	003fdb06 	br	6000b90 <__alt_data_end+0xff000b90>
 6000c24:	94c0012e 	bgeu	r18,r19,6000c2c <__sfvwrite_r+0x31c>
 6000c28:	9027883a 	mov	r19,r18
 6000c2c:	980d883a 	mov	r6,r19
 6000c30:	e00b883a 	mov	r5,fp
 6000c34:	600198c0 	call	600198c <memmove>
 6000c38:	80800217 	ldw	r2,8(r16)
 6000c3c:	80c00017 	ldw	r3,0(r16)
 6000c40:	14c5c83a 	sub	r2,r2,r19
 6000c44:	1cc7883a 	add	r3,r3,r19
 6000c48:	80800215 	stw	r2,8(r16)
 6000c4c:	80c00015 	stw	r3,0(r16)
 6000c50:	10004326 	beq	r2,zero,6000d60 <__sfvwrite_r+0x450>
 6000c54:	9805883a 	mov	r2,r19
 6000c58:	003f8606 	br	6000a74 <__alt_data_end+0xff000a74>
 6000c5c:	b00d883a 	mov	r6,r22
 6000c60:	e00b883a 	mov	r5,fp
 6000c64:	da000115 	stw	r8,4(sp)
 6000c68:	600198c0 	call	600198c <memmove>
 6000c6c:	80800217 	ldw	r2,8(r16)
 6000c70:	80c00017 	ldw	r3,0(r16)
 6000c74:	da000117 	ldw	r8,4(sp)
 6000c78:	1585c83a 	sub	r2,r2,r22
 6000c7c:	1dad883a 	add	r22,r3,r22
 6000c80:	80800215 	stw	r2,8(r16)
 6000c84:	85800015 	stw	r22,0(r16)
 6000c88:	003fbf06 	br	6000b88 <__alt_data_end+0xff000b88>
 6000c8c:	81000017 	ldw	r4,0(r16)
 6000c90:	9027883a 	mov	r19,r18
 6000c94:	902f883a 	mov	r23,r18
 6000c98:	003f6c06 	br	6000a4c <__alt_data_end+0xff000a4c>
 6000c9c:	900d883a 	mov	r6,r18
 6000ca0:	01400284 	movi	r5,10
 6000ca4:	e009883a 	mov	r4,fp
 6000ca8:	60017600 	call	6001760 <memchr>
 6000cac:	10003e26 	beq	r2,zero,6000da8 <__sfvwrite_r+0x498>
 6000cb0:	10800044 	addi	r2,r2,1
 6000cb4:	1727c83a 	sub	r19,r2,fp
 6000cb8:	02000044 	movi	r8,1
 6000cbc:	003f9d06 	br	6000b34 <__alt_data_end+0xff000b34>
 6000cc0:	80800517 	ldw	r2,20(r16)
 6000cc4:	81400417 	ldw	r5,16(r16)
 6000cc8:	81c00017 	ldw	r7,0(r16)
 6000ccc:	10a7883a 	add	r19,r2,r2
 6000cd0:	9885883a 	add	r2,r19,r2
 6000cd4:	1026d7fa 	srli	r19,r2,31
 6000cd8:	396dc83a 	sub	r22,r7,r5
 6000cdc:	b1000044 	addi	r4,r22,1
 6000ce0:	9885883a 	add	r2,r19,r2
 6000ce4:	1027d07a 	srai	r19,r2,1
 6000ce8:	2485883a 	add	r2,r4,r18
 6000cec:	980d883a 	mov	r6,r19
 6000cf0:	9880022e 	bgeu	r19,r2,6000cfc <__sfvwrite_r+0x3ec>
 6000cf4:	1027883a 	mov	r19,r2
 6000cf8:	100d883a 	mov	r6,r2
 6000cfc:	18c1000c 	andi	r3,r3,1024
 6000d00:	18001c26 	beq	r3,zero,6000d74 <__sfvwrite_r+0x464>
 6000d04:	300b883a 	mov	r5,r6
 6000d08:	a809883a 	mov	r4,r21
 6000d0c:	6000f540 	call	6000f54 <_malloc_r>
 6000d10:	102f883a 	mov	r23,r2
 6000d14:	10002926 	beq	r2,zero,6000dbc <__sfvwrite_r+0x4ac>
 6000d18:	81400417 	ldw	r5,16(r16)
 6000d1c:	b00d883a 	mov	r6,r22
 6000d20:	1009883a 	mov	r4,r2
 6000d24:	60018440 	call	6001844 <memcpy>
 6000d28:	8080030b 	ldhu	r2,12(r16)
 6000d2c:	00fedfc4 	movi	r3,-1153
 6000d30:	10c4703a 	and	r2,r2,r3
 6000d34:	10802014 	ori	r2,r2,128
 6000d38:	8080030d 	sth	r2,12(r16)
 6000d3c:	bd89883a 	add	r4,r23,r22
 6000d40:	9d8fc83a 	sub	r7,r19,r22
 6000d44:	85c00415 	stw	r23,16(r16)
 6000d48:	84c00515 	stw	r19,20(r16)
 6000d4c:	81000015 	stw	r4,0(r16)
 6000d50:	9027883a 	mov	r19,r18
 6000d54:	81c00215 	stw	r7,8(r16)
 6000d58:	902f883a 	mov	r23,r18
 6000d5c:	003f3b06 	br	6000a4c <__alt_data_end+0xff000a4c>
 6000d60:	800b883a 	mov	r5,r16
 6000d64:	a809883a 	mov	r4,r21
 6000d68:	600282c0 	call	600282c <_fflush_r>
 6000d6c:	103fb926 	beq	r2,zero,6000c54 <__alt_data_end+0xff000c54>
 6000d70:	003f6506 	br	6000b08 <__alt_data_end+0xff000b08>
 6000d74:	a809883a 	mov	r4,r21
 6000d78:	6001c100 	call	6001c10 <_realloc_r>
 6000d7c:	102f883a 	mov	r23,r2
 6000d80:	103fee1e 	bne	r2,zero,6000d3c <__alt_data_end+0xff000d3c>
 6000d84:	81400417 	ldw	r5,16(r16)
 6000d88:	a809883a 	mov	r4,r21
 6000d8c:	60029dc0 	call	60029dc <_free_r>
 6000d90:	8080030b 	ldhu	r2,12(r16)
 6000d94:	00ffdfc4 	movi	r3,-129
 6000d98:	1884703a 	and	r2,r3,r2
 6000d9c:	00c00304 	movi	r3,12
 6000da0:	a8c00015 	stw	r3,0(r21)
 6000da4:	003f5906 	br	6000b0c <__alt_data_end+0xff000b0c>
 6000da8:	94c00044 	addi	r19,r18,1
 6000dac:	02000044 	movi	r8,1
 6000db0:	003f6006 	br	6000b34 <__alt_data_end+0xff000b34>
 6000db4:	00bfffc4 	movi	r2,-1
 6000db8:	003f0306 	br	60009c8 <__alt_data_end+0xff0009c8>
 6000dbc:	00800304 	movi	r2,12
 6000dc0:	a8800015 	stw	r2,0(r21)
 6000dc4:	8080030b 	ldhu	r2,12(r16)
 6000dc8:	003f5006 	br	6000b0c <__alt_data_end+0xff000b0c>

06000dcc <_fwalk>:
 6000dcc:	defff704 	addi	sp,sp,-36
 6000dd0:	dd000415 	stw	r20,16(sp)
 6000dd4:	dfc00815 	stw	ra,32(sp)
 6000dd8:	ddc00715 	stw	r23,28(sp)
 6000ddc:	dd800615 	stw	r22,24(sp)
 6000de0:	dd400515 	stw	r21,20(sp)
 6000de4:	dcc00315 	stw	r19,12(sp)
 6000de8:	dc800215 	stw	r18,8(sp)
 6000dec:	dc400115 	stw	r17,4(sp)
 6000df0:	dc000015 	stw	r16,0(sp)
 6000df4:	2500b804 	addi	r20,r4,736
 6000df8:	a0002326 	beq	r20,zero,6000e88 <_fwalk+0xbc>
 6000dfc:	282b883a 	mov	r21,r5
 6000e00:	002f883a 	mov	r23,zero
 6000e04:	05800044 	movi	r22,1
 6000e08:	04ffffc4 	movi	r19,-1
 6000e0c:	a4400117 	ldw	r17,4(r20)
 6000e10:	a4800217 	ldw	r18,8(r20)
 6000e14:	8c7fffc4 	addi	r17,r17,-1
 6000e18:	88000d16 	blt	r17,zero,6000e50 <_fwalk+0x84>
 6000e1c:	94000304 	addi	r16,r18,12
 6000e20:	94800384 	addi	r18,r18,14
 6000e24:	8080000b 	ldhu	r2,0(r16)
 6000e28:	8c7fffc4 	addi	r17,r17,-1
 6000e2c:	813ffd04 	addi	r4,r16,-12
 6000e30:	b080042e 	bgeu	r22,r2,6000e44 <_fwalk+0x78>
 6000e34:	9080000f 	ldh	r2,0(r18)
 6000e38:	14c00226 	beq	r2,r19,6000e44 <_fwalk+0x78>
 6000e3c:	a83ee83a 	callr	r21
 6000e40:	b8aeb03a 	or	r23,r23,r2
 6000e44:	84001a04 	addi	r16,r16,104
 6000e48:	94801a04 	addi	r18,r18,104
 6000e4c:	8cfff51e 	bne	r17,r19,6000e24 <__alt_data_end+0xff000e24>
 6000e50:	a5000017 	ldw	r20,0(r20)
 6000e54:	a03fed1e 	bne	r20,zero,6000e0c <__alt_data_end+0xff000e0c>
 6000e58:	b805883a 	mov	r2,r23
 6000e5c:	dfc00817 	ldw	ra,32(sp)
 6000e60:	ddc00717 	ldw	r23,28(sp)
 6000e64:	dd800617 	ldw	r22,24(sp)
 6000e68:	dd400517 	ldw	r21,20(sp)
 6000e6c:	dd000417 	ldw	r20,16(sp)
 6000e70:	dcc00317 	ldw	r19,12(sp)
 6000e74:	dc800217 	ldw	r18,8(sp)
 6000e78:	dc400117 	ldw	r17,4(sp)
 6000e7c:	dc000017 	ldw	r16,0(sp)
 6000e80:	dec00904 	addi	sp,sp,36
 6000e84:	f800283a 	ret
 6000e88:	002f883a 	mov	r23,zero
 6000e8c:	003ff206 	br	6000e58 <__alt_data_end+0xff000e58>

06000e90 <_fwalk_reent>:
 6000e90:	defff704 	addi	sp,sp,-36
 6000e94:	dd000415 	stw	r20,16(sp)
 6000e98:	dfc00815 	stw	ra,32(sp)
 6000e9c:	ddc00715 	stw	r23,28(sp)
 6000ea0:	dd800615 	stw	r22,24(sp)
 6000ea4:	dd400515 	stw	r21,20(sp)
 6000ea8:	dcc00315 	stw	r19,12(sp)
 6000eac:	dc800215 	stw	r18,8(sp)
 6000eb0:	dc400115 	stw	r17,4(sp)
 6000eb4:	dc000015 	stw	r16,0(sp)
 6000eb8:	2500b804 	addi	r20,r4,736
 6000ebc:	a0002326 	beq	r20,zero,6000f4c <_fwalk_reent+0xbc>
 6000ec0:	282b883a 	mov	r21,r5
 6000ec4:	2027883a 	mov	r19,r4
 6000ec8:	002f883a 	mov	r23,zero
 6000ecc:	05800044 	movi	r22,1
 6000ed0:	04bfffc4 	movi	r18,-1
 6000ed4:	a4400117 	ldw	r17,4(r20)
 6000ed8:	a4000217 	ldw	r16,8(r20)
 6000edc:	8c7fffc4 	addi	r17,r17,-1
 6000ee0:	88000c16 	blt	r17,zero,6000f14 <_fwalk_reent+0x84>
 6000ee4:	84000304 	addi	r16,r16,12
 6000ee8:	8080000b 	ldhu	r2,0(r16)
 6000eec:	8c7fffc4 	addi	r17,r17,-1
 6000ef0:	817ffd04 	addi	r5,r16,-12
 6000ef4:	b080052e 	bgeu	r22,r2,6000f0c <_fwalk_reent+0x7c>
 6000ef8:	8080008f 	ldh	r2,2(r16)
 6000efc:	9809883a 	mov	r4,r19
 6000f00:	14800226 	beq	r2,r18,6000f0c <_fwalk_reent+0x7c>
 6000f04:	a83ee83a 	callr	r21
 6000f08:	b8aeb03a 	or	r23,r23,r2
 6000f0c:	84001a04 	addi	r16,r16,104
 6000f10:	8cbff51e 	bne	r17,r18,6000ee8 <__alt_data_end+0xff000ee8>
 6000f14:	a5000017 	ldw	r20,0(r20)
 6000f18:	a03fee1e 	bne	r20,zero,6000ed4 <__alt_data_end+0xff000ed4>
 6000f1c:	b805883a 	mov	r2,r23
 6000f20:	dfc00817 	ldw	ra,32(sp)
 6000f24:	ddc00717 	ldw	r23,28(sp)
 6000f28:	dd800617 	ldw	r22,24(sp)
 6000f2c:	dd400517 	ldw	r21,20(sp)
 6000f30:	dd000417 	ldw	r20,16(sp)
 6000f34:	dcc00317 	ldw	r19,12(sp)
 6000f38:	dc800217 	ldw	r18,8(sp)
 6000f3c:	dc400117 	ldw	r17,4(sp)
 6000f40:	dc000017 	ldw	r16,0(sp)
 6000f44:	dec00904 	addi	sp,sp,36
 6000f48:	f800283a 	ret
 6000f4c:	002f883a 	mov	r23,zero
 6000f50:	003ff206 	br	6000f1c <__alt_data_end+0xff000f1c>

06000f54 <_malloc_r>:
 6000f54:	defff504 	addi	sp,sp,-44
 6000f58:	dc800315 	stw	r18,12(sp)
 6000f5c:	dfc00a15 	stw	ra,40(sp)
 6000f60:	df000915 	stw	fp,36(sp)
 6000f64:	ddc00815 	stw	r23,32(sp)
 6000f68:	dd800715 	stw	r22,28(sp)
 6000f6c:	dd400615 	stw	r21,24(sp)
 6000f70:	dd000515 	stw	r20,20(sp)
 6000f74:	dcc00415 	stw	r19,16(sp)
 6000f78:	dc400215 	stw	r17,8(sp)
 6000f7c:	dc000115 	stw	r16,4(sp)
 6000f80:	288002c4 	addi	r2,r5,11
 6000f84:	00c00584 	movi	r3,22
 6000f88:	2025883a 	mov	r18,r4
 6000f8c:	18807f2e 	bgeu	r3,r2,600118c <_malloc_r+0x238>
 6000f90:	047ffe04 	movi	r17,-8
 6000f94:	1462703a 	and	r17,r2,r17
 6000f98:	8800a316 	blt	r17,zero,6001228 <_malloc_r+0x2d4>
 6000f9c:	8940a236 	bltu	r17,r5,6001228 <_malloc_r+0x2d4>
 6000fa0:	60037900 	call	6003790 <__malloc_lock>
 6000fa4:	00807dc4 	movi	r2,503
 6000fa8:	1441e92e 	bgeu	r2,r17,6001750 <_malloc_r+0x7fc>
 6000fac:	8804d27a 	srli	r2,r17,9
 6000fb0:	1000a126 	beq	r2,zero,6001238 <_malloc_r+0x2e4>
 6000fb4:	00c00104 	movi	r3,4
 6000fb8:	18811e36 	bltu	r3,r2,6001434 <_malloc_r+0x4e0>
 6000fbc:	8804d1ba 	srli	r2,r17,6
 6000fc0:	12000e44 	addi	r8,r2,57
 6000fc4:	11c00e04 	addi	r7,r2,56
 6000fc8:	4209883a 	add	r4,r8,r8
 6000fcc:	04c18034 	movhi	r19,1536
 6000fd0:	2109883a 	add	r4,r4,r4
 6000fd4:	9cd87f04 	addi	r19,r19,25084
 6000fd8:	2109883a 	add	r4,r4,r4
 6000fdc:	9909883a 	add	r4,r19,r4
 6000fe0:	24000117 	ldw	r16,4(r4)
 6000fe4:	213ffe04 	addi	r4,r4,-8
 6000fe8:	24009726 	beq	r4,r16,6001248 <_malloc_r+0x2f4>
 6000fec:	80800117 	ldw	r2,4(r16)
 6000ff0:	01bfff04 	movi	r6,-4
 6000ff4:	014003c4 	movi	r5,15
 6000ff8:	1184703a 	and	r2,r2,r6
 6000ffc:	1447c83a 	sub	r3,r2,r17
 6001000:	28c00716 	blt	r5,r3,6001020 <_malloc_r+0xcc>
 6001004:	1800920e 	bge	r3,zero,6001250 <_malloc_r+0x2fc>
 6001008:	84000317 	ldw	r16,12(r16)
 600100c:	24008e26 	beq	r4,r16,6001248 <_malloc_r+0x2f4>
 6001010:	80800117 	ldw	r2,4(r16)
 6001014:	1184703a 	and	r2,r2,r6
 6001018:	1447c83a 	sub	r3,r2,r17
 600101c:	28fff90e 	bge	r5,r3,6001004 <__alt_data_end+0xff001004>
 6001020:	3809883a 	mov	r4,r7
 6001024:	01818034 	movhi	r6,1536
 6001028:	9c000417 	ldw	r16,16(r19)
 600102c:	31987f04 	addi	r6,r6,25084
 6001030:	32000204 	addi	r8,r6,8
 6001034:	82013426 	beq	r16,r8,6001508 <_malloc_r+0x5b4>
 6001038:	80c00117 	ldw	r3,4(r16)
 600103c:	00bfff04 	movi	r2,-4
 6001040:	188e703a 	and	r7,r3,r2
 6001044:	3c45c83a 	sub	r2,r7,r17
 6001048:	00c003c4 	movi	r3,15
 600104c:	18811f16 	blt	r3,r2,60014cc <_malloc_r+0x578>
 6001050:	32000515 	stw	r8,20(r6)
 6001054:	32000415 	stw	r8,16(r6)
 6001058:	10007f0e 	bge	r2,zero,6001258 <_malloc_r+0x304>
 600105c:	00807fc4 	movi	r2,511
 6001060:	11c0fd36 	bltu	r2,r7,6001458 <_malloc_r+0x504>
 6001064:	3806d0fa 	srli	r3,r7,3
 6001068:	01c00044 	movi	r7,1
 600106c:	30800117 	ldw	r2,4(r6)
 6001070:	19400044 	addi	r5,r3,1
 6001074:	294b883a 	add	r5,r5,r5
 6001078:	1807d0ba 	srai	r3,r3,2
 600107c:	294b883a 	add	r5,r5,r5
 6001080:	294b883a 	add	r5,r5,r5
 6001084:	298b883a 	add	r5,r5,r6
 6001088:	38c6983a 	sll	r3,r7,r3
 600108c:	29c00017 	ldw	r7,0(r5)
 6001090:	2a7ffe04 	addi	r9,r5,-8
 6001094:	1886b03a 	or	r3,r3,r2
 6001098:	82400315 	stw	r9,12(r16)
 600109c:	81c00215 	stw	r7,8(r16)
 60010a0:	30c00115 	stw	r3,4(r6)
 60010a4:	2c000015 	stw	r16,0(r5)
 60010a8:	3c000315 	stw	r16,12(r7)
 60010ac:	2005d0ba 	srai	r2,r4,2
 60010b0:	01400044 	movi	r5,1
 60010b4:	288a983a 	sll	r5,r5,r2
 60010b8:	19406f36 	bltu	r3,r5,6001278 <_malloc_r+0x324>
 60010bc:	28c4703a 	and	r2,r5,r3
 60010c0:	10000a1e 	bne	r2,zero,60010ec <_malloc_r+0x198>
 60010c4:	00bfff04 	movi	r2,-4
 60010c8:	294b883a 	add	r5,r5,r5
 60010cc:	2088703a 	and	r4,r4,r2
 60010d0:	28c4703a 	and	r2,r5,r3
 60010d4:	21000104 	addi	r4,r4,4
 60010d8:	1000041e 	bne	r2,zero,60010ec <_malloc_r+0x198>
 60010dc:	294b883a 	add	r5,r5,r5
 60010e0:	28c4703a 	and	r2,r5,r3
 60010e4:	21000104 	addi	r4,r4,4
 60010e8:	103ffc26 	beq	r2,zero,60010dc <__alt_data_end+0xff0010dc>
 60010ec:	02bfff04 	movi	r10,-4
 60010f0:	024003c4 	movi	r9,15
 60010f4:	21800044 	addi	r6,r4,1
 60010f8:	318d883a 	add	r6,r6,r6
 60010fc:	318d883a 	add	r6,r6,r6
 6001100:	318d883a 	add	r6,r6,r6
 6001104:	998d883a 	add	r6,r19,r6
 6001108:	333ffe04 	addi	r12,r6,-8
 600110c:	2017883a 	mov	r11,r4
 6001110:	31800104 	addi	r6,r6,4
 6001114:	34000017 	ldw	r16,0(r6)
 6001118:	31fffd04 	addi	r7,r6,-12
 600111c:	81c0041e 	bne	r16,r7,6001130 <_malloc_r+0x1dc>
 6001120:	0000fb06 	br	6001510 <_malloc_r+0x5bc>
 6001124:	1801030e 	bge	r3,zero,6001534 <_malloc_r+0x5e0>
 6001128:	84000317 	ldw	r16,12(r16)
 600112c:	81c0f826 	beq	r16,r7,6001510 <_malloc_r+0x5bc>
 6001130:	80800117 	ldw	r2,4(r16)
 6001134:	1284703a 	and	r2,r2,r10
 6001138:	1447c83a 	sub	r3,r2,r17
 600113c:	48fff90e 	bge	r9,r3,6001124 <__alt_data_end+0xff001124>
 6001140:	80800317 	ldw	r2,12(r16)
 6001144:	81000217 	ldw	r4,8(r16)
 6001148:	89400054 	ori	r5,r17,1
 600114c:	81400115 	stw	r5,4(r16)
 6001150:	20800315 	stw	r2,12(r4)
 6001154:	11000215 	stw	r4,8(r2)
 6001158:	8463883a 	add	r17,r16,r17
 600115c:	9c400515 	stw	r17,20(r19)
 6001160:	9c400415 	stw	r17,16(r19)
 6001164:	18800054 	ori	r2,r3,1
 6001168:	88800115 	stw	r2,4(r17)
 600116c:	8a000315 	stw	r8,12(r17)
 6001170:	8a000215 	stw	r8,8(r17)
 6001174:	88e3883a 	add	r17,r17,r3
 6001178:	88c00015 	stw	r3,0(r17)
 600117c:	9009883a 	mov	r4,r18
 6001180:	60037b40 	call	60037b4 <__malloc_unlock>
 6001184:	80800204 	addi	r2,r16,8
 6001188:	00001b06 	br	60011f8 <_malloc_r+0x2a4>
 600118c:	04400404 	movi	r17,16
 6001190:	89402536 	bltu	r17,r5,6001228 <_malloc_r+0x2d4>
 6001194:	60037900 	call	6003790 <__malloc_lock>
 6001198:	00800184 	movi	r2,6
 600119c:	01000084 	movi	r4,2
 60011a0:	04c18034 	movhi	r19,1536
 60011a4:	1085883a 	add	r2,r2,r2
 60011a8:	9cd87f04 	addi	r19,r19,25084
 60011ac:	1085883a 	add	r2,r2,r2
 60011b0:	9885883a 	add	r2,r19,r2
 60011b4:	14000117 	ldw	r16,4(r2)
 60011b8:	10fffe04 	addi	r3,r2,-8
 60011bc:	80c0d926 	beq	r16,r3,6001524 <_malloc_r+0x5d0>
 60011c0:	80c00117 	ldw	r3,4(r16)
 60011c4:	81000317 	ldw	r4,12(r16)
 60011c8:	00bfff04 	movi	r2,-4
 60011cc:	1884703a 	and	r2,r3,r2
 60011d0:	81400217 	ldw	r5,8(r16)
 60011d4:	8085883a 	add	r2,r16,r2
 60011d8:	10c00117 	ldw	r3,4(r2)
 60011dc:	29000315 	stw	r4,12(r5)
 60011e0:	21400215 	stw	r5,8(r4)
 60011e4:	18c00054 	ori	r3,r3,1
 60011e8:	10c00115 	stw	r3,4(r2)
 60011ec:	9009883a 	mov	r4,r18
 60011f0:	60037b40 	call	60037b4 <__malloc_unlock>
 60011f4:	80800204 	addi	r2,r16,8
 60011f8:	dfc00a17 	ldw	ra,40(sp)
 60011fc:	df000917 	ldw	fp,36(sp)
 6001200:	ddc00817 	ldw	r23,32(sp)
 6001204:	dd800717 	ldw	r22,28(sp)
 6001208:	dd400617 	ldw	r21,24(sp)
 600120c:	dd000517 	ldw	r20,20(sp)
 6001210:	dcc00417 	ldw	r19,16(sp)
 6001214:	dc800317 	ldw	r18,12(sp)
 6001218:	dc400217 	ldw	r17,8(sp)
 600121c:	dc000117 	ldw	r16,4(sp)
 6001220:	dec00b04 	addi	sp,sp,44
 6001224:	f800283a 	ret
 6001228:	00800304 	movi	r2,12
 600122c:	90800015 	stw	r2,0(r18)
 6001230:	0005883a 	mov	r2,zero
 6001234:	003ff006 	br	60011f8 <__alt_data_end+0xff0011f8>
 6001238:	01002004 	movi	r4,128
 600123c:	02001004 	movi	r8,64
 6001240:	01c00fc4 	movi	r7,63
 6001244:	003f6106 	br	6000fcc <__alt_data_end+0xff000fcc>
 6001248:	4009883a 	mov	r4,r8
 600124c:	003f7506 	br	6001024 <__alt_data_end+0xff001024>
 6001250:	81000317 	ldw	r4,12(r16)
 6001254:	003fde06 	br	60011d0 <__alt_data_end+0xff0011d0>
 6001258:	81c5883a 	add	r2,r16,r7
 600125c:	11400117 	ldw	r5,4(r2)
 6001260:	9009883a 	mov	r4,r18
 6001264:	29400054 	ori	r5,r5,1
 6001268:	11400115 	stw	r5,4(r2)
 600126c:	60037b40 	call	60037b4 <__malloc_unlock>
 6001270:	80800204 	addi	r2,r16,8
 6001274:	003fe006 	br	60011f8 <__alt_data_end+0xff0011f8>
 6001278:	9c000217 	ldw	r16,8(r19)
 600127c:	00bfff04 	movi	r2,-4
 6001280:	85800117 	ldw	r22,4(r16)
 6001284:	b0ac703a 	and	r22,r22,r2
 6001288:	b4400336 	bltu	r22,r17,6001298 <_malloc_r+0x344>
 600128c:	b445c83a 	sub	r2,r22,r17
 6001290:	00c003c4 	movi	r3,15
 6001294:	18805d16 	blt	r3,r2,600140c <_malloc_r+0x4b8>
 6001298:	05c18034 	movhi	r23,1536
 600129c:	00818074 	movhi	r2,1537
 60012a0:	10a4c004 	addi	r2,r2,-27904
 60012a4:	bdde0c04 	addi	r23,r23,30768
 60012a8:	15400017 	ldw	r21,0(r2)
 60012ac:	b8c00017 	ldw	r3,0(r23)
 60012b0:	00bfffc4 	movi	r2,-1
 60012b4:	858d883a 	add	r6,r16,r22
 60012b8:	8d6b883a 	add	r21,r17,r21
 60012bc:	1880ea26 	beq	r3,r2,6001668 <_malloc_r+0x714>
 60012c0:	ad4403c4 	addi	r21,r21,4111
 60012c4:	00bc0004 	movi	r2,-4096
 60012c8:	a8aa703a 	and	r21,r21,r2
 60012cc:	a80b883a 	mov	r5,r21
 60012d0:	9009883a 	mov	r4,r18
 60012d4:	d9800015 	stw	r6,0(sp)
 60012d8:	60021740 	call	6002174 <_sbrk_r>
 60012dc:	1029883a 	mov	r20,r2
 60012e0:	00bfffc4 	movi	r2,-1
 60012e4:	d9800017 	ldw	r6,0(sp)
 60012e8:	a080e826 	beq	r20,r2,600168c <_malloc_r+0x738>
 60012ec:	a180a636 	bltu	r20,r6,6001588 <_malloc_r+0x634>
 60012f0:	07018074 	movhi	fp,1537
 60012f4:	e724c904 	addi	fp,fp,-27868
 60012f8:	e0800017 	ldw	r2,0(fp)
 60012fc:	a887883a 	add	r3,r21,r2
 6001300:	e0c00015 	stw	r3,0(fp)
 6001304:	3500e626 	beq	r6,r20,60016a0 <_malloc_r+0x74c>
 6001308:	b9000017 	ldw	r4,0(r23)
 600130c:	00bfffc4 	movi	r2,-1
 6001310:	2080ee26 	beq	r4,r2,60016cc <_malloc_r+0x778>
 6001314:	a185c83a 	sub	r2,r20,r6
 6001318:	10c5883a 	add	r2,r2,r3
 600131c:	e0800015 	stw	r2,0(fp)
 6001320:	a0c001cc 	andi	r3,r20,7
 6001324:	1800bc26 	beq	r3,zero,6001618 <_malloc_r+0x6c4>
 6001328:	a0e9c83a 	sub	r20,r20,r3
 600132c:	00840204 	movi	r2,4104
 6001330:	a5000204 	addi	r20,r20,8
 6001334:	10c7c83a 	sub	r3,r2,r3
 6001338:	a545883a 	add	r2,r20,r21
 600133c:	1083ffcc 	andi	r2,r2,4095
 6001340:	18abc83a 	sub	r21,r3,r2
 6001344:	a80b883a 	mov	r5,r21
 6001348:	9009883a 	mov	r4,r18
 600134c:	60021740 	call	6002174 <_sbrk_r>
 6001350:	00ffffc4 	movi	r3,-1
 6001354:	10c0e126 	beq	r2,r3,60016dc <_malloc_r+0x788>
 6001358:	1505c83a 	sub	r2,r2,r20
 600135c:	1545883a 	add	r2,r2,r21
 6001360:	10800054 	ori	r2,r2,1
 6001364:	e0c00017 	ldw	r3,0(fp)
 6001368:	9d000215 	stw	r20,8(r19)
 600136c:	a0800115 	stw	r2,4(r20)
 6001370:	a8c7883a 	add	r3,r21,r3
 6001374:	e0c00015 	stw	r3,0(fp)
 6001378:	84c00e26 	beq	r16,r19,60013b4 <_malloc_r+0x460>
 600137c:	018003c4 	movi	r6,15
 6001380:	3580a72e 	bgeu	r6,r22,6001620 <_malloc_r+0x6cc>
 6001384:	81400117 	ldw	r5,4(r16)
 6001388:	013ffe04 	movi	r4,-8
 600138c:	b0bffd04 	addi	r2,r22,-12
 6001390:	1104703a 	and	r2,r2,r4
 6001394:	2900004c 	andi	r4,r5,1
 6001398:	2088b03a 	or	r4,r4,r2
 600139c:	81000115 	stw	r4,4(r16)
 60013a0:	01400144 	movi	r5,5
 60013a4:	8089883a 	add	r4,r16,r2
 60013a8:	21400115 	stw	r5,4(r4)
 60013ac:	21400215 	stw	r5,8(r4)
 60013b0:	3080cd36 	bltu	r6,r2,60016e8 <_malloc_r+0x794>
 60013b4:	00818074 	movhi	r2,1537
 60013b8:	10a4bf04 	addi	r2,r2,-27908
 60013bc:	11000017 	ldw	r4,0(r2)
 60013c0:	20c0012e 	bgeu	r4,r3,60013c8 <_malloc_r+0x474>
 60013c4:	10c00015 	stw	r3,0(r2)
 60013c8:	00818074 	movhi	r2,1537
 60013cc:	10a4be04 	addi	r2,r2,-27912
 60013d0:	11000017 	ldw	r4,0(r2)
 60013d4:	9c000217 	ldw	r16,8(r19)
 60013d8:	20c0012e 	bgeu	r4,r3,60013e0 <_malloc_r+0x48c>
 60013dc:	10c00015 	stw	r3,0(r2)
 60013e0:	80c00117 	ldw	r3,4(r16)
 60013e4:	00bfff04 	movi	r2,-4
 60013e8:	1886703a 	and	r3,r3,r2
 60013ec:	1c45c83a 	sub	r2,r3,r17
 60013f0:	1c400236 	bltu	r3,r17,60013fc <_malloc_r+0x4a8>
 60013f4:	00c003c4 	movi	r3,15
 60013f8:	18800416 	blt	r3,r2,600140c <_malloc_r+0x4b8>
 60013fc:	9009883a 	mov	r4,r18
 6001400:	60037b40 	call	60037b4 <__malloc_unlock>
 6001404:	0005883a 	mov	r2,zero
 6001408:	003f7b06 	br	60011f8 <__alt_data_end+0xff0011f8>
 600140c:	88c00054 	ori	r3,r17,1
 6001410:	80c00115 	stw	r3,4(r16)
 6001414:	8463883a 	add	r17,r16,r17
 6001418:	10800054 	ori	r2,r2,1
 600141c:	9c400215 	stw	r17,8(r19)
 6001420:	88800115 	stw	r2,4(r17)
 6001424:	9009883a 	mov	r4,r18
 6001428:	60037b40 	call	60037b4 <__malloc_unlock>
 600142c:	80800204 	addi	r2,r16,8
 6001430:	003f7106 	br	60011f8 <__alt_data_end+0xff0011f8>
 6001434:	00c00504 	movi	r3,20
 6001438:	18804a2e 	bgeu	r3,r2,6001564 <_malloc_r+0x610>
 600143c:	00c01504 	movi	r3,84
 6001440:	18806e36 	bltu	r3,r2,60015fc <_malloc_r+0x6a8>
 6001444:	8804d33a 	srli	r2,r17,12
 6001448:	12001bc4 	addi	r8,r2,111
 600144c:	11c01b84 	addi	r7,r2,110
 6001450:	4209883a 	add	r4,r8,r8
 6001454:	003edd06 	br	6000fcc <__alt_data_end+0xff000fcc>
 6001458:	3804d27a 	srli	r2,r7,9
 600145c:	00c00104 	movi	r3,4
 6001460:	1880442e 	bgeu	r3,r2,6001574 <_malloc_r+0x620>
 6001464:	00c00504 	movi	r3,20
 6001468:	18808136 	bltu	r3,r2,6001670 <_malloc_r+0x71c>
 600146c:	11401704 	addi	r5,r2,92
 6001470:	10c016c4 	addi	r3,r2,91
 6001474:	294b883a 	add	r5,r5,r5
 6001478:	294b883a 	add	r5,r5,r5
 600147c:	294b883a 	add	r5,r5,r5
 6001480:	994b883a 	add	r5,r19,r5
 6001484:	28800017 	ldw	r2,0(r5)
 6001488:	01818034 	movhi	r6,1536
 600148c:	297ffe04 	addi	r5,r5,-8
 6001490:	31987f04 	addi	r6,r6,25084
 6001494:	28806526 	beq	r5,r2,600162c <_malloc_r+0x6d8>
 6001498:	01bfff04 	movi	r6,-4
 600149c:	10c00117 	ldw	r3,4(r2)
 60014a0:	1986703a 	and	r3,r3,r6
 60014a4:	38c0022e 	bgeu	r7,r3,60014b0 <_malloc_r+0x55c>
 60014a8:	10800217 	ldw	r2,8(r2)
 60014ac:	28bffb1e 	bne	r5,r2,600149c <__alt_data_end+0xff00149c>
 60014b0:	11400317 	ldw	r5,12(r2)
 60014b4:	98c00117 	ldw	r3,4(r19)
 60014b8:	81400315 	stw	r5,12(r16)
 60014bc:	80800215 	stw	r2,8(r16)
 60014c0:	2c000215 	stw	r16,8(r5)
 60014c4:	14000315 	stw	r16,12(r2)
 60014c8:	003ef806 	br	60010ac <__alt_data_end+0xff0010ac>
 60014cc:	88c00054 	ori	r3,r17,1
 60014d0:	80c00115 	stw	r3,4(r16)
 60014d4:	8463883a 	add	r17,r16,r17
 60014d8:	34400515 	stw	r17,20(r6)
 60014dc:	34400415 	stw	r17,16(r6)
 60014e0:	10c00054 	ori	r3,r2,1
 60014e4:	8a000315 	stw	r8,12(r17)
 60014e8:	8a000215 	stw	r8,8(r17)
 60014ec:	88c00115 	stw	r3,4(r17)
 60014f0:	88a3883a 	add	r17,r17,r2
 60014f4:	88800015 	stw	r2,0(r17)
 60014f8:	9009883a 	mov	r4,r18
 60014fc:	60037b40 	call	60037b4 <__malloc_unlock>
 6001500:	80800204 	addi	r2,r16,8
 6001504:	003f3c06 	br	60011f8 <__alt_data_end+0xff0011f8>
 6001508:	30c00117 	ldw	r3,4(r6)
 600150c:	003ee706 	br	60010ac <__alt_data_end+0xff0010ac>
 6001510:	5ac00044 	addi	r11,r11,1
 6001514:	588000cc 	andi	r2,r11,3
 6001518:	31800204 	addi	r6,r6,8
 600151c:	103efd1e 	bne	r2,zero,6001114 <__alt_data_end+0xff001114>
 6001520:	00002406 	br	60015b4 <_malloc_r+0x660>
 6001524:	14000317 	ldw	r16,12(r2)
 6001528:	143f251e 	bne	r2,r16,60011c0 <__alt_data_end+0xff0011c0>
 600152c:	21000084 	addi	r4,r4,2
 6001530:	003ebc06 	br	6001024 <__alt_data_end+0xff001024>
 6001534:	8085883a 	add	r2,r16,r2
 6001538:	10c00117 	ldw	r3,4(r2)
 600153c:	81000317 	ldw	r4,12(r16)
 6001540:	81400217 	ldw	r5,8(r16)
 6001544:	18c00054 	ori	r3,r3,1
 6001548:	10c00115 	stw	r3,4(r2)
 600154c:	29000315 	stw	r4,12(r5)
 6001550:	21400215 	stw	r5,8(r4)
 6001554:	9009883a 	mov	r4,r18
 6001558:	60037b40 	call	60037b4 <__malloc_unlock>
 600155c:	80800204 	addi	r2,r16,8
 6001560:	003f2506 	br	60011f8 <__alt_data_end+0xff0011f8>
 6001564:	12001704 	addi	r8,r2,92
 6001568:	11c016c4 	addi	r7,r2,91
 600156c:	4209883a 	add	r4,r8,r8
 6001570:	003e9606 	br	6000fcc <__alt_data_end+0xff000fcc>
 6001574:	3804d1ba 	srli	r2,r7,6
 6001578:	11400e44 	addi	r5,r2,57
 600157c:	10c00e04 	addi	r3,r2,56
 6001580:	294b883a 	add	r5,r5,r5
 6001584:	003fbc06 	br	6001478 <__alt_data_end+0xff001478>
 6001588:	84ff5926 	beq	r16,r19,60012f0 <__alt_data_end+0xff0012f0>
 600158c:	00818034 	movhi	r2,1536
 6001590:	10987f04 	addi	r2,r2,25084
 6001594:	14000217 	ldw	r16,8(r2)
 6001598:	00bfff04 	movi	r2,-4
 600159c:	80c00117 	ldw	r3,4(r16)
 60015a0:	1886703a 	and	r3,r3,r2
 60015a4:	003f9106 	br	60013ec <__alt_data_end+0xff0013ec>
 60015a8:	60800217 	ldw	r2,8(r12)
 60015ac:	213fffc4 	addi	r4,r4,-1
 60015b0:	1300651e 	bne	r2,r12,6001748 <_malloc_r+0x7f4>
 60015b4:	208000cc 	andi	r2,r4,3
 60015b8:	633ffe04 	addi	r12,r12,-8
 60015bc:	103ffa1e 	bne	r2,zero,60015a8 <__alt_data_end+0xff0015a8>
 60015c0:	98800117 	ldw	r2,4(r19)
 60015c4:	0146303a 	nor	r3,zero,r5
 60015c8:	1884703a 	and	r2,r3,r2
 60015cc:	98800115 	stw	r2,4(r19)
 60015d0:	294b883a 	add	r5,r5,r5
 60015d4:	117f2836 	bltu	r2,r5,6001278 <__alt_data_end+0xff001278>
 60015d8:	283f2726 	beq	r5,zero,6001278 <__alt_data_end+0xff001278>
 60015dc:	2886703a 	and	r3,r5,r2
 60015e0:	5809883a 	mov	r4,r11
 60015e4:	183ec31e 	bne	r3,zero,60010f4 <__alt_data_end+0xff0010f4>
 60015e8:	294b883a 	add	r5,r5,r5
 60015ec:	2886703a 	and	r3,r5,r2
 60015f0:	21000104 	addi	r4,r4,4
 60015f4:	183ffc26 	beq	r3,zero,60015e8 <__alt_data_end+0xff0015e8>
 60015f8:	003ebe06 	br	60010f4 <__alt_data_end+0xff0010f4>
 60015fc:	00c05504 	movi	r3,340
 6001600:	18801236 	bltu	r3,r2,600164c <_malloc_r+0x6f8>
 6001604:	8804d3fa 	srli	r2,r17,15
 6001608:	12001e04 	addi	r8,r2,120
 600160c:	11c01dc4 	addi	r7,r2,119
 6001610:	4209883a 	add	r4,r8,r8
 6001614:	003e6d06 	br	6000fcc <__alt_data_end+0xff000fcc>
 6001618:	00c40004 	movi	r3,4096
 600161c:	003f4606 	br	6001338 <__alt_data_end+0xff001338>
 6001620:	00800044 	movi	r2,1
 6001624:	a0800115 	stw	r2,4(r20)
 6001628:	003f7406 	br	60013fc <__alt_data_end+0xff0013fc>
 600162c:	1805d0ba 	srai	r2,r3,2
 6001630:	01c00044 	movi	r7,1
 6001634:	30c00117 	ldw	r3,4(r6)
 6001638:	388e983a 	sll	r7,r7,r2
 600163c:	2805883a 	mov	r2,r5
 6001640:	38c6b03a 	or	r3,r7,r3
 6001644:	30c00115 	stw	r3,4(r6)
 6001648:	003f9b06 	br	60014b8 <__alt_data_end+0xff0014b8>
 600164c:	00c15504 	movi	r3,1364
 6001650:	18801a36 	bltu	r3,r2,60016bc <_malloc_r+0x768>
 6001654:	8804d4ba 	srli	r2,r17,18
 6001658:	12001f44 	addi	r8,r2,125
 600165c:	11c01f04 	addi	r7,r2,124
 6001660:	4209883a 	add	r4,r8,r8
 6001664:	003e5906 	br	6000fcc <__alt_data_end+0xff000fcc>
 6001668:	ad400404 	addi	r21,r21,16
 600166c:	003f1706 	br	60012cc <__alt_data_end+0xff0012cc>
 6001670:	00c01504 	movi	r3,84
 6001674:	18802336 	bltu	r3,r2,6001704 <_malloc_r+0x7b0>
 6001678:	3804d33a 	srli	r2,r7,12
 600167c:	11401bc4 	addi	r5,r2,111
 6001680:	10c01b84 	addi	r3,r2,110
 6001684:	294b883a 	add	r5,r5,r5
 6001688:	003f7b06 	br	6001478 <__alt_data_end+0xff001478>
 600168c:	9c000217 	ldw	r16,8(r19)
 6001690:	00bfff04 	movi	r2,-4
 6001694:	80c00117 	ldw	r3,4(r16)
 6001698:	1886703a 	and	r3,r3,r2
 600169c:	003f5306 	br	60013ec <__alt_data_end+0xff0013ec>
 60016a0:	3083ffcc 	andi	r2,r6,4095
 60016a4:	103f181e 	bne	r2,zero,6001308 <__alt_data_end+0xff001308>
 60016a8:	99000217 	ldw	r4,8(r19)
 60016ac:	b545883a 	add	r2,r22,r21
 60016b0:	10800054 	ori	r2,r2,1
 60016b4:	20800115 	stw	r2,4(r4)
 60016b8:	003f3e06 	br	60013b4 <__alt_data_end+0xff0013b4>
 60016bc:	01003f84 	movi	r4,254
 60016c0:	02001fc4 	movi	r8,127
 60016c4:	01c01f84 	movi	r7,126
 60016c8:	003e4006 	br	6000fcc <__alt_data_end+0xff000fcc>
 60016cc:	00818034 	movhi	r2,1536
 60016d0:	109e0c04 	addi	r2,r2,30768
 60016d4:	15000015 	stw	r20,0(r2)
 60016d8:	003f1106 	br	6001320 <__alt_data_end+0xff001320>
 60016dc:	00800044 	movi	r2,1
 60016e0:	002b883a 	mov	r21,zero
 60016e4:	003f1f06 	br	6001364 <__alt_data_end+0xff001364>
 60016e8:	81400204 	addi	r5,r16,8
 60016ec:	9009883a 	mov	r4,r18
 60016f0:	60029dc0 	call	60029dc <_free_r>
 60016f4:	00818074 	movhi	r2,1537
 60016f8:	10a4c904 	addi	r2,r2,-27868
 60016fc:	10c00017 	ldw	r3,0(r2)
 6001700:	003f2c06 	br	60013b4 <__alt_data_end+0xff0013b4>
 6001704:	00c05504 	movi	r3,340
 6001708:	18800536 	bltu	r3,r2,6001720 <_malloc_r+0x7cc>
 600170c:	3804d3fa 	srli	r2,r7,15
 6001710:	11401e04 	addi	r5,r2,120
 6001714:	10c01dc4 	addi	r3,r2,119
 6001718:	294b883a 	add	r5,r5,r5
 600171c:	003f5606 	br	6001478 <__alt_data_end+0xff001478>
 6001720:	00c15504 	movi	r3,1364
 6001724:	18800536 	bltu	r3,r2,600173c <_malloc_r+0x7e8>
 6001728:	3804d4ba 	srli	r2,r7,18
 600172c:	11401f44 	addi	r5,r2,125
 6001730:	10c01f04 	addi	r3,r2,124
 6001734:	294b883a 	add	r5,r5,r5
 6001738:	003f4f06 	br	6001478 <__alt_data_end+0xff001478>
 600173c:	01403f84 	movi	r5,254
 6001740:	00c01f84 	movi	r3,126
 6001744:	003f4c06 	br	6001478 <__alt_data_end+0xff001478>
 6001748:	98800117 	ldw	r2,4(r19)
 600174c:	003fa006 	br	60015d0 <__alt_data_end+0xff0015d0>
 6001750:	8808d0fa 	srli	r4,r17,3
 6001754:	20800044 	addi	r2,r4,1
 6001758:	1085883a 	add	r2,r2,r2
 600175c:	003e9006 	br	60011a0 <__alt_data_end+0xff0011a0>

06001760 <memchr>:
 6001760:	208000cc 	andi	r2,r4,3
 6001764:	280f883a 	mov	r7,r5
 6001768:	10003426 	beq	r2,zero,600183c <memchr+0xdc>
 600176c:	30bfffc4 	addi	r2,r6,-1
 6001770:	30001a26 	beq	r6,zero,60017dc <memchr+0x7c>
 6001774:	20c00003 	ldbu	r3,0(r4)
 6001778:	29803fcc 	andi	r6,r5,255
 600177c:	30c0051e 	bne	r6,r3,6001794 <memchr+0x34>
 6001780:	00001806 	br	60017e4 <memchr+0x84>
 6001784:	10001526 	beq	r2,zero,60017dc <memchr+0x7c>
 6001788:	20c00003 	ldbu	r3,0(r4)
 600178c:	10bfffc4 	addi	r2,r2,-1
 6001790:	30c01426 	beq	r6,r3,60017e4 <memchr+0x84>
 6001794:	21000044 	addi	r4,r4,1
 6001798:	20c000cc 	andi	r3,r4,3
 600179c:	183ff91e 	bne	r3,zero,6001784 <__alt_data_end+0xff001784>
 60017a0:	020000c4 	movi	r8,3
 60017a4:	40801136 	bltu	r8,r2,60017ec <memchr+0x8c>
 60017a8:	10000c26 	beq	r2,zero,60017dc <memchr+0x7c>
 60017ac:	20c00003 	ldbu	r3,0(r4)
 60017b0:	29403fcc 	andi	r5,r5,255
 60017b4:	28c00b26 	beq	r5,r3,60017e4 <memchr+0x84>
 60017b8:	20c00044 	addi	r3,r4,1
 60017bc:	39803fcc 	andi	r6,r7,255
 60017c0:	2089883a 	add	r4,r4,r2
 60017c4:	00000306 	br	60017d4 <memchr+0x74>
 60017c8:	18c00044 	addi	r3,r3,1
 60017cc:	197fffc3 	ldbu	r5,-1(r3)
 60017d0:	31400526 	beq	r6,r5,60017e8 <memchr+0x88>
 60017d4:	1805883a 	mov	r2,r3
 60017d8:	20fffb1e 	bne	r4,r3,60017c8 <__alt_data_end+0xff0017c8>
 60017dc:	0005883a 	mov	r2,zero
 60017e0:	f800283a 	ret
 60017e4:	2005883a 	mov	r2,r4
 60017e8:	f800283a 	ret
 60017ec:	28c03fcc 	andi	r3,r5,255
 60017f0:	1812923a 	slli	r9,r3,8
 60017f4:	02ffbff4 	movhi	r11,65279
 60017f8:	02a02074 	movhi	r10,32897
 60017fc:	48d2b03a 	or	r9,r9,r3
 6001800:	4806943a 	slli	r3,r9,16
 6001804:	5affbfc4 	addi	r11,r11,-257
 6001808:	52a02004 	addi	r10,r10,-32640
 600180c:	48d2b03a 	or	r9,r9,r3
 6001810:	20c00017 	ldw	r3,0(r4)
 6001814:	48c6f03a 	xor	r3,r9,r3
 6001818:	1acd883a 	add	r6,r3,r11
 600181c:	00c6303a 	nor	r3,zero,r3
 6001820:	30c6703a 	and	r3,r6,r3
 6001824:	1a86703a 	and	r3,r3,r10
 6001828:	183fe01e 	bne	r3,zero,60017ac <__alt_data_end+0xff0017ac>
 600182c:	10bfff04 	addi	r2,r2,-4
 6001830:	21000104 	addi	r4,r4,4
 6001834:	40bff636 	bltu	r8,r2,6001810 <__alt_data_end+0xff001810>
 6001838:	003fdb06 	br	60017a8 <__alt_data_end+0xff0017a8>
 600183c:	3005883a 	mov	r2,r6
 6001840:	003fd706 	br	60017a0 <__alt_data_end+0xff0017a0>

06001844 <memcpy>:
 6001844:	defffd04 	addi	sp,sp,-12
 6001848:	dfc00215 	stw	ra,8(sp)
 600184c:	dc400115 	stw	r17,4(sp)
 6001850:	dc000015 	stw	r16,0(sp)
 6001854:	00c003c4 	movi	r3,15
 6001858:	2005883a 	mov	r2,r4
 600185c:	1980452e 	bgeu	r3,r6,6001974 <memcpy+0x130>
 6001860:	2906b03a 	or	r3,r5,r4
 6001864:	18c000cc 	andi	r3,r3,3
 6001868:	1800441e 	bne	r3,zero,600197c <memcpy+0x138>
 600186c:	347ffc04 	addi	r17,r6,-16
 6001870:	8822d13a 	srli	r17,r17,4
 6001874:	28c00104 	addi	r3,r5,4
 6001878:	23400104 	addi	r13,r4,4
 600187c:	8820913a 	slli	r16,r17,4
 6001880:	2b000204 	addi	r12,r5,8
 6001884:	22c00204 	addi	r11,r4,8
 6001888:	84000504 	addi	r16,r16,20
 600188c:	2a800304 	addi	r10,r5,12
 6001890:	22400304 	addi	r9,r4,12
 6001894:	2c21883a 	add	r16,r5,r16
 6001898:	2811883a 	mov	r8,r5
 600189c:	200f883a 	mov	r7,r4
 60018a0:	41000017 	ldw	r4,0(r8)
 60018a4:	1fc00017 	ldw	ra,0(r3)
 60018a8:	63c00017 	ldw	r15,0(r12)
 60018ac:	39000015 	stw	r4,0(r7)
 60018b0:	53800017 	ldw	r14,0(r10)
 60018b4:	6fc00015 	stw	ra,0(r13)
 60018b8:	5bc00015 	stw	r15,0(r11)
 60018bc:	4b800015 	stw	r14,0(r9)
 60018c0:	18c00404 	addi	r3,r3,16
 60018c4:	39c00404 	addi	r7,r7,16
 60018c8:	42000404 	addi	r8,r8,16
 60018cc:	6b400404 	addi	r13,r13,16
 60018d0:	63000404 	addi	r12,r12,16
 60018d4:	5ac00404 	addi	r11,r11,16
 60018d8:	52800404 	addi	r10,r10,16
 60018dc:	4a400404 	addi	r9,r9,16
 60018e0:	1c3fef1e 	bne	r3,r16,60018a0 <__alt_data_end+0xff0018a0>
 60018e4:	89c00044 	addi	r7,r17,1
 60018e8:	380e913a 	slli	r7,r7,4
 60018ec:	310003cc 	andi	r4,r6,15
 60018f0:	02c000c4 	movi	r11,3
 60018f4:	11c7883a 	add	r3,r2,r7
 60018f8:	29cb883a 	add	r5,r5,r7
 60018fc:	5900212e 	bgeu	r11,r4,6001984 <memcpy+0x140>
 6001900:	1813883a 	mov	r9,r3
 6001904:	2811883a 	mov	r8,r5
 6001908:	200f883a 	mov	r7,r4
 600190c:	42800017 	ldw	r10,0(r8)
 6001910:	4a400104 	addi	r9,r9,4
 6001914:	39ffff04 	addi	r7,r7,-4
 6001918:	4abfff15 	stw	r10,-4(r9)
 600191c:	42000104 	addi	r8,r8,4
 6001920:	59fffa36 	bltu	r11,r7,600190c <__alt_data_end+0xff00190c>
 6001924:	213fff04 	addi	r4,r4,-4
 6001928:	2008d0ba 	srli	r4,r4,2
 600192c:	318000cc 	andi	r6,r6,3
 6001930:	21000044 	addi	r4,r4,1
 6001934:	2109883a 	add	r4,r4,r4
 6001938:	2109883a 	add	r4,r4,r4
 600193c:	1907883a 	add	r3,r3,r4
 6001940:	290b883a 	add	r5,r5,r4
 6001944:	30000626 	beq	r6,zero,6001960 <memcpy+0x11c>
 6001948:	198d883a 	add	r6,r3,r6
 600194c:	29c00003 	ldbu	r7,0(r5)
 6001950:	18c00044 	addi	r3,r3,1
 6001954:	29400044 	addi	r5,r5,1
 6001958:	19ffffc5 	stb	r7,-1(r3)
 600195c:	19bffb1e 	bne	r3,r6,600194c <__alt_data_end+0xff00194c>
 6001960:	dfc00217 	ldw	ra,8(sp)
 6001964:	dc400117 	ldw	r17,4(sp)
 6001968:	dc000017 	ldw	r16,0(sp)
 600196c:	dec00304 	addi	sp,sp,12
 6001970:	f800283a 	ret
 6001974:	2007883a 	mov	r3,r4
 6001978:	003ff206 	br	6001944 <__alt_data_end+0xff001944>
 600197c:	2007883a 	mov	r3,r4
 6001980:	003ff106 	br	6001948 <__alt_data_end+0xff001948>
 6001984:	200d883a 	mov	r6,r4
 6001988:	003fee06 	br	6001944 <__alt_data_end+0xff001944>

0600198c <memmove>:
 600198c:	2005883a 	mov	r2,r4
 6001990:	29000b2e 	bgeu	r5,r4,60019c0 <memmove+0x34>
 6001994:	298f883a 	add	r7,r5,r6
 6001998:	21c0092e 	bgeu	r4,r7,60019c0 <memmove+0x34>
 600199c:	2187883a 	add	r3,r4,r6
 60019a0:	198bc83a 	sub	r5,r3,r6
 60019a4:	30004826 	beq	r6,zero,6001ac8 <memmove+0x13c>
 60019a8:	39ffffc4 	addi	r7,r7,-1
 60019ac:	39000003 	ldbu	r4,0(r7)
 60019b0:	18ffffc4 	addi	r3,r3,-1
 60019b4:	19000005 	stb	r4,0(r3)
 60019b8:	28fffb1e 	bne	r5,r3,60019a8 <__alt_data_end+0xff0019a8>
 60019bc:	f800283a 	ret
 60019c0:	00c003c4 	movi	r3,15
 60019c4:	1980412e 	bgeu	r3,r6,6001acc <memmove+0x140>
 60019c8:	2886b03a 	or	r3,r5,r2
 60019cc:	18c000cc 	andi	r3,r3,3
 60019d0:	1800401e 	bne	r3,zero,6001ad4 <memmove+0x148>
 60019d4:	33fffc04 	addi	r15,r6,-16
 60019d8:	781ed13a 	srli	r15,r15,4
 60019dc:	28c00104 	addi	r3,r5,4
 60019e0:	13400104 	addi	r13,r2,4
 60019e4:	781c913a 	slli	r14,r15,4
 60019e8:	2b000204 	addi	r12,r5,8
 60019ec:	12c00204 	addi	r11,r2,8
 60019f0:	73800504 	addi	r14,r14,20
 60019f4:	2a800304 	addi	r10,r5,12
 60019f8:	12400304 	addi	r9,r2,12
 60019fc:	2b9d883a 	add	r14,r5,r14
 6001a00:	2811883a 	mov	r8,r5
 6001a04:	100f883a 	mov	r7,r2
 6001a08:	41000017 	ldw	r4,0(r8)
 6001a0c:	39c00404 	addi	r7,r7,16
 6001a10:	18c00404 	addi	r3,r3,16
 6001a14:	393ffc15 	stw	r4,-16(r7)
 6001a18:	193ffc17 	ldw	r4,-16(r3)
 6001a1c:	6b400404 	addi	r13,r13,16
 6001a20:	5ac00404 	addi	r11,r11,16
 6001a24:	693ffc15 	stw	r4,-16(r13)
 6001a28:	61000017 	ldw	r4,0(r12)
 6001a2c:	4a400404 	addi	r9,r9,16
 6001a30:	42000404 	addi	r8,r8,16
 6001a34:	593ffc15 	stw	r4,-16(r11)
 6001a38:	51000017 	ldw	r4,0(r10)
 6001a3c:	63000404 	addi	r12,r12,16
 6001a40:	52800404 	addi	r10,r10,16
 6001a44:	493ffc15 	stw	r4,-16(r9)
 6001a48:	1bbfef1e 	bne	r3,r14,6001a08 <__alt_data_end+0xff001a08>
 6001a4c:	79000044 	addi	r4,r15,1
 6001a50:	2008913a 	slli	r4,r4,4
 6001a54:	328003cc 	andi	r10,r6,15
 6001a58:	02c000c4 	movi	r11,3
 6001a5c:	1107883a 	add	r3,r2,r4
 6001a60:	290b883a 	add	r5,r5,r4
 6001a64:	5a801e2e 	bgeu	r11,r10,6001ae0 <memmove+0x154>
 6001a68:	1813883a 	mov	r9,r3
 6001a6c:	2811883a 	mov	r8,r5
 6001a70:	500f883a 	mov	r7,r10
 6001a74:	41000017 	ldw	r4,0(r8)
 6001a78:	4a400104 	addi	r9,r9,4
 6001a7c:	39ffff04 	addi	r7,r7,-4
 6001a80:	493fff15 	stw	r4,-4(r9)
 6001a84:	42000104 	addi	r8,r8,4
 6001a88:	59fffa36 	bltu	r11,r7,6001a74 <__alt_data_end+0xff001a74>
 6001a8c:	513fff04 	addi	r4,r10,-4
 6001a90:	2008d0ba 	srli	r4,r4,2
 6001a94:	318000cc 	andi	r6,r6,3
 6001a98:	21000044 	addi	r4,r4,1
 6001a9c:	2109883a 	add	r4,r4,r4
 6001aa0:	2109883a 	add	r4,r4,r4
 6001aa4:	1907883a 	add	r3,r3,r4
 6001aa8:	290b883a 	add	r5,r5,r4
 6001aac:	30000b26 	beq	r6,zero,6001adc <memmove+0x150>
 6001ab0:	198d883a 	add	r6,r3,r6
 6001ab4:	29c00003 	ldbu	r7,0(r5)
 6001ab8:	18c00044 	addi	r3,r3,1
 6001abc:	29400044 	addi	r5,r5,1
 6001ac0:	19ffffc5 	stb	r7,-1(r3)
 6001ac4:	19bffb1e 	bne	r3,r6,6001ab4 <__alt_data_end+0xff001ab4>
 6001ac8:	f800283a 	ret
 6001acc:	1007883a 	mov	r3,r2
 6001ad0:	003ff606 	br	6001aac <__alt_data_end+0xff001aac>
 6001ad4:	1007883a 	mov	r3,r2
 6001ad8:	003ff506 	br	6001ab0 <__alt_data_end+0xff001ab0>
 6001adc:	f800283a 	ret
 6001ae0:	500d883a 	mov	r6,r10
 6001ae4:	003ff106 	br	6001aac <__alt_data_end+0xff001aac>

06001ae8 <memset>:
 6001ae8:	20c000cc 	andi	r3,r4,3
 6001aec:	2005883a 	mov	r2,r4
 6001af0:	18004426 	beq	r3,zero,6001c04 <memset+0x11c>
 6001af4:	31ffffc4 	addi	r7,r6,-1
 6001af8:	30004026 	beq	r6,zero,6001bfc <memset+0x114>
 6001afc:	2813883a 	mov	r9,r5
 6001b00:	200d883a 	mov	r6,r4
 6001b04:	2007883a 	mov	r3,r4
 6001b08:	00000406 	br	6001b1c <memset+0x34>
 6001b0c:	3a3fffc4 	addi	r8,r7,-1
 6001b10:	31800044 	addi	r6,r6,1
 6001b14:	38003926 	beq	r7,zero,6001bfc <memset+0x114>
 6001b18:	400f883a 	mov	r7,r8
 6001b1c:	18c00044 	addi	r3,r3,1
 6001b20:	32400005 	stb	r9,0(r6)
 6001b24:	1a0000cc 	andi	r8,r3,3
 6001b28:	403ff81e 	bne	r8,zero,6001b0c <__alt_data_end+0xff001b0c>
 6001b2c:	010000c4 	movi	r4,3
 6001b30:	21c02d2e 	bgeu	r4,r7,6001be8 <memset+0x100>
 6001b34:	29003fcc 	andi	r4,r5,255
 6001b38:	200c923a 	slli	r6,r4,8
 6001b3c:	3108b03a 	or	r4,r6,r4
 6001b40:	200c943a 	slli	r6,r4,16
 6001b44:	218cb03a 	or	r6,r4,r6
 6001b48:	010003c4 	movi	r4,15
 6001b4c:	21c0182e 	bgeu	r4,r7,6001bb0 <memset+0xc8>
 6001b50:	3b3ffc04 	addi	r12,r7,-16
 6001b54:	6018d13a 	srli	r12,r12,4
 6001b58:	1a000104 	addi	r8,r3,4
 6001b5c:	1ac00204 	addi	r11,r3,8
 6001b60:	6008913a 	slli	r4,r12,4
 6001b64:	1a800304 	addi	r10,r3,12
 6001b68:	1813883a 	mov	r9,r3
 6001b6c:	21000504 	addi	r4,r4,20
 6001b70:	1909883a 	add	r4,r3,r4
 6001b74:	49800015 	stw	r6,0(r9)
 6001b78:	41800015 	stw	r6,0(r8)
 6001b7c:	59800015 	stw	r6,0(r11)
 6001b80:	51800015 	stw	r6,0(r10)
 6001b84:	42000404 	addi	r8,r8,16
 6001b88:	4a400404 	addi	r9,r9,16
 6001b8c:	5ac00404 	addi	r11,r11,16
 6001b90:	52800404 	addi	r10,r10,16
 6001b94:	413ff71e 	bne	r8,r4,6001b74 <__alt_data_end+0xff001b74>
 6001b98:	63000044 	addi	r12,r12,1
 6001b9c:	6018913a 	slli	r12,r12,4
 6001ba0:	39c003cc 	andi	r7,r7,15
 6001ba4:	010000c4 	movi	r4,3
 6001ba8:	1b07883a 	add	r3,r3,r12
 6001bac:	21c00e2e 	bgeu	r4,r7,6001be8 <memset+0x100>
 6001bb0:	1813883a 	mov	r9,r3
 6001bb4:	3811883a 	mov	r8,r7
 6001bb8:	010000c4 	movi	r4,3
 6001bbc:	49800015 	stw	r6,0(r9)
 6001bc0:	423fff04 	addi	r8,r8,-4
 6001bc4:	4a400104 	addi	r9,r9,4
 6001bc8:	223ffc36 	bltu	r4,r8,6001bbc <__alt_data_end+0xff001bbc>
 6001bcc:	393fff04 	addi	r4,r7,-4
 6001bd0:	2008d0ba 	srli	r4,r4,2
 6001bd4:	39c000cc 	andi	r7,r7,3
 6001bd8:	21000044 	addi	r4,r4,1
 6001bdc:	2109883a 	add	r4,r4,r4
 6001be0:	2109883a 	add	r4,r4,r4
 6001be4:	1907883a 	add	r3,r3,r4
 6001be8:	38000526 	beq	r7,zero,6001c00 <memset+0x118>
 6001bec:	19cf883a 	add	r7,r3,r7
 6001bf0:	19400005 	stb	r5,0(r3)
 6001bf4:	18c00044 	addi	r3,r3,1
 6001bf8:	38fffd1e 	bne	r7,r3,6001bf0 <__alt_data_end+0xff001bf0>
 6001bfc:	f800283a 	ret
 6001c00:	f800283a 	ret
 6001c04:	2007883a 	mov	r3,r4
 6001c08:	300f883a 	mov	r7,r6
 6001c0c:	003fc706 	br	6001b2c <__alt_data_end+0xff001b2c>

06001c10 <_realloc_r>:
 6001c10:	defff604 	addi	sp,sp,-40
 6001c14:	dc800215 	stw	r18,8(sp)
 6001c18:	dfc00915 	stw	ra,36(sp)
 6001c1c:	df000815 	stw	fp,32(sp)
 6001c20:	ddc00715 	stw	r23,28(sp)
 6001c24:	dd800615 	stw	r22,24(sp)
 6001c28:	dd400515 	stw	r21,20(sp)
 6001c2c:	dd000415 	stw	r20,16(sp)
 6001c30:	dcc00315 	stw	r19,12(sp)
 6001c34:	dc400115 	stw	r17,4(sp)
 6001c38:	dc000015 	stw	r16,0(sp)
 6001c3c:	3025883a 	mov	r18,r6
 6001c40:	2800b726 	beq	r5,zero,6001f20 <_realloc_r+0x310>
 6001c44:	282b883a 	mov	r21,r5
 6001c48:	2029883a 	mov	r20,r4
 6001c4c:	60037900 	call	6003790 <__malloc_lock>
 6001c50:	a8bfff17 	ldw	r2,-4(r21)
 6001c54:	043fff04 	movi	r16,-4
 6001c58:	90c002c4 	addi	r3,r18,11
 6001c5c:	01000584 	movi	r4,22
 6001c60:	acfffe04 	addi	r19,r21,-8
 6001c64:	1420703a 	and	r16,r2,r16
 6001c68:	20c0332e 	bgeu	r4,r3,6001d38 <_realloc_r+0x128>
 6001c6c:	047ffe04 	movi	r17,-8
 6001c70:	1c62703a 	and	r17,r3,r17
 6001c74:	8807883a 	mov	r3,r17
 6001c78:	88005816 	blt	r17,zero,6001ddc <_realloc_r+0x1cc>
 6001c7c:	8c805736 	bltu	r17,r18,6001ddc <_realloc_r+0x1cc>
 6001c80:	80c0300e 	bge	r16,r3,6001d44 <_realloc_r+0x134>
 6001c84:	07018034 	movhi	fp,1536
 6001c88:	e7187f04 	addi	fp,fp,25084
 6001c8c:	e1c00217 	ldw	r7,8(fp)
 6001c90:	9c09883a 	add	r4,r19,r16
 6001c94:	22000117 	ldw	r8,4(r4)
 6001c98:	21c06326 	beq	r4,r7,6001e28 <_realloc_r+0x218>
 6001c9c:	017fff84 	movi	r5,-2
 6001ca0:	414a703a 	and	r5,r8,r5
 6001ca4:	214b883a 	add	r5,r4,r5
 6001ca8:	29800117 	ldw	r6,4(r5)
 6001cac:	3180004c 	andi	r6,r6,1
 6001cb0:	30003f26 	beq	r6,zero,6001db0 <_realloc_r+0x1a0>
 6001cb4:	1080004c 	andi	r2,r2,1
 6001cb8:	10008326 	beq	r2,zero,6001ec8 <_realloc_r+0x2b8>
 6001cbc:	900b883a 	mov	r5,r18
 6001cc0:	a009883a 	mov	r4,r20
 6001cc4:	6000f540 	call	6000f54 <_malloc_r>
 6001cc8:	1025883a 	mov	r18,r2
 6001ccc:	10011e26 	beq	r2,zero,6002148 <_realloc_r+0x538>
 6001cd0:	a93fff17 	ldw	r4,-4(r21)
 6001cd4:	10fffe04 	addi	r3,r2,-8
 6001cd8:	00bfff84 	movi	r2,-2
 6001cdc:	2084703a 	and	r2,r4,r2
 6001ce0:	9885883a 	add	r2,r19,r2
 6001ce4:	1880ee26 	beq	r3,r2,60020a0 <_realloc_r+0x490>
 6001ce8:	81bfff04 	addi	r6,r16,-4
 6001cec:	00800904 	movi	r2,36
 6001cf0:	1180b836 	bltu	r2,r6,6001fd4 <_realloc_r+0x3c4>
 6001cf4:	00c004c4 	movi	r3,19
 6001cf8:	19809636 	bltu	r3,r6,6001f54 <_realloc_r+0x344>
 6001cfc:	9005883a 	mov	r2,r18
 6001d00:	a807883a 	mov	r3,r21
 6001d04:	19000017 	ldw	r4,0(r3)
 6001d08:	11000015 	stw	r4,0(r2)
 6001d0c:	19000117 	ldw	r4,4(r3)
 6001d10:	11000115 	stw	r4,4(r2)
 6001d14:	18c00217 	ldw	r3,8(r3)
 6001d18:	10c00215 	stw	r3,8(r2)
 6001d1c:	a80b883a 	mov	r5,r21
 6001d20:	a009883a 	mov	r4,r20
 6001d24:	60029dc0 	call	60029dc <_free_r>
 6001d28:	a009883a 	mov	r4,r20
 6001d2c:	60037b40 	call	60037b4 <__malloc_unlock>
 6001d30:	9005883a 	mov	r2,r18
 6001d34:	00001206 	br	6001d80 <_realloc_r+0x170>
 6001d38:	00c00404 	movi	r3,16
 6001d3c:	1823883a 	mov	r17,r3
 6001d40:	003fce06 	br	6001c7c <__alt_data_end+0xff001c7c>
 6001d44:	a825883a 	mov	r18,r21
 6001d48:	8445c83a 	sub	r2,r16,r17
 6001d4c:	00c003c4 	movi	r3,15
 6001d50:	18802636 	bltu	r3,r2,6001dec <_realloc_r+0x1dc>
 6001d54:	99800117 	ldw	r6,4(r19)
 6001d58:	9c07883a 	add	r3,r19,r16
 6001d5c:	3180004c 	andi	r6,r6,1
 6001d60:	3420b03a 	or	r16,r6,r16
 6001d64:	9c000115 	stw	r16,4(r19)
 6001d68:	18800117 	ldw	r2,4(r3)
 6001d6c:	10800054 	ori	r2,r2,1
 6001d70:	18800115 	stw	r2,4(r3)
 6001d74:	a009883a 	mov	r4,r20
 6001d78:	60037b40 	call	60037b4 <__malloc_unlock>
 6001d7c:	9005883a 	mov	r2,r18
 6001d80:	dfc00917 	ldw	ra,36(sp)
 6001d84:	df000817 	ldw	fp,32(sp)
 6001d88:	ddc00717 	ldw	r23,28(sp)
 6001d8c:	dd800617 	ldw	r22,24(sp)
 6001d90:	dd400517 	ldw	r21,20(sp)
 6001d94:	dd000417 	ldw	r20,16(sp)
 6001d98:	dcc00317 	ldw	r19,12(sp)
 6001d9c:	dc800217 	ldw	r18,8(sp)
 6001da0:	dc400117 	ldw	r17,4(sp)
 6001da4:	dc000017 	ldw	r16,0(sp)
 6001da8:	dec00a04 	addi	sp,sp,40
 6001dac:	f800283a 	ret
 6001db0:	017fff04 	movi	r5,-4
 6001db4:	414a703a 	and	r5,r8,r5
 6001db8:	814d883a 	add	r6,r16,r5
 6001dbc:	30c01f16 	blt	r6,r3,6001e3c <_realloc_r+0x22c>
 6001dc0:	20800317 	ldw	r2,12(r4)
 6001dc4:	20c00217 	ldw	r3,8(r4)
 6001dc8:	a825883a 	mov	r18,r21
 6001dcc:	3021883a 	mov	r16,r6
 6001dd0:	18800315 	stw	r2,12(r3)
 6001dd4:	10c00215 	stw	r3,8(r2)
 6001dd8:	003fdb06 	br	6001d48 <__alt_data_end+0xff001d48>
 6001ddc:	00800304 	movi	r2,12
 6001de0:	a0800015 	stw	r2,0(r20)
 6001de4:	0005883a 	mov	r2,zero
 6001de8:	003fe506 	br	6001d80 <__alt_data_end+0xff001d80>
 6001dec:	98c00117 	ldw	r3,4(r19)
 6001df0:	9c4b883a 	add	r5,r19,r17
 6001df4:	11000054 	ori	r4,r2,1
 6001df8:	18c0004c 	andi	r3,r3,1
 6001dfc:	1c62b03a 	or	r17,r3,r17
 6001e00:	9c400115 	stw	r17,4(r19)
 6001e04:	29000115 	stw	r4,4(r5)
 6001e08:	2885883a 	add	r2,r5,r2
 6001e0c:	10c00117 	ldw	r3,4(r2)
 6001e10:	29400204 	addi	r5,r5,8
 6001e14:	a009883a 	mov	r4,r20
 6001e18:	18c00054 	ori	r3,r3,1
 6001e1c:	10c00115 	stw	r3,4(r2)
 6001e20:	60029dc0 	call	60029dc <_free_r>
 6001e24:	003fd306 	br	6001d74 <__alt_data_end+0xff001d74>
 6001e28:	017fff04 	movi	r5,-4
 6001e2c:	414a703a 	and	r5,r8,r5
 6001e30:	89800404 	addi	r6,r17,16
 6001e34:	8151883a 	add	r8,r16,r5
 6001e38:	4180590e 	bge	r8,r6,6001fa0 <_realloc_r+0x390>
 6001e3c:	1080004c 	andi	r2,r2,1
 6001e40:	103f9e1e 	bne	r2,zero,6001cbc <__alt_data_end+0xff001cbc>
 6001e44:	adbffe17 	ldw	r22,-8(r21)
 6001e48:	00bfff04 	movi	r2,-4
 6001e4c:	9dadc83a 	sub	r22,r19,r22
 6001e50:	b1800117 	ldw	r6,4(r22)
 6001e54:	3084703a 	and	r2,r6,r2
 6001e58:	20002026 	beq	r4,zero,6001edc <_realloc_r+0x2cc>
 6001e5c:	80af883a 	add	r23,r16,r2
 6001e60:	b96f883a 	add	r23,r23,r5
 6001e64:	21c05f26 	beq	r4,r7,6001fe4 <_realloc_r+0x3d4>
 6001e68:	b8c01c16 	blt	r23,r3,6001edc <_realloc_r+0x2cc>
 6001e6c:	20800317 	ldw	r2,12(r4)
 6001e70:	20c00217 	ldw	r3,8(r4)
 6001e74:	81bfff04 	addi	r6,r16,-4
 6001e78:	01000904 	movi	r4,36
 6001e7c:	18800315 	stw	r2,12(r3)
 6001e80:	10c00215 	stw	r3,8(r2)
 6001e84:	b0c00217 	ldw	r3,8(r22)
 6001e88:	b0800317 	ldw	r2,12(r22)
 6001e8c:	b4800204 	addi	r18,r22,8
 6001e90:	18800315 	stw	r2,12(r3)
 6001e94:	10c00215 	stw	r3,8(r2)
 6001e98:	21801b36 	bltu	r4,r6,6001f08 <_realloc_r+0x2f8>
 6001e9c:	008004c4 	movi	r2,19
 6001ea0:	1180352e 	bgeu	r2,r6,6001f78 <_realloc_r+0x368>
 6001ea4:	a8800017 	ldw	r2,0(r21)
 6001ea8:	b0800215 	stw	r2,8(r22)
 6001eac:	a8800117 	ldw	r2,4(r21)
 6001eb0:	b0800315 	stw	r2,12(r22)
 6001eb4:	008006c4 	movi	r2,27
 6001eb8:	11807f36 	bltu	r2,r6,60020b8 <_realloc_r+0x4a8>
 6001ebc:	b0800404 	addi	r2,r22,16
 6001ec0:	ad400204 	addi	r21,r21,8
 6001ec4:	00002d06 	br	6001f7c <_realloc_r+0x36c>
 6001ec8:	adbffe17 	ldw	r22,-8(r21)
 6001ecc:	00bfff04 	movi	r2,-4
 6001ed0:	9dadc83a 	sub	r22,r19,r22
 6001ed4:	b1000117 	ldw	r4,4(r22)
 6001ed8:	2084703a 	and	r2,r4,r2
 6001edc:	b03f7726 	beq	r22,zero,6001cbc <__alt_data_end+0xff001cbc>
 6001ee0:	80af883a 	add	r23,r16,r2
 6001ee4:	b8ff7516 	blt	r23,r3,6001cbc <__alt_data_end+0xff001cbc>
 6001ee8:	b0800317 	ldw	r2,12(r22)
 6001eec:	b0c00217 	ldw	r3,8(r22)
 6001ef0:	81bfff04 	addi	r6,r16,-4
 6001ef4:	01000904 	movi	r4,36
 6001ef8:	18800315 	stw	r2,12(r3)
 6001efc:	10c00215 	stw	r3,8(r2)
 6001f00:	b4800204 	addi	r18,r22,8
 6001f04:	21bfe52e 	bgeu	r4,r6,6001e9c <__alt_data_end+0xff001e9c>
 6001f08:	a80b883a 	mov	r5,r21
 6001f0c:	9009883a 	mov	r4,r18
 6001f10:	600198c0 	call	600198c <memmove>
 6001f14:	b821883a 	mov	r16,r23
 6001f18:	b027883a 	mov	r19,r22
 6001f1c:	003f8a06 	br	6001d48 <__alt_data_end+0xff001d48>
 6001f20:	300b883a 	mov	r5,r6
 6001f24:	dfc00917 	ldw	ra,36(sp)
 6001f28:	df000817 	ldw	fp,32(sp)
 6001f2c:	ddc00717 	ldw	r23,28(sp)
 6001f30:	dd800617 	ldw	r22,24(sp)
 6001f34:	dd400517 	ldw	r21,20(sp)
 6001f38:	dd000417 	ldw	r20,16(sp)
 6001f3c:	dcc00317 	ldw	r19,12(sp)
 6001f40:	dc800217 	ldw	r18,8(sp)
 6001f44:	dc400117 	ldw	r17,4(sp)
 6001f48:	dc000017 	ldw	r16,0(sp)
 6001f4c:	dec00a04 	addi	sp,sp,40
 6001f50:	6000f541 	jmpi	6000f54 <_malloc_r>
 6001f54:	a8c00017 	ldw	r3,0(r21)
 6001f58:	90c00015 	stw	r3,0(r18)
 6001f5c:	a8c00117 	ldw	r3,4(r21)
 6001f60:	90c00115 	stw	r3,4(r18)
 6001f64:	00c006c4 	movi	r3,27
 6001f68:	19804536 	bltu	r3,r6,6002080 <_realloc_r+0x470>
 6001f6c:	90800204 	addi	r2,r18,8
 6001f70:	a8c00204 	addi	r3,r21,8
 6001f74:	003f6306 	br	6001d04 <__alt_data_end+0xff001d04>
 6001f78:	9005883a 	mov	r2,r18
 6001f7c:	a8c00017 	ldw	r3,0(r21)
 6001f80:	b821883a 	mov	r16,r23
 6001f84:	b027883a 	mov	r19,r22
 6001f88:	10c00015 	stw	r3,0(r2)
 6001f8c:	a8c00117 	ldw	r3,4(r21)
 6001f90:	10c00115 	stw	r3,4(r2)
 6001f94:	a8c00217 	ldw	r3,8(r21)
 6001f98:	10c00215 	stw	r3,8(r2)
 6001f9c:	003f6a06 	br	6001d48 <__alt_data_end+0xff001d48>
 6001fa0:	9c67883a 	add	r19,r19,r17
 6001fa4:	4445c83a 	sub	r2,r8,r17
 6001fa8:	e4c00215 	stw	r19,8(fp)
 6001fac:	10800054 	ori	r2,r2,1
 6001fb0:	98800115 	stw	r2,4(r19)
 6001fb4:	a8bfff17 	ldw	r2,-4(r21)
 6001fb8:	a009883a 	mov	r4,r20
 6001fbc:	1080004c 	andi	r2,r2,1
 6001fc0:	1462b03a 	or	r17,r2,r17
 6001fc4:	ac7fff15 	stw	r17,-4(r21)
 6001fc8:	60037b40 	call	60037b4 <__malloc_unlock>
 6001fcc:	a805883a 	mov	r2,r21
 6001fd0:	003f6b06 	br	6001d80 <__alt_data_end+0xff001d80>
 6001fd4:	a80b883a 	mov	r5,r21
 6001fd8:	9009883a 	mov	r4,r18
 6001fdc:	600198c0 	call	600198c <memmove>
 6001fe0:	003f4e06 	br	6001d1c <__alt_data_end+0xff001d1c>
 6001fe4:	89000404 	addi	r4,r17,16
 6001fe8:	b93fbc16 	blt	r23,r4,6001edc <__alt_data_end+0xff001edc>
 6001fec:	b0800317 	ldw	r2,12(r22)
 6001ff0:	b0c00217 	ldw	r3,8(r22)
 6001ff4:	81bfff04 	addi	r6,r16,-4
 6001ff8:	01000904 	movi	r4,36
 6001ffc:	18800315 	stw	r2,12(r3)
 6002000:	10c00215 	stw	r3,8(r2)
 6002004:	b4800204 	addi	r18,r22,8
 6002008:	21804336 	bltu	r4,r6,6002118 <_realloc_r+0x508>
 600200c:	008004c4 	movi	r2,19
 6002010:	11803f2e 	bgeu	r2,r6,6002110 <_realloc_r+0x500>
 6002014:	a8800017 	ldw	r2,0(r21)
 6002018:	b0800215 	stw	r2,8(r22)
 600201c:	a8800117 	ldw	r2,4(r21)
 6002020:	b0800315 	stw	r2,12(r22)
 6002024:	008006c4 	movi	r2,27
 6002028:	11803f36 	bltu	r2,r6,6002128 <_realloc_r+0x518>
 600202c:	b0800404 	addi	r2,r22,16
 6002030:	ad400204 	addi	r21,r21,8
 6002034:	a8c00017 	ldw	r3,0(r21)
 6002038:	10c00015 	stw	r3,0(r2)
 600203c:	a8c00117 	ldw	r3,4(r21)
 6002040:	10c00115 	stw	r3,4(r2)
 6002044:	a8c00217 	ldw	r3,8(r21)
 6002048:	10c00215 	stw	r3,8(r2)
 600204c:	b447883a 	add	r3,r22,r17
 6002050:	bc45c83a 	sub	r2,r23,r17
 6002054:	e0c00215 	stw	r3,8(fp)
 6002058:	10800054 	ori	r2,r2,1
 600205c:	18800115 	stw	r2,4(r3)
 6002060:	b0800117 	ldw	r2,4(r22)
 6002064:	a009883a 	mov	r4,r20
 6002068:	1080004c 	andi	r2,r2,1
 600206c:	1462b03a 	or	r17,r2,r17
 6002070:	b4400115 	stw	r17,4(r22)
 6002074:	60037b40 	call	60037b4 <__malloc_unlock>
 6002078:	9005883a 	mov	r2,r18
 600207c:	003f4006 	br	6001d80 <__alt_data_end+0xff001d80>
 6002080:	a8c00217 	ldw	r3,8(r21)
 6002084:	90c00215 	stw	r3,8(r18)
 6002088:	a8c00317 	ldw	r3,12(r21)
 600208c:	90c00315 	stw	r3,12(r18)
 6002090:	30801126 	beq	r6,r2,60020d8 <_realloc_r+0x4c8>
 6002094:	90800404 	addi	r2,r18,16
 6002098:	a8c00404 	addi	r3,r21,16
 600209c:	003f1906 	br	6001d04 <__alt_data_end+0xff001d04>
 60020a0:	90ffff17 	ldw	r3,-4(r18)
 60020a4:	00bfff04 	movi	r2,-4
 60020a8:	a825883a 	mov	r18,r21
 60020ac:	1884703a 	and	r2,r3,r2
 60020b0:	80a1883a 	add	r16,r16,r2
 60020b4:	003f2406 	br	6001d48 <__alt_data_end+0xff001d48>
 60020b8:	a8800217 	ldw	r2,8(r21)
 60020bc:	b0800415 	stw	r2,16(r22)
 60020c0:	a8800317 	ldw	r2,12(r21)
 60020c4:	b0800515 	stw	r2,20(r22)
 60020c8:	31000a26 	beq	r6,r4,60020f4 <_realloc_r+0x4e4>
 60020cc:	b0800604 	addi	r2,r22,24
 60020d0:	ad400404 	addi	r21,r21,16
 60020d4:	003fa906 	br	6001f7c <__alt_data_end+0xff001f7c>
 60020d8:	a9000417 	ldw	r4,16(r21)
 60020dc:	90800604 	addi	r2,r18,24
 60020e0:	a8c00604 	addi	r3,r21,24
 60020e4:	91000415 	stw	r4,16(r18)
 60020e8:	a9000517 	ldw	r4,20(r21)
 60020ec:	91000515 	stw	r4,20(r18)
 60020f0:	003f0406 	br	6001d04 <__alt_data_end+0xff001d04>
 60020f4:	a8c00417 	ldw	r3,16(r21)
 60020f8:	ad400604 	addi	r21,r21,24
 60020fc:	b0800804 	addi	r2,r22,32
 6002100:	b0c00615 	stw	r3,24(r22)
 6002104:	a8ffff17 	ldw	r3,-4(r21)
 6002108:	b0c00715 	stw	r3,28(r22)
 600210c:	003f9b06 	br	6001f7c <__alt_data_end+0xff001f7c>
 6002110:	9005883a 	mov	r2,r18
 6002114:	003fc706 	br	6002034 <__alt_data_end+0xff002034>
 6002118:	a80b883a 	mov	r5,r21
 600211c:	9009883a 	mov	r4,r18
 6002120:	600198c0 	call	600198c <memmove>
 6002124:	003fc906 	br	600204c <__alt_data_end+0xff00204c>
 6002128:	a8800217 	ldw	r2,8(r21)
 600212c:	b0800415 	stw	r2,16(r22)
 6002130:	a8800317 	ldw	r2,12(r21)
 6002134:	b0800515 	stw	r2,20(r22)
 6002138:	31000726 	beq	r6,r4,6002158 <_realloc_r+0x548>
 600213c:	b0800604 	addi	r2,r22,24
 6002140:	ad400404 	addi	r21,r21,16
 6002144:	003fbb06 	br	6002034 <__alt_data_end+0xff002034>
 6002148:	a009883a 	mov	r4,r20
 600214c:	60037b40 	call	60037b4 <__malloc_unlock>
 6002150:	0005883a 	mov	r2,zero
 6002154:	003f0a06 	br	6001d80 <__alt_data_end+0xff001d80>
 6002158:	a8c00417 	ldw	r3,16(r21)
 600215c:	ad400604 	addi	r21,r21,24
 6002160:	b0800804 	addi	r2,r22,32
 6002164:	b0c00615 	stw	r3,24(r22)
 6002168:	a8ffff17 	ldw	r3,-4(r21)
 600216c:	b0c00715 	stw	r3,28(r22)
 6002170:	003fb006 	br	6002034 <__alt_data_end+0xff002034>

06002174 <_sbrk_r>:
 6002174:	defffd04 	addi	sp,sp,-12
 6002178:	dc000015 	stw	r16,0(sp)
 600217c:	04018074 	movhi	r16,1537
 6002180:	dc400115 	stw	r17,4(sp)
 6002184:	8424c104 	addi	r16,r16,-27900
 6002188:	2023883a 	mov	r17,r4
 600218c:	2809883a 	mov	r4,r5
 6002190:	dfc00215 	stw	ra,8(sp)
 6002194:	80000015 	stw	zero,0(r16)
 6002198:	60039740 	call	6003974 <sbrk>
 600219c:	00ffffc4 	movi	r3,-1
 60021a0:	10c00526 	beq	r2,r3,60021b8 <_sbrk_r+0x44>
 60021a4:	dfc00217 	ldw	ra,8(sp)
 60021a8:	dc400117 	ldw	r17,4(sp)
 60021ac:	dc000017 	ldw	r16,0(sp)
 60021b0:	dec00304 	addi	sp,sp,12
 60021b4:	f800283a 	ret
 60021b8:	80c00017 	ldw	r3,0(r16)
 60021bc:	183ff926 	beq	r3,zero,60021a4 <__alt_data_end+0xff0021a4>
 60021c0:	88c00015 	stw	r3,0(r17)
 60021c4:	003ff706 	br	60021a4 <__alt_data_end+0xff0021a4>

060021c8 <__sread>:
 60021c8:	defffe04 	addi	sp,sp,-8
 60021cc:	dc000015 	stw	r16,0(sp)
 60021d0:	2821883a 	mov	r16,r5
 60021d4:	2940038f 	ldh	r5,14(r5)
 60021d8:	dfc00115 	stw	ra,4(sp)
 60021dc:	6002f080 	call	6002f08 <_read_r>
 60021e0:	10000716 	blt	r2,zero,6002200 <__sread+0x38>
 60021e4:	80c01417 	ldw	r3,80(r16)
 60021e8:	1887883a 	add	r3,r3,r2
 60021ec:	80c01415 	stw	r3,80(r16)
 60021f0:	dfc00117 	ldw	ra,4(sp)
 60021f4:	dc000017 	ldw	r16,0(sp)
 60021f8:	dec00204 	addi	sp,sp,8
 60021fc:	f800283a 	ret
 6002200:	80c0030b 	ldhu	r3,12(r16)
 6002204:	18fbffcc 	andi	r3,r3,61439
 6002208:	80c0030d 	sth	r3,12(r16)
 600220c:	dfc00117 	ldw	ra,4(sp)
 6002210:	dc000017 	ldw	r16,0(sp)
 6002214:	dec00204 	addi	sp,sp,8
 6002218:	f800283a 	ret

0600221c <__seofread>:
 600221c:	0005883a 	mov	r2,zero
 6002220:	f800283a 	ret

06002224 <__swrite>:
 6002224:	2880030b 	ldhu	r2,12(r5)
 6002228:	defffb04 	addi	sp,sp,-20
 600222c:	dcc00315 	stw	r19,12(sp)
 6002230:	dc800215 	stw	r18,8(sp)
 6002234:	dc400115 	stw	r17,4(sp)
 6002238:	dc000015 	stw	r16,0(sp)
 600223c:	dfc00415 	stw	ra,16(sp)
 6002240:	10c0400c 	andi	r3,r2,256
 6002244:	2821883a 	mov	r16,r5
 6002248:	2023883a 	mov	r17,r4
 600224c:	3025883a 	mov	r18,r6
 6002250:	3827883a 	mov	r19,r7
 6002254:	18000526 	beq	r3,zero,600226c <__swrite+0x48>
 6002258:	2940038f 	ldh	r5,14(r5)
 600225c:	01c00084 	movi	r7,2
 6002260:	000d883a 	mov	r6,zero
 6002264:	6002cec0 	call	6002cec <_lseek_r>
 6002268:	8080030b 	ldhu	r2,12(r16)
 600226c:	8140038f 	ldh	r5,14(r16)
 6002270:	10bbffcc 	andi	r2,r2,61439
 6002274:	980f883a 	mov	r7,r19
 6002278:	900d883a 	mov	r6,r18
 600227c:	8809883a 	mov	r4,r17
 6002280:	8080030d 	sth	r2,12(r16)
 6002284:	dfc00417 	ldw	ra,16(sp)
 6002288:	dcc00317 	ldw	r19,12(sp)
 600228c:	dc800217 	ldw	r18,8(sp)
 6002290:	dc400117 	ldw	r17,4(sp)
 6002294:	dc000017 	ldw	r16,0(sp)
 6002298:	dec00504 	addi	sp,sp,20
 600229c:	60023041 	jmpi	6002304 <_write_r>

060022a0 <__sseek>:
 60022a0:	defffe04 	addi	sp,sp,-8
 60022a4:	dc000015 	stw	r16,0(sp)
 60022a8:	2821883a 	mov	r16,r5
 60022ac:	2940038f 	ldh	r5,14(r5)
 60022b0:	dfc00115 	stw	ra,4(sp)
 60022b4:	6002cec0 	call	6002cec <_lseek_r>
 60022b8:	00ffffc4 	movi	r3,-1
 60022bc:	10c00826 	beq	r2,r3,60022e0 <__sseek+0x40>
 60022c0:	80c0030b 	ldhu	r3,12(r16)
 60022c4:	80801415 	stw	r2,80(r16)
 60022c8:	18c40014 	ori	r3,r3,4096
 60022cc:	80c0030d 	sth	r3,12(r16)
 60022d0:	dfc00117 	ldw	ra,4(sp)
 60022d4:	dc000017 	ldw	r16,0(sp)
 60022d8:	dec00204 	addi	sp,sp,8
 60022dc:	f800283a 	ret
 60022e0:	80c0030b 	ldhu	r3,12(r16)
 60022e4:	18fbffcc 	andi	r3,r3,61439
 60022e8:	80c0030d 	sth	r3,12(r16)
 60022ec:	dfc00117 	ldw	ra,4(sp)
 60022f0:	dc000017 	ldw	r16,0(sp)
 60022f4:	dec00204 	addi	sp,sp,8
 60022f8:	f800283a 	ret

060022fc <__sclose>:
 60022fc:	2940038f 	ldh	r5,14(r5)
 6002300:	60024b81 	jmpi	60024b8 <_close_r>

06002304 <_write_r>:
 6002304:	defffd04 	addi	sp,sp,-12
 6002308:	2805883a 	mov	r2,r5
 600230c:	dc000015 	stw	r16,0(sp)
 6002310:	04018074 	movhi	r16,1537
 6002314:	dc400115 	stw	r17,4(sp)
 6002318:	300b883a 	mov	r5,r6
 600231c:	8424c104 	addi	r16,r16,-27900
 6002320:	2023883a 	mov	r17,r4
 6002324:	380d883a 	mov	r6,r7
 6002328:	1009883a 	mov	r4,r2
 600232c:	dfc00215 	stw	ra,8(sp)
 6002330:	80000015 	stw	zero,0(r16)
 6002334:	6003a600 	call	6003a60 <write>
 6002338:	00ffffc4 	movi	r3,-1
 600233c:	10c00526 	beq	r2,r3,6002354 <_write_r+0x50>
 6002340:	dfc00217 	ldw	ra,8(sp)
 6002344:	dc400117 	ldw	r17,4(sp)
 6002348:	dc000017 	ldw	r16,0(sp)
 600234c:	dec00304 	addi	sp,sp,12
 6002350:	f800283a 	ret
 6002354:	80c00017 	ldw	r3,0(r16)
 6002358:	183ff926 	beq	r3,zero,6002340 <__alt_data_end+0xff002340>
 600235c:	88c00015 	stw	r3,0(r17)
 6002360:	003ff706 	br	6002340 <__alt_data_end+0xff002340>

06002364 <__swsetup_r>:
 6002364:	00818034 	movhi	r2,1536
 6002368:	defffd04 	addi	sp,sp,-12
 600236c:	109e0b04 	addi	r2,r2,30764
 6002370:	dc400115 	stw	r17,4(sp)
 6002374:	2023883a 	mov	r17,r4
 6002378:	11000017 	ldw	r4,0(r2)
 600237c:	dc000015 	stw	r16,0(sp)
 6002380:	dfc00215 	stw	ra,8(sp)
 6002384:	2821883a 	mov	r16,r5
 6002388:	20000226 	beq	r4,zero,6002394 <__swsetup_r+0x30>
 600238c:	20800e17 	ldw	r2,56(r4)
 6002390:	10003126 	beq	r2,zero,6002458 <__swsetup_r+0xf4>
 6002394:	8080030b 	ldhu	r2,12(r16)
 6002398:	10c0020c 	andi	r3,r2,8
 600239c:	1009883a 	mov	r4,r2
 60023a0:	18000f26 	beq	r3,zero,60023e0 <__swsetup_r+0x7c>
 60023a4:	80c00417 	ldw	r3,16(r16)
 60023a8:	18001526 	beq	r3,zero,6002400 <__swsetup_r+0x9c>
 60023ac:	1100004c 	andi	r4,r2,1
 60023b0:	20001c1e 	bne	r4,zero,6002424 <__swsetup_r+0xc0>
 60023b4:	1080008c 	andi	r2,r2,2
 60023b8:	1000291e 	bne	r2,zero,6002460 <__swsetup_r+0xfc>
 60023bc:	80800517 	ldw	r2,20(r16)
 60023c0:	80800215 	stw	r2,8(r16)
 60023c4:	18001c26 	beq	r3,zero,6002438 <__swsetup_r+0xd4>
 60023c8:	0005883a 	mov	r2,zero
 60023cc:	dfc00217 	ldw	ra,8(sp)
 60023d0:	dc400117 	ldw	r17,4(sp)
 60023d4:	dc000017 	ldw	r16,0(sp)
 60023d8:	dec00304 	addi	sp,sp,12
 60023dc:	f800283a 	ret
 60023e0:	2080040c 	andi	r2,r4,16
 60023e4:	10002e26 	beq	r2,zero,60024a0 <__swsetup_r+0x13c>
 60023e8:	2080010c 	andi	r2,r4,4
 60023ec:	10001e1e 	bne	r2,zero,6002468 <__swsetup_r+0x104>
 60023f0:	80c00417 	ldw	r3,16(r16)
 60023f4:	20800214 	ori	r2,r4,8
 60023f8:	8080030d 	sth	r2,12(r16)
 60023fc:	183feb1e 	bne	r3,zero,60023ac <__alt_data_end+0xff0023ac>
 6002400:	1100a00c 	andi	r4,r2,640
 6002404:	01408004 	movi	r5,512
 6002408:	217fe826 	beq	r4,r5,60023ac <__alt_data_end+0xff0023ac>
 600240c:	800b883a 	mov	r5,r16
 6002410:	8809883a 	mov	r4,r17
 6002414:	6002d4c0 	call	6002d4c <__smakebuf_r>
 6002418:	8080030b 	ldhu	r2,12(r16)
 600241c:	80c00417 	ldw	r3,16(r16)
 6002420:	003fe206 	br	60023ac <__alt_data_end+0xff0023ac>
 6002424:	80800517 	ldw	r2,20(r16)
 6002428:	80000215 	stw	zero,8(r16)
 600242c:	0085c83a 	sub	r2,zero,r2
 6002430:	80800615 	stw	r2,24(r16)
 6002434:	183fe41e 	bne	r3,zero,60023c8 <__alt_data_end+0xff0023c8>
 6002438:	80c0030b 	ldhu	r3,12(r16)
 600243c:	0005883a 	mov	r2,zero
 6002440:	1900200c 	andi	r4,r3,128
 6002444:	203fe126 	beq	r4,zero,60023cc <__alt_data_end+0xff0023cc>
 6002448:	18c01014 	ori	r3,r3,64
 600244c:	80c0030d 	sth	r3,12(r16)
 6002450:	00bfffc4 	movi	r2,-1
 6002454:	003fdd06 	br	60023cc <__alt_data_end+0xff0023cc>
 6002458:	60008c00 	call	60008c0 <__sinit>
 600245c:	003fcd06 	br	6002394 <__alt_data_end+0xff002394>
 6002460:	0005883a 	mov	r2,zero
 6002464:	003fd606 	br	60023c0 <__alt_data_end+0xff0023c0>
 6002468:	81400c17 	ldw	r5,48(r16)
 600246c:	28000626 	beq	r5,zero,6002488 <__swsetup_r+0x124>
 6002470:	80801004 	addi	r2,r16,64
 6002474:	28800326 	beq	r5,r2,6002484 <__swsetup_r+0x120>
 6002478:	8809883a 	mov	r4,r17
 600247c:	60029dc0 	call	60029dc <_free_r>
 6002480:	8100030b 	ldhu	r4,12(r16)
 6002484:	80000c15 	stw	zero,48(r16)
 6002488:	80c00417 	ldw	r3,16(r16)
 600248c:	00bff6c4 	movi	r2,-37
 6002490:	1108703a 	and	r4,r2,r4
 6002494:	80000115 	stw	zero,4(r16)
 6002498:	80c00015 	stw	r3,0(r16)
 600249c:	003fd506 	br	60023f4 <__alt_data_end+0xff0023f4>
 60024a0:	00800244 	movi	r2,9
 60024a4:	88800015 	stw	r2,0(r17)
 60024a8:	20801014 	ori	r2,r4,64
 60024ac:	8080030d 	sth	r2,12(r16)
 60024b0:	00bfffc4 	movi	r2,-1
 60024b4:	003fc506 	br	60023cc <__alt_data_end+0xff0023cc>

060024b8 <_close_r>:
 60024b8:	defffd04 	addi	sp,sp,-12
 60024bc:	dc000015 	stw	r16,0(sp)
 60024c0:	04018074 	movhi	r16,1537
 60024c4:	dc400115 	stw	r17,4(sp)
 60024c8:	8424c104 	addi	r16,r16,-27900
 60024cc:	2023883a 	mov	r17,r4
 60024d0:	2809883a 	mov	r4,r5
 60024d4:	dfc00215 	stw	ra,8(sp)
 60024d8:	80000015 	stw	zero,0(r16)
 60024dc:	60032080 	call	6003208 <close>
 60024e0:	00ffffc4 	movi	r3,-1
 60024e4:	10c00526 	beq	r2,r3,60024fc <_close_r+0x44>
 60024e8:	dfc00217 	ldw	ra,8(sp)
 60024ec:	dc400117 	ldw	r17,4(sp)
 60024f0:	dc000017 	ldw	r16,0(sp)
 60024f4:	dec00304 	addi	sp,sp,12
 60024f8:	f800283a 	ret
 60024fc:	80c00017 	ldw	r3,0(r16)
 6002500:	183ff926 	beq	r3,zero,60024e8 <__alt_data_end+0xff0024e8>
 6002504:	88c00015 	stw	r3,0(r17)
 6002508:	003ff706 	br	60024e8 <__alt_data_end+0xff0024e8>

0600250c <_fclose_r>:
 600250c:	28003926 	beq	r5,zero,60025f4 <_fclose_r+0xe8>
 6002510:	defffc04 	addi	sp,sp,-16
 6002514:	dc400115 	stw	r17,4(sp)
 6002518:	dc000015 	stw	r16,0(sp)
 600251c:	dfc00315 	stw	ra,12(sp)
 6002520:	dc800215 	stw	r18,8(sp)
 6002524:	2023883a 	mov	r17,r4
 6002528:	2821883a 	mov	r16,r5
 600252c:	20000226 	beq	r4,zero,6002538 <_fclose_r+0x2c>
 6002530:	20800e17 	ldw	r2,56(r4)
 6002534:	10002726 	beq	r2,zero,60025d4 <_fclose_r+0xc8>
 6002538:	8080030f 	ldh	r2,12(r16)
 600253c:	1000071e 	bne	r2,zero,600255c <_fclose_r+0x50>
 6002540:	0005883a 	mov	r2,zero
 6002544:	dfc00317 	ldw	ra,12(sp)
 6002548:	dc800217 	ldw	r18,8(sp)
 600254c:	dc400117 	ldw	r17,4(sp)
 6002550:	dc000017 	ldw	r16,0(sp)
 6002554:	dec00404 	addi	sp,sp,16
 6002558:	f800283a 	ret
 600255c:	800b883a 	mov	r5,r16
 6002560:	8809883a 	mov	r4,r17
 6002564:	60026100 	call	6002610 <__sflush_r>
 6002568:	1025883a 	mov	r18,r2
 600256c:	80800b17 	ldw	r2,44(r16)
 6002570:	10000426 	beq	r2,zero,6002584 <_fclose_r+0x78>
 6002574:	81400717 	ldw	r5,28(r16)
 6002578:	8809883a 	mov	r4,r17
 600257c:	103ee83a 	callr	r2
 6002580:	10001616 	blt	r2,zero,60025dc <_fclose_r+0xd0>
 6002584:	8080030b 	ldhu	r2,12(r16)
 6002588:	1080200c 	andi	r2,r2,128
 600258c:	1000151e 	bne	r2,zero,60025e4 <_fclose_r+0xd8>
 6002590:	81400c17 	ldw	r5,48(r16)
 6002594:	28000526 	beq	r5,zero,60025ac <_fclose_r+0xa0>
 6002598:	80801004 	addi	r2,r16,64
 600259c:	28800226 	beq	r5,r2,60025a8 <_fclose_r+0x9c>
 60025a0:	8809883a 	mov	r4,r17
 60025a4:	60029dc0 	call	60029dc <_free_r>
 60025a8:	80000c15 	stw	zero,48(r16)
 60025ac:	81401117 	ldw	r5,68(r16)
 60025b0:	28000326 	beq	r5,zero,60025c0 <_fclose_r+0xb4>
 60025b4:	8809883a 	mov	r4,r17
 60025b8:	60029dc0 	call	60029dc <_free_r>
 60025bc:	80001115 	stw	zero,68(r16)
 60025c0:	60008d00 	call	60008d0 <__sfp_lock_acquire>
 60025c4:	8000030d 	sth	zero,12(r16)
 60025c8:	60008d40 	call	60008d4 <__sfp_lock_release>
 60025cc:	9005883a 	mov	r2,r18
 60025d0:	003fdc06 	br	6002544 <__alt_data_end+0xff002544>
 60025d4:	60008c00 	call	60008c0 <__sinit>
 60025d8:	003fd706 	br	6002538 <__alt_data_end+0xff002538>
 60025dc:	04bfffc4 	movi	r18,-1
 60025e0:	003fe806 	br	6002584 <__alt_data_end+0xff002584>
 60025e4:	81400417 	ldw	r5,16(r16)
 60025e8:	8809883a 	mov	r4,r17
 60025ec:	60029dc0 	call	60029dc <_free_r>
 60025f0:	003fe706 	br	6002590 <__alt_data_end+0xff002590>
 60025f4:	0005883a 	mov	r2,zero
 60025f8:	f800283a 	ret

060025fc <fclose>:
 60025fc:	00818034 	movhi	r2,1536
 6002600:	109e0b04 	addi	r2,r2,30764
 6002604:	200b883a 	mov	r5,r4
 6002608:	11000017 	ldw	r4,0(r2)
 600260c:	600250c1 	jmpi	600250c <_fclose_r>

06002610 <__sflush_r>:
 6002610:	2880030b 	ldhu	r2,12(r5)
 6002614:	defffb04 	addi	sp,sp,-20
 6002618:	dcc00315 	stw	r19,12(sp)
 600261c:	dc400115 	stw	r17,4(sp)
 6002620:	dfc00415 	stw	ra,16(sp)
 6002624:	dc800215 	stw	r18,8(sp)
 6002628:	dc000015 	stw	r16,0(sp)
 600262c:	10c0020c 	andi	r3,r2,8
 6002630:	2823883a 	mov	r17,r5
 6002634:	2027883a 	mov	r19,r4
 6002638:	1800311e 	bne	r3,zero,6002700 <__sflush_r+0xf0>
 600263c:	28c00117 	ldw	r3,4(r5)
 6002640:	10820014 	ori	r2,r2,2048
 6002644:	2880030d 	sth	r2,12(r5)
 6002648:	00c04b0e 	bge	zero,r3,6002778 <__sflush_r+0x168>
 600264c:	8a000a17 	ldw	r8,40(r17)
 6002650:	40002326 	beq	r8,zero,60026e0 <__sflush_r+0xd0>
 6002654:	9c000017 	ldw	r16,0(r19)
 6002658:	10c4000c 	andi	r3,r2,4096
 600265c:	98000015 	stw	zero,0(r19)
 6002660:	18004826 	beq	r3,zero,6002784 <__sflush_r+0x174>
 6002664:	89801417 	ldw	r6,80(r17)
 6002668:	10c0010c 	andi	r3,r2,4
 600266c:	18000626 	beq	r3,zero,6002688 <__sflush_r+0x78>
 6002670:	88c00117 	ldw	r3,4(r17)
 6002674:	88800c17 	ldw	r2,48(r17)
 6002678:	30cdc83a 	sub	r6,r6,r3
 600267c:	10000226 	beq	r2,zero,6002688 <__sflush_r+0x78>
 6002680:	88800f17 	ldw	r2,60(r17)
 6002684:	308dc83a 	sub	r6,r6,r2
 6002688:	89400717 	ldw	r5,28(r17)
 600268c:	000f883a 	mov	r7,zero
 6002690:	9809883a 	mov	r4,r19
 6002694:	403ee83a 	callr	r8
 6002698:	00ffffc4 	movi	r3,-1
 600269c:	10c04426 	beq	r2,r3,60027b0 <__sflush_r+0x1a0>
 60026a0:	88c0030b 	ldhu	r3,12(r17)
 60026a4:	89000417 	ldw	r4,16(r17)
 60026a8:	88000115 	stw	zero,4(r17)
 60026ac:	197dffcc 	andi	r5,r3,63487
 60026b0:	8940030d 	sth	r5,12(r17)
 60026b4:	89000015 	stw	r4,0(r17)
 60026b8:	18c4000c 	andi	r3,r3,4096
 60026bc:	18002c1e 	bne	r3,zero,6002770 <__sflush_r+0x160>
 60026c0:	89400c17 	ldw	r5,48(r17)
 60026c4:	9c000015 	stw	r16,0(r19)
 60026c8:	28000526 	beq	r5,zero,60026e0 <__sflush_r+0xd0>
 60026cc:	88801004 	addi	r2,r17,64
 60026d0:	28800226 	beq	r5,r2,60026dc <__sflush_r+0xcc>
 60026d4:	9809883a 	mov	r4,r19
 60026d8:	60029dc0 	call	60029dc <_free_r>
 60026dc:	88000c15 	stw	zero,48(r17)
 60026e0:	0005883a 	mov	r2,zero
 60026e4:	dfc00417 	ldw	ra,16(sp)
 60026e8:	dcc00317 	ldw	r19,12(sp)
 60026ec:	dc800217 	ldw	r18,8(sp)
 60026f0:	dc400117 	ldw	r17,4(sp)
 60026f4:	dc000017 	ldw	r16,0(sp)
 60026f8:	dec00504 	addi	sp,sp,20
 60026fc:	f800283a 	ret
 6002700:	2c800417 	ldw	r18,16(r5)
 6002704:	903ff626 	beq	r18,zero,60026e0 <__alt_data_end+0xff0026e0>
 6002708:	2c000017 	ldw	r16,0(r5)
 600270c:	108000cc 	andi	r2,r2,3
 6002710:	2c800015 	stw	r18,0(r5)
 6002714:	84a1c83a 	sub	r16,r16,r18
 6002718:	1000131e 	bne	r2,zero,6002768 <__sflush_r+0x158>
 600271c:	28800517 	ldw	r2,20(r5)
 6002720:	88800215 	stw	r2,8(r17)
 6002724:	04000316 	blt	zero,r16,6002734 <__sflush_r+0x124>
 6002728:	003fed06 	br	60026e0 <__alt_data_end+0xff0026e0>
 600272c:	90a5883a 	add	r18,r18,r2
 6002730:	043feb0e 	bge	zero,r16,60026e0 <__alt_data_end+0xff0026e0>
 6002734:	88800917 	ldw	r2,36(r17)
 6002738:	89400717 	ldw	r5,28(r17)
 600273c:	800f883a 	mov	r7,r16
 6002740:	900d883a 	mov	r6,r18
 6002744:	9809883a 	mov	r4,r19
 6002748:	103ee83a 	callr	r2
 600274c:	80a1c83a 	sub	r16,r16,r2
 6002750:	00bff616 	blt	zero,r2,600272c <__alt_data_end+0xff00272c>
 6002754:	88c0030b 	ldhu	r3,12(r17)
 6002758:	00bfffc4 	movi	r2,-1
 600275c:	18c01014 	ori	r3,r3,64
 6002760:	88c0030d 	sth	r3,12(r17)
 6002764:	003fdf06 	br	60026e4 <__alt_data_end+0xff0026e4>
 6002768:	0005883a 	mov	r2,zero
 600276c:	003fec06 	br	6002720 <__alt_data_end+0xff002720>
 6002770:	88801415 	stw	r2,80(r17)
 6002774:	003fd206 	br	60026c0 <__alt_data_end+0xff0026c0>
 6002778:	28c00f17 	ldw	r3,60(r5)
 600277c:	00ffb316 	blt	zero,r3,600264c <__alt_data_end+0xff00264c>
 6002780:	003fd706 	br	60026e0 <__alt_data_end+0xff0026e0>
 6002784:	89400717 	ldw	r5,28(r17)
 6002788:	000d883a 	mov	r6,zero
 600278c:	01c00044 	movi	r7,1
 6002790:	9809883a 	mov	r4,r19
 6002794:	403ee83a 	callr	r8
 6002798:	100d883a 	mov	r6,r2
 600279c:	00bfffc4 	movi	r2,-1
 60027a0:	30801426 	beq	r6,r2,60027f4 <__sflush_r+0x1e4>
 60027a4:	8880030b 	ldhu	r2,12(r17)
 60027a8:	8a000a17 	ldw	r8,40(r17)
 60027ac:	003fae06 	br	6002668 <__alt_data_end+0xff002668>
 60027b0:	98c00017 	ldw	r3,0(r19)
 60027b4:	183fba26 	beq	r3,zero,60026a0 <__alt_data_end+0xff0026a0>
 60027b8:	01000744 	movi	r4,29
 60027bc:	19000626 	beq	r3,r4,60027d8 <__sflush_r+0x1c8>
 60027c0:	01000584 	movi	r4,22
 60027c4:	19000426 	beq	r3,r4,60027d8 <__sflush_r+0x1c8>
 60027c8:	88c0030b 	ldhu	r3,12(r17)
 60027cc:	18c01014 	ori	r3,r3,64
 60027d0:	88c0030d 	sth	r3,12(r17)
 60027d4:	003fc306 	br	60026e4 <__alt_data_end+0xff0026e4>
 60027d8:	8880030b 	ldhu	r2,12(r17)
 60027dc:	88c00417 	ldw	r3,16(r17)
 60027e0:	88000115 	stw	zero,4(r17)
 60027e4:	10bdffcc 	andi	r2,r2,63487
 60027e8:	8880030d 	sth	r2,12(r17)
 60027ec:	88c00015 	stw	r3,0(r17)
 60027f0:	003fb306 	br	60026c0 <__alt_data_end+0xff0026c0>
 60027f4:	98800017 	ldw	r2,0(r19)
 60027f8:	103fea26 	beq	r2,zero,60027a4 <__alt_data_end+0xff0027a4>
 60027fc:	00c00744 	movi	r3,29
 6002800:	10c00226 	beq	r2,r3,600280c <__sflush_r+0x1fc>
 6002804:	00c00584 	movi	r3,22
 6002808:	10c0031e 	bne	r2,r3,6002818 <__sflush_r+0x208>
 600280c:	9c000015 	stw	r16,0(r19)
 6002810:	0005883a 	mov	r2,zero
 6002814:	003fb306 	br	60026e4 <__alt_data_end+0xff0026e4>
 6002818:	88c0030b 	ldhu	r3,12(r17)
 600281c:	3005883a 	mov	r2,r6
 6002820:	18c01014 	ori	r3,r3,64
 6002824:	88c0030d 	sth	r3,12(r17)
 6002828:	003fae06 	br	60026e4 <__alt_data_end+0xff0026e4>

0600282c <_fflush_r>:
 600282c:	defffd04 	addi	sp,sp,-12
 6002830:	dc000115 	stw	r16,4(sp)
 6002834:	dfc00215 	stw	ra,8(sp)
 6002838:	2021883a 	mov	r16,r4
 600283c:	20000226 	beq	r4,zero,6002848 <_fflush_r+0x1c>
 6002840:	20800e17 	ldw	r2,56(r4)
 6002844:	10000c26 	beq	r2,zero,6002878 <_fflush_r+0x4c>
 6002848:	2880030f 	ldh	r2,12(r5)
 600284c:	1000051e 	bne	r2,zero,6002864 <_fflush_r+0x38>
 6002850:	0005883a 	mov	r2,zero
 6002854:	dfc00217 	ldw	ra,8(sp)
 6002858:	dc000117 	ldw	r16,4(sp)
 600285c:	dec00304 	addi	sp,sp,12
 6002860:	f800283a 	ret
 6002864:	8009883a 	mov	r4,r16
 6002868:	dfc00217 	ldw	ra,8(sp)
 600286c:	dc000117 	ldw	r16,4(sp)
 6002870:	dec00304 	addi	sp,sp,12
 6002874:	60026101 	jmpi	6002610 <__sflush_r>
 6002878:	d9400015 	stw	r5,0(sp)
 600287c:	60008c00 	call	60008c0 <__sinit>
 6002880:	d9400017 	ldw	r5,0(sp)
 6002884:	003ff006 	br	6002848 <__alt_data_end+0xff002848>

06002888 <fflush>:
 6002888:	20000526 	beq	r4,zero,60028a0 <fflush+0x18>
 600288c:	00818034 	movhi	r2,1536
 6002890:	109e0b04 	addi	r2,r2,30764
 6002894:	200b883a 	mov	r5,r4
 6002898:	11000017 	ldw	r4,0(r2)
 600289c:	600282c1 	jmpi	600282c <_fflush_r>
 60028a0:	00818034 	movhi	r2,1536
 60028a4:	109e0a04 	addi	r2,r2,30760
 60028a8:	11000017 	ldw	r4,0(r2)
 60028ac:	01418034 	movhi	r5,1536
 60028b0:	294a0b04 	addi	r5,r5,10284
 60028b4:	6000e901 	jmpi	6000e90 <_fwalk_reent>

060028b8 <_malloc_trim_r>:
 60028b8:	defffb04 	addi	sp,sp,-20
 60028bc:	dcc00315 	stw	r19,12(sp)
 60028c0:	04c18034 	movhi	r19,1536
 60028c4:	dc800215 	stw	r18,8(sp)
 60028c8:	dc400115 	stw	r17,4(sp)
 60028cc:	dc000015 	stw	r16,0(sp)
 60028d0:	dfc00415 	stw	ra,16(sp)
 60028d4:	2821883a 	mov	r16,r5
 60028d8:	9cd87f04 	addi	r19,r19,25084
 60028dc:	2025883a 	mov	r18,r4
 60028e0:	60037900 	call	6003790 <__malloc_lock>
 60028e4:	98800217 	ldw	r2,8(r19)
 60028e8:	14400117 	ldw	r17,4(r2)
 60028ec:	00bfff04 	movi	r2,-4
 60028f0:	88a2703a 	and	r17,r17,r2
 60028f4:	8c21c83a 	sub	r16,r17,r16
 60028f8:	8403fbc4 	addi	r16,r16,4079
 60028fc:	8020d33a 	srli	r16,r16,12
 6002900:	0083ffc4 	movi	r2,4095
 6002904:	843fffc4 	addi	r16,r16,-1
 6002908:	8020933a 	slli	r16,r16,12
 600290c:	1400060e 	bge	r2,r16,6002928 <_malloc_trim_r+0x70>
 6002910:	000b883a 	mov	r5,zero
 6002914:	9009883a 	mov	r4,r18
 6002918:	60021740 	call	6002174 <_sbrk_r>
 600291c:	98c00217 	ldw	r3,8(r19)
 6002920:	1c47883a 	add	r3,r3,r17
 6002924:	10c00a26 	beq	r2,r3,6002950 <_malloc_trim_r+0x98>
 6002928:	9009883a 	mov	r4,r18
 600292c:	60037b40 	call	60037b4 <__malloc_unlock>
 6002930:	0005883a 	mov	r2,zero
 6002934:	dfc00417 	ldw	ra,16(sp)
 6002938:	dcc00317 	ldw	r19,12(sp)
 600293c:	dc800217 	ldw	r18,8(sp)
 6002940:	dc400117 	ldw	r17,4(sp)
 6002944:	dc000017 	ldw	r16,0(sp)
 6002948:	dec00504 	addi	sp,sp,20
 600294c:	f800283a 	ret
 6002950:	040bc83a 	sub	r5,zero,r16
 6002954:	9009883a 	mov	r4,r18
 6002958:	60021740 	call	6002174 <_sbrk_r>
 600295c:	00ffffc4 	movi	r3,-1
 6002960:	10c00d26 	beq	r2,r3,6002998 <_malloc_trim_r+0xe0>
 6002964:	00c18074 	movhi	r3,1537
 6002968:	18e4c904 	addi	r3,r3,-27868
 600296c:	18800017 	ldw	r2,0(r3)
 6002970:	99000217 	ldw	r4,8(r19)
 6002974:	8c23c83a 	sub	r17,r17,r16
 6002978:	8c400054 	ori	r17,r17,1
 600297c:	1421c83a 	sub	r16,r2,r16
 6002980:	24400115 	stw	r17,4(r4)
 6002984:	9009883a 	mov	r4,r18
 6002988:	1c000015 	stw	r16,0(r3)
 600298c:	60037b40 	call	60037b4 <__malloc_unlock>
 6002990:	00800044 	movi	r2,1
 6002994:	003fe706 	br	6002934 <__alt_data_end+0xff002934>
 6002998:	000b883a 	mov	r5,zero
 600299c:	9009883a 	mov	r4,r18
 60029a0:	60021740 	call	6002174 <_sbrk_r>
 60029a4:	99000217 	ldw	r4,8(r19)
 60029a8:	014003c4 	movi	r5,15
 60029ac:	1107c83a 	sub	r3,r2,r4
 60029b0:	28ffdd0e 	bge	r5,r3,6002928 <__alt_data_end+0xff002928>
 60029b4:	01418034 	movhi	r5,1536
 60029b8:	295e0c04 	addi	r5,r5,30768
 60029bc:	29400017 	ldw	r5,0(r5)
 60029c0:	18c00054 	ori	r3,r3,1
 60029c4:	20c00115 	stw	r3,4(r4)
 60029c8:	00c18074 	movhi	r3,1537
 60029cc:	1145c83a 	sub	r2,r2,r5
 60029d0:	18e4c904 	addi	r3,r3,-27868
 60029d4:	18800015 	stw	r2,0(r3)
 60029d8:	003fd306 	br	6002928 <__alt_data_end+0xff002928>

060029dc <_free_r>:
 60029dc:	28004126 	beq	r5,zero,6002ae4 <_free_r+0x108>
 60029e0:	defffd04 	addi	sp,sp,-12
 60029e4:	dc400115 	stw	r17,4(sp)
 60029e8:	dc000015 	stw	r16,0(sp)
 60029ec:	2023883a 	mov	r17,r4
 60029f0:	2821883a 	mov	r16,r5
 60029f4:	dfc00215 	stw	ra,8(sp)
 60029f8:	60037900 	call	6003790 <__malloc_lock>
 60029fc:	81ffff17 	ldw	r7,-4(r16)
 6002a00:	00bfff84 	movi	r2,-2
 6002a04:	01018034 	movhi	r4,1536
 6002a08:	81bffe04 	addi	r6,r16,-8
 6002a0c:	3884703a 	and	r2,r7,r2
 6002a10:	21187f04 	addi	r4,r4,25084
 6002a14:	308b883a 	add	r5,r6,r2
 6002a18:	2a400117 	ldw	r9,4(r5)
 6002a1c:	22000217 	ldw	r8,8(r4)
 6002a20:	00ffff04 	movi	r3,-4
 6002a24:	48c6703a 	and	r3,r9,r3
 6002a28:	2a005726 	beq	r5,r8,6002b88 <_free_r+0x1ac>
 6002a2c:	28c00115 	stw	r3,4(r5)
 6002a30:	39c0004c 	andi	r7,r7,1
 6002a34:	3800091e 	bne	r7,zero,6002a5c <_free_r+0x80>
 6002a38:	823ffe17 	ldw	r8,-8(r16)
 6002a3c:	22400204 	addi	r9,r4,8
 6002a40:	320dc83a 	sub	r6,r6,r8
 6002a44:	31c00217 	ldw	r7,8(r6)
 6002a48:	1205883a 	add	r2,r2,r8
 6002a4c:	3a406526 	beq	r7,r9,6002be4 <_free_r+0x208>
 6002a50:	32000317 	ldw	r8,12(r6)
 6002a54:	3a000315 	stw	r8,12(r7)
 6002a58:	41c00215 	stw	r7,8(r8)
 6002a5c:	28cf883a 	add	r7,r5,r3
 6002a60:	39c00117 	ldw	r7,4(r7)
 6002a64:	39c0004c 	andi	r7,r7,1
 6002a68:	38003a26 	beq	r7,zero,6002b54 <_free_r+0x178>
 6002a6c:	10c00054 	ori	r3,r2,1
 6002a70:	30c00115 	stw	r3,4(r6)
 6002a74:	3087883a 	add	r3,r6,r2
 6002a78:	18800015 	stw	r2,0(r3)
 6002a7c:	00c07fc4 	movi	r3,511
 6002a80:	18801936 	bltu	r3,r2,6002ae8 <_free_r+0x10c>
 6002a84:	1004d0fa 	srli	r2,r2,3
 6002a88:	01c00044 	movi	r7,1
 6002a8c:	21400117 	ldw	r5,4(r4)
 6002a90:	10c00044 	addi	r3,r2,1
 6002a94:	18c7883a 	add	r3,r3,r3
 6002a98:	1005d0ba 	srai	r2,r2,2
 6002a9c:	18c7883a 	add	r3,r3,r3
 6002aa0:	18c7883a 	add	r3,r3,r3
 6002aa4:	1907883a 	add	r3,r3,r4
 6002aa8:	3884983a 	sll	r2,r7,r2
 6002aac:	19c00017 	ldw	r7,0(r3)
 6002ab0:	1a3ffe04 	addi	r8,r3,-8
 6002ab4:	1144b03a 	or	r2,r2,r5
 6002ab8:	32000315 	stw	r8,12(r6)
 6002abc:	31c00215 	stw	r7,8(r6)
 6002ac0:	20800115 	stw	r2,4(r4)
 6002ac4:	19800015 	stw	r6,0(r3)
 6002ac8:	39800315 	stw	r6,12(r7)
 6002acc:	8809883a 	mov	r4,r17
 6002ad0:	dfc00217 	ldw	ra,8(sp)
 6002ad4:	dc400117 	ldw	r17,4(sp)
 6002ad8:	dc000017 	ldw	r16,0(sp)
 6002adc:	dec00304 	addi	sp,sp,12
 6002ae0:	60037b41 	jmpi	60037b4 <__malloc_unlock>
 6002ae4:	f800283a 	ret
 6002ae8:	100ad27a 	srli	r5,r2,9
 6002aec:	00c00104 	movi	r3,4
 6002af0:	19404a36 	bltu	r3,r5,6002c1c <_free_r+0x240>
 6002af4:	100ad1ba 	srli	r5,r2,6
 6002af8:	28c00e44 	addi	r3,r5,57
 6002afc:	18c7883a 	add	r3,r3,r3
 6002b00:	29400e04 	addi	r5,r5,56
 6002b04:	18c7883a 	add	r3,r3,r3
 6002b08:	18c7883a 	add	r3,r3,r3
 6002b0c:	1909883a 	add	r4,r3,r4
 6002b10:	20c00017 	ldw	r3,0(r4)
 6002b14:	01c18034 	movhi	r7,1536
 6002b18:	213ffe04 	addi	r4,r4,-8
 6002b1c:	39d87f04 	addi	r7,r7,25084
 6002b20:	20c04426 	beq	r4,r3,6002c34 <_free_r+0x258>
 6002b24:	01ffff04 	movi	r7,-4
 6002b28:	19400117 	ldw	r5,4(r3)
 6002b2c:	29ca703a 	and	r5,r5,r7
 6002b30:	1140022e 	bgeu	r2,r5,6002b3c <_free_r+0x160>
 6002b34:	18c00217 	ldw	r3,8(r3)
 6002b38:	20fffb1e 	bne	r4,r3,6002b28 <__alt_data_end+0xff002b28>
 6002b3c:	19000317 	ldw	r4,12(r3)
 6002b40:	31000315 	stw	r4,12(r6)
 6002b44:	30c00215 	stw	r3,8(r6)
 6002b48:	21800215 	stw	r6,8(r4)
 6002b4c:	19800315 	stw	r6,12(r3)
 6002b50:	003fde06 	br	6002acc <__alt_data_end+0xff002acc>
 6002b54:	29c00217 	ldw	r7,8(r5)
 6002b58:	10c5883a 	add	r2,r2,r3
 6002b5c:	00c18034 	movhi	r3,1536
 6002b60:	18d88104 	addi	r3,r3,25092
 6002b64:	38c03b26 	beq	r7,r3,6002c54 <_free_r+0x278>
 6002b68:	2a000317 	ldw	r8,12(r5)
 6002b6c:	11400054 	ori	r5,r2,1
 6002b70:	3087883a 	add	r3,r6,r2
 6002b74:	3a000315 	stw	r8,12(r7)
 6002b78:	41c00215 	stw	r7,8(r8)
 6002b7c:	31400115 	stw	r5,4(r6)
 6002b80:	18800015 	stw	r2,0(r3)
 6002b84:	003fbd06 	br	6002a7c <__alt_data_end+0xff002a7c>
 6002b88:	39c0004c 	andi	r7,r7,1
 6002b8c:	10c5883a 	add	r2,r2,r3
 6002b90:	3800071e 	bne	r7,zero,6002bb0 <_free_r+0x1d4>
 6002b94:	81fffe17 	ldw	r7,-8(r16)
 6002b98:	31cdc83a 	sub	r6,r6,r7
 6002b9c:	30c00317 	ldw	r3,12(r6)
 6002ba0:	31400217 	ldw	r5,8(r6)
 6002ba4:	11c5883a 	add	r2,r2,r7
 6002ba8:	28c00315 	stw	r3,12(r5)
 6002bac:	19400215 	stw	r5,8(r3)
 6002bb0:	10c00054 	ori	r3,r2,1
 6002bb4:	30c00115 	stw	r3,4(r6)
 6002bb8:	00c18034 	movhi	r3,1536
 6002bbc:	18de0d04 	addi	r3,r3,30772
 6002bc0:	18c00017 	ldw	r3,0(r3)
 6002bc4:	21800215 	stw	r6,8(r4)
 6002bc8:	10ffc036 	bltu	r2,r3,6002acc <__alt_data_end+0xff002acc>
 6002bcc:	00818074 	movhi	r2,1537
 6002bd0:	10a4c004 	addi	r2,r2,-27904
 6002bd4:	11400017 	ldw	r5,0(r2)
 6002bd8:	8809883a 	mov	r4,r17
 6002bdc:	60028b80 	call	60028b8 <_malloc_trim_r>
 6002be0:	003fba06 	br	6002acc <__alt_data_end+0xff002acc>
 6002be4:	28c9883a 	add	r4,r5,r3
 6002be8:	21000117 	ldw	r4,4(r4)
 6002bec:	2100004c 	andi	r4,r4,1
 6002bf0:	2000391e 	bne	r4,zero,6002cd8 <_free_r+0x2fc>
 6002bf4:	29c00217 	ldw	r7,8(r5)
 6002bf8:	29000317 	ldw	r4,12(r5)
 6002bfc:	1885883a 	add	r2,r3,r2
 6002c00:	10c00054 	ori	r3,r2,1
 6002c04:	39000315 	stw	r4,12(r7)
 6002c08:	21c00215 	stw	r7,8(r4)
 6002c0c:	30c00115 	stw	r3,4(r6)
 6002c10:	308d883a 	add	r6,r6,r2
 6002c14:	30800015 	stw	r2,0(r6)
 6002c18:	003fac06 	br	6002acc <__alt_data_end+0xff002acc>
 6002c1c:	00c00504 	movi	r3,20
 6002c20:	19401536 	bltu	r3,r5,6002c78 <_free_r+0x29c>
 6002c24:	28c01704 	addi	r3,r5,92
 6002c28:	18c7883a 	add	r3,r3,r3
 6002c2c:	294016c4 	addi	r5,r5,91
 6002c30:	003fb406 	br	6002b04 <__alt_data_end+0xff002b04>
 6002c34:	280bd0ba 	srai	r5,r5,2
 6002c38:	00c00044 	movi	r3,1
 6002c3c:	38800117 	ldw	r2,4(r7)
 6002c40:	194a983a 	sll	r5,r3,r5
 6002c44:	2007883a 	mov	r3,r4
 6002c48:	2884b03a 	or	r2,r5,r2
 6002c4c:	38800115 	stw	r2,4(r7)
 6002c50:	003fbb06 	br	6002b40 <__alt_data_end+0xff002b40>
 6002c54:	21800515 	stw	r6,20(r4)
 6002c58:	21800415 	stw	r6,16(r4)
 6002c5c:	10c00054 	ori	r3,r2,1
 6002c60:	31c00315 	stw	r7,12(r6)
 6002c64:	31c00215 	stw	r7,8(r6)
 6002c68:	30c00115 	stw	r3,4(r6)
 6002c6c:	308d883a 	add	r6,r6,r2
 6002c70:	30800015 	stw	r2,0(r6)
 6002c74:	003f9506 	br	6002acc <__alt_data_end+0xff002acc>
 6002c78:	00c01504 	movi	r3,84
 6002c7c:	19400536 	bltu	r3,r5,6002c94 <_free_r+0x2b8>
 6002c80:	100ad33a 	srli	r5,r2,12
 6002c84:	28c01bc4 	addi	r3,r5,111
 6002c88:	18c7883a 	add	r3,r3,r3
 6002c8c:	29401b84 	addi	r5,r5,110
 6002c90:	003f9c06 	br	6002b04 <__alt_data_end+0xff002b04>
 6002c94:	00c05504 	movi	r3,340
 6002c98:	19400536 	bltu	r3,r5,6002cb0 <_free_r+0x2d4>
 6002c9c:	100ad3fa 	srli	r5,r2,15
 6002ca0:	28c01e04 	addi	r3,r5,120
 6002ca4:	18c7883a 	add	r3,r3,r3
 6002ca8:	29401dc4 	addi	r5,r5,119
 6002cac:	003f9506 	br	6002b04 <__alt_data_end+0xff002b04>
 6002cb0:	00c15504 	movi	r3,1364
 6002cb4:	19400536 	bltu	r3,r5,6002ccc <_free_r+0x2f0>
 6002cb8:	100ad4ba 	srli	r5,r2,18
 6002cbc:	28c01f44 	addi	r3,r5,125
 6002cc0:	18c7883a 	add	r3,r3,r3
 6002cc4:	29401f04 	addi	r5,r5,124
 6002cc8:	003f8e06 	br	6002b04 <__alt_data_end+0xff002b04>
 6002ccc:	00c03f84 	movi	r3,254
 6002cd0:	01401f84 	movi	r5,126
 6002cd4:	003f8b06 	br	6002b04 <__alt_data_end+0xff002b04>
 6002cd8:	10c00054 	ori	r3,r2,1
 6002cdc:	30c00115 	stw	r3,4(r6)
 6002ce0:	308d883a 	add	r6,r6,r2
 6002ce4:	30800015 	stw	r2,0(r6)
 6002ce8:	003f7806 	br	6002acc <__alt_data_end+0xff002acc>

06002cec <_lseek_r>:
 6002cec:	defffd04 	addi	sp,sp,-12
 6002cf0:	2805883a 	mov	r2,r5
 6002cf4:	dc000015 	stw	r16,0(sp)
 6002cf8:	04018074 	movhi	r16,1537
 6002cfc:	dc400115 	stw	r17,4(sp)
 6002d00:	300b883a 	mov	r5,r6
 6002d04:	8424c104 	addi	r16,r16,-27900
 6002d08:	2023883a 	mov	r17,r4
 6002d0c:	380d883a 	mov	r6,r7
 6002d10:	1009883a 	mov	r4,r2
 6002d14:	dfc00215 	stw	ra,8(sp)
 6002d18:	80000015 	stw	zero,0(r16)
 6002d1c:	60036400 	call	6003640 <lseek>
 6002d20:	00ffffc4 	movi	r3,-1
 6002d24:	10c00526 	beq	r2,r3,6002d3c <_lseek_r+0x50>
 6002d28:	dfc00217 	ldw	ra,8(sp)
 6002d2c:	dc400117 	ldw	r17,4(sp)
 6002d30:	dc000017 	ldw	r16,0(sp)
 6002d34:	dec00304 	addi	sp,sp,12
 6002d38:	f800283a 	ret
 6002d3c:	80c00017 	ldw	r3,0(r16)
 6002d40:	183ff926 	beq	r3,zero,6002d28 <__alt_data_end+0xff002d28>
 6002d44:	88c00015 	stw	r3,0(r17)
 6002d48:	003ff706 	br	6002d28 <__alt_data_end+0xff002d28>

06002d4c <__smakebuf_r>:
 6002d4c:	2880030b 	ldhu	r2,12(r5)
 6002d50:	10c0008c 	andi	r3,r2,2
 6002d54:	1800411e 	bne	r3,zero,6002e5c <__smakebuf_r+0x110>
 6002d58:	deffec04 	addi	sp,sp,-80
 6002d5c:	dc000f15 	stw	r16,60(sp)
 6002d60:	2821883a 	mov	r16,r5
 6002d64:	2940038f 	ldh	r5,14(r5)
 6002d68:	dc401015 	stw	r17,64(sp)
 6002d6c:	dfc01315 	stw	ra,76(sp)
 6002d70:	dcc01215 	stw	r19,72(sp)
 6002d74:	dc801115 	stw	r18,68(sp)
 6002d78:	2023883a 	mov	r17,r4
 6002d7c:	28001c16 	blt	r5,zero,6002df0 <__smakebuf_r+0xa4>
 6002d80:	d80d883a 	mov	r6,sp
 6002d84:	6002f680 	call	6002f68 <_fstat_r>
 6002d88:	10001816 	blt	r2,zero,6002dec <__smakebuf_r+0xa0>
 6002d8c:	d8800117 	ldw	r2,4(sp)
 6002d90:	00e00014 	movui	r3,32768
 6002d94:	10bc000c 	andi	r2,r2,61440
 6002d98:	14c80020 	cmpeqi	r19,r2,8192
 6002d9c:	10c03726 	beq	r2,r3,6002e7c <__smakebuf_r+0x130>
 6002da0:	80c0030b 	ldhu	r3,12(r16)
 6002da4:	18c20014 	ori	r3,r3,2048
 6002da8:	80c0030d 	sth	r3,12(r16)
 6002dac:	00c80004 	movi	r3,8192
 6002db0:	10c0521e 	bne	r2,r3,6002efc <__smakebuf_r+0x1b0>
 6002db4:	8140038f 	ldh	r5,14(r16)
 6002db8:	8809883a 	mov	r4,r17
 6002dbc:	6002fc40 	call	6002fc4 <_isatty_r>
 6002dc0:	10004c26 	beq	r2,zero,6002ef4 <__smakebuf_r+0x1a8>
 6002dc4:	8080030b 	ldhu	r2,12(r16)
 6002dc8:	80c010c4 	addi	r3,r16,67
 6002dcc:	80c00015 	stw	r3,0(r16)
 6002dd0:	10800054 	ori	r2,r2,1
 6002dd4:	8080030d 	sth	r2,12(r16)
 6002dd8:	00800044 	movi	r2,1
 6002ddc:	80c00415 	stw	r3,16(r16)
 6002de0:	80800515 	stw	r2,20(r16)
 6002de4:	04810004 	movi	r18,1024
 6002de8:	00000706 	br	6002e08 <__smakebuf_r+0xbc>
 6002dec:	8080030b 	ldhu	r2,12(r16)
 6002df0:	10c0200c 	andi	r3,r2,128
 6002df4:	18001f1e 	bne	r3,zero,6002e74 <__smakebuf_r+0x128>
 6002df8:	04810004 	movi	r18,1024
 6002dfc:	10820014 	ori	r2,r2,2048
 6002e00:	8080030d 	sth	r2,12(r16)
 6002e04:	0027883a 	mov	r19,zero
 6002e08:	900b883a 	mov	r5,r18
 6002e0c:	8809883a 	mov	r4,r17
 6002e10:	6000f540 	call	6000f54 <_malloc_r>
 6002e14:	10002c26 	beq	r2,zero,6002ec8 <__smakebuf_r+0x17c>
 6002e18:	80c0030b 	ldhu	r3,12(r16)
 6002e1c:	01018034 	movhi	r4,1536
 6002e20:	21015e04 	addi	r4,r4,1400
 6002e24:	89000f15 	stw	r4,60(r17)
 6002e28:	18c02014 	ori	r3,r3,128
 6002e2c:	80c0030d 	sth	r3,12(r16)
 6002e30:	80800015 	stw	r2,0(r16)
 6002e34:	80800415 	stw	r2,16(r16)
 6002e38:	84800515 	stw	r18,20(r16)
 6002e3c:	98001a1e 	bne	r19,zero,6002ea8 <__smakebuf_r+0x15c>
 6002e40:	dfc01317 	ldw	ra,76(sp)
 6002e44:	dcc01217 	ldw	r19,72(sp)
 6002e48:	dc801117 	ldw	r18,68(sp)
 6002e4c:	dc401017 	ldw	r17,64(sp)
 6002e50:	dc000f17 	ldw	r16,60(sp)
 6002e54:	dec01404 	addi	sp,sp,80
 6002e58:	f800283a 	ret
 6002e5c:	288010c4 	addi	r2,r5,67
 6002e60:	28800015 	stw	r2,0(r5)
 6002e64:	28800415 	stw	r2,16(r5)
 6002e68:	00800044 	movi	r2,1
 6002e6c:	28800515 	stw	r2,20(r5)
 6002e70:	f800283a 	ret
 6002e74:	04801004 	movi	r18,64
 6002e78:	003fe006 	br	6002dfc <__alt_data_end+0xff002dfc>
 6002e7c:	81000a17 	ldw	r4,40(r16)
 6002e80:	00c18034 	movhi	r3,1536
 6002e84:	18c8a804 	addi	r3,r3,8864
 6002e88:	20ffc51e 	bne	r4,r3,6002da0 <__alt_data_end+0xff002da0>
 6002e8c:	8080030b 	ldhu	r2,12(r16)
 6002e90:	04810004 	movi	r18,1024
 6002e94:	84801315 	stw	r18,76(r16)
 6002e98:	1484b03a 	or	r2,r2,r18
 6002e9c:	8080030d 	sth	r2,12(r16)
 6002ea0:	0027883a 	mov	r19,zero
 6002ea4:	003fd806 	br	6002e08 <__alt_data_end+0xff002e08>
 6002ea8:	8140038f 	ldh	r5,14(r16)
 6002eac:	8809883a 	mov	r4,r17
 6002eb0:	6002fc40 	call	6002fc4 <_isatty_r>
 6002eb4:	103fe226 	beq	r2,zero,6002e40 <__alt_data_end+0xff002e40>
 6002eb8:	8080030b 	ldhu	r2,12(r16)
 6002ebc:	10800054 	ori	r2,r2,1
 6002ec0:	8080030d 	sth	r2,12(r16)
 6002ec4:	003fde06 	br	6002e40 <__alt_data_end+0xff002e40>
 6002ec8:	8080030b 	ldhu	r2,12(r16)
 6002ecc:	10c0800c 	andi	r3,r2,512
 6002ed0:	183fdb1e 	bne	r3,zero,6002e40 <__alt_data_end+0xff002e40>
 6002ed4:	10800094 	ori	r2,r2,2
 6002ed8:	80c010c4 	addi	r3,r16,67
 6002edc:	8080030d 	sth	r2,12(r16)
 6002ee0:	00800044 	movi	r2,1
 6002ee4:	80c00015 	stw	r3,0(r16)
 6002ee8:	80c00415 	stw	r3,16(r16)
 6002eec:	80800515 	stw	r2,20(r16)
 6002ef0:	003fd306 	br	6002e40 <__alt_data_end+0xff002e40>
 6002ef4:	04810004 	movi	r18,1024
 6002ef8:	003fc306 	br	6002e08 <__alt_data_end+0xff002e08>
 6002efc:	0027883a 	mov	r19,zero
 6002f00:	04810004 	movi	r18,1024
 6002f04:	003fc006 	br	6002e08 <__alt_data_end+0xff002e08>

06002f08 <_read_r>:
 6002f08:	defffd04 	addi	sp,sp,-12
 6002f0c:	2805883a 	mov	r2,r5
 6002f10:	dc000015 	stw	r16,0(sp)
 6002f14:	04018074 	movhi	r16,1537
 6002f18:	dc400115 	stw	r17,4(sp)
 6002f1c:	300b883a 	mov	r5,r6
 6002f20:	8424c104 	addi	r16,r16,-27900
 6002f24:	2023883a 	mov	r17,r4
 6002f28:	380d883a 	mov	r6,r7
 6002f2c:	1009883a 	mov	r4,r2
 6002f30:	dfc00215 	stw	ra,8(sp)
 6002f34:	80000015 	stw	zero,0(r16)
 6002f38:	60038140 	call	6003814 <read>
 6002f3c:	00ffffc4 	movi	r3,-1
 6002f40:	10c00526 	beq	r2,r3,6002f58 <_read_r+0x50>
 6002f44:	dfc00217 	ldw	ra,8(sp)
 6002f48:	dc400117 	ldw	r17,4(sp)
 6002f4c:	dc000017 	ldw	r16,0(sp)
 6002f50:	dec00304 	addi	sp,sp,12
 6002f54:	f800283a 	ret
 6002f58:	80c00017 	ldw	r3,0(r16)
 6002f5c:	183ff926 	beq	r3,zero,6002f44 <__alt_data_end+0xff002f44>
 6002f60:	88c00015 	stw	r3,0(r17)
 6002f64:	003ff706 	br	6002f44 <__alt_data_end+0xff002f44>

06002f68 <_fstat_r>:
 6002f68:	defffd04 	addi	sp,sp,-12
 6002f6c:	2805883a 	mov	r2,r5
 6002f70:	dc000015 	stw	r16,0(sp)
 6002f74:	04018074 	movhi	r16,1537
 6002f78:	dc400115 	stw	r17,4(sp)
 6002f7c:	8424c104 	addi	r16,r16,-27900
 6002f80:	2023883a 	mov	r17,r4
 6002f84:	300b883a 	mov	r5,r6
 6002f88:	1009883a 	mov	r4,r2
 6002f8c:	dfc00215 	stw	ra,8(sp)
 6002f90:	80000015 	stw	zero,0(r16)
 6002f94:	60033880 	call	6003388 <fstat>
 6002f98:	00ffffc4 	movi	r3,-1
 6002f9c:	10c00526 	beq	r2,r3,6002fb4 <_fstat_r+0x4c>
 6002fa0:	dfc00217 	ldw	ra,8(sp)
 6002fa4:	dc400117 	ldw	r17,4(sp)
 6002fa8:	dc000017 	ldw	r16,0(sp)
 6002fac:	dec00304 	addi	sp,sp,12
 6002fb0:	f800283a 	ret
 6002fb4:	80c00017 	ldw	r3,0(r16)
 6002fb8:	183ff926 	beq	r3,zero,6002fa0 <__alt_data_end+0xff002fa0>
 6002fbc:	88c00015 	stw	r3,0(r17)
 6002fc0:	003ff706 	br	6002fa0 <__alt_data_end+0xff002fa0>

06002fc4 <_isatty_r>:
 6002fc4:	defffd04 	addi	sp,sp,-12
 6002fc8:	dc000015 	stw	r16,0(sp)
 6002fcc:	04018074 	movhi	r16,1537
 6002fd0:	dc400115 	stw	r17,4(sp)
 6002fd4:	8424c104 	addi	r16,r16,-27900
 6002fd8:	2023883a 	mov	r17,r4
 6002fdc:	2809883a 	mov	r4,r5
 6002fe0:	dfc00215 	stw	ra,8(sp)
 6002fe4:	80000015 	stw	zero,0(r16)
 6002fe8:	60034740 	call	6003474 <isatty>
 6002fec:	00ffffc4 	movi	r3,-1
 6002ff0:	10c00526 	beq	r2,r3,6003008 <_isatty_r+0x44>
 6002ff4:	dfc00217 	ldw	ra,8(sp)
 6002ff8:	dc400117 	ldw	r17,4(sp)
 6002ffc:	dc000017 	ldw	r16,0(sp)
 6003000:	dec00304 	addi	sp,sp,12
 6003004:	f800283a 	ret
 6003008:	80c00017 	ldw	r3,0(r16)
 600300c:	183ff926 	beq	r3,zero,6002ff4 <__alt_data_end+0xff002ff4>
 6003010:	88c00015 	stw	r3,0(r17)
 6003014:	003ff706 	br	6002ff4 <__alt_data_end+0xff002ff4>

06003018 <__divsi3>:
 6003018:	20001b16 	blt	r4,zero,6003088 <__divsi3+0x70>
 600301c:	000f883a 	mov	r7,zero
 6003020:	28001616 	blt	r5,zero,600307c <__divsi3+0x64>
 6003024:	200d883a 	mov	r6,r4
 6003028:	29001a2e 	bgeu	r5,r4,6003094 <__divsi3+0x7c>
 600302c:	00800804 	movi	r2,32
 6003030:	00c00044 	movi	r3,1
 6003034:	00000106 	br	600303c <__divsi3+0x24>
 6003038:	10000d26 	beq	r2,zero,6003070 <__divsi3+0x58>
 600303c:	294b883a 	add	r5,r5,r5
 6003040:	10bfffc4 	addi	r2,r2,-1
 6003044:	18c7883a 	add	r3,r3,r3
 6003048:	293ffb36 	bltu	r5,r4,6003038 <__alt_data_end+0xff003038>
 600304c:	0005883a 	mov	r2,zero
 6003050:	18000726 	beq	r3,zero,6003070 <__divsi3+0x58>
 6003054:	0005883a 	mov	r2,zero
 6003058:	31400236 	bltu	r6,r5,6003064 <__divsi3+0x4c>
 600305c:	314dc83a 	sub	r6,r6,r5
 6003060:	10c4b03a 	or	r2,r2,r3
 6003064:	1806d07a 	srli	r3,r3,1
 6003068:	280ad07a 	srli	r5,r5,1
 600306c:	183ffa1e 	bne	r3,zero,6003058 <__alt_data_end+0xff003058>
 6003070:	38000126 	beq	r7,zero,6003078 <__divsi3+0x60>
 6003074:	0085c83a 	sub	r2,zero,r2
 6003078:	f800283a 	ret
 600307c:	014bc83a 	sub	r5,zero,r5
 6003080:	39c0005c 	xori	r7,r7,1
 6003084:	003fe706 	br	6003024 <__alt_data_end+0xff003024>
 6003088:	0109c83a 	sub	r4,zero,r4
 600308c:	01c00044 	movi	r7,1
 6003090:	003fe306 	br	6003020 <__alt_data_end+0xff003020>
 6003094:	00c00044 	movi	r3,1
 6003098:	003fee06 	br	6003054 <__alt_data_end+0xff003054>

0600309c <__modsi3>:
 600309c:	20001716 	blt	r4,zero,60030fc <__modsi3+0x60>
 60030a0:	000f883a 	mov	r7,zero
 60030a4:	2005883a 	mov	r2,r4
 60030a8:	28001216 	blt	r5,zero,60030f4 <__modsi3+0x58>
 60030ac:	2900162e 	bgeu	r5,r4,6003108 <__modsi3+0x6c>
 60030b0:	01800804 	movi	r6,32
 60030b4:	00c00044 	movi	r3,1
 60030b8:	00000106 	br	60030c0 <__modsi3+0x24>
 60030bc:	30000a26 	beq	r6,zero,60030e8 <__modsi3+0x4c>
 60030c0:	294b883a 	add	r5,r5,r5
 60030c4:	31bfffc4 	addi	r6,r6,-1
 60030c8:	18c7883a 	add	r3,r3,r3
 60030cc:	293ffb36 	bltu	r5,r4,60030bc <__alt_data_end+0xff0030bc>
 60030d0:	18000526 	beq	r3,zero,60030e8 <__modsi3+0x4c>
 60030d4:	1806d07a 	srli	r3,r3,1
 60030d8:	11400136 	bltu	r2,r5,60030e0 <__modsi3+0x44>
 60030dc:	1145c83a 	sub	r2,r2,r5
 60030e0:	280ad07a 	srli	r5,r5,1
 60030e4:	183ffb1e 	bne	r3,zero,60030d4 <__alt_data_end+0xff0030d4>
 60030e8:	38000126 	beq	r7,zero,60030f0 <__modsi3+0x54>
 60030ec:	0085c83a 	sub	r2,zero,r2
 60030f0:	f800283a 	ret
 60030f4:	014bc83a 	sub	r5,zero,r5
 60030f8:	003fec06 	br	60030ac <__alt_data_end+0xff0030ac>
 60030fc:	0109c83a 	sub	r4,zero,r4
 6003100:	01c00044 	movi	r7,1
 6003104:	003fe706 	br	60030a4 <__alt_data_end+0xff0030a4>
 6003108:	00c00044 	movi	r3,1
 600310c:	003ff106 	br	60030d4 <__alt_data_end+0xff0030d4>

06003110 <__udivsi3>:
 6003110:	200d883a 	mov	r6,r4
 6003114:	2900152e 	bgeu	r5,r4,600316c <__udivsi3+0x5c>
 6003118:	28001416 	blt	r5,zero,600316c <__udivsi3+0x5c>
 600311c:	00800804 	movi	r2,32
 6003120:	00c00044 	movi	r3,1
 6003124:	00000206 	br	6003130 <__udivsi3+0x20>
 6003128:	10000e26 	beq	r2,zero,6003164 <__udivsi3+0x54>
 600312c:	28000516 	blt	r5,zero,6003144 <__udivsi3+0x34>
 6003130:	294b883a 	add	r5,r5,r5
 6003134:	10bfffc4 	addi	r2,r2,-1
 6003138:	18c7883a 	add	r3,r3,r3
 600313c:	293ffa36 	bltu	r5,r4,6003128 <__alt_data_end+0xff003128>
 6003140:	18000826 	beq	r3,zero,6003164 <__udivsi3+0x54>
 6003144:	0005883a 	mov	r2,zero
 6003148:	31400236 	bltu	r6,r5,6003154 <__udivsi3+0x44>
 600314c:	314dc83a 	sub	r6,r6,r5
 6003150:	10c4b03a 	or	r2,r2,r3
 6003154:	1806d07a 	srli	r3,r3,1
 6003158:	280ad07a 	srli	r5,r5,1
 600315c:	183ffa1e 	bne	r3,zero,6003148 <__alt_data_end+0xff003148>
 6003160:	f800283a 	ret
 6003164:	0005883a 	mov	r2,zero
 6003168:	f800283a 	ret
 600316c:	00c00044 	movi	r3,1
 6003170:	003ff406 	br	6003144 <__alt_data_end+0xff003144>

06003174 <__umodsi3>:
 6003174:	2005883a 	mov	r2,r4
 6003178:	2900122e 	bgeu	r5,r4,60031c4 <__umodsi3+0x50>
 600317c:	28001116 	blt	r5,zero,60031c4 <__umodsi3+0x50>
 6003180:	01800804 	movi	r6,32
 6003184:	00c00044 	movi	r3,1
 6003188:	00000206 	br	6003194 <__umodsi3+0x20>
 600318c:	30000c26 	beq	r6,zero,60031c0 <__umodsi3+0x4c>
 6003190:	28000516 	blt	r5,zero,60031a8 <__umodsi3+0x34>
 6003194:	294b883a 	add	r5,r5,r5
 6003198:	31bfffc4 	addi	r6,r6,-1
 600319c:	18c7883a 	add	r3,r3,r3
 60031a0:	293ffa36 	bltu	r5,r4,600318c <__alt_data_end+0xff00318c>
 60031a4:	18000626 	beq	r3,zero,60031c0 <__umodsi3+0x4c>
 60031a8:	1806d07a 	srli	r3,r3,1
 60031ac:	11400136 	bltu	r2,r5,60031b4 <__umodsi3+0x40>
 60031b0:	1145c83a 	sub	r2,r2,r5
 60031b4:	280ad07a 	srli	r5,r5,1
 60031b8:	183ffb1e 	bne	r3,zero,60031a8 <__alt_data_end+0xff0031a8>
 60031bc:	f800283a 	ret
 60031c0:	f800283a 	ret
 60031c4:	00c00044 	movi	r3,1
 60031c8:	003ff706 	br	60031a8 <__alt_data_end+0xff0031a8>

060031cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 60031cc:	defffe04 	addi	sp,sp,-8
 60031d0:	dfc00115 	stw	ra,4(sp)
 60031d4:	df000015 	stw	fp,0(sp)
 60031d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60031dc:	d0a00c17 	ldw	r2,-32720(gp)
 60031e0:	10000326 	beq	r2,zero,60031f0 <alt_get_errno+0x24>
 60031e4:	d0a00c17 	ldw	r2,-32720(gp)
 60031e8:	103ee83a 	callr	r2
 60031ec:	00000106 	br	60031f4 <alt_get_errno+0x28>
 60031f0:	d0a6ba04 	addi	r2,gp,-25880
}
 60031f4:	e037883a 	mov	sp,fp
 60031f8:	dfc00117 	ldw	ra,4(sp)
 60031fc:	df000017 	ldw	fp,0(sp)
 6003200:	dec00204 	addi	sp,sp,8
 6003204:	f800283a 	ret

06003208 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 6003208:	defffb04 	addi	sp,sp,-20
 600320c:	dfc00415 	stw	ra,16(sp)
 6003210:	df000315 	stw	fp,12(sp)
 6003214:	df000304 	addi	fp,sp,12
 6003218:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 600321c:	e0bfff17 	ldw	r2,-4(fp)
 6003220:	10000616 	blt	r2,zero,600323c <close+0x34>
 6003224:	e0bfff17 	ldw	r2,-4(fp)
 6003228:	10c00324 	muli	r3,r2,12
 600322c:	00818034 	movhi	r2,1536
 6003230:	10998b04 	addi	r2,r2,26156
 6003234:	1885883a 	add	r2,r3,r2
 6003238:	00000106 	br	6003240 <close+0x38>
 600323c:	0005883a 	mov	r2,zero
 6003240:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 6003244:	e0bffd17 	ldw	r2,-12(fp)
 6003248:	10001926 	beq	r2,zero,60032b0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 600324c:	e0bffd17 	ldw	r2,-12(fp)
 6003250:	10800017 	ldw	r2,0(r2)
 6003254:	10800417 	ldw	r2,16(r2)
 6003258:	10000626 	beq	r2,zero,6003274 <close+0x6c>
 600325c:	e0bffd17 	ldw	r2,-12(fp)
 6003260:	10800017 	ldw	r2,0(r2)
 6003264:	10800417 	ldw	r2,16(r2)
 6003268:	e13ffd17 	ldw	r4,-12(fp)
 600326c:	103ee83a 	callr	r2
 6003270:	00000106 	br	6003278 <close+0x70>
 6003274:	0005883a 	mov	r2,zero
 6003278:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 600327c:	e13fff17 	ldw	r4,-4(fp)
 6003280:	60039100 	call	6003910 <alt_release_fd>
    if (rval < 0)
 6003284:	e0bffe17 	ldw	r2,-8(fp)
 6003288:	1000070e 	bge	r2,zero,60032a8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 600328c:	60031cc0 	call	60031cc <alt_get_errno>
 6003290:	1007883a 	mov	r3,r2
 6003294:	e0bffe17 	ldw	r2,-8(fp)
 6003298:	0085c83a 	sub	r2,zero,r2
 600329c:	18800015 	stw	r2,0(r3)
      return -1;
 60032a0:	00bfffc4 	movi	r2,-1
 60032a4:	00000706 	br	60032c4 <close+0xbc>
    }
    return 0;
 60032a8:	0005883a 	mov	r2,zero
 60032ac:	00000506 	br	60032c4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 60032b0:	60031cc0 	call	60031cc <alt_get_errno>
 60032b4:	1007883a 	mov	r3,r2
 60032b8:	00801444 	movi	r2,81
 60032bc:	18800015 	stw	r2,0(r3)
    return -1;
 60032c0:	00bfffc4 	movi	r2,-1
  }
}
 60032c4:	e037883a 	mov	sp,fp
 60032c8:	dfc00117 	ldw	ra,4(sp)
 60032cc:	df000017 	ldw	fp,0(sp)
 60032d0:	dec00204 	addi	sp,sp,8
 60032d4:	f800283a 	ret

060032d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 60032d8:	defffe04 	addi	sp,sp,-8
 60032dc:	df000115 	stw	fp,4(sp)
 60032e0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 60032e4:	e03fff15 	stw	zero,-4(fp)
 60032e8:	00000506 	br	6003300 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 60032ec:	e0bfff17 	ldw	r2,-4(fp)
 60032f0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 60032f4:	e0bfff17 	ldw	r2,-4(fp)
 60032f8:	10800804 	addi	r2,r2,32
 60032fc:	e0bfff15 	stw	r2,-4(fp)
 6003300:	e0bfff17 	ldw	r2,-4(fp)
 6003304:	10820030 	cmpltui	r2,r2,2048
 6003308:	103ff81e 	bne	r2,zero,60032ec <__alt_data_end+0xff0032ec>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 600330c:	0001883a 	nop
 6003310:	e037883a 	mov	sp,fp
 6003314:	df000017 	ldw	fp,0(sp)
 6003318:	dec00104 	addi	sp,sp,4
 600331c:	f800283a 	ret

06003320 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 6003320:	defffc04 	addi	sp,sp,-16
 6003324:	df000315 	stw	fp,12(sp)
 6003328:	df000304 	addi	fp,sp,12
 600332c:	e13ffd15 	stw	r4,-12(fp)
 6003330:	e17ffe15 	stw	r5,-8(fp)
 6003334:	e1bfff15 	stw	r6,-4(fp)
  return len;
 6003338:	e0bfff17 	ldw	r2,-4(fp)
}
 600333c:	e037883a 	mov	sp,fp
 6003340:	df000017 	ldw	fp,0(sp)
 6003344:	dec00104 	addi	sp,sp,4
 6003348:	f800283a 	ret

0600334c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 600334c:	defffe04 	addi	sp,sp,-8
 6003350:	dfc00115 	stw	ra,4(sp)
 6003354:	df000015 	stw	fp,0(sp)
 6003358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 600335c:	d0a00c17 	ldw	r2,-32720(gp)
 6003360:	10000326 	beq	r2,zero,6003370 <alt_get_errno+0x24>
 6003364:	d0a00c17 	ldw	r2,-32720(gp)
 6003368:	103ee83a 	callr	r2
 600336c:	00000106 	br	6003374 <alt_get_errno+0x28>
 6003370:	d0a6ba04 	addi	r2,gp,-25880
}
 6003374:	e037883a 	mov	sp,fp
 6003378:	dfc00117 	ldw	ra,4(sp)
 600337c:	df000017 	ldw	fp,0(sp)
 6003380:	dec00204 	addi	sp,sp,8
 6003384:	f800283a 	ret

06003388 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 6003388:	defffb04 	addi	sp,sp,-20
 600338c:	dfc00415 	stw	ra,16(sp)
 6003390:	df000315 	stw	fp,12(sp)
 6003394:	df000304 	addi	fp,sp,12
 6003398:	e13ffe15 	stw	r4,-8(fp)
 600339c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 60033a0:	e0bffe17 	ldw	r2,-8(fp)
 60033a4:	10000616 	blt	r2,zero,60033c0 <fstat+0x38>
 60033a8:	e0bffe17 	ldw	r2,-8(fp)
 60033ac:	10c00324 	muli	r3,r2,12
 60033b0:	00818034 	movhi	r2,1536
 60033b4:	10998b04 	addi	r2,r2,26156
 60033b8:	1885883a 	add	r2,r3,r2
 60033bc:	00000106 	br	60033c4 <fstat+0x3c>
 60033c0:	0005883a 	mov	r2,zero
 60033c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 60033c8:	e0bffd17 	ldw	r2,-12(fp)
 60033cc:	10001026 	beq	r2,zero,6003410 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 60033d0:	e0bffd17 	ldw	r2,-12(fp)
 60033d4:	10800017 	ldw	r2,0(r2)
 60033d8:	10800817 	ldw	r2,32(r2)
 60033dc:	10000726 	beq	r2,zero,60033fc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 60033e0:	e0bffd17 	ldw	r2,-12(fp)
 60033e4:	10800017 	ldw	r2,0(r2)
 60033e8:	10800817 	ldw	r2,32(r2)
 60033ec:	e17fff17 	ldw	r5,-4(fp)
 60033f0:	e13ffd17 	ldw	r4,-12(fp)
 60033f4:	103ee83a 	callr	r2
 60033f8:	00000a06 	br	6003424 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 60033fc:	e0bfff17 	ldw	r2,-4(fp)
 6003400:	00c80004 	movi	r3,8192
 6003404:	10c00115 	stw	r3,4(r2)
      return 0;
 6003408:	0005883a 	mov	r2,zero
 600340c:	00000506 	br	6003424 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 6003410:	600334c0 	call	600334c <alt_get_errno>
 6003414:	1007883a 	mov	r3,r2
 6003418:	00801444 	movi	r2,81
 600341c:	18800015 	stw	r2,0(r3)
    return -1;
 6003420:	00bfffc4 	movi	r2,-1
  }
}
 6003424:	e037883a 	mov	sp,fp
 6003428:	dfc00117 	ldw	ra,4(sp)
 600342c:	df000017 	ldw	fp,0(sp)
 6003430:	dec00204 	addi	sp,sp,8
 6003434:	f800283a 	ret

06003438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 6003438:	defffe04 	addi	sp,sp,-8
 600343c:	dfc00115 	stw	ra,4(sp)
 6003440:	df000015 	stw	fp,0(sp)
 6003444:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003448:	d0a00c17 	ldw	r2,-32720(gp)
 600344c:	10000326 	beq	r2,zero,600345c <alt_get_errno+0x24>
 6003450:	d0a00c17 	ldw	r2,-32720(gp)
 6003454:	103ee83a 	callr	r2
 6003458:	00000106 	br	6003460 <alt_get_errno+0x28>
 600345c:	d0a6ba04 	addi	r2,gp,-25880
}
 6003460:	e037883a 	mov	sp,fp
 6003464:	dfc00117 	ldw	ra,4(sp)
 6003468:	df000017 	ldw	fp,0(sp)
 600346c:	dec00204 	addi	sp,sp,8
 6003470:	f800283a 	ret

06003474 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 6003474:	deffed04 	addi	sp,sp,-76
 6003478:	dfc01215 	stw	ra,72(sp)
 600347c:	df001115 	stw	fp,68(sp)
 6003480:	df001104 	addi	fp,sp,68
 6003484:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003488:	e0bfff17 	ldw	r2,-4(fp)
 600348c:	10000616 	blt	r2,zero,60034a8 <isatty+0x34>
 6003490:	e0bfff17 	ldw	r2,-4(fp)
 6003494:	10c00324 	muli	r3,r2,12
 6003498:	00818034 	movhi	r2,1536
 600349c:	10998b04 	addi	r2,r2,26156
 60034a0:	1885883a 	add	r2,r3,r2
 60034a4:	00000106 	br	60034ac <isatty+0x38>
 60034a8:	0005883a 	mov	r2,zero
 60034ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 60034b0:	e0bfef17 	ldw	r2,-68(fp)
 60034b4:	10000e26 	beq	r2,zero,60034f0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 60034b8:	e0bfef17 	ldw	r2,-68(fp)
 60034bc:	10800017 	ldw	r2,0(r2)
 60034c0:	10800817 	ldw	r2,32(r2)
 60034c4:	1000021e 	bne	r2,zero,60034d0 <isatty+0x5c>
    {
      return 1;
 60034c8:	00800044 	movi	r2,1
 60034cc:	00000d06 	br	6003504 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 60034d0:	e0bff004 	addi	r2,fp,-64
 60034d4:	100b883a 	mov	r5,r2
 60034d8:	e13fff17 	ldw	r4,-4(fp)
 60034dc:	60033880 	call	6003388 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 60034e0:	e0bff117 	ldw	r2,-60(fp)
 60034e4:	10880020 	cmpeqi	r2,r2,8192
 60034e8:	10803fcc 	andi	r2,r2,255
 60034ec:	00000506 	br	6003504 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 60034f0:	60034380 	call	6003438 <alt_get_errno>
 60034f4:	1007883a 	mov	r3,r2
 60034f8:	00801444 	movi	r2,81
 60034fc:	18800015 	stw	r2,0(r3)
    return 0;
 6003500:	0005883a 	mov	r2,zero
  }
}
 6003504:	e037883a 	mov	sp,fp
 6003508:	dfc00117 	ldw	ra,4(sp)
 600350c:	df000017 	ldw	fp,0(sp)
 6003510:	dec00204 	addi	sp,sp,8
 6003514:	f800283a 	ret

06003518 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 6003518:	defffc04 	addi	sp,sp,-16
 600351c:	df000315 	stw	fp,12(sp)
 6003520:	df000304 	addi	fp,sp,12
 6003524:	e13ffd15 	stw	r4,-12(fp)
 6003528:	e17ffe15 	stw	r5,-8(fp)
 600352c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 6003530:	e0fffe17 	ldw	r3,-8(fp)
 6003534:	e0bffd17 	ldw	r2,-12(fp)
 6003538:	18800c26 	beq	r3,r2,600356c <alt_load_section+0x54>
  {
    while( to != end )
 600353c:	00000806 	br	6003560 <alt_load_section+0x48>
    {
      *to++ = *from++;
 6003540:	e0bffe17 	ldw	r2,-8(fp)
 6003544:	10c00104 	addi	r3,r2,4
 6003548:	e0fffe15 	stw	r3,-8(fp)
 600354c:	e0fffd17 	ldw	r3,-12(fp)
 6003550:	19000104 	addi	r4,r3,4
 6003554:	e13ffd15 	stw	r4,-12(fp)
 6003558:	18c00017 	ldw	r3,0(r3)
 600355c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 6003560:	e0fffe17 	ldw	r3,-8(fp)
 6003564:	e0bfff17 	ldw	r2,-4(fp)
 6003568:	18bff51e 	bne	r3,r2,6003540 <__alt_data_end+0xff003540>
    {
      *to++ = *from++;
    }
  }
}
 600356c:	0001883a 	nop
 6003570:	e037883a 	mov	sp,fp
 6003574:	df000017 	ldw	fp,0(sp)
 6003578:	dec00104 	addi	sp,sp,4
 600357c:	f800283a 	ret

06003580 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 6003580:	defffe04 	addi	sp,sp,-8
 6003584:	dfc00115 	stw	ra,4(sp)
 6003588:	df000015 	stw	fp,0(sp)
 600358c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 6003590:	01818034 	movhi	r6,1536
 6003594:	319e1a04 	addi	r6,r6,30824
 6003598:	01418034 	movhi	r5,1536
 600359c:	29577604 	addi	r5,r5,24024
 60035a0:	01018034 	movhi	r4,1536
 60035a4:	211e1a04 	addi	r4,r4,30824
 60035a8:	60035180 	call	6003518 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 60035ac:	01818034 	movhi	r6,1536
 60035b0:	31809104 	addi	r6,r6,580
 60035b4:	01418034 	movhi	r5,1536
 60035b8:	29400804 	addi	r5,r5,32
 60035bc:	01018034 	movhi	r4,1536
 60035c0:	21000804 	addi	r4,r4,32
 60035c4:	60035180 	call	6003518 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 60035c8:	01818034 	movhi	r6,1536
 60035cc:	31977604 	addi	r6,r6,24024
 60035d0:	01418034 	movhi	r5,1536
 60035d4:	29573c04 	addi	r5,r5,23792
 60035d8:	01018034 	movhi	r4,1536
 60035dc:	21173c04 	addi	r4,r4,23792
 60035e0:	60035180 	call	6003518 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 60035e4:	60032d80 	call	60032d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 60035e8:	6004e540 	call	6004e54 <alt_icache_flush_all>
}
 60035ec:	0001883a 	nop
 60035f0:	e037883a 	mov	sp,fp
 60035f4:	dfc00117 	ldw	ra,4(sp)
 60035f8:	df000017 	ldw	fp,0(sp)
 60035fc:	dec00204 	addi	sp,sp,8
 6003600:	f800283a 	ret

06003604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 6003604:	defffe04 	addi	sp,sp,-8
 6003608:	dfc00115 	stw	ra,4(sp)
 600360c:	df000015 	stw	fp,0(sp)
 6003610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003614:	d0a00c17 	ldw	r2,-32720(gp)
 6003618:	10000326 	beq	r2,zero,6003628 <alt_get_errno+0x24>
 600361c:	d0a00c17 	ldw	r2,-32720(gp)
 6003620:	103ee83a 	callr	r2
 6003624:	00000106 	br	600362c <alt_get_errno+0x28>
 6003628:	d0a6ba04 	addi	r2,gp,-25880
}
 600362c:	e037883a 	mov	sp,fp
 6003630:	dfc00117 	ldw	ra,4(sp)
 6003634:	df000017 	ldw	fp,0(sp)
 6003638:	dec00204 	addi	sp,sp,8
 600363c:	f800283a 	ret

06003640 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 6003640:	defff904 	addi	sp,sp,-28
 6003644:	dfc00615 	stw	ra,24(sp)
 6003648:	df000515 	stw	fp,20(sp)
 600364c:	df000504 	addi	fp,sp,20
 6003650:	e13ffd15 	stw	r4,-12(fp)
 6003654:	e17ffe15 	stw	r5,-8(fp)
 6003658:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 600365c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003660:	e0bffd17 	ldw	r2,-12(fp)
 6003664:	10000616 	blt	r2,zero,6003680 <lseek+0x40>
 6003668:	e0bffd17 	ldw	r2,-12(fp)
 600366c:	10c00324 	muli	r3,r2,12
 6003670:	00818034 	movhi	r2,1536
 6003674:	10998b04 	addi	r2,r2,26156
 6003678:	1885883a 	add	r2,r3,r2
 600367c:	00000106 	br	6003684 <lseek+0x44>
 6003680:	0005883a 	mov	r2,zero
 6003684:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 6003688:	e0bffc17 	ldw	r2,-16(fp)
 600368c:	10001026 	beq	r2,zero,60036d0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 6003690:	e0bffc17 	ldw	r2,-16(fp)
 6003694:	10800017 	ldw	r2,0(r2)
 6003698:	10800717 	ldw	r2,28(r2)
 600369c:	10000926 	beq	r2,zero,60036c4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 60036a0:	e0bffc17 	ldw	r2,-16(fp)
 60036a4:	10800017 	ldw	r2,0(r2)
 60036a8:	10800717 	ldw	r2,28(r2)
 60036ac:	e1bfff17 	ldw	r6,-4(fp)
 60036b0:	e17ffe17 	ldw	r5,-8(fp)
 60036b4:	e13ffc17 	ldw	r4,-16(fp)
 60036b8:	103ee83a 	callr	r2
 60036bc:	e0bffb15 	stw	r2,-20(fp)
 60036c0:	00000506 	br	60036d8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 60036c4:	00bfde84 	movi	r2,-134
 60036c8:	e0bffb15 	stw	r2,-20(fp)
 60036cc:	00000206 	br	60036d8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 60036d0:	00bfebc4 	movi	r2,-81
 60036d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 60036d8:	e0bffb17 	ldw	r2,-20(fp)
 60036dc:	1000070e 	bge	r2,zero,60036fc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 60036e0:	60036040 	call	6003604 <alt_get_errno>
 60036e4:	1007883a 	mov	r3,r2
 60036e8:	e0bffb17 	ldw	r2,-20(fp)
 60036ec:	0085c83a 	sub	r2,zero,r2
 60036f0:	18800015 	stw	r2,0(r3)
    rc = -1;
 60036f4:	00bfffc4 	movi	r2,-1
 60036f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 60036fc:	e0bffb17 	ldw	r2,-20(fp)
}
 6003700:	e037883a 	mov	sp,fp
 6003704:	dfc00117 	ldw	ra,4(sp)
 6003708:	df000017 	ldw	fp,0(sp)
 600370c:	dec00204 	addi	sp,sp,8
 6003710:	f800283a 	ret

06003714 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 6003714:	defffd04 	addi	sp,sp,-12
 6003718:	dfc00215 	stw	ra,8(sp)
 600371c:	df000115 	stw	fp,4(sp)
 6003720:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 6003724:	0009883a 	mov	r4,zero
 6003728:	6003c300 	call	6003c30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 600372c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 6003730:	6003c680 	call	6003c68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 6003734:	01818034 	movhi	r6,1536
 6003738:	31976b04 	addi	r6,r6,23980
 600373c:	01418034 	movhi	r5,1536
 6003740:	29576b04 	addi	r5,r5,23980
 6003744:	01018034 	movhi	r4,1536
 6003748:	21176b04 	addi	r4,r4,23980
 600374c:	60051ec0 	call	60051ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 6003750:	6004d040 	call	6004d04 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 6003754:	01018034 	movhi	r4,1536
 6003758:	21135904 	addi	r4,r4,19812
 600375c:	600595c0 	call	600595c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 6003760:	d0a6bb17 	ldw	r2,-25876(gp)
 6003764:	d0e6bc17 	ldw	r3,-25872(gp)
 6003768:	d126bd17 	ldw	r4,-25868(gp)
 600376c:	200d883a 	mov	r6,r4
 6003770:	180b883a 	mov	r5,r3
 6003774:	1009883a 	mov	r4,r2
 6003778:	60003a00 	call	60003a0 <main>
 600377c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 6003780:	01000044 	movi	r4,1
 6003784:	60032080 	call	6003208 <close>
  exit (result);
 6003788:	e13fff17 	ldw	r4,-4(fp)
 600378c:	60059700 	call	6005970 <exit>

06003790 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 6003790:	defffe04 	addi	sp,sp,-8
 6003794:	df000115 	stw	fp,4(sp)
 6003798:	df000104 	addi	fp,sp,4
 600379c:	e13fff15 	stw	r4,-4(fp)
}
 60037a0:	0001883a 	nop
 60037a4:	e037883a 	mov	sp,fp
 60037a8:	df000017 	ldw	fp,0(sp)
 60037ac:	dec00104 	addi	sp,sp,4
 60037b0:	f800283a 	ret

060037b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 60037b4:	defffe04 	addi	sp,sp,-8
 60037b8:	df000115 	stw	fp,4(sp)
 60037bc:	df000104 	addi	fp,sp,4
 60037c0:	e13fff15 	stw	r4,-4(fp)
}
 60037c4:	0001883a 	nop
 60037c8:	e037883a 	mov	sp,fp
 60037cc:	df000017 	ldw	fp,0(sp)
 60037d0:	dec00104 	addi	sp,sp,4
 60037d4:	f800283a 	ret

060037d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 60037d8:	defffe04 	addi	sp,sp,-8
 60037dc:	dfc00115 	stw	ra,4(sp)
 60037e0:	df000015 	stw	fp,0(sp)
 60037e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60037e8:	d0a00c17 	ldw	r2,-32720(gp)
 60037ec:	10000326 	beq	r2,zero,60037fc <alt_get_errno+0x24>
 60037f0:	d0a00c17 	ldw	r2,-32720(gp)
 60037f4:	103ee83a 	callr	r2
 60037f8:	00000106 	br	6003800 <alt_get_errno+0x28>
 60037fc:	d0a6ba04 	addi	r2,gp,-25880
}
 6003800:	e037883a 	mov	sp,fp
 6003804:	dfc00117 	ldw	ra,4(sp)
 6003808:	df000017 	ldw	fp,0(sp)
 600380c:	dec00204 	addi	sp,sp,8
 6003810:	f800283a 	ret

06003814 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 6003814:	defff904 	addi	sp,sp,-28
 6003818:	dfc00615 	stw	ra,24(sp)
 600381c:	df000515 	stw	fp,20(sp)
 6003820:	df000504 	addi	fp,sp,20
 6003824:	e13ffd15 	stw	r4,-12(fp)
 6003828:	e17ffe15 	stw	r5,-8(fp)
 600382c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003830:	e0bffd17 	ldw	r2,-12(fp)
 6003834:	10000616 	blt	r2,zero,6003850 <read+0x3c>
 6003838:	e0bffd17 	ldw	r2,-12(fp)
 600383c:	10c00324 	muli	r3,r2,12
 6003840:	00818034 	movhi	r2,1536
 6003844:	10998b04 	addi	r2,r2,26156
 6003848:	1885883a 	add	r2,r3,r2
 600384c:	00000106 	br	6003854 <read+0x40>
 6003850:	0005883a 	mov	r2,zero
 6003854:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 6003858:	e0bffb17 	ldw	r2,-20(fp)
 600385c:	10002226 	beq	r2,zero,60038e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 6003860:	e0bffb17 	ldw	r2,-20(fp)
 6003864:	10800217 	ldw	r2,8(r2)
 6003868:	108000cc 	andi	r2,r2,3
 600386c:	10800060 	cmpeqi	r2,r2,1
 6003870:	1000181e 	bne	r2,zero,60038d4 <read+0xc0>
        (fd->dev->read))
 6003874:	e0bffb17 	ldw	r2,-20(fp)
 6003878:	10800017 	ldw	r2,0(r2)
 600387c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 6003880:	10001426 	beq	r2,zero,60038d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 6003884:	e0bffb17 	ldw	r2,-20(fp)
 6003888:	10800017 	ldw	r2,0(r2)
 600388c:	10800517 	ldw	r2,20(r2)
 6003890:	e0ffff17 	ldw	r3,-4(fp)
 6003894:	180d883a 	mov	r6,r3
 6003898:	e17ffe17 	ldw	r5,-8(fp)
 600389c:	e13ffb17 	ldw	r4,-20(fp)
 60038a0:	103ee83a 	callr	r2
 60038a4:	e0bffc15 	stw	r2,-16(fp)
 60038a8:	e0bffc17 	ldw	r2,-16(fp)
 60038ac:	1000070e 	bge	r2,zero,60038cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
 60038b0:	60037d80 	call	60037d8 <alt_get_errno>
 60038b4:	1007883a 	mov	r3,r2
 60038b8:	e0bffc17 	ldw	r2,-16(fp)
 60038bc:	0085c83a 	sub	r2,zero,r2
 60038c0:	18800015 	stw	r2,0(r3)
          return -1;
 60038c4:	00bfffc4 	movi	r2,-1
 60038c8:	00000c06 	br	60038fc <read+0xe8>
        }
        return rval;
 60038cc:	e0bffc17 	ldw	r2,-16(fp)
 60038d0:	00000a06 	br	60038fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 60038d4:	60037d80 	call	60037d8 <alt_get_errno>
 60038d8:	1007883a 	mov	r3,r2
 60038dc:	00800344 	movi	r2,13
 60038e0:	18800015 	stw	r2,0(r3)
 60038e4:	00000406 	br	60038f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 60038e8:	60037d80 	call	60037d8 <alt_get_errno>
 60038ec:	1007883a 	mov	r3,r2
 60038f0:	00801444 	movi	r2,81
 60038f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 60038f8:	00bfffc4 	movi	r2,-1
}
 60038fc:	e037883a 	mov	sp,fp
 6003900:	dfc00117 	ldw	ra,4(sp)
 6003904:	df000017 	ldw	fp,0(sp)
 6003908:	dec00204 	addi	sp,sp,8
 600390c:	f800283a 	ret

06003910 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 6003910:	defffe04 	addi	sp,sp,-8
 6003914:	df000115 	stw	fp,4(sp)
 6003918:	df000104 	addi	fp,sp,4
 600391c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 6003920:	e0bfff17 	ldw	r2,-4(fp)
 6003924:	108000d0 	cmplti	r2,r2,3
 6003928:	10000d1e 	bne	r2,zero,6003960 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 600392c:	00818034 	movhi	r2,1536
 6003930:	10998b04 	addi	r2,r2,26156
 6003934:	e0ffff17 	ldw	r3,-4(fp)
 6003938:	18c00324 	muli	r3,r3,12
 600393c:	10c5883a 	add	r2,r2,r3
 6003940:	10800204 	addi	r2,r2,8
 6003944:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 6003948:	00818034 	movhi	r2,1536
 600394c:	10998b04 	addi	r2,r2,26156
 6003950:	e0ffff17 	ldw	r3,-4(fp)
 6003954:	18c00324 	muli	r3,r3,12
 6003958:	10c5883a 	add	r2,r2,r3
 600395c:	10000015 	stw	zero,0(r2)
  }
}
 6003960:	0001883a 	nop
 6003964:	e037883a 	mov	sp,fp
 6003968:	df000017 	ldw	fp,0(sp)
 600396c:	dec00104 	addi	sp,sp,4
 6003970:	f800283a 	ret

06003974 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 6003974:	defff904 	addi	sp,sp,-28
 6003978:	df000615 	stw	fp,24(sp)
 600397c:	df000604 	addi	fp,sp,24
 6003980:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 6003984:	0005303a 	rdctl	r2,status
 6003988:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 600398c:	e0fffe17 	ldw	r3,-8(fp)
 6003990:	00bfff84 	movi	r2,-2
 6003994:	1884703a 	and	r2,r3,r2
 6003998:	1001703a 	wrctl	status,r2
  
  return context;
 600399c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 60039a0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 60039a4:	d0a00d17 	ldw	r2,-32716(gp)
 60039a8:	10c000c4 	addi	r3,r2,3
 60039ac:	00bfff04 	movi	r2,-4
 60039b0:	1884703a 	and	r2,r3,r2
 60039b4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 60039b8:	d0e00d17 	ldw	r3,-32716(gp)
 60039bc:	e0bfff17 	ldw	r2,-4(fp)
 60039c0:	1887883a 	add	r3,r3,r2
 60039c4:	0081c034 	movhi	r2,1792
 60039c8:	10800004 	addi	r2,r2,0
 60039cc:	10c0062e 	bgeu	r2,r3,60039e8 <sbrk+0x74>
 60039d0:	e0bffb17 	ldw	r2,-20(fp)
 60039d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 60039d8:	e0bffa17 	ldw	r2,-24(fp)
 60039dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 60039e0:	00bfffc4 	movi	r2,-1
 60039e4:	00000b06 	br	6003a14 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 60039e8:	d0a00d17 	ldw	r2,-32716(gp)
 60039ec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 60039f0:	d0e00d17 	ldw	r3,-32716(gp)
 60039f4:	e0bfff17 	ldw	r2,-4(fp)
 60039f8:	1885883a 	add	r2,r3,r2
 60039fc:	d0a00d15 	stw	r2,-32716(gp)
 6003a00:	e0bffb17 	ldw	r2,-20(fp)
 6003a04:	e0bffc15 	stw	r2,-16(fp)
 6003a08:	e0bffc17 	ldw	r2,-16(fp)
 6003a0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 6003a10:	e0bffd17 	ldw	r2,-12(fp)
} 
 6003a14:	e037883a 	mov	sp,fp
 6003a18:	df000017 	ldw	fp,0(sp)
 6003a1c:	dec00104 	addi	sp,sp,4
 6003a20:	f800283a 	ret

06003a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 6003a24:	defffe04 	addi	sp,sp,-8
 6003a28:	dfc00115 	stw	ra,4(sp)
 6003a2c:	df000015 	stw	fp,0(sp)
 6003a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003a34:	d0a00c17 	ldw	r2,-32720(gp)
 6003a38:	10000326 	beq	r2,zero,6003a48 <alt_get_errno+0x24>
 6003a3c:	d0a00c17 	ldw	r2,-32720(gp)
 6003a40:	103ee83a 	callr	r2
 6003a44:	00000106 	br	6003a4c <alt_get_errno+0x28>
 6003a48:	d0a6ba04 	addi	r2,gp,-25880
}
 6003a4c:	e037883a 	mov	sp,fp
 6003a50:	dfc00117 	ldw	ra,4(sp)
 6003a54:	df000017 	ldw	fp,0(sp)
 6003a58:	dec00204 	addi	sp,sp,8
 6003a5c:	f800283a 	ret

06003a60 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 6003a60:	defff904 	addi	sp,sp,-28
 6003a64:	dfc00615 	stw	ra,24(sp)
 6003a68:	df000515 	stw	fp,20(sp)
 6003a6c:	df000504 	addi	fp,sp,20
 6003a70:	e13ffd15 	stw	r4,-12(fp)
 6003a74:	e17ffe15 	stw	r5,-8(fp)
 6003a78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003a7c:	e0bffd17 	ldw	r2,-12(fp)
 6003a80:	10000616 	blt	r2,zero,6003a9c <write+0x3c>
 6003a84:	e0bffd17 	ldw	r2,-12(fp)
 6003a88:	10c00324 	muli	r3,r2,12
 6003a8c:	00818034 	movhi	r2,1536
 6003a90:	10998b04 	addi	r2,r2,26156
 6003a94:	1885883a 	add	r2,r3,r2
 6003a98:	00000106 	br	6003aa0 <write+0x40>
 6003a9c:	0005883a 	mov	r2,zero
 6003aa0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 6003aa4:	e0bffb17 	ldw	r2,-20(fp)
 6003aa8:	10002126 	beq	r2,zero,6003b30 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 6003aac:	e0bffb17 	ldw	r2,-20(fp)
 6003ab0:	10800217 	ldw	r2,8(r2)
 6003ab4:	108000cc 	andi	r2,r2,3
 6003ab8:	10001826 	beq	r2,zero,6003b1c <write+0xbc>
 6003abc:	e0bffb17 	ldw	r2,-20(fp)
 6003ac0:	10800017 	ldw	r2,0(r2)
 6003ac4:	10800617 	ldw	r2,24(r2)
 6003ac8:	10001426 	beq	r2,zero,6003b1c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 6003acc:	e0bffb17 	ldw	r2,-20(fp)
 6003ad0:	10800017 	ldw	r2,0(r2)
 6003ad4:	10800617 	ldw	r2,24(r2)
 6003ad8:	e0ffff17 	ldw	r3,-4(fp)
 6003adc:	180d883a 	mov	r6,r3
 6003ae0:	e17ffe17 	ldw	r5,-8(fp)
 6003ae4:	e13ffb17 	ldw	r4,-20(fp)
 6003ae8:	103ee83a 	callr	r2
 6003aec:	e0bffc15 	stw	r2,-16(fp)
 6003af0:	e0bffc17 	ldw	r2,-16(fp)
 6003af4:	1000070e 	bge	r2,zero,6003b14 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 6003af8:	6003a240 	call	6003a24 <alt_get_errno>
 6003afc:	1007883a 	mov	r3,r2
 6003b00:	e0bffc17 	ldw	r2,-16(fp)
 6003b04:	0085c83a 	sub	r2,zero,r2
 6003b08:	18800015 	stw	r2,0(r3)
        return -1;
 6003b0c:	00bfffc4 	movi	r2,-1
 6003b10:	00000c06 	br	6003b44 <write+0xe4>
      }
      return rval;
 6003b14:	e0bffc17 	ldw	r2,-16(fp)
 6003b18:	00000a06 	br	6003b44 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 6003b1c:	6003a240 	call	6003a24 <alt_get_errno>
 6003b20:	1007883a 	mov	r3,r2
 6003b24:	00800344 	movi	r2,13
 6003b28:	18800015 	stw	r2,0(r3)
 6003b2c:	00000406 	br	6003b40 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 6003b30:	6003a240 	call	6003a24 <alt_get_errno>
 6003b34:	1007883a 	mov	r3,r2
 6003b38:	00801444 	movi	r2,81
 6003b3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 6003b40:	00bfffc4 	movi	r2,-1
}
 6003b44:	e037883a 	mov	sp,fp
 6003b48:	dfc00117 	ldw	ra,4(sp)
 6003b4c:	df000017 	ldw	fp,0(sp)
 6003b50:	dec00204 	addi	sp,sp,8
 6003b54:	f800283a 	ret

06003b58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 6003b58:	defffd04 	addi	sp,sp,-12
 6003b5c:	dfc00215 	stw	ra,8(sp)
 6003b60:	df000115 	stw	fp,4(sp)
 6003b64:	df000104 	addi	fp,sp,4
 6003b68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 6003b6c:	d1600904 	addi	r5,gp,-32732
 6003b70:	e13fff17 	ldw	r4,-4(fp)
 6003b74:	6004c600 	call	6004c60 <alt_dev_llist_insert>
}
 6003b78:	e037883a 	mov	sp,fp
 6003b7c:	dfc00117 	ldw	ra,4(sp)
 6003b80:	df000017 	ldw	fp,0(sp)
 6003b84:	dec00204 	addi	sp,sp,8
 6003b88:	f800283a 	ret

06003b8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 6003b8c:	defffe04 	addi	sp,sp,-8
 6003b90:	dfc00115 	stw	ra,4(sp)
 6003b94:	df000015 	stw	fp,0(sp)
 6003b98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003b9c:	d0a00c17 	ldw	r2,-32720(gp)
 6003ba0:	10000326 	beq	r2,zero,6003bb0 <alt_get_errno+0x24>
 6003ba4:	d0a00c17 	ldw	r2,-32720(gp)
 6003ba8:	103ee83a 	callr	r2
 6003bac:	00000106 	br	6003bb4 <alt_get_errno+0x28>
 6003bb0:	d0a6ba04 	addi	r2,gp,-25880
}
 6003bb4:	e037883a 	mov	sp,fp
 6003bb8:	dfc00117 	ldw	ra,4(sp)
 6003bbc:	df000017 	ldw	fp,0(sp)
 6003bc0:	dec00204 	addi	sp,sp,8
 6003bc4:	f800283a 	ret

06003bc8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 6003bc8:	defffc04 	addi	sp,sp,-16
 6003bcc:	dfc00315 	stw	ra,12(sp)
 6003bd0:	df000215 	stw	fp,8(sp)
 6003bd4:	df000204 	addi	fp,sp,8
 6003bd8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 6003bdc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 6003be0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 6003be4:	e0bffe17 	ldw	r2,-8(fp)
 6003be8:	1000051e 	bne	r2,zero,6003c00 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 6003bec:	d1600e04 	addi	r5,gp,-32712
 6003bf0:	e13fff17 	ldw	r4,-4(fp)
 6003bf4:	6004c600 	call	6004c60 <alt_dev_llist_insert>
 6003bf8:	e0bffe15 	stw	r2,-8(fp)
 6003bfc:	00000606 	br	6003c18 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 6003c00:	6003b8c0 	call	6003b8c <alt_get_errno>
 6003c04:	1007883a 	mov	r3,r2
 6003c08:	00800304 	movi	r2,12
 6003c0c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 6003c10:	00bffd04 	movi	r2,-12
 6003c14:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 6003c18:	e0bffe17 	ldw	r2,-8(fp)
}
 6003c1c:	e037883a 	mov	sp,fp
 6003c20:	dfc00117 	ldw	ra,4(sp)
 6003c24:	df000017 	ldw	fp,0(sp)
 6003c28:	dec00204 	addi	sp,sp,8
 6003c2c:	f800283a 	ret

06003c30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 6003c30:	defffd04 	addi	sp,sp,-12
 6003c34:	dfc00215 	stw	ra,8(sp)
 6003c38:	df000115 	stw	fp,4(sp)
 6003c3c:	df000104 	addi	fp,sp,4
 6003c40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_2, cpu_2);
 6003c44:	60056600 	call	6005660 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 6003c48:	00800044 	movi	r2,1
 6003c4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 6003c50:	0001883a 	nop
 6003c54:	e037883a 	mov	sp,fp
 6003c58:	dfc00117 	ldw	ra,4(sp)
 6003c5c:	df000017 	ldw	fp,0(sp)
 6003c60:	dec00204 	addi	sp,sp,8
 6003c64:	f800283a 	ret

06003c68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 6003c68:	defffe04 	addi	sp,sp,-8
 6003c6c:	dfc00115 	stw	ra,4(sp)
 6003c70:	df000015 	stw	fp,0(sp)
 6003c74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
 6003c78:	01c01904 	movi	r7,100
 6003c7c:	000d883a 	mov	r6,zero
 6003c80:	000b883a 	mov	r5,zero
 6003c84:	01040004 	movi	r4,4096
 6003c88:	6004a7c0 	call	6004a7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART2, jtag_uart2);
 6003c8c:	01800044 	movi	r6,1
 6003c90:	000b883a 	mov	r5,zero
 6003c94:	01018034 	movhi	r4,1536
 6003c98:	2119f504 	addi	r4,r4,26580
 6003c9c:	6003e340 	call	6003e34 <altera_avalon_jtag_uart_init>
 6003ca0:	01018034 	movhi	r4,1536
 6003ca4:	2119eb04 	addi	r4,r4,26540
 6003ca8:	6003b580 	call	6003b58 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX, mutex);
 6003cac:	01018034 	movhi	r4,1536
 6003cb0:	211e0304 	addi	r4,r4,30732
 6003cb4:	6003bc80 	call	6003bc8 <alt_avalon_mutex_reg>
}
 6003cb8:	0001883a 	nop
 6003cbc:	e037883a 	mov	sp,fp
 6003cc0:	dfc00117 	ldw	ra,4(sp)
 6003cc4:	df000017 	ldw	fp,0(sp)
 6003cc8:	dec00204 	addi	sp,sp,8
 6003ccc:	f800283a 	ret

06003cd0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 6003cd0:	defffa04 	addi	sp,sp,-24
 6003cd4:	dfc00515 	stw	ra,20(sp)
 6003cd8:	df000415 	stw	fp,16(sp)
 6003cdc:	df000404 	addi	fp,sp,16
 6003ce0:	e13ffd15 	stw	r4,-12(fp)
 6003ce4:	e17ffe15 	stw	r5,-8(fp)
 6003ce8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003cec:	e0bffd17 	ldw	r2,-12(fp)
 6003cf0:	10800017 	ldw	r2,0(r2)
 6003cf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 6003cf8:	e0bffc17 	ldw	r2,-16(fp)
 6003cfc:	10c00a04 	addi	r3,r2,40
 6003d00:	e0bffd17 	ldw	r2,-12(fp)
 6003d04:	10800217 	ldw	r2,8(r2)
 6003d08:	100f883a 	mov	r7,r2
 6003d0c:	e1bfff17 	ldw	r6,-4(fp)
 6003d10:	e17ffe17 	ldw	r5,-8(fp)
 6003d14:	1809883a 	mov	r4,r3
 6003d18:	60042f80 	call	60042f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 6003d1c:	e037883a 	mov	sp,fp
 6003d20:	dfc00117 	ldw	ra,4(sp)
 6003d24:	df000017 	ldw	fp,0(sp)
 6003d28:	dec00204 	addi	sp,sp,8
 6003d2c:	f800283a 	ret

06003d30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 6003d30:	defffa04 	addi	sp,sp,-24
 6003d34:	dfc00515 	stw	ra,20(sp)
 6003d38:	df000415 	stw	fp,16(sp)
 6003d3c:	df000404 	addi	fp,sp,16
 6003d40:	e13ffd15 	stw	r4,-12(fp)
 6003d44:	e17ffe15 	stw	r5,-8(fp)
 6003d48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003d4c:	e0bffd17 	ldw	r2,-12(fp)
 6003d50:	10800017 	ldw	r2,0(r2)
 6003d54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 6003d58:	e0bffc17 	ldw	r2,-16(fp)
 6003d5c:	10c00a04 	addi	r3,r2,40
 6003d60:	e0bffd17 	ldw	r2,-12(fp)
 6003d64:	10800217 	ldw	r2,8(r2)
 6003d68:	100f883a 	mov	r7,r2
 6003d6c:	e1bfff17 	ldw	r6,-4(fp)
 6003d70:	e17ffe17 	ldw	r5,-8(fp)
 6003d74:	1809883a 	mov	r4,r3
 6003d78:	60045140 	call	6004514 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 6003d7c:	e037883a 	mov	sp,fp
 6003d80:	dfc00117 	ldw	ra,4(sp)
 6003d84:	df000017 	ldw	fp,0(sp)
 6003d88:	dec00204 	addi	sp,sp,8
 6003d8c:	f800283a 	ret

06003d90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 6003d90:	defffc04 	addi	sp,sp,-16
 6003d94:	dfc00315 	stw	ra,12(sp)
 6003d98:	df000215 	stw	fp,8(sp)
 6003d9c:	df000204 	addi	fp,sp,8
 6003da0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003da4:	e0bfff17 	ldw	r2,-4(fp)
 6003da8:	10800017 	ldw	r2,0(r2)
 6003dac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 6003db0:	e0bffe17 	ldw	r2,-8(fp)
 6003db4:	10c00a04 	addi	r3,r2,40
 6003db8:	e0bfff17 	ldw	r2,-4(fp)
 6003dbc:	10800217 	ldw	r2,8(r2)
 6003dc0:	100b883a 	mov	r5,r2
 6003dc4:	1809883a 	mov	r4,r3
 6003dc8:	60041a00 	call	60041a0 <altera_avalon_jtag_uart_close>
}
 6003dcc:	e037883a 	mov	sp,fp
 6003dd0:	dfc00117 	ldw	ra,4(sp)
 6003dd4:	df000017 	ldw	fp,0(sp)
 6003dd8:	dec00204 	addi	sp,sp,8
 6003ddc:	f800283a 	ret

06003de0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 6003de0:	defffa04 	addi	sp,sp,-24
 6003de4:	dfc00515 	stw	ra,20(sp)
 6003de8:	df000415 	stw	fp,16(sp)
 6003dec:	df000404 	addi	fp,sp,16
 6003df0:	e13ffd15 	stw	r4,-12(fp)
 6003df4:	e17ffe15 	stw	r5,-8(fp)
 6003df8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 6003dfc:	e0bffd17 	ldw	r2,-12(fp)
 6003e00:	10800017 	ldw	r2,0(r2)
 6003e04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 6003e08:	e0bffc17 	ldw	r2,-16(fp)
 6003e0c:	10800a04 	addi	r2,r2,40
 6003e10:	e1bfff17 	ldw	r6,-4(fp)
 6003e14:	e17ffe17 	ldw	r5,-8(fp)
 6003e18:	1009883a 	mov	r4,r2
 6003e1c:	60042080 	call	6004208 <altera_avalon_jtag_uart_ioctl>
}
 6003e20:	e037883a 	mov	sp,fp
 6003e24:	dfc00117 	ldw	ra,4(sp)
 6003e28:	df000017 	ldw	fp,0(sp)
 6003e2c:	dec00204 	addi	sp,sp,8
 6003e30:	f800283a 	ret

06003e34 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 6003e34:	defffa04 	addi	sp,sp,-24
 6003e38:	dfc00515 	stw	ra,20(sp)
 6003e3c:	df000415 	stw	fp,16(sp)
 6003e40:	df000404 	addi	fp,sp,16
 6003e44:	e13ffd15 	stw	r4,-12(fp)
 6003e48:	e17ffe15 	stw	r5,-8(fp)
 6003e4c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 6003e50:	e0bffd17 	ldw	r2,-12(fp)
 6003e54:	00c00044 	movi	r3,1
 6003e58:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 6003e5c:	e0bffd17 	ldw	r2,-12(fp)
 6003e60:	10800017 	ldw	r2,0(r2)
 6003e64:	10800104 	addi	r2,r2,4
 6003e68:	1007883a 	mov	r3,r2
 6003e6c:	e0bffd17 	ldw	r2,-12(fp)
 6003e70:	10800817 	ldw	r2,32(r2)
 6003e74:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 6003e78:	e0bffe17 	ldw	r2,-8(fp)
 6003e7c:	e0ffff17 	ldw	r3,-4(fp)
 6003e80:	d8000015 	stw	zero,0(sp)
 6003e84:	e1fffd17 	ldw	r7,-12(fp)
 6003e88:	01818034 	movhi	r6,1536
 6003e8c:	318fbd04 	addi	r6,r6,16116
 6003e90:	180b883a 	mov	r5,r3
 6003e94:	1009883a 	mov	r4,r2
 6003e98:	6004e880 	call	6004e88 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 6003e9c:	e0bffd17 	ldw	r2,-12(fp)
 6003ea0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 6003ea4:	e0bffd17 	ldw	r2,-12(fp)
 6003ea8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 6003eac:	d0e6bf17 	ldw	r3,-25860(gp)
 6003eb0:	e1fffd17 	ldw	r7,-12(fp)
 6003eb4:	01818034 	movhi	r6,1536
 6003eb8:	31904004 	addi	r6,r6,16640
 6003ebc:	180b883a 	mov	r5,r3
 6003ec0:	1009883a 	mov	r4,r2
 6003ec4:	6004af80 	call	6004af8 <alt_alarm_start>
 6003ec8:	1000040e 	bge	r2,zero,6003edc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 6003ecc:	e0fffd17 	ldw	r3,-12(fp)
 6003ed0:	00a00034 	movhi	r2,32768
 6003ed4:	10bfffc4 	addi	r2,r2,-1
 6003ed8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 6003edc:	0001883a 	nop
 6003ee0:	e037883a 	mov	sp,fp
 6003ee4:	dfc00117 	ldw	ra,4(sp)
 6003ee8:	df000017 	ldw	fp,0(sp)
 6003eec:	dec00204 	addi	sp,sp,8
 6003ef0:	f800283a 	ret

06003ef4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 6003ef4:	defff804 	addi	sp,sp,-32
 6003ef8:	df000715 	stw	fp,28(sp)
 6003efc:	df000704 	addi	fp,sp,28
 6003f00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 6003f04:	e0bfff17 	ldw	r2,-4(fp)
 6003f08:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 6003f0c:	e0bffb17 	ldw	r2,-20(fp)
 6003f10:	10800017 	ldw	r2,0(r2)
 6003f14:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 6003f18:	e0bffc17 	ldw	r2,-16(fp)
 6003f1c:	10800104 	addi	r2,r2,4
 6003f20:	10800037 	ldwio	r2,0(r2)
 6003f24:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 6003f28:	e0bffd17 	ldw	r2,-12(fp)
 6003f2c:	1080c00c 	andi	r2,r2,768
 6003f30:	10006d26 	beq	r2,zero,60040e8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 6003f34:	e0bffd17 	ldw	r2,-12(fp)
 6003f38:	1080400c 	andi	r2,r2,256
 6003f3c:	10003526 	beq	r2,zero,6004014 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 6003f40:	00800074 	movhi	r2,1
 6003f44:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 6003f48:	e0bffb17 	ldw	r2,-20(fp)
 6003f4c:	10800a17 	ldw	r2,40(r2)
 6003f50:	10800044 	addi	r2,r2,1
 6003f54:	1081ffcc 	andi	r2,r2,2047
 6003f58:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 6003f5c:	e0bffb17 	ldw	r2,-20(fp)
 6003f60:	10c00b17 	ldw	r3,44(r2)
 6003f64:	e0bffe17 	ldw	r2,-8(fp)
 6003f68:	18801526 	beq	r3,r2,6003fc0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 6003f6c:	e0bffc17 	ldw	r2,-16(fp)
 6003f70:	10800037 	ldwio	r2,0(r2)
 6003f74:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 6003f78:	e0bff917 	ldw	r2,-28(fp)
 6003f7c:	10a0000c 	andi	r2,r2,32768
 6003f80:	10001126 	beq	r2,zero,6003fc8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 6003f84:	e0bffb17 	ldw	r2,-20(fp)
 6003f88:	10800a17 	ldw	r2,40(r2)
 6003f8c:	e0fff917 	ldw	r3,-28(fp)
 6003f90:	1809883a 	mov	r4,r3
 6003f94:	e0fffb17 	ldw	r3,-20(fp)
 6003f98:	1885883a 	add	r2,r3,r2
 6003f9c:	10800e04 	addi	r2,r2,56
 6003fa0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 6003fa4:	e0bffb17 	ldw	r2,-20(fp)
 6003fa8:	10800a17 	ldw	r2,40(r2)
 6003fac:	10800044 	addi	r2,r2,1
 6003fb0:	10c1ffcc 	andi	r3,r2,2047
 6003fb4:	e0bffb17 	ldw	r2,-20(fp)
 6003fb8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 6003fbc:	003fe206 	br	6003f48 <__alt_data_end+0xff003f48>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 6003fc0:	0001883a 	nop
 6003fc4:	00000106 	br	6003fcc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 6003fc8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 6003fcc:	e0bff917 	ldw	r2,-28(fp)
 6003fd0:	10bfffec 	andhi	r2,r2,65535
 6003fd4:	10000f26 	beq	r2,zero,6004014 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 6003fd8:	e0bffb17 	ldw	r2,-20(fp)
 6003fdc:	10c00817 	ldw	r3,32(r2)
 6003fe0:	00bfff84 	movi	r2,-2
 6003fe4:	1886703a 	and	r3,r3,r2
 6003fe8:	e0bffb17 	ldw	r2,-20(fp)
 6003fec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 6003ff0:	e0bffc17 	ldw	r2,-16(fp)
 6003ff4:	10800104 	addi	r2,r2,4
 6003ff8:	1007883a 	mov	r3,r2
 6003ffc:	e0bffb17 	ldw	r2,-20(fp)
 6004000:	10800817 	ldw	r2,32(r2)
 6004004:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 6004008:	e0bffc17 	ldw	r2,-16(fp)
 600400c:	10800104 	addi	r2,r2,4
 6004010:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 6004014:	e0bffd17 	ldw	r2,-12(fp)
 6004018:	1080800c 	andi	r2,r2,512
 600401c:	103fbe26 	beq	r2,zero,6003f18 <__alt_data_end+0xff003f18>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 6004020:	e0bffd17 	ldw	r2,-12(fp)
 6004024:	1004d43a 	srli	r2,r2,16
 6004028:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 600402c:	00001406 	br	6004080 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 6004030:	e0bffc17 	ldw	r2,-16(fp)
 6004034:	e0fffb17 	ldw	r3,-20(fp)
 6004038:	18c00d17 	ldw	r3,52(r3)
 600403c:	e13ffb17 	ldw	r4,-20(fp)
 6004040:	20c7883a 	add	r3,r4,r3
 6004044:	18c20e04 	addi	r3,r3,2104
 6004048:	18c00003 	ldbu	r3,0(r3)
 600404c:	18c03fcc 	andi	r3,r3,255
 6004050:	18c0201c 	xori	r3,r3,128
 6004054:	18ffe004 	addi	r3,r3,-128
 6004058:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 600405c:	e0bffb17 	ldw	r2,-20(fp)
 6004060:	10800d17 	ldw	r2,52(r2)
 6004064:	10800044 	addi	r2,r2,1
 6004068:	10c1ffcc 	andi	r3,r2,2047
 600406c:	e0bffb17 	ldw	r2,-20(fp)
 6004070:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 6004074:	e0bffa17 	ldw	r2,-24(fp)
 6004078:	10bfffc4 	addi	r2,r2,-1
 600407c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 6004080:	e0bffa17 	ldw	r2,-24(fp)
 6004084:	10000526 	beq	r2,zero,600409c <altera_avalon_jtag_uart_irq+0x1a8>
 6004088:	e0bffb17 	ldw	r2,-20(fp)
 600408c:	10c00d17 	ldw	r3,52(r2)
 6004090:	e0bffb17 	ldw	r2,-20(fp)
 6004094:	10800c17 	ldw	r2,48(r2)
 6004098:	18bfe51e 	bne	r3,r2,6004030 <__alt_data_end+0xff004030>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 600409c:	e0bffa17 	ldw	r2,-24(fp)
 60040a0:	103f9d26 	beq	r2,zero,6003f18 <__alt_data_end+0xff003f18>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 60040a4:	e0bffb17 	ldw	r2,-20(fp)
 60040a8:	10c00817 	ldw	r3,32(r2)
 60040ac:	00bfff44 	movi	r2,-3
 60040b0:	1886703a 	and	r3,r3,r2
 60040b4:	e0bffb17 	ldw	r2,-20(fp)
 60040b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 60040bc:	e0bffb17 	ldw	r2,-20(fp)
 60040c0:	10800017 	ldw	r2,0(r2)
 60040c4:	10800104 	addi	r2,r2,4
 60040c8:	1007883a 	mov	r3,r2
 60040cc:	e0bffb17 	ldw	r2,-20(fp)
 60040d0:	10800817 	ldw	r2,32(r2)
 60040d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 60040d8:	e0bffc17 	ldw	r2,-16(fp)
 60040dc:	10800104 	addi	r2,r2,4
 60040e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 60040e4:	003f8c06 	br	6003f18 <__alt_data_end+0xff003f18>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 60040e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 60040ec:	0001883a 	nop
 60040f0:	e037883a 	mov	sp,fp
 60040f4:	df000017 	ldw	fp,0(sp)
 60040f8:	dec00104 	addi	sp,sp,4
 60040fc:	f800283a 	ret

06004100 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 6004100:	defff804 	addi	sp,sp,-32
 6004104:	df000715 	stw	fp,28(sp)
 6004108:	df000704 	addi	fp,sp,28
 600410c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 6004110:	e0bffb17 	ldw	r2,-20(fp)
 6004114:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 6004118:	e0bff917 	ldw	r2,-28(fp)
 600411c:	10800017 	ldw	r2,0(r2)
 6004120:	10800104 	addi	r2,r2,4
 6004124:	10800037 	ldwio	r2,0(r2)
 6004128:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 600412c:	e0bffa17 	ldw	r2,-24(fp)
 6004130:	1081000c 	andi	r2,r2,1024
 6004134:	10000b26 	beq	r2,zero,6004164 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 6004138:	e0bff917 	ldw	r2,-28(fp)
 600413c:	10800017 	ldw	r2,0(r2)
 6004140:	10800104 	addi	r2,r2,4
 6004144:	1007883a 	mov	r3,r2
 6004148:	e0bff917 	ldw	r2,-28(fp)
 600414c:	10800817 	ldw	r2,32(r2)
 6004150:	10810014 	ori	r2,r2,1024
 6004154:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 6004158:	e0bff917 	ldw	r2,-28(fp)
 600415c:	10000915 	stw	zero,36(r2)
 6004160:	00000a06 	br	600418c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 6004164:	e0bff917 	ldw	r2,-28(fp)
 6004168:	10c00917 	ldw	r3,36(r2)
 600416c:	00a00034 	movhi	r2,32768
 6004170:	10bfff04 	addi	r2,r2,-4
 6004174:	10c00536 	bltu	r2,r3,600418c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 6004178:	e0bff917 	ldw	r2,-28(fp)
 600417c:	10800917 	ldw	r2,36(r2)
 6004180:	10c00044 	addi	r3,r2,1
 6004184:	e0bff917 	ldw	r2,-28(fp)
 6004188:	10c00915 	stw	r3,36(r2)
 600418c:	d0a6bf17 	ldw	r2,-25860(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 6004190:	e037883a 	mov	sp,fp
 6004194:	df000017 	ldw	fp,0(sp)
 6004198:	dec00104 	addi	sp,sp,4
 600419c:	f800283a 	ret

060041a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 60041a0:	defffd04 	addi	sp,sp,-12
 60041a4:	df000215 	stw	fp,8(sp)
 60041a8:	df000204 	addi	fp,sp,8
 60041ac:	e13ffe15 	stw	r4,-8(fp)
 60041b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 60041b4:	00000506 	br	60041cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 60041b8:	e0bfff17 	ldw	r2,-4(fp)
 60041bc:	1090000c 	andi	r2,r2,16384
 60041c0:	10000226 	beq	r2,zero,60041cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 60041c4:	00bffd44 	movi	r2,-11
 60041c8:	00000b06 	br	60041f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 60041cc:	e0bffe17 	ldw	r2,-8(fp)
 60041d0:	10c00d17 	ldw	r3,52(r2)
 60041d4:	e0bffe17 	ldw	r2,-8(fp)
 60041d8:	10800c17 	ldw	r2,48(r2)
 60041dc:	18800526 	beq	r3,r2,60041f4 <altera_avalon_jtag_uart_close+0x54>
 60041e0:	e0bffe17 	ldw	r2,-8(fp)
 60041e4:	10c00917 	ldw	r3,36(r2)
 60041e8:	e0bffe17 	ldw	r2,-8(fp)
 60041ec:	10800117 	ldw	r2,4(r2)
 60041f0:	18bff136 	bltu	r3,r2,60041b8 <__alt_data_end+0xff0041b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 60041f4:	0005883a 	mov	r2,zero
}
 60041f8:	e037883a 	mov	sp,fp
 60041fc:	df000017 	ldw	fp,0(sp)
 6004200:	dec00104 	addi	sp,sp,4
 6004204:	f800283a 	ret

06004208 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 6004208:	defffa04 	addi	sp,sp,-24
 600420c:	df000515 	stw	fp,20(sp)
 6004210:	df000504 	addi	fp,sp,20
 6004214:	e13ffd15 	stw	r4,-12(fp)
 6004218:	e17ffe15 	stw	r5,-8(fp)
 600421c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 6004220:	00bff9c4 	movi	r2,-25
 6004224:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 6004228:	e0bffe17 	ldw	r2,-8(fp)
 600422c:	10da8060 	cmpeqi	r3,r2,27137
 6004230:	1800031e 	bne	r3,zero,6004240 <altera_avalon_jtag_uart_ioctl+0x38>
 6004234:	109a80a0 	cmpeqi	r2,r2,27138
 6004238:	1000181e 	bne	r2,zero,600429c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 600423c:	00002906 	br	60042e4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 6004240:	e0bffd17 	ldw	r2,-12(fp)
 6004244:	10c00117 	ldw	r3,4(r2)
 6004248:	00a00034 	movhi	r2,32768
 600424c:	10bfffc4 	addi	r2,r2,-1
 6004250:	18802126 	beq	r3,r2,60042d8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 6004254:	e0bfff17 	ldw	r2,-4(fp)
 6004258:	10800017 	ldw	r2,0(r2)
 600425c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 6004260:	e0bffc17 	ldw	r2,-16(fp)
 6004264:	10800090 	cmplti	r2,r2,2
 6004268:	1000061e 	bne	r2,zero,6004284 <altera_avalon_jtag_uart_ioctl+0x7c>
 600426c:	e0fffc17 	ldw	r3,-16(fp)
 6004270:	00a00034 	movhi	r2,32768
 6004274:	10bfffc4 	addi	r2,r2,-1
 6004278:	18800226 	beq	r3,r2,6004284 <altera_avalon_jtag_uart_ioctl+0x7c>
 600427c:	e0bffc17 	ldw	r2,-16(fp)
 6004280:	00000206 	br	600428c <altera_avalon_jtag_uart_ioctl+0x84>
 6004284:	00a00034 	movhi	r2,32768
 6004288:	10bfff84 	addi	r2,r2,-2
 600428c:	e0fffd17 	ldw	r3,-12(fp)
 6004290:	18800115 	stw	r2,4(r3)
      rc = 0;
 6004294:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 6004298:	00000f06 	br	60042d8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 600429c:	e0bffd17 	ldw	r2,-12(fp)
 60042a0:	10c00117 	ldw	r3,4(r2)
 60042a4:	00a00034 	movhi	r2,32768
 60042a8:	10bfffc4 	addi	r2,r2,-1
 60042ac:	18800c26 	beq	r3,r2,60042e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 60042b0:	e0bffd17 	ldw	r2,-12(fp)
 60042b4:	10c00917 	ldw	r3,36(r2)
 60042b8:	e0bffd17 	ldw	r2,-12(fp)
 60042bc:	10800117 	ldw	r2,4(r2)
 60042c0:	1885803a 	cmpltu	r2,r3,r2
 60042c4:	10c03fcc 	andi	r3,r2,255
 60042c8:	e0bfff17 	ldw	r2,-4(fp)
 60042cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 60042d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 60042d4:	00000206 	br	60042e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 60042d8:	0001883a 	nop
 60042dc:	00000106 	br	60042e4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 60042e0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 60042e4:	e0bffb17 	ldw	r2,-20(fp)
}
 60042e8:	e037883a 	mov	sp,fp
 60042ec:	df000017 	ldw	fp,0(sp)
 60042f0:	dec00104 	addi	sp,sp,4
 60042f4:	f800283a 	ret

060042f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 60042f8:	defff304 	addi	sp,sp,-52
 60042fc:	dfc00c15 	stw	ra,48(sp)
 6004300:	df000b15 	stw	fp,44(sp)
 6004304:	df000b04 	addi	fp,sp,44
 6004308:	e13ffc15 	stw	r4,-16(fp)
 600430c:	e17ffd15 	stw	r5,-12(fp)
 6004310:	e1bffe15 	stw	r6,-8(fp)
 6004314:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 6004318:	e0bffd17 	ldw	r2,-12(fp)
 600431c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 6004320:	00004706 	br	6004440 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 6004324:	e0bffc17 	ldw	r2,-16(fp)
 6004328:	10800a17 	ldw	r2,40(r2)
 600432c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 6004330:	e0bffc17 	ldw	r2,-16(fp)
 6004334:	10800b17 	ldw	r2,44(r2)
 6004338:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 600433c:	e0fff717 	ldw	r3,-36(fp)
 6004340:	e0bff817 	ldw	r2,-32(fp)
 6004344:	18800536 	bltu	r3,r2,600435c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 6004348:	e0fff717 	ldw	r3,-36(fp)
 600434c:	e0bff817 	ldw	r2,-32(fp)
 6004350:	1885c83a 	sub	r2,r3,r2
 6004354:	e0bff615 	stw	r2,-40(fp)
 6004358:	00000406 	br	600436c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 600435c:	00c20004 	movi	r3,2048
 6004360:	e0bff817 	ldw	r2,-32(fp)
 6004364:	1885c83a 	sub	r2,r3,r2
 6004368:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 600436c:	e0bff617 	ldw	r2,-40(fp)
 6004370:	10001e26 	beq	r2,zero,60043ec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 6004374:	e0fffe17 	ldw	r3,-8(fp)
 6004378:	e0bff617 	ldw	r2,-40(fp)
 600437c:	1880022e 	bgeu	r3,r2,6004388 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 6004380:	e0bffe17 	ldw	r2,-8(fp)
 6004384:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 6004388:	e0bffc17 	ldw	r2,-16(fp)
 600438c:	10c00e04 	addi	r3,r2,56
 6004390:	e0bff817 	ldw	r2,-32(fp)
 6004394:	1885883a 	add	r2,r3,r2
 6004398:	e1bff617 	ldw	r6,-40(fp)
 600439c:	100b883a 	mov	r5,r2
 60043a0:	e13ff517 	ldw	r4,-44(fp)
 60043a4:	60018440 	call	6001844 <memcpy>
      ptr   += n;
 60043a8:	e0fff517 	ldw	r3,-44(fp)
 60043ac:	e0bff617 	ldw	r2,-40(fp)
 60043b0:	1885883a 	add	r2,r3,r2
 60043b4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 60043b8:	e0fffe17 	ldw	r3,-8(fp)
 60043bc:	e0bff617 	ldw	r2,-40(fp)
 60043c0:	1885c83a 	sub	r2,r3,r2
 60043c4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 60043c8:	e0fff817 	ldw	r3,-32(fp)
 60043cc:	e0bff617 	ldw	r2,-40(fp)
 60043d0:	1885883a 	add	r2,r3,r2
 60043d4:	10c1ffcc 	andi	r3,r2,2047
 60043d8:	e0bffc17 	ldw	r2,-16(fp)
 60043dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 60043e0:	e0bffe17 	ldw	r2,-8(fp)
 60043e4:	00bfcf16 	blt	zero,r2,6004324 <__alt_data_end+0xff004324>
 60043e8:	00000106 	br	60043f0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 60043ec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 60043f0:	e0fff517 	ldw	r3,-44(fp)
 60043f4:	e0bffd17 	ldw	r2,-12(fp)
 60043f8:	1880141e 	bne	r3,r2,600444c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 60043fc:	e0bfff17 	ldw	r2,-4(fp)
 6004400:	1090000c 	andi	r2,r2,16384
 6004404:	1000131e 	bne	r2,zero,6004454 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 6004408:	0001883a 	nop
 600440c:	e0bffc17 	ldw	r2,-16(fp)
 6004410:	10c00a17 	ldw	r3,40(r2)
 6004414:	e0bff717 	ldw	r2,-36(fp)
 6004418:	1880051e 	bne	r3,r2,6004430 <altera_avalon_jtag_uart_read+0x138>
 600441c:	e0bffc17 	ldw	r2,-16(fp)
 6004420:	10c00917 	ldw	r3,36(r2)
 6004424:	e0bffc17 	ldw	r2,-16(fp)
 6004428:	10800117 	ldw	r2,4(r2)
 600442c:	18bff736 	bltu	r3,r2,600440c <__alt_data_end+0xff00440c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 6004430:	e0bffc17 	ldw	r2,-16(fp)
 6004434:	10c00a17 	ldw	r3,40(r2)
 6004438:	e0bff717 	ldw	r2,-36(fp)
 600443c:	18800726 	beq	r3,r2,600445c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 6004440:	e0bffe17 	ldw	r2,-8(fp)
 6004444:	00bfb716 	blt	zero,r2,6004324 <__alt_data_end+0xff004324>
 6004448:	00000506 	br	6004460 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 600444c:	0001883a 	nop
 6004450:	00000306 	br	6004460 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 6004454:	0001883a 	nop
 6004458:	00000106 	br	6004460 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 600445c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 6004460:	e0fff517 	ldw	r3,-44(fp)
 6004464:	e0bffd17 	ldw	r2,-12(fp)
 6004468:	18801826 	beq	r3,r2,60044cc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 600446c:	0005303a 	rdctl	r2,status
 6004470:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004474:	e0fffb17 	ldw	r3,-20(fp)
 6004478:	00bfff84 	movi	r2,-2
 600447c:	1884703a 	and	r2,r3,r2
 6004480:	1001703a 	wrctl	status,r2
  
  return context;
 6004484:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 6004488:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 600448c:	e0bffc17 	ldw	r2,-16(fp)
 6004490:	10800817 	ldw	r2,32(r2)
 6004494:	10c00054 	ori	r3,r2,1
 6004498:	e0bffc17 	ldw	r2,-16(fp)
 600449c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 60044a0:	e0bffc17 	ldw	r2,-16(fp)
 60044a4:	10800017 	ldw	r2,0(r2)
 60044a8:	10800104 	addi	r2,r2,4
 60044ac:	1007883a 	mov	r3,r2
 60044b0:	e0bffc17 	ldw	r2,-16(fp)
 60044b4:	10800817 	ldw	r2,32(r2)
 60044b8:	18800035 	stwio	r2,0(r3)
 60044bc:	e0bffa17 	ldw	r2,-24(fp)
 60044c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 60044c4:	e0bff917 	ldw	r2,-28(fp)
 60044c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 60044cc:	e0fff517 	ldw	r3,-44(fp)
 60044d0:	e0bffd17 	ldw	r2,-12(fp)
 60044d4:	18800426 	beq	r3,r2,60044e8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 60044d8:	e0fff517 	ldw	r3,-44(fp)
 60044dc:	e0bffd17 	ldw	r2,-12(fp)
 60044e0:	1885c83a 	sub	r2,r3,r2
 60044e4:	00000606 	br	6004500 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 60044e8:	e0bfff17 	ldw	r2,-4(fp)
 60044ec:	1090000c 	andi	r2,r2,16384
 60044f0:	10000226 	beq	r2,zero,60044fc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 60044f4:	00bffd44 	movi	r2,-11
 60044f8:	00000106 	br	6004500 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 60044fc:	00bffec4 	movi	r2,-5
}
 6004500:	e037883a 	mov	sp,fp
 6004504:	dfc00117 	ldw	ra,4(sp)
 6004508:	df000017 	ldw	fp,0(sp)
 600450c:	dec00204 	addi	sp,sp,8
 6004510:	f800283a 	ret

06004514 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 6004514:	defff304 	addi	sp,sp,-52
 6004518:	dfc00c15 	stw	ra,48(sp)
 600451c:	df000b15 	stw	fp,44(sp)
 6004520:	df000b04 	addi	fp,sp,44
 6004524:	e13ffc15 	stw	r4,-16(fp)
 6004528:	e17ffd15 	stw	r5,-12(fp)
 600452c:	e1bffe15 	stw	r6,-8(fp)
 6004530:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 6004534:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 6004538:	e0bffd17 	ldw	r2,-12(fp)
 600453c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 6004540:	00003706 	br	6004620 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 6004544:	e0bffc17 	ldw	r2,-16(fp)
 6004548:	10800c17 	ldw	r2,48(r2)
 600454c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 6004550:	e0bffc17 	ldw	r2,-16(fp)
 6004554:	10800d17 	ldw	r2,52(r2)
 6004558:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 600455c:	e0fff917 	ldw	r3,-28(fp)
 6004560:	e0bff517 	ldw	r2,-44(fp)
 6004564:	1880062e 	bgeu	r3,r2,6004580 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 6004568:	e0fff517 	ldw	r3,-44(fp)
 600456c:	e0bff917 	ldw	r2,-28(fp)
 6004570:	1885c83a 	sub	r2,r3,r2
 6004574:	10bfffc4 	addi	r2,r2,-1
 6004578:	e0bff615 	stw	r2,-40(fp)
 600457c:	00000b06 	br	60045ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 6004580:	e0bff517 	ldw	r2,-44(fp)
 6004584:	10000526 	beq	r2,zero,600459c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 6004588:	00c20004 	movi	r3,2048
 600458c:	e0bff917 	ldw	r2,-28(fp)
 6004590:	1885c83a 	sub	r2,r3,r2
 6004594:	e0bff615 	stw	r2,-40(fp)
 6004598:	00000406 	br	60045ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 600459c:	00c1ffc4 	movi	r3,2047
 60045a0:	e0bff917 	ldw	r2,-28(fp)
 60045a4:	1885c83a 	sub	r2,r3,r2
 60045a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 60045ac:	e0bff617 	ldw	r2,-40(fp)
 60045b0:	10001e26 	beq	r2,zero,600462c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 60045b4:	e0fffe17 	ldw	r3,-8(fp)
 60045b8:	e0bff617 	ldw	r2,-40(fp)
 60045bc:	1880022e 	bgeu	r3,r2,60045c8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 60045c0:	e0bffe17 	ldw	r2,-8(fp)
 60045c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 60045c8:	e0bffc17 	ldw	r2,-16(fp)
 60045cc:	10c20e04 	addi	r3,r2,2104
 60045d0:	e0bff917 	ldw	r2,-28(fp)
 60045d4:	1885883a 	add	r2,r3,r2
 60045d8:	e1bff617 	ldw	r6,-40(fp)
 60045dc:	e17ffd17 	ldw	r5,-12(fp)
 60045e0:	1009883a 	mov	r4,r2
 60045e4:	60018440 	call	6001844 <memcpy>
      ptr   += n;
 60045e8:	e0fffd17 	ldw	r3,-12(fp)
 60045ec:	e0bff617 	ldw	r2,-40(fp)
 60045f0:	1885883a 	add	r2,r3,r2
 60045f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 60045f8:	e0fffe17 	ldw	r3,-8(fp)
 60045fc:	e0bff617 	ldw	r2,-40(fp)
 6004600:	1885c83a 	sub	r2,r3,r2
 6004604:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 6004608:	e0fff917 	ldw	r3,-28(fp)
 600460c:	e0bff617 	ldw	r2,-40(fp)
 6004610:	1885883a 	add	r2,r3,r2
 6004614:	10c1ffcc 	andi	r3,r2,2047
 6004618:	e0bffc17 	ldw	r2,-16(fp)
 600461c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 6004620:	e0bffe17 	ldw	r2,-8(fp)
 6004624:	00bfc716 	blt	zero,r2,6004544 <__alt_data_end+0xff004544>
 6004628:	00000106 	br	6004630 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 600462c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 6004630:	0005303a 	rdctl	r2,status
 6004634:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004638:	e0fffb17 	ldw	r3,-20(fp)
 600463c:	00bfff84 	movi	r2,-2
 6004640:	1884703a 	and	r2,r3,r2
 6004644:	1001703a 	wrctl	status,r2
  
  return context;
 6004648:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 600464c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 6004650:	e0bffc17 	ldw	r2,-16(fp)
 6004654:	10800817 	ldw	r2,32(r2)
 6004658:	10c00094 	ori	r3,r2,2
 600465c:	e0bffc17 	ldw	r2,-16(fp)
 6004660:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 6004664:	e0bffc17 	ldw	r2,-16(fp)
 6004668:	10800017 	ldw	r2,0(r2)
 600466c:	10800104 	addi	r2,r2,4
 6004670:	1007883a 	mov	r3,r2
 6004674:	e0bffc17 	ldw	r2,-16(fp)
 6004678:	10800817 	ldw	r2,32(r2)
 600467c:	18800035 	stwio	r2,0(r3)
 6004680:	e0bffa17 	ldw	r2,-24(fp)
 6004684:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 6004688:	e0bff817 	ldw	r2,-32(fp)
 600468c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 6004690:	e0bffe17 	ldw	r2,-8(fp)
 6004694:	0080100e 	bge	zero,r2,60046d8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 6004698:	e0bfff17 	ldw	r2,-4(fp)
 600469c:	1090000c 	andi	r2,r2,16384
 60046a0:	1000101e 	bne	r2,zero,60046e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 60046a4:	0001883a 	nop
 60046a8:	e0bffc17 	ldw	r2,-16(fp)
 60046ac:	10c00d17 	ldw	r3,52(r2)
 60046b0:	e0bff517 	ldw	r2,-44(fp)
 60046b4:	1880051e 	bne	r3,r2,60046cc <altera_avalon_jtag_uart_write+0x1b8>
 60046b8:	e0bffc17 	ldw	r2,-16(fp)
 60046bc:	10c00917 	ldw	r3,36(r2)
 60046c0:	e0bffc17 	ldw	r2,-16(fp)
 60046c4:	10800117 	ldw	r2,4(r2)
 60046c8:	18bff736 	bltu	r3,r2,60046a8 <__alt_data_end+0xff0046a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 60046cc:	e0bffc17 	ldw	r2,-16(fp)
 60046d0:	10800917 	ldw	r2,36(r2)
 60046d4:	1000051e 	bne	r2,zero,60046ec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 60046d8:	e0bffe17 	ldw	r2,-8(fp)
 60046dc:	00bfd016 	blt	zero,r2,6004620 <__alt_data_end+0xff004620>
 60046e0:	00000306 	br	60046f0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 60046e4:	0001883a 	nop
 60046e8:	00000106 	br	60046f0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 60046ec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 60046f0:	e0fffd17 	ldw	r3,-12(fp)
 60046f4:	e0bff717 	ldw	r2,-36(fp)
 60046f8:	18800426 	beq	r3,r2,600470c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 60046fc:	e0fffd17 	ldw	r3,-12(fp)
 6004700:	e0bff717 	ldw	r2,-36(fp)
 6004704:	1885c83a 	sub	r2,r3,r2
 6004708:	00000606 	br	6004724 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 600470c:	e0bfff17 	ldw	r2,-4(fp)
 6004710:	1090000c 	andi	r2,r2,16384
 6004714:	10000226 	beq	r2,zero,6004720 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 6004718:	00bffd44 	movi	r2,-11
 600471c:	00000106 	br	6004724 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 6004720:	00bffec4 	movi	r2,-5
}
 6004724:	e037883a 	mov	sp,fp
 6004728:	dfc00117 	ldw	ra,4(sp)
 600472c:	df000017 	ldw	fp,0(sp)
 6004730:	dec00204 	addi	sp,sp,8
 6004734:	f800283a 	ret

06004738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 6004738:	defffe04 	addi	sp,sp,-8
 600473c:	dfc00115 	stw	ra,4(sp)
 6004740:	df000015 	stw	fp,0(sp)
 6004744:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6004748:	d0a00c17 	ldw	r2,-32720(gp)
 600474c:	10000326 	beq	r2,zero,600475c <alt_get_errno+0x24>
 6004750:	d0a00c17 	ldw	r2,-32720(gp)
 6004754:	103ee83a 	callr	r2
 6004758:	00000106 	br	6004760 <alt_get_errno+0x28>
 600475c:	d0a6ba04 	addi	r2,gp,-25880
}
 6004760:	e037883a 	mov	sp,fp
 6004764:	dfc00117 	ldw	ra,4(sp)
 6004768:	df000017 	ldw	fp,0(sp)
 600476c:	dec00204 	addi	sp,sp,8
 6004770:	f800283a 	ret

06004774 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 6004774:	defff904 	addi	sp,sp,-28
 6004778:	df000615 	stw	fp,24(sp)
 600477c:	df000604 	addi	fp,sp,24
 6004780:	e13ffe15 	stw	r4,-8(fp)
 6004784:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 6004788:	00bfffc4 	movi	r2,-1
 600478c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 6004790:	0005317a 	rdctl	r2,cpuid
 6004794:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 6004798:	e0bffb17 	ldw	r2,-20(fp)
 600479c:	1006943a 	slli	r3,r2,16
 60047a0:	e0bfff17 	ldw	r2,-4(fp)
 60047a4:	1884b03a 	or	r2,r3,r2
 60047a8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 60047ac:	e0bffe17 	ldw	r2,-8(fp)
 60047b0:	10800317 	ldw	r2,12(r2)
 60047b4:	e0fffc17 	ldw	r3,-16(fp)
 60047b8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 60047bc:	e0bffe17 	ldw	r2,-8(fp)
 60047c0:	10800317 	ldw	r2,12(r2)
 60047c4:	10800037 	ldwio	r2,0(r2)
 60047c8:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 60047cc:	e0fffd17 	ldw	r3,-12(fp)
 60047d0:	e0bffc17 	ldw	r2,-16(fp)
 60047d4:	1880011e 	bne	r3,r2,60047dc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 60047d8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 60047dc:	e0bffa17 	ldw	r2,-24(fp)
}
 60047e0:	e037883a 	mov	sp,fp
 60047e4:	df000017 	ldw	fp,0(sp)
 60047e8:	dec00104 	addi	sp,sp,4
 60047ec:	f800283a 	ret

060047f0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 60047f0:	defffc04 	addi	sp,sp,-16
 60047f4:	dfc00315 	stw	ra,12(sp)
 60047f8:	df000215 	stw	fp,8(sp)
 60047fc:	df000204 	addi	fp,sp,8
 6004800:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 6004804:	d1600e04 	addi	r5,gp,-32712
 6004808:	e13fff17 	ldw	r4,-4(fp)
 600480c:	6004dc40 	call	6004dc4 <alt_find_dev>
 6004810:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 6004814:	e0bffe17 	ldw	r2,-8(fp)
 6004818:	1000041e 	bne	r2,zero,600482c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 600481c:	60047380 	call	6004738 <alt_get_errno>
 6004820:	1007883a 	mov	r3,r2
 6004824:	008004c4 	movi	r2,19
 6004828:	18800015 	stw	r2,0(r3)
  }

  return dev;
 600482c:	e0bffe17 	ldw	r2,-8(fp)
}
 6004830:	e037883a 	mov	sp,fp
 6004834:	dfc00117 	ldw	ra,4(sp)
 6004838:	df000017 	ldw	fp,0(sp)
 600483c:	dec00204 	addi	sp,sp,8
 6004840:	f800283a 	ret

06004844 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 6004844:	defffe04 	addi	sp,sp,-8
 6004848:	df000115 	stw	fp,4(sp)
 600484c:	df000104 	addi	fp,sp,4
 6004850:	e13fff15 	stw	r4,-4(fp)
  return;
 6004854:	0001883a 	nop
}
 6004858:	e037883a 	mov	sp,fp
 600485c:	df000017 	ldw	fp,0(sp)
 6004860:	dec00104 	addi	sp,sp,4
 6004864:	f800283a 	ret

06004868 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 6004868:	defffc04 	addi	sp,sp,-16
 600486c:	dfc00315 	stw	ra,12(sp)
 6004870:	df000215 	stw	fp,8(sp)
 6004874:	df000204 	addi	fp,sp,8
 6004878:	e13ffe15 	stw	r4,-8(fp)
 600487c:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 6004880:	0001883a 	nop
 6004884:	e17fff17 	ldw	r5,-4(fp)
 6004888:	e13ffe17 	ldw	r4,-8(fp)
 600488c:	60047740 	call	6004774 <alt_mutex_trylock>
 6004890:	103ffc1e 	bne	r2,zero,6004884 <__alt_data_end+0xff004884>
}
 6004894:	0001883a 	nop
 6004898:	e037883a 	mov	sp,fp
 600489c:	dfc00117 	ldw	ra,4(sp)
 60048a0:	df000017 	ldw	fp,0(sp)
 60048a4:	dec00204 	addi	sp,sp,8
 60048a8:	f800283a 	ret

060048ac <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 60048ac:	defffa04 	addi	sp,sp,-24
 60048b0:	dfc00515 	stw	ra,20(sp)
 60048b4:	df000415 	stw	fp,16(sp)
 60048b8:	df000404 	addi	fp,sp,16
 60048bc:	e13ffd15 	stw	r4,-12(fp)
 60048c0:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 60048c4:	e17ffe17 	ldw	r5,-8(fp)
 60048c8:	e13ffd17 	ldw	r4,-12(fp)
 60048cc:	60047740 	call	6004774 <alt_mutex_trylock>
 60048d0:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 60048d4:	e0bffc17 	ldw	r2,-16(fp)
}
 60048d8:	e037883a 	mov	sp,fp
 60048dc:	dfc00117 	ldw	ra,4(sp)
 60048e0:	df000017 	ldw	fp,0(sp)
 60048e4:	dec00204 	addi	sp,sp,8
 60048e8:	f800283a 	ret

060048ec <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 60048ec:	defffd04 	addi	sp,sp,-12
 60048f0:	df000215 	stw	fp,8(sp)
 60048f4:	df000204 	addi	fp,sp,8
 60048f8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 60048fc:	0005317a 	rdctl	r2,cpuid
 6004900:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 6004904:	e0bfff17 	ldw	r2,-4(fp)
 6004908:	10800317 	ldw	r2,12(r2)
 600490c:	10800104 	addi	r2,r2,4
 6004910:	00c00044 	movi	r3,1
 6004914:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 6004918:	e0bfff17 	ldw	r2,-4(fp)
 600491c:	10800317 	ldw	r2,12(r2)
 6004920:	e0fffe17 	ldw	r3,-8(fp)
 6004924:	1806943a 	slli	r3,r3,16
 6004928:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 600492c:	0001883a 	nop
 6004930:	e037883a 	mov	sp,fp
 6004934:	df000017 	ldw	fp,0(sp)
 6004938:	dec00104 	addi	sp,sp,4
 600493c:	f800283a 	ret

06004940 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 6004940:	defff904 	addi	sp,sp,-28
 6004944:	df000615 	stw	fp,24(sp)
 6004948:	df000604 	addi	fp,sp,24
 600494c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 6004950:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 6004954:	0005317a 	rdctl	r2,cpuid
 6004958:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 600495c:	e0bfff17 	ldw	r2,-4(fp)
 6004960:	10800317 	ldw	r2,12(r2)
 6004964:	10800037 	ldwio	r2,0(r2)
 6004968:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 600496c:	e0bffc17 	ldw	r2,-16(fp)
 6004970:	1004d43a 	srli	r2,r2,16
 6004974:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 6004978:	e0fffd17 	ldw	r3,-12(fp)
 600497c:	e0bffb17 	ldw	r2,-20(fp)
 6004980:	1880071e 	bne	r3,r2,60049a0 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 6004984:	e0bffc17 	ldw	r2,-16(fp)
 6004988:	10bfffcc 	andi	r2,r2,65535
 600498c:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 6004990:	e0bffe17 	ldw	r2,-8(fp)
 6004994:	10000226 	beq	r2,zero,60049a0 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 6004998:	00800044 	movi	r2,1
 600499c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 60049a0:	e0bffa17 	ldw	r2,-24(fp)
}
 60049a4:	e037883a 	mov	sp,fp
 60049a8:	df000017 	ldw	fp,0(sp)
 60049ac:	dec00104 	addi	sp,sp,4
 60049b0:	f800283a 	ret

060049b4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 60049b4:	defffc04 	addi	sp,sp,-16
 60049b8:	df000315 	stw	fp,12(sp)
 60049bc:	df000304 	addi	fp,sp,12
 60049c0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 60049c4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 60049c8:	e0bfff17 	ldw	r2,-4(fp)
 60049cc:	10800317 	ldw	r2,12(r2)
 60049d0:	10800104 	addi	r2,r2,4
 60049d4:	10800037 	ldwio	r2,0(r2)
 60049d8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 60049dc:	e0bffe17 	ldw	r2,-8(fp)
 60049e0:	1080004c 	andi	r2,r2,1
 60049e4:	10000226 	beq	r2,zero,60049f0 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 60049e8:	00800044 	movi	r2,1
 60049ec:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 60049f0:	e0bffd17 	ldw	r2,-12(fp)
}
 60049f4:	e037883a 	mov	sp,fp
 60049f8:	df000017 	ldw	fp,0(sp)
 60049fc:	dec00104 	addi	sp,sp,4
 6004a00:	f800283a 	ret

06004a04 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 6004a04:	defffa04 	addi	sp,sp,-24
 6004a08:	dfc00515 	stw	ra,20(sp)
 6004a0c:	df000415 	stw	fp,16(sp)
 6004a10:	df000404 	addi	fp,sp,16
 6004a14:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 6004a18:	0007883a 	mov	r3,zero
 6004a1c:	e0bfff17 	ldw	r2,-4(fp)
 6004a20:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 6004a24:	e0bfff17 	ldw	r2,-4(fp)
 6004a28:	10800104 	addi	r2,r2,4
 6004a2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 6004a30:	0005303a 	rdctl	r2,status
 6004a34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004a38:	e0fffd17 	ldw	r3,-12(fp)
 6004a3c:	00bfff84 	movi	r2,-2
 6004a40:	1884703a 	and	r2,r3,r2
 6004a44:	1001703a 	wrctl	status,r2
  
  return context;
 6004a48:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 6004a4c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 6004a50:	60055580 	call	6005558 <alt_tick>
 6004a54:	e0bffc17 	ldw	r2,-16(fp)
 6004a58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 6004a5c:	e0bffe17 	ldw	r2,-8(fp)
 6004a60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 6004a64:	0001883a 	nop
 6004a68:	e037883a 	mov	sp,fp
 6004a6c:	dfc00117 	ldw	ra,4(sp)
 6004a70:	df000017 	ldw	fp,0(sp)
 6004a74:	dec00204 	addi	sp,sp,8
 6004a78:	f800283a 	ret

06004a7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 6004a7c:	defff804 	addi	sp,sp,-32
 6004a80:	dfc00715 	stw	ra,28(sp)
 6004a84:	df000615 	stw	fp,24(sp)
 6004a88:	df000604 	addi	fp,sp,24
 6004a8c:	e13ffc15 	stw	r4,-16(fp)
 6004a90:	e17ffd15 	stw	r5,-12(fp)
 6004a94:	e1bffe15 	stw	r6,-8(fp)
 6004a98:	e1ffff15 	stw	r7,-4(fp)
 6004a9c:	e0bfff17 	ldw	r2,-4(fp)
 6004aa0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 6004aa4:	d0a6bf17 	ldw	r2,-25860(gp)
 6004aa8:	1000021e 	bne	r2,zero,6004ab4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 6004aac:	e0bffb17 	ldw	r2,-20(fp)
 6004ab0:	d0a6bf15 	stw	r2,-25860(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 6004ab4:	e0bffc17 	ldw	r2,-16(fp)
 6004ab8:	10800104 	addi	r2,r2,4
 6004abc:	00c001c4 	movi	r3,7
 6004ac0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 6004ac4:	d8000015 	stw	zero,0(sp)
 6004ac8:	e1fffc17 	ldw	r7,-16(fp)
 6004acc:	01818034 	movhi	r6,1536
 6004ad0:	31928104 	addi	r6,r6,18948
 6004ad4:	e17ffe17 	ldw	r5,-8(fp)
 6004ad8:	e13ffd17 	ldw	r4,-12(fp)
 6004adc:	6004e880 	call	6004e88 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 6004ae0:	0001883a 	nop
 6004ae4:	e037883a 	mov	sp,fp
 6004ae8:	dfc00117 	ldw	ra,4(sp)
 6004aec:	df000017 	ldw	fp,0(sp)
 6004af0:	dec00204 	addi	sp,sp,8
 6004af4:	f800283a 	ret

06004af8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 6004af8:	defff504 	addi	sp,sp,-44
 6004afc:	df000a15 	stw	fp,40(sp)
 6004b00:	df000a04 	addi	fp,sp,40
 6004b04:	e13ffc15 	stw	r4,-16(fp)
 6004b08:	e17ffd15 	stw	r5,-12(fp)
 6004b0c:	e1bffe15 	stw	r6,-8(fp)
 6004b10:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 6004b14:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 6004b18:	d0a6bf17 	ldw	r2,-25860(gp)
  
  if (alt_ticks_per_second ())
 6004b1c:	10003c26 	beq	r2,zero,6004c10 <alt_alarm_start+0x118>
  {
    if (alarm)
 6004b20:	e0bffc17 	ldw	r2,-16(fp)
 6004b24:	10003826 	beq	r2,zero,6004c08 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 6004b28:	e0bffc17 	ldw	r2,-16(fp)
 6004b2c:	e0fffe17 	ldw	r3,-8(fp)
 6004b30:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 6004b34:	e0bffc17 	ldw	r2,-16(fp)
 6004b38:	e0ffff17 	ldw	r3,-4(fp)
 6004b3c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 6004b40:	0005303a 	rdctl	r2,status
 6004b44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004b48:	e0fff917 	ldw	r3,-28(fp)
 6004b4c:	00bfff84 	movi	r2,-2
 6004b50:	1884703a 	and	r2,r3,r2
 6004b54:	1001703a 	wrctl	status,r2
  
  return context;
 6004b58:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 6004b5c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 6004b60:	d0a6c017 	ldw	r2,-25856(gp)
      
      current_nticks = alt_nticks();
 6004b64:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 6004b68:	e0fffd17 	ldw	r3,-12(fp)
 6004b6c:	e0bff617 	ldw	r2,-40(fp)
 6004b70:	1885883a 	add	r2,r3,r2
 6004b74:	10c00044 	addi	r3,r2,1
 6004b78:	e0bffc17 	ldw	r2,-16(fp)
 6004b7c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 6004b80:	e0bffc17 	ldw	r2,-16(fp)
 6004b84:	10c00217 	ldw	r3,8(r2)
 6004b88:	e0bff617 	ldw	r2,-40(fp)
 6004b8c:	1880042e 	bgeu	r3,r2,6004ba0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 6004b90:	e0bffc17 	ldw	r2,-16(fp)
 6004b94:	00c00044 	movi	r3,1
 6004b98:	10c00405 	stb	r3,16(r2)
 6004b9c:	00000206 	br	6004ba8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 6004ba0:	e0bffc17 	ldw	r2,-16(fp)
 6004ba4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 6004ba8:	e0bffc17 	ldw	r2,-16(fp)
 6004bac:	d0e01104 	addi	r3,gp,-32700
 6004bb0:	e0fffa15 	stw	r3,-24(fp)
 6004bb4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 6004bb8:	e0bffb17 	ldw	r2,-20(fp)
 6004bbc:	e0fffa17 	ldw	r3,-24(fp)
 6004bc0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 6004bc4:	e0bffa17 	ldw	r2,-24(fp)
 6004bc8:	10c00017 	ldw	r3,0(r2)
 6004bcc:	e0bffb17 	ldw	r2,-20(fp)
 6004bd0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 6004bd4:	e0bffa17 	ldw	r2,-24(fp)
 6004bd8:	10800017 	ldw	r2,0(r2)
 6004bdc:	e0fffb17 	ldw	r3,-20(fp)
 6004be0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 6004be4:	e0bffa17 	ldw	r2,-24(fp)
 6004be8:	e0fffb17 	ldw	r3,-20(fp)
 6004bec:	10c00015 	stw	r3,0(r2)
 6004bf0:	e0bff817 	ldw	r2,-32(fp)
 6004bf4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 6004bf8:	e0bff717 	ldw	r2,-36(fp)
 6004bfc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 6004c00:	0005883a 	mov	r2,zero
 6004c04:	00000306 	br	6004c14 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 6004c08:	00bffa84 	movi	r2,-22
 6004c0c:	00000106 	br	6004c14 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 6004c10:	00bfde84 	movi	r2,-134
  }
}
 6004c14:	e037883a 	mov	sp,fp
 6004c18:	df000017 	ldw	fp,0(sp)
 6004c1c:	dec00104 	addi	sp,sp,4
 6004c20:	f800283a 	ret

06004c24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 6004c24:	defffe04 	addi	sp,sp,-8
 6004c28:	dfc00115 	stw	ra,4(sp)
 6004c2c:	df000015 	stw	fp,0(sp)
 6004c30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6004c34:	d0a00c17 	ldw	r2,-32720(gp)
 6004c38:	10000326 	beq	r2,zero,6004c48 <alt_get_errno+0x24>
 6004c3c:	d0a00c17 	ldw	r2,-32720(gp)
 6004c40:	103ee83a 	callr	r2
 6004c44:	00000106 	br	6004c4c <alt_get_errno+0x28>
 6004c48:	d0a6ba04 	addi	r2,gp,-25880
}
 6004c4c:	e037883a 	mov	sp,fp
 6004c50:	dfc00117 	ldw	ra,4(sp)
 6004c54:	df000017 	ldw	fp,0(sp)
 6004c58:	dec00204 	addi	sp,sp,8
 6004c5c:	f800283a 	ret

06004c60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 6004c60:	defffa04 	addi	sp,sp,-24
 6004c64:	dfc00515 	stw	ra,20(sp)
 6004c68:	df000415 	stw	fp,16(sp)
 6004c6c:	df000404 	addi	fp,sp,16
 6004c70:	e13ffe15 	stw	r4,-8(fp)
 6004c74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 6004c78:	e0bffe17 	ldw	r2,-8(fp)
 6004c7c:	10000326 	beq	r2,zero,6004c8c <alt_dev_llist_insert+0x2c>
 6004c80:	e0bffe17 	ldw	r2,-8(fp)
 6004c84:	10800217 	ldw	r2,8(r2)
 6004c88:	1000061e 	bne	r2,zero,6004ca4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 6004c8c:	6004c240 	call	6004c24 <alt_get_errno>
 6004c90:	1007883a 	mov	r3,r2
 6004c94:	00800584 	movi	r2,22
 6004c98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 6004c9c:	00bffa84 	movi	r2,-22
 6004ca0:	00001306 	br	6004cf0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 6004ca4:	e0bffe17 	ldw	r2,-8(fp)
 6004ca8:	e0ffff17 	ldw	r3,-4(fp)
 6004cac:	e0fffc15 	stw	r3,-16(fp)
 6004cb0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 6004cb4:	e0bffd17 	ldw	r2,-12(fp)
 6004cb8:	e0fffc17 	ldw	r3,-16(fp)
 6004cbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 6004cc0:	e0bffc17 	ldw	r2,-16(fp)
 6004cc4:	10c00017 	ldw	r3,0(r2)
 6004cc8:	e0bffd17 	ldw	r2,-12(fp)
 6004ccc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 6004cd0:	e0bffc17 	ldw	r2,-16(fp)
 6004cd4:	10800017 	ldw	r2,0(r2)
 6004cd8:	e0fffd17 	ldw	r3,-12(fp)
 6004cdc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 6004ce0:	e0bffc17 	ldw	r2,-16(fp)
 6004ce4:	e0fffd17 	ldw	r3,-12(fp)
 6004ce8:	10c00015 	stw	r3,0(r2)

  return 0;  
 6004cec:	0005883a 	mov	r2,zero
}
 6004cf0:	e037883a 	mov	sp,fp
 6004cf4:	dfc00117 	ldw	ra,4(sp)
 6004cf8:	df000017 	ldw	fp,0(sp)
 6004cfc:	dec00204 	addi	sp,sp,8
 6004d00:	f800283a 	ret

06004d04 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 6004d04:	defffd04 	addi	sp,sp,-12
 6004d08:	dfc00215 	stw	ra,8(sp)
 6004d0c:	df000115 	stw	fp,4(sp)
 6004d10:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 6004d14:	00818034 	movhi	r2,1536
 6004d18:	10973b04 	addi	r2,r2,23788
 6004d1c:	e0bfff15 	stw	r2,-4(fp)
 6004d20:	00000606 	br	6004d3c <_do_ctors+0x38>
        (*ctor) (); 
 6004d24:	e0bfff17 	ldw	r2,-4(fp)
 6004d28:	10800017 	ldw	r2,0(r2)
 6004d2c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 6004d30:	e0bfff17 	ldw	r2,-4(fp)
 6004d34:	10bfff04 	addi	r2,r2,-4
 6004d38:	e0bfff15 	stw	r2,-4(fp)
 6004d3c:	e0ffff17 	ldw	r3,-4(fp)
 6004d40:	00818034 	movhi	r2,1536
 6004d44:	10973c04 	addi	r2,r2,23792
 6004d48:	18bff62e 	bgeu	r3,r2,6004d24 <__alt_data_end+0xff004d24>
        (*ctor) (); 
}
 6004d4c:	0001883a 	nop
 6004d50:	e037883a 	mov	sp,fp
 6004d54:	dfc00117 	ldw	ra,4(sp)
 6004d58:	df000017 	ldw	fp,0(sp)
 6004d5c:	dec00204 	addi	sp,sp,8
 6004d60:	f800283a 	ret

06004d64 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 6004d64:	defffd04 	addi	sp,sp,-12
 6004d68:	dfc00215 	stw	ra,8(sp)
 6004d6c:	df000115 	stw	fp,4(sp)
 6004d70:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 6004d74:	00818034 	movhi	r2,1536
 6004d78:	10973b04 	addi	r2,r2,23788
 6004d7c:	e0bfff15 	stw	r2,-4(fp)
 6004d80:	00000606 	br	6004d9c <_do_dtors+0x38>
        (*dtor) (); 
 6004d84:	e0bfff17 	ldw	r2,-4(fp)
 6004d88:	10800017 	ldw	r2,0(r2)
 6004d8c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 6004d90:	e0bfff17 	ldw	r2,-4(fp)
 6004d94:	10bfff04 	addi	r2,r2,-4
 6004d98:	e0bfff15 	stw	r2,-4(fp)
 6004d9c:	e0ffff17 	ldw	r3,-4(fp)
 6004da0:	00818034 	movhi	r2,1536
 6004da4:	10973c04 	addi	r2,r2,23792
 6004da8:	18bff62e 	bgeu	r3,r2,6004d84 <__alt_data_end+0xff004d84>
        (*dtor) (); 
}
 6004dac:	0001883a 	nop
 6004db0:	e037883a 	mov	sp,fp
 6004db4:	dfc00117 	ldw	ra,4(sp)
 6004db8:	df000017 	ldw	fp,0(sp)
 6004dbc:	dec00204 	addi	sp,sp,8
 6004dc0:	f800283a 	ret

06004dc4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 6004dc4:	defffa04 	addi	sp,sp,-24
 6004dc8:	dfc00515 	stw	ra,20(sp)
 6004dcc:	df000415 	stw	fp,16(sp)
 6004dd0:	df000404 	addi	fp,sp,16
 6004dd4:	e13ffe15 	stw	r4,-8(fp)
 6004dd8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 6004ddc:	e0bfff17 	ldw	r2,-4(fp)
 6004de0:	10800017 	ldw	r2,0(r2)
 6004de4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 6004de8:	e13ffe17 	ldw	r4,-8(fp)
 6004dec:	60004d80 	call	60004d8 <strlen>
 6004df0:	10800044 	addi	r2,r2,1
 6004df4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 6004df8:	00000d06 	br	6004e30 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 6004dfc:	e0bffc17 	ldw	r2,-16(fp)
 6004e00:	10800217 	ldw	r2,8(r2)
 6004e04:	e0fffd17 	ldw	r3,-12(fp)
 6004e08:	180d883a 	mov	r6,r3
 6004e0c:	e17ffe17 	ldw	r5,-8(fp)
 6004e10:	1009883a 	mov	r4,r2
 6004e14:	60059a80 	call	60059a8 <memcmp>
 6004e18:	1000021e 	bne	r2,zero,6004e24 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 6004e1c:	e0bffc17 	ldw	r2,-16(fp)
 6004e20:	00000706 	br	6004e40 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 6004e24:	e0bffc17 	ldw	r2,-16(fp)
 6004e28:	10800017 	ldw	r2,0(r2)
 6004e2c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 6004e30:	e0fffc17 	ldw	r3,-16(fp)
 6004e34:	e0bfff17 	ldw	r2,-4(fp)
 6004e38:	18bff01e 	bne	r3,r2,6004dfc <__alt_data_end+0xff004dfc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 6004e3c:	0005883a 	mov	r2,zero
}
 6004e40:	e037883a 	mov	sp,fp
 6004e44:	dfc00117 	ldw	ra,4(sp)
 6004e48:	df000017 	ldw	fp,0(sp)
 6004e4c:	dec00204 	addi	sp,sp,8
 6004e50:	f800283a 	ret

06004e54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 6004e54:	defffe04 	addi	sp,sp,-8
 6004e58:	dfc00115 	stw	ra,4(sp)
 6004e5c:	df000015 	stw	fp,0(sp)
 6004e60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 6004e64:	01440004 	movi	r5,4096
 6004e68:	0009883a 	mov	r4,zero
 6004e6c:	60058300 	call	6005830 <alt_icache_flush>
#endif
}
 6004e70:	0001883a 	nop
 6004e74:	e037883a 	mov	sp,fp
 6004e78:	dfc00117 	ldw	ra,4(sp)
 6004e7c:	df000017 	ldw	fp,0(sp)
 6004e80:	dec00204 	addi	sp,sp,8
 6004e84:	f800283a 	ret

06004e88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 6004e88:	defff904 	addi	sp,sp,-28
 6004e8c:	dfc00615 	stw	ra,24(sp)
 6004e90:	df000515 	stw	fp,20(sp)
 6004e94:	df000504 	addi	fp,sp,20
 6004e98:	e13ffc15 	stw	r4,-16(fp)
 6004e9c:	e17ffd15 	stw	r5,-12(fp)
 6004ea0:	e1bffe15 	stw	r6,-8(fp)
 6004ea4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 6004ea8:	e0800217 	ldw	r2,8(fp)
 6004eac:	d8800015 	stw	r2,0(sp)
 6004eb0:	e1ffff17 	ldw	r7,-4(fp)
 6004eb4:	e1bffe17 	ldw	r6,-8(fp)
 6004eb8:	e17ffd17 	ldw	r5,-12(fp)
 6004ebc:	e13ffc17 	ldw	r4,-16(fp)
 6004ec0:	60050380 	call	6005038 <alt_iic_isr_register>
}  
 6004ec4:	e037883a 	mov	sp,fp
 6004ec8:	dfc00117 	ldw	ra,4(sp)
 6004ecc:	df000017 	ldw	fp,0(sp)
 6004ed0:	dec00204 	addi	sp,sp,8
 6004ed4:	f800283a 	ret

06004ed8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 6004ed8:	defff904 	addi	sp,sp,-28
 6004edc:	df000615 	stw	fp,24(sp)
 6004ee0:	df000604 	addi	fp,sp,24
 6004ee4:	e13ffe15 	stw	r4,-8(fp)
 6004ee8:	e17fff15 	stw	r5,-4(fp)
 6004eec:	e0bfff17 	ldw	r2,-4(fp)
 6004ef0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 6004ef4:	0005303a 	rdctl	r2,status
 6004ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004efc:	e0fffb17 	ldw	r3,-20(fp)
 6004f00:	00bfff84 	movi	r2,-2
 6004f04:	1884703a 	and	r2,r3,r2
 6004f08:	1001703a 	wrctl	status,r2
  
  return context;
 6004f0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 6004f10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 6004f14:	00c00044 	movi	r3,1
 6004f18:	e0bffa17 	ldw	r2,-24(fp)
 6004f1c:	1884983a 	sll	r2,r3,r2
 6004f20:	1007883a 	mov	r3,r2
 6004f24:	d0a6be17 	ldw	r2,-25864(gp)
 6004f28:	1884b03a 	or	r2,r3,r2
 6004f2c:	d0a6be15 	stw	r2,-25864(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 6004f30:	d0a6be17 	ldw	r2,-25864(gp)
 6004f34:	100170fa 	wrctl	ienable,r2
 6004f38:	e0bffc17 	ldw	r2,-16(fp)
 6004f3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 6004f40:	e0bffd17 	ldw	r2,-12(fp)
 6004f44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 6004f48:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 6004f4c:	0001883a 	nop
}
 6004f50:	e037883a 	mov	sp,fp
 6004f54:	df000017 	ldw	fp,0(sp)
 6004f58:	dec00104 	addi	sp,sp,4
 6004f5c:	f800283a 	ret

06004f60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 6004f60:	defff904 	addi	sp,sp,-28
 6004f64:	df000615 	stw	fp,24(sp)
 6004f68:	df000604 	addi	fp,sp,24
 6004f6c:	e13ffe15 	stw	r4,-8(fp)
 6004f70:	e17fff15 	stw	r5,-4(fp)
 6004f74:	e0bfff17 	ldw	r2,-4(fp)
 6004f78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 6004f7c:	0005303a 	rdctl	r2,status
 6004f80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004f84:	e0fffb17 	ldw	r3,-20(fp)
 6004f88:	00bfff84 	movi	r2,-2
 6004f8c:	1884703a 	and	r2,r3,r2
 6004f90:	1001703a 	wrctl	status,r2
  
  return context;
 6004f94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 6004f98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 6004f9c:	00c00044 	movi	r3,1
 6004fa0:	e0bffa17 	ldw	r2,-24(fp)
 6004fa4:	1884983a 	sll	r2,r3,r2
 6004fa8:	0084303a 	nor	r2,zero,r2
 6004fac:	1007883a 	mov	r3,r2
 6004fb0:	d0a6be17 	ldw	r2,-25864(gp)
 6004fb4:	1884703a 	and	r2,r3,r2
 6004fb8:	d0a6be15 	stw	r2,-25864(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 6004fbc:	d0a6be17 	ldw	r2,-25864(gp)
 6004fc0:	100170fa 	wrctl	ienable,r2
 6004fc4:	e0bffc17 	ldw	r2,-16(fp)
 6004fc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 6004fcc:	e0bffd17 	ldw	r2,-12(fp)
 6004fd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 6004fd4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 6004fd8:	0001883a 	nop
}
 6004fdc:	e037883a 	mov	sp,fp
 6004fe0:	df000017 	ldw	fp,0(sp)
 6004fe4:	dec00104 	addi	sp,sp,4
 6004fe8:	f800283a 	ret

06004fec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 6004fec:	defffc04 	addi	sp,sp,-16
 6004ff0:	df000315 	stw	fp,12(sp)
 6004ff4:	df000304 	addi	fp,sp,12
 6004ff8:	e13ffe15 	stw	r4,-8(fp)
 6004ffc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 6005000:	000530fa 	rdctl	r2,ienable
 6005004:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 6005008:	00c00044 	movi	r3,1
 600500c:	e0bfff17 	ldw	r2,-4(fp)
 6005010:	1884983a 	sll	r2,r3,r2
 6005014:	1007883a 	mov	r3,r2
 6005018:	e0bffd17 	ldw	r2,-12(fp)
 600501c:	1884703a 	and	r2,r3,r2
 6005020:	1004c03a 	cmpne	r2,r2,zero
 6005024:	10803fcc 	andi	r2,r2,255
}
 6005028:	e037883a 	mov	sp,fp
 600502c:	df000017 	ldw	fp,0(sp)
 6005030:	dec00104 	addi	sp,sp,4
 6005034:	f800283a 	ret

06005038 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 6005038:	defff504 	addi	sp,sp,-44
 600503c:	dfc00a15 	stw	ra,40(sp)
 6005040:	df000915 	stw	fp,36(sp)
 6005044:	df000904 	addi	fp,sp,36
 6005048:	e13ffc15 	stw	r4,-16(fp)
 600504c:	e17ffd15 	stw	r5,-12(fp)
 6005050:	e1bffe15 	stw	r6,-8(fp)
 6005054:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 6005058:	00bffa84 	movi	r2,-22
 600505c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 6005060:	e0bffd17 	ldw	r2,-12(fp)
 6005064:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 6005068:	e0bff817 	ldw	r2,-32(fp)
 600506c:	10800808 	cmpgei	r2,r2,32
 6005070:	1000271e 	bne	r2,zero,6005110 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 6005074:	0005303a 	rdctl	r2,status
 6005078:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 600507c:	e0fffb17 	ldw	r3,-20(fp)
 6005080:	00bfff84 	movi	r2,-2
 6005084:	1884703a 	and	r2,r3,r2
 6005088:	1001703a 	wrctl	status,r2
  
  return context;
 600508c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 6005090:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 6005094:	00818074 	movhi	r2,1537
 6005098:	10a4d304 	addi	r2,r2,-27828
 600509c:	e0fff817 	ldw	r3,-32(fp)
 60050a0:	180690fa 	slli	r3,r3,3
 60050a4:	10c5883a 	add	r2,r2,r3
 60050a8:	e0fffe17 	ldw	r3,-8(fp)
 60050ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 60050b0:	00818074 	movhi	r2,1537
 60050b4:	10a4d304 	addi	r2,r2,-27828
 60050b8:	e0fff817 	ldw	r3,-32(fp)
 60050bc:	180690fa 	slli	r3,r3,3
 60050c0:	10c5883a 	add	r2,r2,r3
 60050c4:	10800104 	addi	r2,r2,4
 60050c8:	e0ffff17 	ldw	r3,-4(fp)
 60050cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 60050d0:	e0bffe17 	ldw	r2,-8(fp)
 60050d4:	10000526 	beq	r2,zero,60050ec <alt_iic_isr_register+0xb4>
 60050d8:	e0bff817 	ldw	r2,-32(fp)
 60050dc:	100b883a 	mov	r5,r2
 60050e0:	e13ffc17 	ldw	r4,-16(fp)
 60050e4:	6004ed80 	call	6004ed8 <alt_ic_irq_enable>
 60050e8:	00000406 	br	60050fc <alt_iic_isr_register+0xc4>
 60050ec:	e0bff817 	ldw	r2,-32(fp)
 60050f0:	100b883a 	mov	r5,r2
 60050f4:	e13ffc17 	ldw	r4,-16(fp)
 60050f8:	6004f600 	call	6004f60 <alt_ic_irq_disable>
 60050fc:	e0bff715 	stw	r2,-36(fp)
 6005100:	e0bffa17 	ldw	r2,-24(fp)
 6005104:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 6005108:	e0bff917 	ldw	r2,-28(fp)
 600510c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 6005110:	e0bff717 	ldw	r2,-36(fp)
}
 6005114:	e037883a 	mov	sp,fp
 6005118:	dfc00117 	ldw	ra,4(sp)
 600511c:	df000017 	ldw	fp,0(sp)
 6005120:	dec00204 	addi	sp,sp,8
 6005124:	f800283a 	ret

06005128 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 6005128:	defff904 	addi	sp,sp,-28
 600512c:	dfc00615 	stw	ra,24(sp)
 6005130:	df000515 	stw	fp,20(sp)
 6005134:	df000504 	addi	fp,sp,20
 6005138:	e13ffc15 	stw	r4,-16(fp)
 600513c:	e17ffd15 	stw	r5,-12(fp)
 6005140:	e1bffe15 	stw	r6,-8(fp)
 6005144:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 6005148:	e1bfff17 	ldw	r6,-4(fp)
 600514c:	e17ffe17 	ldw	r5,-8(fp)
 6005150:	e13ffd17 	ldw	r4,-12(fp)
 6005154:	60053680 	call	6005368 <open>
 6005158:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 600515c:	e0bffb17 	ldw	r2,-20(fp)
 6005160:	10001c16 	blt	r2,zero,60051d4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 6005164:	00818034 	movhi	r2,1536
 6005168:	10998b04 	addi	r2,r2,26156
 600516c:	e0fffb17 	ldw	r3,-20(fp)
 6005170:	18c00324 	muli	r3,r3,12
 6005174:	10c5883a 	add	r2,r2,r3
 6005178:	10c00017 	ldw	r3,0(r2)
 600517c:	e0bffc17 	ldw	r2,-16(fp)
 6005180:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 6005184:	00818034 	movhi	r2,1536
 6005188:	10998b04 	addi	r2,r2,26156
 600518c:	e0fffb17 	ldw	r3,-20(fp)
 6005190:	18c00324 	muli	r3,r3,12
 6005194:	10c5883a 	add	r2,r2,r3
 6005198:	10800104 	addi	r2,r2,4
 600519c:	10c00017 	ldw	r3,0(r2)
 60051a0:	e0bffc17 	ldw	r2,-16(fp)
 60051a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 60051a8:	00818034 	movhi	r2,1536
 60051ac:	10998b04 	addi	r2,r2,26156
 60051b0:	e0fffb17 	ldw	r3,-20(fp)
 60051b4:	18c00324 	muli	r3,r3,12
 60051b8:	10c5883a 	add	r2,r2,r3
 60051bc:	10800204 	addi	r2,r2,8
 60051c0:	10c00017 	ldw	r3,0(r2)
 60051c4:	e0bffc17 	ldw	r2,-16(fp)
 60051c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 60051cc:	e13ffb17 	ldw	r4,-20(fp)
 60051d0:	60039100 	call	6003910 <alt_release_fd>
  }
} 
 60051d4:	0001883a 	nop
 60051d8:	e037883a 	mov	sp,fp
 60051dc:	dfc00117 	ldw	ra,4(sp)
 60051e0:	df000017 	ldw	fp,0(sp)
 60051e4:	dec00204 	addi	sp,sp,8
 60051e8:	f800283a 	ret

060051ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 60051ec:	defffb04 	addi	sp,sp,-20
 60051f0:	dfc00415 	stw	ra,16(sp)
 60051f4:	df000315 	stw	fp,12(sp)
 60051f8:	df000304 	addi	fp,sp,12
 60051fc:	e13ffd15 	stw	r4,-12(fp)
 6005200:	e17ffe15 	stw	r5,-8(fp)
 6005204:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 6005208:	01c07fc4 	movi	r7,511
 600520c:	01800044 	movi	r6,1
 6005210:	e17ffd17 	ldw	r5,-12(fp)
 6005214:	01018034 	movhi	r4,1536
 6005218:	21198e04 	addi	r4,r4,26168
 600521c:	60051280 	call	6005128 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 6005220:	01c07fc4 	movi	r7,511
 6005224:	000d883a 	mov	r6,zero
 6005228:	e17ffe17 	ldw	r5,-8(fp)
 600522c:	01018034 	movhi	r4,1536
 6005230:	21198b04 	addi	r4,r4,26156
 6005234:	60051280 	call	6005128 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 6005238:	01c07fc4 	movi	r7,511
 600523c:	01800044 	movi	r6,1
 6005240:	e17fff17 	ldw	r5,-4(fp)
 6005244:	01018034 	movhi	r4,1536
 6005248:	21199104 	addi	r4,r4,26180
 600524c:	60051280 	call	6005128 <alt_open_fd>
}  
 6005250:	0001883a 	nop
 6005254:	e037883a 	mov	sp,fp
 6005258:	dfc00117 	ldw	ra,4(sp)
 600525c:	df000017 	ldw	fp,0(sp)
 6005260:	dec00204 	addi	sp,sp,8
 6005264:	f800283a 	ret

06005268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 6005268:	defffe04 	addi	sp,sp,-8
 600526c:	dfc00115 	stw	ra,4(sp)
 6005270:	df000015 	stw	fp,0(sp)
 6005274:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6005278:	d0a00c17 	ldw	r2,-32720(gp)
 600527c:	10000326 	beq	r2,zero,600528c <alt_get_errno+0x24>
 6005280:	d0a00c17 	ldw	r2,-32720(gp)
 6005284:	103ee83a 	callr	r2
 6005288:	00000106 	br	6005290 <alt_get_errno+0x28>
 600528c:	d0a6ba04 	addi	r2,gp,-25880
}
 6005290:	e037883a 	mov	sp,fp
 6005294:	dfc00117 	ldw	ra,4(sp)
 6005298:	df000017 	ldw	fp,0(sp)
 600529c:	dec00204 	addi	sp,sp,8
 60052a0:	f800283a 	ret

060052a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 60052a4:	defffd04 	addi	sp,sp,-12
 60052a8:	df000215 	stw	fp,8(sp)
 60052ac:	df000204 	addi	fp,sp,8
 60052b0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 60052b4:	e0bfff17 	ldw	r2,-4(fp)
 60052b8:	10800217 	ldw	r2,8(r2)
 60052bc:	10d00034 	orhi	r3,r2,16384
 60052c0:	e0bfff17 	ldw	r2,-4(fp)
 60052c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 60052c8:	e03ffe15 	stw	zero,-8(fp)
 60052cc:	00001d06 	br	6005344 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 60052d0:	00818034 	movhi	r2,1536
 60052d4:	10998b04 	addi	r2,r2,26156
 60052d8:	e0fffe17 	ldw	r3,-8(fp)
 60052dc:	18c00324 	muli	r3,r3,12
 60052e0:	10c5883a 	add	r2,r2,r3
 60052e4:	10c00017 	ldw	r3,0(r2)
 60052e8:	e0bfff17 	ldw	r2,-4(fp)
 60052ec:	10800017 	ldw	r2,0(r2)
 60052f0:	1880111e 	bne	r3,r2,6005338 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 60052f4:	00818034 	movhi	r2,1536
 60052f8:	10998b04 	addi	r2,r2,26156
 60052fc:	e0fffe17 	ldw	r3,-8(fp)
 6005300:	18c00324 	muli	r3,r3,12
 6005304:	10c5883a 	add	r2,r2,r3
 6005308:	10800204 	addi	r2,r2,8
 600530c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 6005310:	1000090e 	bge	r2,zero,6005338 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 6005314:	e0bffe17 	ldw	r2,-8(fp)
 6005318:	10c00324 	muli	r3,r2,12
 600531c:	00818034 	movhi	r2,1536
 6005320:	10998b04 	addi	r2,r2,26156
 6005324:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 6005328:	e0bfff17 	ldw	r2,-4(fp)
 600532c:	18800226 	beq	r3,r2,6005338 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 6005330:	00bffcc4 	movi	r2,-13
 6005334:	00000806 	br	6005358 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 6005338:	e0bffe17 	ldw	r2,-8(fp)
 600533c:	10800044 	addi	r2,r2,1
 6005340:	e0bffe15 	stw	r2,-8(fp)
 6005344:	d0a00b17 	ldw	r2,-32724(gp)
 6005348:	1007883a 	mov	r3,r2
 600534c:	e0bffe17 	ldw	r2,-8(fp)
 6005350:	18bfdf2e 	bgeu	r3,r2,60052d0 <__alt_data_end+0xff0052d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 6005354:	0005883a 	mov	r2,zero
}
 6005358:	e037883a 	mov	sp,fp
 600535c:	df000017 	ldw	fp,0(sp)
 6005360:	dec00104 	addi	sp,sp,4
 6005364:	f800283a 	ret

06005368 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 6005368:	defff604 	addi	sp,sp,-40
 600536c:	dfc00915 	stw	ra,36(sp)
 6005370:	df000815 	stw	fp,32(sp)
 6005374:	df000804 	addi	fp,sp,32
 6005378:	e13ffd15 	stw	r4,-12(fp)
 600537c:	e17ffe15 	stw	r5,-8(fp)
 6005380:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 6005384:	00bfffc4 	movi	r2,-1
 6005388:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 600538c:	00bffb44 	movi	r2,-19
 6005390:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 6005394:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 6005398:	d1600904 	addi	r5,gp,-32732
 600539c:	e13ffd17 	ldw	r4,-12(fp)
 60053a0:	6004dc40 	call	6004dc4 <alt_find_dev>
 60053a4:	e0bff815 	stw	r2,-32(fp)
 60053a8:	e0bff817 	ldw	r2,-32(fp)
 60053ac:	1000051e 	bne	r2,zero,60053c4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 60053b0:	e13ffd17 	ldw	r4,-12(fp)
 60053b4:	60056840 	call	6005684 <alt_find_file>
 60053b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 60053bc:	00800044 	movi	r2,1
 60053c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 60053c4:	e0bff817 	ldw	r2,-32(fp)
 60053c8:	10002926 	beq	r2,zero,6005470 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 60053cc:	e13ff817 	ldw	r4,-32(fp)
 60053d0:	600578c0 	call	600578c <alt_get_fd>
 60053d4:	e0bff915 	stw	r2,-28(fp)
 60053d8:	e0bff917 	ldw	r2,-28(fp)
 60053dc:	1000030e 	bge	r2,zero,60053ec <open+0x84>
    {
      status = index;
 60053e0:	e0bff917 	ldw	r2,-28(fp)
 60053e4:	e0bffa15 	stw	r2,-24(fp)
 60053e8:	00002306 	br	6005478 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 60053ec:	e0bff917 	ldw	r2,-28(fp)
 60053f0:	10c00324 	muli	r3,r2,12
 60053f4:	00818034 	movhi	r2,1536
 60053f8:	10998b04 	addi	r2,r2,26156
 60053fc:	1885883a 	add	r2,r3,r2
 6005400:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 6005404:	e0fffe17 	ldw	r3,-8(fp)
 6005408:	00900034 	movhi	r2,16384
 600540c:	10bfffc4 	addi	r2,r2,-1
 6005410:	1886703a 	and	r3,r3,r2
 6005414:	e0bffc17 	ldw	r2,-16(fp)
 6005418:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 600541c:	e0bffb17 	ldw	r2,-20(fp)
 6005420:	1000051e 	bne	r2,zero,6005438 <open+0xd0>
 6005424:	e13ffc17 	ldw	r4,-16(fp)
 6005428:	60052a40 	call	60052a4 <alt_file_locked>
 600542c:	e0bffa15 	stw	r2,-24(fp)
 6005430:	e0bffa17 	ldw	r2,-24(fp)
 6005434:	10001016 	blt	r2,zero,6005478 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 6005438:	e0bff817 	ldw	r2,-32(fp)
 600543c:	10800317 	ldw	r2,12(r2)
 6005440:	10000826 	beq	r2,zero,6005464 <open+0xfc>
 6005444:	e0bff817 	ldw	r2,-32(fp)
 6005448:	10800317 	ldw	r2,12(r2)
 600544c:	e1ffff17 	ldw	r7,-4(fp)
 6005450:	e1bffe17 	ldw	r6,-8(fp)
 6005454:	e17ffd17 	ldw	r5,-12(fp)
 6005458:	e13ffc17 	ldw	r4,-16(fp)
 600545c:	103ee83a 	callr	r2
 6005460:	00000106 	br	6005468 <open+0x100>
 6005464:	0005883a 	mov	r2,zero
 6005468:	e0bffa15 	stw	r2,-24(fp)
 600546c:	00000206 	br	6005478 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 6005470:	00bffb44 	movi	r2,-19
 6005474:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 6005478:	e0bffa17 	ldw	r2,-24(fp)
 600547c:	1000090e 	bge	r2,zero,60054a4 <open+0x13c>
  {
    alt_release_fd (index);  
 6005480:	e13ff917 	ldw	r4,-28(fp)
 6005484:	60039100 	call	6003910 <alt_release_fd>
    ALT_ERRNO = -status;
 6005488:	60052680 	call	6005268 <alt_get_errno>
 600548c:	1007883a 	mov	r3,r2
 6005490:	e0bffa17 	ldw	r2,-24(fp)
 6005494:	0085c83a 	sub	r2,zero,r2
 6005498:	18800015 	stw	r2,0(r3)
    return -1;
 600549c:	00bfffc4 	movi	r2,-1
 60054a0:	00000106 	br	60054a8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 60054a4:	e0bff917 	ldw	r2,-28(fp)
}
 60054a8:	e037883a 	mov	sp,fp
 60054ac:	dfc00117 	ldw	ra,4(sp)
 60054b0:	df000017 	ldw	fp,0(sp)
 60054b4:	dec00204 	addi	sp,sp,8
 60054b8:	f800283a 	ret

060054bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 60054bc:	defffa04 	addi	sp,sp,-24
 60054c0:	df000515 	stw	fp,20(sp)
 60054c4:	df000504 	addi	fp,sp,20
 60054c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 60054cc:	0005303a 	rdctl	r2,status
 60054d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 60054d4:	e0fffc17 	ldw	r3,-16(fp)
 60054d8:	00bfff84 	movi	r2,-2
 60054dc:	1884703a 	and	r2,r3,r2
 60054e0:	1001703a 	wrctl	status,r2
  
  return context;
 60054e4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 60054e8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 60054ec:	e0bfff17 	ldw	r2,-4(fp)
 60054f0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 60054f4:	e0bffd17 	ldw	r2,-12(fp)
 60054f8:	10800017 	ldw	r2,0(r2)
 60054fc:	e0fffd17 	ldw	r3,-12(fp)
 6005500:	18c00117 	ldw	r3,4(r3)
 6005504:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 6005508:	e0bffd17 	ldw	r2,-12(fp)
 600550c:	10800117 	ldw	r2,4(r2)
 6005510:	e0fffd17 	ldw	r3,-12(fp)
 6005514:	18c00017 	ldw	r3,0(r3)
 6005518:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 600551c:	e0bffd17 	ldw	r2,-12(fp)
 6005520:	e0fffd17 	ldw	r3,-12(fp)
 6005524:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 6005528:	e0bffd17 	ldw	r2,-12(fp)
 600552c:	e0fffd17 	ldw	r3,-12(fp)
 6005530:	10c00015 	stw	r3,0(r2)
 6005534:	e0bffb17 	ldw	r2,-20(fp)
 6005538:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 600553c:	e0bffe17 	ldw	r2,-8(fp)
 6005540:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 6005544:	0001883a 	nop
 6005548:	e037883a 	mov	sp,fp
 600554c:	df000017 	ldw	fp,0(sp)
 6005550:	dec00104 	addi	sp,sp,4
 6005554:	f800283a 	ret

06005558 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 6005558:	defffb04 	addi	sp,sp,-20
 600555c:	dfc00415 	stw	ra,16(sp)
 6005560:	df000315 	stw	fp,12(sp)
 6005564:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 6005568:	d0a01117 	ldw	r2,-32700(gp)
 600556c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 6005570:	d0a6c017 	ldw	r2,-25856(gp)
 6005574:	10800044 	addi	r2,r2,1
 6005578:	d0a6c015 	stw	r2,-25856(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 600557c:	00002e06 	br	6005638 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 6005580:	e0bffd17 	ldw	r2,-12(fp)
 6005584:	10800017 	ldw	r2,0(r2)
 6005588:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 600558c:	e0bffd17 	ldw	r2,-12(fp)
 6005590:	10800403 	ldbu	r2,16(r2)
 6005594:	10803fcc 	andi	r2,r2,255
 6005598:	10000426 	beq	r2,zero,60055ac <alt_tick+0x54>
 600559c:	d0a6c017 	ldw	r2,-25856(gp)
 60055a0:	1000021e 	bne	r2,zero,60055ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
 60055a4:	e0bffd17 	ldw	r2,-12(fp)
 60055a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 60055ac:	e0bffd17 	ldw	r2,-12(fp)
 60055b0:	10800217 	ldw	r2,8(r2)
 60055b4:	d0e6c017 	ldw	r3,-25856(gp)
 60055b8:	18801d36 	bltu	r3,r2,6005630 <alt_tick+0xd8>
 60055bc:	e0bffd17 	ldw	r2,-12(fp)
 60055c0:	10800403 	ldbu	r2,16(r2)
 60055c4:	10803fcc 	andi	r2,r2,255
 60055c8:	1000191e 	bne	r2,zero,6005630 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 60055cc:	e0bffd17 	ldw	r2,-12(fp)
 60055d0:	10800317 	ldw	r2,12(r2)
 60055d4:	e0fffd17 	ldw	r3,-12(fp)
 60055d8:	18c00517 	ldw	r3,20(r3)
 60055dc:	1809883a 	mov	r4,r3
 60055e0:	103ee83a 	callr	r2
 60055e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 60055e8:	e0bfff17 	ldw	r2,-4(fp)
 60055ec:	1000031e 	bne	r2,zero,60055fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 60055f0:	e13ffd17 	ldw	r4,-12(fp)
 60055f4:	60054bc0 	call	60054bc <alt_alarm_stop>
 60055f8:	00000d06 	br	6005630 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 60055fc:	e0bffd17 	ldw	r2,-12(fp)
 6005600:	10c00217 	ldw	r3,8(r2)
 6005604:	e0bfff17 	ldw	r2,-4(fp)
 6005608:	1887883a 	add	r3,r3,r2
 600560c:	e0bffd17 	ldw	r2,-12(fp)
 6005610:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 6005614:	e0bffd17 	ldw	r2,-12(fp)
 6005618:	10c00217 	ldw	r3,8(r2)
 600561c:	d0a6c017 	ldw	r2,-25856(gp)
 6005620:	1880032e 	bgeu	r3,r2,6005630 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 6005624:	e0bffd17 	ldw	r2,-12(fp)
 6005628:	00c00044 	movi	r3,1
 600562c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 6005630:	e0bffe17 	ldw	r2,-8(fp)
 6005634:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 6005638:	e0fffd17 	ldw	r3,-12(fp)
 600563c:	d0a01104 	addi	r2,gp,-32700
 6005640:	18bfcf1e 	bne	r3,r2,6005580 <__alt_data_end+0xff005580>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 6005644:	0001883a 	nop
}
 6005648:	0001883a 	nop
 600564c:	e037883a 	mov	sp,fp
 6005650:	dfc00117 	ldw	ra,4(sp)
 6005654:	df000017 	ldw	fp,0(sp)
 6005658:	dec00204 	addi	sp,sp,8
 600565c:	f800283a 	ret

06005660 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 6005660:	deffff04 	addi	sp,sp,-4
 6005664:	df000015 	stw	fp,0(sp)
 6005668:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 600566c:	000170fa 	wrctl	ienable,zero
}
 6005670:	0001883a 	nop
 6005674:	e037883a 	mov	sp,fp
 6005678:	df000017 	ldw	fp,0(sp)
 600567c:	dec00104 	addi	sp,sp,4
 6005680:	f800283a 	ret

06005684 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 6005684:	defffb04 	addi	sp,sp,-20
 6005688:	dfc00415 	stw	ra,16(sp)
 600568c:	df000315 	stw	fp,12(sp)
 6005690:	df000304 	addi	fp,sp,12
 6005694:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 6005698:	d0a00717 	ldw	r2,-32740(gp)
 600569c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 60056a0:	00003106 	br	6005768 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 60056a4:	e0bffd17 	ldw	r2,-12(fp)
 60056a8:	10800217 	ldw	r2,8(r2)
 60056ac:	1009883a 	mov	r4,r2
 60056b0:	60004d80 	call	60004d8 <strlen>
 60056b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 60056b8:	e0bffd17 	ldw	r2,-12(fp)
 60056bc:	10c00217 	ldw	r3,8(r2)
 60056c0:	e0bffe17 	ldw	r2,-8(fp)
 60056c4:	10bfffc4 	addi	r2,r2,-1
 60056c8:	1885883a 	add	r2,r3,r2
 60056cc:	10800003 	ldbu	r2,0(r2)
 60056d0:	10803fcc 	andi	r2,r2,255
 60056d4:	1080201c 	xori	r2,r2,128
 60056d8:	10bfe004 	addi	r2,r2,-128
 60056dc:	10800bd8 	cmpnei	r2,r2,47
 60056e0:	1000031e 	bne	r2,zero,60056f0 <alt_find_file+0x6c>
    {
      len -= 1;
 60056e4:	e0bffe17 	ldw	r2,-8(fp)
 60056e8:	10bfffc4 	addi	r2,r2,-1
 60056ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 60056f0:	e0bffe17 	ldw	r2,-8(fp)
 60056f4:	e0ffff17 	ldw	r3,-4(fp)
 60056f8:	1885883a 	add	r2,r3,r2
 60056fc:	10800003 	ldbu	r2,0(r2)
 6005700:	10803fcc 	andi	r2,r2,255
 6005704:	1080201c 	xori	r2,r2,128
 6005708:	10bfe004 	addi	r2,r2,-128
 600570c:	10800be0 	cmpeqi	r2,r2,47
 6005710:	1000081e 	bne	r2,zero,6005734 <alt_find_file+0xb0>
 6005714:	e0bffe17 	ldw	r2,-8(fp)
 6005718:	e0ffff17 	ldw	r3,-4(fp)
 600571c:	1885883a 	add	r2,r3,r2
 6005720:	10800003 	ldbu	r2,0(r2)
 6005724:	10803fcc 	andi	r2,r2,255
 6005728:	1080201c 	xori	r2,r2,128
 600572c:	10bfe004 	addi	r2,r2,-128
 6005730:	10000a1e 	bne	r2,zero,600575c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 6005734:	e0bffd17 	ldw	r2,-12(fp)
 6005738:	10800217 	ldw	r2,8(r2)
 600573c:	e0fffe17 	ldw	r3,-8(fp)
 6005740:	180d883a 	mov	r6,r3
 6005744:	e17fff17 	ldw	r5,-4(fp)
 6005748:	1009883a 	mov	r4,r2
 600574c:	60059a80 	call	60059a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 6005750:	1000021e 	bne	r2,zero,600575c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 6005754:	e0bffd17 	ldw	r2,-12(fp)
 6005758:	00000706 	br	6005778 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 600575c:	e0bffd17 	ldw	r2,-12(fp)
 6005760:	10800017 	ldw	r2,0(r2)
 6005764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 6005768:	e0fffd17 	ldw	r3,-12(fp)
 600576c:	d0a00704 	addi	r2,gp,-32740
 6005770:	18bfcc1e 	bne	r3,r2,60056a4 <__alt_data_end+0xff0056a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 6005774:	0005883a 	mov	r2,zero
}
 6005778:	e037883a 	mov	sp,fp
 600577c:	dfc00117 	ldw	ra,4(sp)
 6005780:	df000017 	ldw	fp,0(sp)
 6005784:	dec00204 	addi	sp,sp,8
 6005788:	f800283a 	ret

0600578c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 600578c:	defffc04 	addi	sp,sp,-16
 6005790:	df000315 	stw	fp,12(sp)
 6005794:	df000304 	addi	fp,sp,12
 6005798:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 600579c:	00bffa04 	movi	r2,-24
 60057a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 60057a4:	e03ffd15 	stw	zero,-12(fp)
 60057a8:	00001906 	br	6005810 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 60057ac:	00818034 	movhi	r2,1536
 60057b0:	10998b04 	addi	r2,r2,26156
 60057b4:	e0fffd17 	ldw	r3,-12(fp)
 60057b8:	18c00324 	muli	r3,r3,12
 60057bc:	10c5883a 	add	r2,r2,r3
 60057c0:	10800017 	ldw	r2,0(r2)
 60057c4:	10000f1e 	bne	r2,zero,6005804 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 60057c8:	00818034 	movhi	r2,1536
 60057cc:	10998b04 	addi	r2,r2,26156
 60057d0:	e0fffd17 	ldw	r3,-12(fp)
 60057d4:	18c00324 	muli	r3,r3,12
 60057d8:	10c5883a 	add	r2,r2,r3
 60057dc:	e0ffff17 	ldw	r3,-4(fp)
 60057e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 60057e4:	d0e00b17 	ldw	r3,-32724(gp)
 60057e8:	e0bffd17 	ldw	r2,-12(fp)
 60057ec:	1880020e 	bge	r3,r2,60057f8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 60057f0:	e0bffd17 	ldw	r2,-12(fp)
 60057f4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 60057f8:	e0bffd17 	ldw	r2,-12(fp)
 60057fc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 6005800:	00000606 	br	600581c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 6005804:	e0bffd17 	ldw	r2,-12(fp)
 6005808:	10800044 	addi	r2,r2,1
 600580c:	e0bffd15 	stw	r2,-12(fp)
 6005810:	e0bffd17 	ldw	r2,-12(fp)
 6005814:	10800810 	cmplti	r2,r2,32
 6005818:	103fe41e 	bne	r2,zero,60057ac <__alt_data_end+0xff0057ac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 600581c:	e0bffe17 	ldw	r2,-8(fp)
}
 6005820:	e037883a 	mov	sp,fp
 6005824:	df000017 	ldw	fp,0(sp)
 6005828:	dec00104 	addi	sp,sp,4
 600582c:	f800283a 	ret

06005830 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 6005830:	defffb04 	addi	sp,sp,-20
 6005834:	df000415 	stw	fp,16(sp)
 6005838:	df000404 	addi	fp,sp,16
 600583c:	e13ffe15 	stw	r4,-8(fp)
 6005840:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 6005844:	e0bfff17 	ldw	r2,-4(fp)
 6005848:	10840070 	cmpltui	r2,r2,4097
 600584c:	1000021e 	bne	r2,zero,6005858 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 6005850:	00840004 	movi	r2,4096
 6005854:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 6005858:	e0fffe17 	ldw	r3,-8(fp)
 600585c:	e0bfff17 	ldw	r2,-4(fp)
 6005860:	1885883a 	add	r2,r3,r2
 6005864:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 6005868:	e0bffe17 	ldw	r2,-8(fp)
 600586c:	e0bffc15 	stw	r2,-16(fp)
 6005870:	00000506 	br	6005888 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 6005874:	e0bffc17 	ldw	r2,-16(fp)
 6005878:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 600587c:	e0bffc17 	ldw	r2,-16(fp)
 6005880:	10800804 	addi	r2,r2,32
 6005884:	e0bffc15 	stw	r2,-16(fp)
 6005888:	e0fffc17 	ldw	r3,-16(fp)
 600588c:	e0bffd17 	ldw	r2,-12(fp)
 6005890:	18bff836 	bltu	r3,r2,6005874 <__alt_data_end+0xff005874>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 6005894:	e0bffe17 	ldw	r2,-8(fp)
 6005898:	108007cc 	andi	r2,r2,31
 600589c:	10000226 	beq	r2,zero,60058a8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 60058a0:	e0bffc17 	ldw	r2,-16(fp)
 60058a4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 60058a8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 60058ac:	0001883a 	nop
 60058b0:	e037883a 	mov	sp,fp
 60058b4:	df000017 	ldw	fp,0(sp)
 60058b8:	dec00104 	addi	sp,sp,4
 60058bc:	f800283a 	ret

060058c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 60058c0:	defffe04 	addi	sp,sp,-8
 60058c4:	df000115 	stw	fp,4(sp)
 60058c8:	df000104 	addi	fp,sp,4
 60058cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 60058d0:	e0bfff17 	ldw	r2,-4(fp)
 60058d4:	10bffe84 	addi	r2,r2,-6
 60058d8:	10c00428 	cmpgeui	r3,r2,16
 60058dc:	18001a1e 	bne	r3,zero,6005948 <alt_exception_cause_generated_bad_addr+0x88>
 60058e0:	100690ba 	slli	r3,r2,2
 60058e4:	00818034 	movhi	r2,1536
 60058e8:	10963e04 	addi	r2,r2,22776
 60058ec:	1885883a 	add	r2,r3,r2
 60058f0:	10800017 	ldw	r2,0(r2)
 60058f4:	1000683a 	jmp	r2
 60058f8:	06005938 	rdprs	et,zero,356
 60058fc:	06005938 	rdprs	et,zero,356
 6005900:	06005948 	cmpgei	et,zero,357
 6005904:	06005948 	cmpgei	et,zero,357
 6005908:	06005948 	cmpgei	et,zero,357
 600590c:	06005938 	rdprs	et,zero,356
 6005910:	06005940 	call	600594 <__alt_mem_sdram-0x39ffa6c>
 6005914:	06005948 	cmpgei	et,zero,357
 6005918:	06005938 	rdprs	et,zero,356
 600591c:	06005938 	rdprs	et,zero,356
 6005920:	06005948 	cmpgei	et,zero,357
 6005924:	06005938 	rdprs	et,zero,356
 6005928:	06005940 	call	600594 <__alt_mem_sdram-0x39ffa6c>
 600592c:	06005948 	cmpgei	et,zero,357
 6005930:	06005948 	cmpgei	et,zero,357
 6005934:	06005938 	rdprs	et,zero,356
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 6005938:	00800044 	movi	r2,1
 600593c:	00000306 	br	600594c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 6005940:	0005883a 	mov	r2,zero
 6005944:	00000106 	br	600594c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 6005948:	0005883a 	mov	r2,zero
  }
}
 600594c:	e037883a 	mov	sp,fp
 6005950:	df000017 	ldw	fp,0(sp)
 6005954:	dec00104 	addi	sp,sp,4
 6005958:	f800283a 	ret

0600595c <atexit>:
 600595c:	200b883a 	mov	r5,r4
 6005960:	000f883a 	mov	r7,zero
 6005964:	000d883a 	mov	r6,zero
 6005968:	0009883a 	mov	r4,zero
 600596c:	6005a241 	jmpi	6005a24 <__register_exitproc>

06005970 <exit>:
 6005970:	defffe04 	addi	sp,sp,-8
 6005974:	000b883a 	mov	r5,zero
 6005978:	dc000015 	stw	r16,0(sp)
 600597c:	dfc00115 	stw	ra,4(sp)
 6005980:	2021883a 	mov	r16,r4
 6005984:	6005b3c0 	call	6005b3c <__call_exitprocs>
 6005988:	00818034 	movhi	r2,1536
 600598c:	109e0a04 	addi	r2,r2,30760
 6005990:	11000017 	ldw	r4,0(r2)
 6005994:	20800f17 	ldw	r2,60(r4)
 6005998:	10000126 	beq	r2,zero,60059a0 <exit+0x30>
 600599c:	103ee83a 	callr	r2
 60059a0:	8009883a 	mov	r4,r16
 60059a4:	6005cbc0 	call	6005cbc <_exit>

060059a8 <memcmp>:
 60059a8:	01c000c4 	movi	r7,3
 60059ac:	3980192e 	bgeu	r7,r6,6005a14 <memcmp+0x6c>
 60059b0:	2144b03a 	or	r2,r4,r5
 60059b4:	11c4703a 	and	r2,r2,r7
 60059b8:	10000f26 	beq	r2,zero,60059f8 <memcmp+0x50>
 60059bc:	20800003 	ldbu	r2,0(r4)
 60059c0:	28c00003 	ldbu	r3,0(r5)
 60059c4:	10c0151e 	bne	r2,r3,6005a1c <memcmp+0x74>
 60059c8:	31bfff84 	addi	r6,r6,-2
 60059cc:	01ffffc4 	movi	r7,-1
 60059d0:	00000406 	br	60059e4 <memcmp+0x3c>
 60059d4:	20800003 	ldbu	r2,0(r4)
 60059d8:	28c00003 	ldbu	r3,0(r5)
 60059dc:	31bfffc4 	addi	r6,r6,-1
 60059e0:	10c00e1e 	bne	r2,r3,6005a1c <memcmp+0x74>
 60059e4:	21000044 	addi	r4,r4,1
 60059e8:	29400044 	addi	r5,r5,1
 60059ec:	31fff91e 	bne	r6,r7,60059d4 <__alt_data_end+0xff0059d4>
 60059f0:	0005883a 	mov	r2,zero
 60059f4:	f800283a 	ret
 60059f8:	20c00017 	ldw	r3,0(r4)
 60059fc:	28800017 	ldw	r2,0(r5)
 6005a00:	18bfee1e 	bne	r3,r2,60059bc <__alt_data_end+0xff0059bc>
 6005a04:	31bfff04 	addi	r6,r6,-4
 6005a08:	21000104 	addi	r4,r4,4
 6005a0c:	29400104 	addi	r5,r5,4
 6005a10:	39bff936 	bltu	r7,r6,60059f8 <__alt_data_end+0xff0059f8>
 6005a14:	303fe91e 	bne	r6,zero,60059bc <__alt_data_end+0xff0059bc>
 6005a18:	003ff506 	br	60059f0 <__alt_data_end+0xff0059f0>
 6005a1c:	10c5c83a 	sub	r2,r2,r3
 6005a20:	f800283a 	ret

06005a24 <__register_exitproc>:
 6005a24:	defffa04 	addi	sp,sp,-24
 6005a28:	dc000315 	stw	r16,12(sp)
 6005a2c:	04018034 	movhi	r16,1536
 6005a30:	841e0a04 	addi	r16,r16,30760
 6005a34:	80c00017 	ldw	r3,0(r16)
 6005a38:	dc400415 	stw	r17,16(sp)
 6005a3c:	dfc00515 	stw	ra,20(sp)
 6005a40:	18805217 	ldw	r2,328(r3)
 6005a44:	2023883a 	mov	r17,r4
 6005a48:	10003726 	beq	r2,zero,6005b28 <__register_exitproc+0x104>
 6005a4c:	10c00117 	ldw	r3,4(r2)
 6005a50:	010007c4 	movi	r4,31
 6005a54:	20c00e16 	blt	r4,r3,6005a90 <__register_exitproc+0x6c>
 6005a58:	1a000044 	addi	r8,r3,1
 6005a5c:	8800221e 	bne	r17,zero,6005ae8 <__register_exitproc+0xc4>
 6005a60:	18c00084 	addi	r3,r3,2
 6005a64:	18c7883a 	add	r3,r3,r3
 6005a68:	18c7883a 	add	r3,r3,r3
 6005a6c:	12000115 	stw	r8,4(r2)
 6005a70:	10c7883a 	add	r3,r2,r3
 6005a74:	19400015 	stw	r5,0(r3)
 6005a78:	0005883a 	mov	r2,zero
 6005a7c:	dfc00517 	ldw	ra,20(sp)
 6005a80:	dc400417 	ldw	r17,16(sp)
 6005a84:	dc000317 	ldw	r16,12(sp)
 6005a88:	dec00604 	addi	sp,sp,24
 6005a8c:	f800283a 	ret
 6005a90:	00800034 	movhi	r2,0
 6005a94:	10800004 	addi	r2,r2,0
 6005a98:	10002626 	beq	r2,zero,6005b34 <__register_exitproc+0x110>
 6005a9c:	01006404 	movi	r4,400
 6005aa0:	d9400015 	stw	r5,0(sp)
 6005aa4:	d9800115 	stw	r6,4(sp)
 6005aa8:	d9c00215 	stw	r7,8(sp)
 6005aac:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 6005ab0:	d9400017 	ldw	r5,0(sp)
 6005ab4:	d9800117 	ldw	r6,4(sp)
 6005ab8:	d9c00217 	ldw	r7,8(sp)
 6005abc:	10001d26 	beq	r2,zero,6005b34 <__register_exitproc+0x110>
 6005ac0:	81000017 	ldw	r4,0(r16)
 6005ac4:	10000115 	stw	zero,4(r2)
 6005ac8:	02000044 	movi	r8,1
 6005acc:	22405217 	ldw	r9,328(r4)
 6005ad0:	0007883a 	mov	r3,zero
 6005ad4:	12400015 	stw	r9,0(r2)
 6005ad8:	20805215 	stw	r2,328(r4)
 6005adc:	10006215 	stw	zero,392(r2)
 6005ae0:	10006315 	stw	zero,396(r2)
 6005ae4:	883fde26 	beq	r17,zero,6005a60 <__alt_data_end+0xff005a60>
 6005ae8:	18c9883a 	add	r4,r3,r3
 6005aec:	2109883a 	add	r4,r4,r4
 6005af0:	1109883a 	add	r4,r2,r4
 6005af4:	21802215 	stw	r6,136(r4)
 6005af8:	01800044 	movi	r6,1
 6005afc:	12406217 	ldw	r9,392(r2)
 6005b00:	30cc983a 	sll	r6,r6,r3
 6005b04:	4992b03a 	or	r9,r9,r6
 6005b08:	12406215 	stw	r9,392(r2)
 6005b0c:	21c04215 	stw	r7,264(r4)
 6005b10:	01000084 	movi	r4,2
 6005b14:	893fd21e 	bne	r17,r4,6005a60 <__alt_data_end+0xff005a60>
 6005b18:	11006317 	ldw	r4,396(r2)
 6005b1c:	218cb03a 	or	r6,r4,r6
 6005b20:	11806315 	stw	r6,396(r2)
 6005b24:	003fce06 	br	6005a60 <__alt_data_end+0xff005a60>
 6005b28:	18805304 	addi	r2,r3,332
 6005b2c:	18805215 	stw	r2,328(r3)
 6005b30:	003fc606 	br	6005a4c <__alt_data_end+0xff005a4c>
 6005b34:	00bfffc4 	movi	r2,-1
 6005b38:	003fd006 	br	6005a7c <__alt_data_end+0xff005a7c>

06005b3c <__call_exitprocs>:
 6005b3c:	defff504 	addi	sp,sp,-44
 6005b40:	df000915 	stw	fp,36(sp)
 6005b44:	dd400615 	stw	r21,24(sp)
 6005b48:	dc800315 	stw	r18,12(sp)
 6005b4c:	dfc00a15 	stw	ra,40(sp)
 6005b50:	ddc00815 	stw	r23,32(sp)
 6005b54:	dd800715 	stw	r22,28(sp)
 6005b58:	dd000515 	stw	r20,20(sp)
 6005b5c:	dcc00415 	stw	r19,16(sp)
 6005b60:	dc400215 	stw	r17,8(sp)
 6005b64:	dc000115 	stw	r16,4(sp)
 6005b68:	d9000015 	stw	r4,0(sp)
 6005b6c:	2839883a 	mov	fp,r5
 6005b70:	04800044 	movi	r18,1
 6005b74:	057fffc4 	movi	r21,-1
 6005b78:	00818034 	movhi	r2,1536
 6005b7c:	109e0a04 	addi	r2,r2,30760
 6005b80:	12000017 	ldw	r8,0(r2)
 6005b84:	45005217 	ldw	r20,328(r8)
 6005b88:	44c05204 	addi	r19,r8,328
 6005b8c:	a0001c26 	beq	r20,zero,6005c00 <__call_exitprocs+0xc4>
 6005b90:	a0800117 	ldw	r2,4(r20)
 6005b94:	15ffffc4 	addi	r23,r2,-1
 6005b98:	b8000d16 	blt	r23,zero,6005bd0 <__call_exitprocs+0x94>
 6005b9c:	14000044 	addi	r16,r2,1
 6005ba0:	8421883a 	add	r16,r16,r16
 6005ba4:	8421883a 	add	r16,r16,r16
 6005ba8:	84402004 	addi	r17,r16,128
 6005bac:	a463883a 	add	r17,r20,r17
 6005bb0:	a421883a 	add	r16,r20,r16
 6005bb4:	e0001e26 	beq	fp,zero,6005c30 <__call_exitprocs+0xf4>
 6005bb8:	80804017 	ldw	r2,256(r16)
 6005bbc:	e0801c26 	beq	fp,r2,6005c30 <__call_exitprocs+0xf4>
 6005bc0:	bdffffc4 	addi	r23,r23,-1
 6005bc4:	843fff04 	addi	r16,r16,-4
 6005bc8:	8c7fff04 	addi	r17,r17,-4
 6005bcc:	bd7ff91e 	bne	r23,r21,6005bb4 <__alt_data_end+0xff005bb4>
 6005bd0:	00800034 	movhi	r2,0
 6005bd4:	10800004 	addi	r2,r2,0
 6005bd8:	10000926 	beq	r2,zero,6005c00 <__call_exitprocs+0xc4>
 6005bdc:	a0800117 	ldw	r2,4(r20)
 6005be0:	1000301e 	bne	r2,zero,6005ca4 <__call_exitprocs+0x168>
 6005be4:	a0800017 	ldw	r2,0(r20)
 6005be8:	10003226 	beq	r2,zero,6005cb4 <__call_exitprocs+0x178>
 6005bec:	a009883a 	mov	r4,r20
 6005bf0:	98800015 	stw	r2,0(r19)
 6005bf4:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 6005bf8:	9d000017 	ldw	r20,0(r19)
 6005bfc:	a03fe41e 	bne	r20,zero,6005b90 <__alt_data_end+0xff005b90>
 6005c00:	dfc00a17 	ldw	ra,40(sp)
 6005c04:	df000917 	ldw	fp,36(sp)
 6005c08:	ddc00817 	ldw	r23,32(sp)
 6005c0c:	dd800717 	ldw	r22,28(sp)
 6005c10:	dd400617 	ldw	r21,24(sp)
 6005c14:	dd000517 	ldw	r20,20(sp)
 6005c18:	dcc00417 	ldw	r19,16(sp)
 6005c1c:	dc800317 	ldw	r18,12(sp)
 6005c20:	dc400217 	ldw	r17,8(sp)
 6005c24:	dc000117 	ldw	r16,4(sp)
 6005c28:	dec00b04 	addi	sp,sp,44
 6005c2c:	f800283a 	ret
 6005c30:	a0800117 	ldw	r2,4(r20)
 6005c34:	80c00017 	ldw	r3,0(r16)
 6005c38:	10bfffc4 	addi	r2,r2,-1
 6005c3c:	15c01426 	beq	r2,r23,6005c90 <__call_exitprocs+0x154>
 6005c40:	80000015 	stw	zero,0(r16)
 6005c44:	183fde26 	beq	r3,zero,6005bc0 <__alt_data_end+0xff005bc0>
 6005c48:	95c8983a 	sll	r4,r18,r23
 6005c4c:	a0806217 	ldw	r2,392(r20)
 6005c50:	a5800117 	ldw	r22,4(r20)
 6005c54:	2084703a 	and	r2,r4,r2
 6005c58:	10000b26 	beq	r2,zero,6005c88 <__call_exitprocs+0x14c>
 6005c5c:	a0806317 	ldw	r2,396(r20)
 6005c60:	2088703a 	and	r4,r4,r2
 6005c64:	20000c1e 	bne	r4,zero,6005c98 <__call_exitprocs+0x15c>
 6005c68:	89400017 	ldw	r5,0(r17)
 6005c6c:	d9000017 	ldw	r4,0(sp)
 6005c70:	183ee83a 	callr	r3
 6005c74:	a0800117 	ldw	r2,4(r20)
 6005c78:	15bfbf1e 	bne	r2,r22,6005b78 <__alt_data_end+0xff005b78>
 6005c7c:	98800017 	ldw	r2,0(r19)
 6005c80:	153fcf26 	beq	r2,r20,6005bc0 <__alt_data_end+0xff005bc0>
 6005c84:	003fbc06 	br	6005b78 <__alt_data_end+0xff005b78>
 6005c88:	183ee83a 	callr	r3
 6005c8c:	003ff906 	br	6005c74 <__alt_data_end+0xff005c74>
 6005c90:	a5c00115 	stw	r23,4(r20)
 6005c94:	003feb06 	br	6005c44 <__alt_data_end+0xff005c44>
 6005c98:	89000017 	ldw	r4,0(r17)
 6005c9c:	183ee83a 	callr	r3
 6005ca0:	003ff406 	br	6005c74 <__alt_data_end+0xff005c74>
 6005ca4:	a0800017 	ldw	r2,0(r20)
 6005ca8:	a027883a 	mov	r19,r20
 6005cac:	1029883a 	mov	r20,r2
 6005cb0:	003fb606 	br	6005b8c <__alt_data_end+0xff005b8c>
 6005cb4:	0005883a 	mov	r2,zero
 6005cb8:	003ffb06 	br	6005ca8 <__alt_data_end+0xff005ca8>

06005cbc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 6005cbc:	defffd04 	addi	sp,sp,-12
 6005cc0:	df000215 	stw	fp,8(sp)
 6005cc4:	df000204 	addi	fp,sp,8
 6005cc8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 6005ccc:	0001883a 	nop
 6005cd0:	e0bfff17 	ldw	r2,-4(fp)
 6005cd4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 6005cd8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 6005cdc:	10000226 	beq	r2,zero,6005ce8 <_exit+0x2c>
    ALT_SIM_FAIL();
 6005ce0:	002af070 	cmpltui	zero,zero,43969
 6005ce4:	00000106 	br	6005cec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 6005ce8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 6005cec:	003fff06 	br	6005cec <__alt_data_end+0xff005cec>
