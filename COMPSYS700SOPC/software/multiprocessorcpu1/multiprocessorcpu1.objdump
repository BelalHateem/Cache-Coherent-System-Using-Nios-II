
multiprocessorcpu1.elf:     file format elf32-littlenios2
multiprocessorcpu1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x05000244

Program Header:
    LOAD off    0x00001000 vaddr 0x05000000 paddr 0x05000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05000020 paddr 0x05000020 align 2**12
         filesz 0x00005dbc memsz 0x00005dbc flags r-x
    LOAD off    0x00006ddc vaddr 0x05005ddc paddr 0x0500786c align 2**12
         filesz 0x00001a90 memsz 0x00001a90 flags rw-
    LOAD off    0x000092fc vaddr 0x050092fc paddr 0x050092fc align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05000000  05000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  05000020  05000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005ab0  05000244  05000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  05005cf4  05005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a90  05005ddc  0500786c  00006ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  050092fc  050092fc  000092fc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  05009450  05009450  0000886c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000886c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00008890  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016a87  00000000  00000000  000092e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000629a  00000000  00000000  0001fd67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006bc4  00000000  00000000  00026001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001768  00000000  00000000  0002cbc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002856  00000000  00000000  0002e330  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  00030b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000355d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00035608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003844a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003844d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00038452  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00038453  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00038454  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00038458  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003845c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000a  00000000  00000000  00038460  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000a  00000000  00000000  0003846a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000a  00000000  00000000  00038474  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0003847e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000011  00000000  00000000  00038481  2**0
                  CONTENTS, READONLY
 29 .jdi          000112a5  00000000  00000000  00038492  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000bc226  00000000  00000000  00049737  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05000000 l    d  .entry	00000000 .entry
05000020 l    d  .exceptions	00000000 .exceptions
05000244 l    d  .text	00000000 .text
05005cf4 l    d  .rodata	00000000 .rodata
05005ddc l    d  .rwdata	00000000 .rwdata
050092fc l    d  .bss	00000000 .bss
05009450 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../multiprocessorcpu1_bsp//obj/HAL/src/crt0.o
0500028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 maincpu1.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
05000570 l     F .text	00000008 __fp_unlock
05000584 l     F .text	0000019c __sinit.part.1
05000720 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
05005ddc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
050031cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
05003320 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0500334c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
05003438 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
05003518 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
05003604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
050037d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
05007854 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
05003a24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
05003b58 l     F .text	00000034 alt_dev_reg
05003b8c l     F .text	0000003c alt_get_errno
05003bc8 l     F .text	00000068 alt_avalon_mutex_reg
050067b0 l     O .rwdata	00001060 jtag_uart1
05007810 l     O .rwdata	00000010 mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
05003ef8 l     F .text	0000020c altera_avalon_jtag_uart_irq
05004104 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0500473c l     F .text	0000003c alt_get_errno
05004778 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
05004a08 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
05004c28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0500512c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0500526c l     F .text	0000003c alt_get_errno
050052a8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
05009324 g     O .bss	00000004 alt_instruction_exception_handler
05002fc4 g     F .text	00000054 _isatty_r
05003714 g     F .text	0000007c alt_main
05000404 g     F .text	000000c0 _puts_r
05009350 g     O .bss	00000100 alt_irq
05002cec g     F .text	00000060 _lseek_r
0500786c g       *ABS*	00000000 __flash_rwdata_start
05009450 g       *ABS*	00000000 __alt_heap_start
050022a0 g     F .text	0000005c __sseek
050008c0 g     F .text	00000010 __sinit
05000728 g     F .text	00000068 __sfmoreglue
050037b4 g     F .text	00000024 __malloc_unlock
0500198c g     F .text	0000015c memmove
050008a8 g     F .text	00000018 _cleanup
050048b0 g     F .text	00000040 altera_avalon_mutex_trylock
05005664 g     F .text	00000024 altera_nios2_gen2_irq_init
05000000 g     F .entry	0000001c __reset
05004944 g     F .text	00000074 altera_avalon_mutex_is_mine
05000020 g       *ABS*	00000000 __flash_exceptions_start
05002f68 g     F .text	0000005c _fstat_r
05009308 g     O .bss	00000004 errno
0500221c g     F .text	00000008 __seofread
05009310 g     O .bss	00000004 alt_argv
0500f820 g       *ABS*	00000000 _gp
05006630 g     O .rwdata	00000180 alt_fd_list
05004dc8 g     F .text	00000090 alt_find_dev
05007820 g     O .rwdata	00000004 A
05001844 g     F .text	00000148 memcpy
05000578 g     F .text	0000000c _cleanup_r
050051f0 g     F .text	0000007c alt_io_redirect
05005cf4 g       *ABS*	00000000 __DTOR_END__
050004c4 g     F .text	00000014 puts
050058c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
050042fc g     F .text	0000021c altera_avalon_jtag_uart_read
05003110 g     F .text	00000064 .hidden __udivsi3
05003474 g     F .text	000000a4 isatty
05005834 g     F .text	00000090 alt_icache_flush
05009304 g     O .bss	00000004 __malloc_top_pad
05000910 g     F .text	000004bc __sfvwrite_r
05002174 g     F .text	00000054 _sbrk_r
05002f08 g     F .text	00000060 _read_r
0500784c g     O .rwdata	00000004 alt_max_fd
0500250c g     F .text	000000f0 _fclose_r
05002888 g     F .text	00000030 fflush
05009300 g     O .bss	00000004 __malloc_max_sbrked_mem
05003640 g     F .text	000000d4 lseek
050049b8 g     F .text	00000050 altera_avalon_mutex_first_lock
0500782c g     O .rwdata	00000004 _global_impure_ptr
05001c10 g     F .text	00000564 _realloc_r
05009450 g       *ABS*	00000000 __bss_end
0500503c g     F .text	000000f0 alt_iic_isr_register
0500555c g     F .text	00000108 alt_tick
050008e0 g     F .text	00000018 __fp_lock_all
05004ff0 g     F .text	0000004c alt_ic_irq_enabled
050054c0 g     F .text	0000009c alt_alarm_stop
05009318 g     O .bss	00000004 alt_irq_active
050000fc g     F .exceptions	000000d4 alt_irq_handler
05006608 g     O .rwdata	00000028 alt_dev_null
050047f4 g     F .text	00000054 altera_avalon_mutex_open
050032d8 g     F .text	00000048 alt_dcache_flush_all
05007824 g     O .rwdata	00000004 B
0500786c g       *ABS*	00000000 __ram_rwdata_end
05007844 g     O .rwdata	00000008 alt_dev_list
05003a60 g     F .text	000000f8 write
05007858 g     O .rwdata	00000008 alt_mutex_list
05005ddc g       *ABS*	00000000 __ram_rodata_end
05003388 g     F .text	000000b0 fstat
05003174 g     F .text	00000058 .hidden __umodsi3
05009450 g       *ABS*	00000000 end
05007828 g     O .rwdata	00000004 C
05003e38 g     F .text	000000c0 altera_avalon_jtag_uart_init
050001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
05005cf4 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
05004a80 g     F .text	0000007c alt_avalon_timer_sc_init
05004518 g     F .text	00000224 altera_avalon_jtag_uart_write
050008d0 g     F .text	00000004 __sfp_lock_acquire
05001760 g     F .text	000000e4 memchr
050029dc g     F .text	00000310 _free_r
05005b40 g     F .text	00000180 __call_exitprocs
05007834 g     O .rwdata	00000004 __malloc_sbrk_base
05000244 g     F .text	0000004c _start
0500931c g     O .bss	00000004 _alt_tick_rate
05009320 g     O .bss	00000004 _alt_nticks
05003814 g     F .text	000000fc read
05003c68 g     F .text	0000006c alt_sys_init
05005a28 g     F .text	00000118 __register_exitproc
050048f0 g     F .text	00000054 altera_avalon_mutex_unlock
050041a4 g     F .text	00000068 altera_avalon_jtag_uart_close
05005ddc g       *ABS*	00000000 __ram_rwdata_start
05005cf4 g       *ABS*	00000000 __ram_rodata_start
05009328 g     O .bss	00000028 __malloc_current_mallinfo
05003cd4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
05005790 g     F .text	000000a4 alt_get_fd
050024b8 g     F .text	00000054 _close_r
050059ac g     F .text	0000007c memcmp
05003d94 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
05009450 g       *ABS*	00000000 __alt_stack_base
05003de4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05002364 g     F .text	00000154 __swsetup_r
05000790 g     F .text	00000118 __sfp
05006200 g     O .rwdata	00000408 __malloc_av_
050008dc g     F .text	00000004 __sinit_lock_release
050021c8 g     F .text	00000054 __sread
05005688 g     F .text	00000108 alt_find_file
05004c64 g     F .text	000000a4 alt_dev_llist_insert
05003790 g     F .text	00000024 __malloc_lock
05003974 g     F .text	000000b0 sbrk
0500282c g     F .text	0000005c _fflush_r
050092fc g       *ABS*	00000000 __bss_start
05001ae8 g     F .text	00000128 memset
050003a0 g     F .text	00000064 main
05009314 g     O .bss	00000004 alt_envp
050092fc g     O .bss	00000004 __malloc_max_total_mem
05003d34 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
05000290 g     F .text	00000110 matrix_multiply_part
050022fc g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
050025fc g     F .text	00000014 fclose
0500486c g     F .text	00000044 altera_avalon_mutex_lock
05000f54 g     F .text	0000080c _malloc_r
05007850 g     O .rwdata	00000004 alt_errno
05000dcc g     F .text	000000c4 _fwalk
05003018 g     F .text	00000084 .hidden __divsi3
050028b8 g     F .text	00000124 _malloc_trim_r
05005cf4 g       *ABS*	00000000 __CTOR_END__
05005cf4 g       *ABS*	00000000 __flash_rodata_start
05005cf4 g       *ABS*	00000000 __DTOR_LIST__
05003c30 g     F .text	00000038 alt_irq_init
05003910 g     F .text	00000064 alt_release_fd
05005960 g     F .text	00000014 atexit
05002304 g     F .text	00000060 _write_r
05007830 g     O .rwdata	00000004 _impure_ptr
0500930c g     O .bss	00000004 alt_argc
05002610 g     F .text	0000021c __sflush_r
05004d68 g     F .text	00000060 _do_dtors
05000020 g       .exceptions	00000000 alt_irq_entry
050008f8 g     F .text	00000018 __fp_unlock_all
0500783c g     O .rwdata	00000008 alt_fs_list
05000020 g       *ABS*	00000000 __ram_exceptions_start
05004e8c g     F .text	00000050 alt_ic_isr_register
0500786c g       *ABS*	00000000 _edata
05009450 g       *ABS*	00000000 _end
05000244 g       *ABS*	00000000 __ram_exceptions_end
0500420c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
05004f64 g     F .text	0000008c alt_ic_irq_disable
05002224 g     F .text	0000007c __swrite
05007838 g     O .rwdata	00000004 __malloc_trim_threshold
05005974 g     F .text	00000038 exit
05000e90 g     F .text	000000c4 _fwalk_reent
0500309c g     F .text	00000074 .hidden __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
05000020 g     F .exceptions	00000000 alt_exception
050008d4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
05005cc0 g     F .text	00000034 _exit
05004afc g     F .text	0000012c alt_alarm_start
05002d4c g     F .text	000001bc __smakebuf_r
050004d8 g     F .text	00000098 strlen
0500536c g     F .text	00000154 open
05004e58 g     F .text	00000034 alt_icache_flush_all
05007860 g     O .rwdata	00000004 alt_priority_mask
05004edc g     F .text	00000088 alt_ic_irq_enable
05004848 g     F .text	00000024 altera_avalon_mutex_close
05007864 g     O .rwdata	00000008 alt_alarm_list
05004d08 g     F .text	00000060 _do_ctors
05003208 g     F .text	000000d0 close
05003580 g     F .text	00000084 alt_load
050008d8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

05000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 5000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 5000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 500000c:	00bffd16 	blt	zero,r2,5000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5000010:	00414034 	movhi	at,1280
    ori r1, r1, %lo(_start)
 5000014:	08409114 	ori	at,at,580
    jmp r1
 5000018:	0800683a 	jmp	at
 500001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

05000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 500002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 500003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 500004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 500005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 500006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 500007c:	10000326 	beq	r2,zero,500008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5000080:	20000226 	beq	r4,zero,500008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5000084:	50000fc0 	call	50000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5000088:	00000706 	br	50000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 500008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 5000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 5000098:	50001d00 	call	50001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 500009c:	1000021e 	bne	r2,zero,50000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 50000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 50000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 50000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 50000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50000f8:	ef80083a 	eret

050000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50000fc:	defff904 	addi	sp,sp,-28
 5000100:	dfc00615 	stw	ra,24(sp)
 5000104:	df000515 	stw	fp,20(sp)
 5000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 500010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5000110:	0005313a 	rdctl	r2,ipending
 5000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 5000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 500011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 5000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5000124:	00800044 	movi	r2,1
 5000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 500012c:	e0fffb17 	ldw	r3,-20(fp)
 5000130:	e0bffc17 	ldw	r2,-16(fp)
 5000134:	1884703a 	and	r2,r3,r2
 5000138:	10001426 	beq	r2,zero,500018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 500013c:	00814074 	movhi	r2,1281
 5000140:	10a4d404 	addi	r2,r2,-27824
 5000144:	e0fffd17 	ldw	r3,-12(fp)
 5000148:	180690fa 	slli	r3,r3,3
 500014c:	10c5883a 	add	r2,r2,r3
 5000150:	10c00017 	ldw	r3,0(r2)
 5000154:	00814074 	movhi	r2,1281
 5000158:	10a4d404 	addi	r2,r2,-27824
 500015c:	e13ffd17 	ldw	r4,-12(fp)
 5000160:	200890fa 	slli	r4,r4,3
 5000164:	1105883a 	add	r2,r2,r4
 5000168:	10800104 	addi	r2,r2,4
 500016c:	10800017 	ldw	r2,0(r2)
 5000170:	1009883a 	mov	r4,r2
 5000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 5000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 500017c:	0005313a 	rdctl	r2,ipending
 5000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 5000184:	e0bfff17 	ldw	r2,-4(fp)
 5000188:	00000706 	br	50001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 500018c:	e0bffc17 	ldw	r2,-16(fp)
 5000190:	1085883a 	add	r2,r2,r2
 5000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 5000198:	e0bffd17 	ldw	r2,-12(fp)
 500019c:	10800044 	addi	r2,r2,1
 50001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 50001a4:	003fe106 	br	500012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 50001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 50001ac:	e0bffb17 	ldw	r2,-20(fp)
 50001b0:	103fdb1e 	bne	r2,zero,5000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50001b4:	0001883a 	nop
}
 50001b8:	0001883a 	nop
 50001bc:	e037883a 	mov	sp,fp
 50001c0:	dfc00117 	ldw	ra,4(sp)
 50001c4:	df000017 	ldw	fp,0(sp)
 50001c8:	dec00204 	addi	sp,sp,8
 50001cc:	f800283a 	ret

050001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 50001d0:	defffb04 	addi	sp,sp,-20
 50001d4:	dfc00415 	stw	ra,16(sp)
 50001d8:	df000315 	stw	fp,12(sp)
 50001dc:	df000304 	addi	fp,sp,12
 50001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 50001e4:	000531fa 	rdctl	r2,exception
 50001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 50001ec:	e0bffd17 	ldw	r2,-12(fp)
 50001f0:	10801f0c 	andi	r2,r2,124
 50001f4:	1004d0ba 	srli	r2,r2,2
 50001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 50001fc:	0005333a 	rdctl	r2,badaddr
 5000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 5000204:	d0a6c117 	ldw	r2,-25852(gp)
 5000208:	10000726 	beq	r2,zero,5000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 500020c:	d0a6c117 	ldw	r2,-25852(gp)
 5000210:	e0fffd17 	ldw	r3,-12(fp)
 5000214:	e1bffe17 	ldw	r6,-8(fp)
 5000218:	e17fff17 	ldw	r5,-4(fp)
 500021c:	1809883a 	mov	r4,r3
 5000220:	103ee83a 	callr	r2
 5000224:	00000206 	br	5000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 5000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 500022c:	0005883a 	mov	r2,zero
}
 5000230:	e037883a 	mov	sp,fp
 5000234:	dfc00117 	ldw	ra,4(sp)
 5000238:	df000017 	ldw	fp,0(sp)
 500023c:	dec00204 	addi	sp,sp,8
 5000240:	f800283a 	ret

Disassembly of section .text:

05000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 5000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 5000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 500024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 5000250:	00bffd16 	blt	zero,r2,5000248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 5000254:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 5000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 500025c:	06814034 	movhi	gp,1280
    ori gp, gp, %lo(_gp)
 5000260:	d6be0814 	ori	gp,gp,63520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 5000264:	00814034 	movhi	r2,1280
    ori r2, r2, %lo(__bss_start)
 5000268:	10a4bf14 	ori	r2,r2,37628

    movhi r3, %hi(__bss_end)
 500026c:	00c14034 	movhi	r3,1280
    ori r3, r3, %lo(__bss_end)
 5000270:	18e51414 	ori	r3,r3,37968

    beq r2, r3, 1f
 5000274:	10c00326 	beq	r2,r3,5000284 <_start+0x40>

0:
    stw zero, (r2)
 5000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 500027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 5000280:	10fffd36 	bltu	r2,r3,5000278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5000284:	50035800 	call	5003580 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5000288:	50037140 	call	5003714 <alt_main>

0500028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 500028c:	003fff06 	br	500028c <__alt_data_end+0xff00028c>

05000290 <matrix_multiply_part>:
// Shared memory addresses
volatile int *A = (int *) SDRAM_BASE;
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
 5000290:	defff904 	addi	sp,sp,-28
 5000294:	df000615 	stw	fp,24(sp)
 5000298:	df000604 	addi	fp,sp,24
 500029c:	e13ffe15 	stw	r4,-8(fp)
 50002a0:	e17fff15 	stw	r5,-4(fp)
    for (int i = start_row; i < end_row; i++) {
 50002a4:	e0bffe17 	ldw	r2,-8(fp)
 50002a8:	e0bffa15 	stw	r2,-24(fp)
 50002ac:	00003406 	br	5000380 <matrix_multiply_part+0xf0>
        for (int j = 0; j < N; j++) {
 50002b0:	e03ffb15 	stw	zero,-20(fp)
 50002b4:	00002c06 	br	5000368 <matrix_multiply_part+0xd8>
            int sum = 0;
 50002b8:	e03ffc15 	stw	zero,-16(fp)
            for (int k = 0; k < N; k++) {
 50002bc:	e03ffd15 	stw	zero,-12(fp)
 50002c0:	00001906 	br	5000328 <matrix_multiply_part+0x98>
                sum += A[i * N + k] * B[k * N + j];
 50002c4:	d0e00017 	ldw	r3,-32768(gp)
 50002c8:	e0bffa17 	ldw	r2,-24(fp)
 50002cc:	100890fa 	slli	r4,r2,3
 50002d0:	e0bffd17 	ldw	r2,-12(fp)
 50002d4:	2085883a 	add	r2,r4,r2
 50002d8:	1085883a 	add	r2,r2,r2
 50002dc:	1085883a 	add	r2,r2,r2
 50002e0:	1885883a 	add	r2,r3,r2
 50002e4:	10c00017 	ldw	r3,0(r2)
 50002e8:	d1200117 	ldw	r4,-32764(gp)
 50002ec:	e0bffd17 	ldw	r2,-12(fp)
 50002f0:	100a90fa 	slli	r5,r2,3
 50002f4:	e0bffb17 	ldw	r2,-20(fp)
 50002f8:	2885883a 	add	r2,r5,r2
 50002fc:	1085883a 	add	r2,r2,r2
 5000300:	1085883a 	add	r2,r2,r2
 5000304:	2085883a 	add	r2,r4,r2
 5000308:	10800017 	ldw	r2,0(r2)
 500030c:	1885383a 	mul	r2,r3,r2
 5000310:	e0fffc17 	ldw	r3,-16(fp)
 5000314:	1885883a 	add	r2,r3,r2
 5000318:	e0bffc15 	stw	r2,-16(fp)

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < N; j++) {
            int sum = 0;
            for (int k = 0; k < N; k++) {
 500031c:	e0bffd17 	ldw	r2,-12(fp)
 5000320:	10800044 	addi	r2,r2,1
 5000324:	e0bffd15 	stw	r2,-12(fp)
 5000328:	e0bffd17 	ldw	r2,-12(fp)
 500032c:	10800210 	cmplti	r2,r2,8
 5000330:	103fe41e 	bne	r2,zero,50002c4 <__alt_data_end+0xff0002c4>
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;  // Store result in shared memory
 5000334:	d0e00217 	ldw	r3,-32760(gp)
 5000338:	e0bffa17 	ldw	r2,-24(fp)
 500033c:	100890fa 	slli	r4,r2,3
 5000340:	e0bffb17 	ldw	r2,-20(fp)
 5000344:	2085883a 	add	r2,r4,r2
 5000348:	1085883a 	add	r2,r2,r2
 500034c:	1085883a 	add	r2,r2,r2
 5000350:	1885883a 	add	r2,r3,r2
 5000354:	e0fffc17 	ldw	r3,-16(fp)
 5000358:	10c00015 	stw	r3,0(r2)
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < N; j++) {
 500035c:	e0bffb17 	ldw	r2,-20(fp)
 5000360:	10800044 	addi	r2,r2,1
 5000364:	e0bffb15 	stw	r2,-20(fp)
 5000368:	e0bffb17 	ldw	r2,-20(fp)
 500036c:	10800210 	cmplti	r2,r2,8
 5000370:	103fd11e 	bne	r2,zero,50002b8 <__alt_data_end+0xff0002b8>
volatile int *A = (int *) SDRAM_BASE;
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
 5000374:	e0bffa17 	ldw	r2,-24(fp)
 5000378:	10800044 	addi	r2,r2,1
 500037c:	e0bffa15 	stw	r2,-24(fp)
 5000380:	e0fffa17 	ldw	r3,-24(fp)
 5000384:	e0bfff17 	ldw	r2,-4(fp)
 5000388:	18bfc916 	blt	r3,r2,50002b0 <__alt_data_end+0xff0002b0>
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;  // Store result in shared memory
        }
    }
}
 500038c:	0001883a 	nop
 5000390:	e037883a 	mov	sp,fp
 5000394:	df000017 	ldw	fp,0(sp)
 5000398:	dec00104 	addi	sp,sp,4
 500039c:	f800283a 	ret

050003a0 <main>:

int main() {
 50003a0:	defffe04 	addi	sp,sp,-8
 50003a4:	dfc00115 	stw	ra,4(sp)
 50003a8:	df000015 	stw	fp,0(sp)
 50003ac:	d839883a 	mov	fp,sp
    // Wait for switches SW[0], SW[1], SW[2], and SW[3] to be on
    printf("CPU 1: Waiting for switches SW[0], SW[1], SW[2], and SW[3] to be on...\n");
 50003b0:	01014034 	movhi	r4,1280
 50003b4:	21173d04 	addi	r4,r4,23796
 50003b8:	50004c40 	call	50004c4 <puts>
    while ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x0F) != 0x0F);
 50003bc:	0001883a 	nop
 50003c0:	00820034 	movhi	r2,2048
 50003c4:	10840804 	addi	r2,r2,4128
 50003c8:	10800037 	ldwio	r2,0(r2)
 50003cc:	108003cc 	andi	r2,r2,15
 50003d0:	108003d8 	cmpnei	r2,r2,15
 50003d4:	103ffa1e 	bne	r2,zero,50003c0 <__alt_data_end+0xff0003c0>

    printf("CPU 1: Switches are on, starting matrix multiplication.\n");
 50003d8:	01014034 	movhi	r4,1280
 50003dc:	21174f04 	addi	r4,r4,23868
 50003e0:	50004c40 	call	50004c4 <puts>

    // Perform matrix multiplication for the second quarter
    matrix_multiply_part(N / 4, N / 2);
 50003e4:	01400104 	movi	r5,4
 50003e8:	01000084 	movi	r4,2
 50003ec:	50002900 	call	5000290 <matrix_multiply_part>

    printf("CPU 1: Matrix Multiplication complete\n");
 50003f0:	01014034 	movhi	r4,1280
 50003f4:	21175d04 	addi	r4,r4,23924
 50003f8:	50004c40 	call	50004c4 <puts>

    // Flush caches to ensure other CPUs see the updated values
    alt_dcache_flush_all();
 50003fc:	50032d80 	call	50032d8 <alt_dcache_flush_all>

    while (1);  // Loop forever
 5000400:	003fff06 	br	5000400 <__alt_data_end+0xff000400>

05000404 <_puts_r>:
 5000404:	defff604 	addi	sp,sp,-40
 5000408:	dc000715 	stw	r16,28(sp)
 500040c:	2021883a 	mov	r16,r4
 5000410:	2809883a 	mov	r4,r5
 5000414:	dc400815 	stw	r17,32(sp)
 5000418:	dfc00915 	stw	ra,36(sp)
 500041c:	2823883a 	mov	r17,r5
 5000420:	50004d80 	call	50004d8 <strlen>
 5000424:	10c00044 	addi	r3,r2,1
 5000428:	d8800115 	stw	r2,4(sp)
 500042c:	00814034 	movhi	r2,1280
 5000430:	10976704 	addi	r2,r2,23964
 5000434:	d8800215 	stw	r2,8(sp)
 5000438:	00800044 	movi	r2,1
 500043c:	d8800315 	stw	r2,12(sp)
 5000440:	00800084 	movi	r2,2
 5000444:	dc400015 	stw	r17,0(sp)
 5000448:	d8c00615 	stw	r3,24(sp)
 500044c:	dec00415 	stw	sp,16(sp)
 5000450:	d8800515 	stw	r2,20(sp)
 5000454:	80000226 	beq	r16,zero,5000460 <_puts_r+0x5c>
 5000458:	80800e17 	ldw	r2,56(r16)
 500045c:	10001426 	beq	r2,zero,50004b0 <_puts_r+0xac>
 5000460:	81400217 	ldw	r5,8(r16)
 5000464:	2880030b 	ldhu	r2,12(r5)
 5000468:	10c8000c 	andi	r3,r2,8192
 500046c:	1800061e 	bne	r3,zero,5000488 <_puts_r+0x84>
 5000470:	29001917 	ldw	r4,100(r5)
 5000474:	00f7ffc4 	movi	r3,-8193
 5000478:	10880014 	ori	r2,r2,8192
 500047c:	20c6703a 	and	r3,r4,r3
 5000480:	2880030d 	sth	r2,12(r5)
 5000484:	28c01915 	stw	r3,100(r5)
 5000488:	d9800404 	addi	r6,sp,16
 500048c:	8009883a 	mov	r4,r16
 5000490:	50009100 	call	5000910 <__sfvwrite_r>
 5000494:	1000091e 	bne	r2,zero,50004bc <_puts_r+0xb8>
 5000498:	00800284 	movi	r2,10
 500049c:	dfc00917 	ldw	ra,36(sp)
 50004a0:	dc400817 	ldw	r17,32(sp)
 50004a4:	dc000717 	ldw	r16,28(sp)
 50004a8:	dec00a04 	addi	sp,sp,40
 50004ac:	f800283a 	ret
 50004b0:	8009883a 	mov	r4,r16
 50004b4:	50008c00 	call	50008c0 <__sinit>
 50004b8:	003fe906 	br	5000460 <__alt_data_end+0xff000460>
 50004bc:	00bfffc4 	movi	r2,-1
 50004c0:	003ff606 	br	500049c <__alt_data_end+0xff00049c>

050004c4 <puts>:
 50004c4:	00814034 	movhi	r2,1280
 50004c8:	109e0c04 	addi	r2,r2,30768
 50004cc:	200b883a 	mov	r5,r4
 50004d0:	11000017 	ldw	r4,0(r2)
 50004d4:	50004041 	jmpi	5000404 <_puts_r>

050004d8 <strlen>:
 50004d8:	208000cc 	andi	r2,r4,3
 50004dc:	10002026 	beq	r2,zero,5000560 <strlen+0x88>
 50004e0:	20800007 	ldb	r2,0(r4)
 50004e4:	10002026 	beq	r2,zero,5000568 <strlen+0x90>
 50004e8:	2005883a 	mov	r2,r4
 50004ec:	00000206 	br	50004f8 <strlen+0x20>
 50004f0:	10c00007 	ldb	r3,0(r2)
 50004f4:	18001826 	beq	r3,zero,5000558 <strlen+0x80>
 50004f8:	10800044 	addi	r2,r2,1
 50004fc:	10c000cc 	andi	r3,r2,3
 5000500:	183ffb1e 	bne	r3,zero,50004f0 <__alt_data_end+0xff0004f0>
 5000504:	10c00017 	ldw	r3,0(r2)
 5000508:	01ffbff4 	movhi	r7,65279
 500050c:	39ffbfc4 	addi	r7,r7,-257
 5000510:	00ca303a 	nor	r5,zero,r3
 5000514:	01a02074 	movhi	r6,32897
 5000518:	19c7883a 	add	r3,r3,r7
 500051c:	31a02004 	addi	r6,r6,-32640
 5000520:	1946703a 	and	r3,r3,r5
 5000524:	1986703a 	and	r3,r3,r6
 5000528:	1800091e 	bne	r3,zero,5000550 <strlen+0x78>
 500052c:	10800104 	addi	r2,r2,4
 5000530:	10c00017 	ldw	r3,0(r2)
 5000534:	19cb883a 	add	r5,r3,r7
 5000538:	00c6303a 	nor	r3,zero,r3
 500053c:	28c6703a 	and	r3,r5,r3
 5000540:	1986703a 	and	r3,r3,r6
 5000544:	183ff926 	beq	r3,zero,500052c <__alt_data_end+0xff00052c>
 5000548:	00000106 	br	5000550 <strlen+0x78>
 500054c:	10800044 	addi	r2,r2,1
 5000550:	10c00007 	ldb	r3,0(r2)
 5000554:	183ffd1e 	bne	r3,zero,500054c <__alt_data_end+0xff00054c>
 5000558:	1105c83a 	sub	r2,r2,r4
 500055c:	f800283a 	ret
 5000560:	2005883a 	mov	r2,r4
 5000564:	003fe706 	br	5000504 <__alt_data_end+0xff000504>
 5000568:	0005883a 	mov	r2,zero
 500056c:	f800283a 	ret

05000570 <__fp_unlock>:
 5000570:	0005883a 	mov	r2,zero
 5000574:	f800283a 	ret

05000578 <_cleanup_r>:
 5000578:	01414034 	movhi	r5,1280
 500057c:	29494304 	addi	r5,r5,9484
 5000580:	5000e901 	jmpi	5000e90 <_fwalk_reent>

05000584 <__sinit.part.1>:
 5000584:	defff704 	addi	sp,sp,-36
 5000588:	00c14034 	movhi	r3,1280
 500058c:	dfc00815 	stw	ra,32(sp)
 5000590:	ddc00715 	stw	r23,28(sp)
 5000594:	dd800615 	stw	r22,24(sp)
 5000598:	dd400515 	stw	r21,20(sp)
 500059c:	dd000415 	stw	r20,16(sp)
 50005a0:	dcc00315 	stw	r19,12(sp)
 50005a4:	dc800215 	stw	r18,8(sp)
 50005a8:	dc400115 	stw	r17,4(sp)
 50005ac:	dc000015 	stw	r16,0(sp)
 50005b0:	18c15e04 	addi	r3,r3,1400
 50005b4:	24000117 	ldw	r16,4(r4)
 50005b8:	20c00f15 	stw	r3,60(r4)
 50005bc:	2080bb04 	addi	r2,r4,748
 50005c0:	00c000c4 	movi	r3,3
 50005c4:	20c0b915 	stw	r3,740(r4)
 50005c8:	2080ba15 	stw	r2,744(r4)
 50005cc:	2000b815 	stw	zero,736(r4)
 50005d0:	05c00204 	movi	r23,8
 50005d4:	00800104 	movi	r2,4
 50005d8:	2025883a 	mov	r18,r4
 50005dc:	b80d883a 	mov	r6,r23
 50005e0:	81001704 	addi	r4,r16,92
 50005e4:	000b883a 	mov	r5,zero
 50005e8:	80000015 	stw	zero,0(r16)
 50005ec:	80000115 	stw	zero,4(r16)
 50005f0:	80000215 	stw	zero,8(r16)
 50005f4:	8080030d 	sth	r2,12(r16)
 50005f8:	80001915 	stw	zero,100(r16)
 50005fc:	8000038d 	sth	zero,14(r16)
 5000600:	80000415 	stw	zero,16(r16)
 5000604:	80000515 	stw	zero,20(r16)
 5000608:	80000615 	stw	zero,24(r16)
 500060c:	5001ae80 	call	5001ae8 <memset>
 5000610:	05814034 	movhi	r22,1280
 5000614:	94400217 	ldw	r17,8(r18)
 5000618:	05414034 	movhi	r21,1280
 500061c:	05014034 	movhi	r20,1280
 5000620:	04c14034 	movhi	r19,1280
 5000624:	b5887204 	addi	r22,r22,8648
 5000628:	ad488904 	addi	r21,r21,8740
 500062c:	a508a804 	addi	r20,r20,8864
 5000630:	9cc8bf04 	addi	r19,r19,8956
 5000634:	85800815 	stw	r22,32(r16)
 5000638:	85400915 	stw	r21,36(r16)
 500063c:	85000a15 	stw	r20,40(r16)
 5000640:	84c00b15 	stw	r19,44(r16)
 5000644:	84000715 	stw	r16,28(r16)
 5000648:	00800284 	movi	r2,10
 500064c:	8880030d 	sth	r2,12(r17)
 5000650:	00800044 	movi	r2,1
 5000654:	b80d883a 	mov	r6,r23
 5000658:	89001704 	addi	r4,r17,92
 500065c:	000b883a 	mov	r5,zero
 5000660:	88000015 	stw	zero,0(r17)
 5000664:	88000115 	stw	zero,4(r17)
 5000668:	88000215 	stw	zero,8(r17)
 500066c:	88001915 	stw	zero,100(r17)
 5000670:	8880038d 	sth	r2,14(r17)
 5000674:	88000415 	stw	zero,16(r17)
 5000678:	88000515 	stw	zero,20(r17)
 500067c:	88000615 	stw	zero,24(r17)
 5000680:	5001ae80 	call	5001ae8 <memset>
 5000684:	94000317 	ldw	r16,12(r18)
 5000688:	00800484 	movi	r2,18
 500068c:	8c400715 	stw	r17,28(r17)
 5000690:	8d800815 	stw	r22,32(r17)
 5000694:	8d400915 	stw	r21,36(r17)
 5000698:	8d000a15 	stw	r20,40(r17)
 500069c:	8cc00b15 	stw	r19,44(r17)
 50006a0:	8080030d 	sth	r2,12(r16)
 50006a4:	00800084 	movi	r2,2
 50006a8:	80000015 	stw	zero,0(r16)
 50006ac:	80000115 	stw	zero,4(r16)
 50006b0:	80000215 	stw	zero,8(r16)
 50006b4:	80001915 	stw	zero,100(r16)
 50006b8:	8080038d 	sth	r2,14(r16)
 50006bc:	80000415 	stw	zero,16(r16)
 50006c0:	80000515 	stw	zero,20(r16)
 50006c4:	80000615 	stw	zero,24(r16)
 50006c8:	b80d883a 	mov	r6,r23
 50006cc:	000b883a 	mov	r5,zero
 50006d0:	81001704 	addi	r4,r16,92
 50006d4:	5001ae80 	call	5001ae8 <memset>
 50006d8:	00800044 	movi	r2,1
 50006dc:	84000715 	stw	r16,28(r16)
 50006e0:	85800815 	stw	r22,32(r16)
 50006e4:	85400915 	stw	r21,36(r16)
 50006e8:	85000a15 	stw	r20,40(r16)
 50006ec:	84c00b15 	stw	r19,44(r16)
 50006f0:	90800e15 	stw	r2,56(r18)
 50006f4:	dfc00817 	ldw	ra,32(sp)
 50006f8:	ddc00717 	ldw	r23,28(sp)
 50006fc:	dd800617 	ldw	r22,24(sp)
 5000700:	dd400517 	ldw	r21,20(sp)
 5000704:	dd000417 	ldw	r20,16(sp)
 5000708:	dcc00317 	ldw	r19,12(sp)
 500070c:	dc800217 	ldw	r18,8(sp)
 5000710:	dc400117 	ldw	r17,4(sp)
 5000714:	dc000017 	ldw	r16,0(sp)
 5000718:	dec00904 	addi	sp,sp,36
 500071c:	f800283a 	ret

05000720 <__fp_lock>:
 5000720:	0005883a 	mov	r2,zero
 5000724:	f800283a 	ret

05000728 <__sfmoreglue>:
 5000728:	defffc04 	addi	sp,sp,-16
 500072c:	dc400115 	stw	r17,4(sp)
 5000730:	2c7fffc4 	addi	r17,r5,-1
 5000734:	8c401a24 	muli	r17,r17,104
 5000738:	dc800215 	stw	r18,8(sp)
 500073c:	2825883a 	mov	r18,r5
 5000740:	89401d04 	addi	r5,r17,116
 5000744:	dc000015 	stw	r16,0(sp)
 5000748:	dfc00315 	stw	ra,12(sp)
 500074c:	5000f540 	call	5000f54 <_malloc_r>
 5000750:	1021883a 	mov	r16,r2
 5000754:	10000726 	beq	r2,zero,5000774 <__sfmoreglue+0x4c>
 5000758:	11000304 	addi	r4,r2,12
 500075c:	10000015 	stw	zero,0(r2)
 5000760:	14800115 	stw	r18,4(r2)
 5000764:	11000215 	stw	r4,8(r2)
 5000768:	89801a04 	addi	r6,r17,104
 500076c:	000b883a 	mov	r5,zero
 5000770:	5001ae80 	call	5001ae8 <memset>
 5000774:	8005883a 	mov	r2,r16
 5000778:	dfc00317 	ldw	ra,12(sp)
 500077c:	dc800217 	ldw	r18,8(sp)
 5000780:	dc400117 	ldw	r17,4(sp)
 5000784:	dc000017 	ldw	r16,0(sp)
 5000788:	dec00404 	addi	sp,sp,16
 500078c:	f800283a 	ret

05000790 <__sfp>:
 5000790:	defffb04 	addi	sp,sp,-20
 5000794:	dc000015 	stw	r16,0(sp)
 5000798:	04014034 	movhi	r16,1280
 500079c:	841e0b04 	addi	r16,r16,30764
 50007a0:	dcc00315 	stw	r19,12(sp)
 50007a4:	2027883a 	mov	r19,r4
 50007a8:	81000017 	ldw	r4,0(r16)
 50007ac:	dfc00415 	stw	ra,16(sp)
 50007b0:	dc800215 	stw	r18,8(sp)
 50007b4:	20800e17 	ldw	r2,56(r4)
 50007b8:	dc400115 	stw	r17,4(sp)
 50007bc:	1000021e 	bne	r2,zero,50007c8 <__sfp+0x38>
 50007c0:	50005840 	call	5000584 <__sinit.part.1>
 50007c4:	81000017 	ldw	r4,0(r16)
 50007c8:	2480b804 	addi	r18,r4,736
 50007cc:	047fffc4 	movi	r17,-1
 50007d0:	91000117 	ldw	r4,4(r18)
 50007d4:	94000217 	ldw	r16,8(r18)
 50007d8:	213fffc4 	addi	r4,r4,-1
 50007dc:	20000a16 	blt	r4,zero,5000808 <__sfp+0x78>
 50007e0:	8080030f 	ldh	r2,12(r16)
 50007e4:	10000c26 	beq	r2,zero,5000818 <__sfp+0x88>
 50007e8:	80c01d04 	addi	r3,r16,116
 50007ec:	00000206 	br	50007f8 <__sfp+0x68>
 50007f0:	18bfe60f 	ldh	r2,-104(r3)
 50007f4:	10000826 	beq	r2,zero,5000818 <__sfp+0x88>
 50007f8:	213fffc4 	addi	r4,r4,-1
 50007fc:	1c3ffd04 	addi	r16,r3,-12
 5000800:	18c01a04 	addi	r3,r3,104
 5000804:	247ffa1e 	bne	r4,r17,50007f0 <__alt_data_end+0xff0007f0>
 5000808:	90800017 	ldw	r2,0(r18)
 500080c:	10001d26 	beq	r2,zero,5000884 <__sfp+0xf4>
 5000810:	1025883a 	mov	r18,r2
 5000814:	003fee06 	br	50007d0 <__alt_data_end+0xff0007d0>
 5000818:	00bfffc4 	movi	r2,-1
 500081c:	8080038d 	sth	r2,14(r16)
 5000820:	00800044 	movi	r2,1
 5000824:	8080030d 	sth	r2,12(r16)
 5000828:	80001915 	stw	zero,100(r16)
 500082c:	80000015 	stw	zero,0(r16)
 5000830:	80000215 	stw	zero,8(r16)
 5000834:	80000115 	stw	zero,4(r16)
 5000838:	80000415 	stw	zero,16(r16)
 500083c:	80000515 	stw	zero,20(r16)
 5000840:	80000615 	stw	zero,24(r16)
 5000844:	01800204 	movi	r6,8
 5000848:	000b883a 	mov	r5,zero
 500084c:	81001704 	addi	r4,r16,92
 5000850:	5001ae80 	call	5001ae8 <memset>
 5000854:	8005883a 	mov	r2,r16
 5000858:	80000c15 	stw	zero,48(r16)
 500085c:	80000d15 	stw	zero,52(r16)
 5000860:	80001115 	stw	zero,68(r16)
 5000864:	80001215 	stw	zero,72(r16)
 5000868:	dfc00417 	ldw	ra,16(sp)
 500086c:	dcc00317 	ldw	r19,12(sp)
 5000870:	dc800217 	ldw	r18,8(sp)
 5000874:	dc400117 	ldw	r17,4(sp)
 5000878:	dc000017 	ldw	r16,0(sp)
 500087c:	dec00504 	addi	sp,sp,20
 5000880:	f800283a 	ret
 5000884:	01400104 	movi	r5,4
 5000888:	9809883a 	mov	r4,r19
 500088c:	50007280 	call	5000728 <__sfmoreglue>
 5000890:	90800015 	stw	r2,0(r18)
 5000894:	103fde1e 	bne	r2,zero,5000810 <__alt_data_end+0xff000810>
 5000898:	00800304 	movi	r2,12
 500089c:	98800015 	stw	r2,0(r19)
 50008a0:	0005883a 	mov	r2,zero
 50008a4:	003ff006 	br	5000868 <__alt_data_end+0xff000868>

050008a8 <_cleanup>:
 50008a8:	00814034 	movhi	r2,1280
 50008ac:	109e0b04 	addi	r2,r2,30764
 50008b0:	11000017 	ldw	r4,0(r2)
 50008b4:	01414034 	movhi	r5,1280
 50008b8:	29494304 	addi	r5,r5,9484
 50008bc:	5000e901 	jmpi	5000e90 <_fwalk_reent>

050008c0 <__sinit>:
 50008c0:	20800e17 	ldw	r2,56(r4)
 50008c4:	10000126 	beq	r2,zero,50008cc <__sinit+0xc>
 50008c8:	f800283a 	ret
 50008cc:	50005841 	jmpi	5000584 <__sinit.part.1>

050008d0 <__sfp_lock_acquire>:
 50008d0:	f800283a 	ret

050008d4 <__sfp_lock_release>:
 50008d4:	f800283a 	ret

050008d8 <__sinit_lock_acquire>:
 50008d8:	f800283a 	ret

050008dc <__sinit_lock_release>:
 50008dc:	f800283a 	ret

050008e0 <__fp_lock_all>:
 50008e0:	00814034 	movhi	r2,1280
 50008e4:	109e0c04 	addi	r2,r2,30768
 50008e8:	11000017 	ldw	r4,0(r2)
 50008ec:	01414034 	movhi	r5,1280
 50008f0:	2941c804 	addi	r5,r5,1824
 50008f4:	5000dcc1 	jmpi	5000dcc <_fwalk>

050008f8 <__fp_unlock_all>:
 50008f8:	00814034 	movhi	r2,1280
 50008fc:	109e0c04 	addi	r2,r2,30768
 5000900:	11000017 	ldw	r4,0(r2)
 5000904:	01414034 	movhi	r5,1280
 5000908:	29415c04 	addi	r5,r5,1392
 500090c:	5000dcc1 	jmpi	5000dcc <_fwalk>

05000910 <__sfvwrite_r>:
 5000910:	30800217 	ldw	r2,8(r6)
 5000914:	10006726 	beq	r2,zero,5000ab4 <__sfvwrite_r+0x1a4>
 5000918:	28c0030b 	ldhu	r3,12(r5)
 500091c:	defff404 	addi	sp,sp,-48
 5000920:	dd400715 	stw	r21,28(sp)
 5000924:	dd000615 	stw	r20,24(sp)
 5000928:	dc000215 	stw	r16,8(sp)
 500092c:	dfc00b15 	stw	ra,44(sp)
 5000930:	df000a15 	stw	fp,40(sp)
 5000934:	ddc00915 	stw	r23,36(sp)
 5000938:	dd800815 	stw	r22,32(sp)
 500093c:	dcc00515 	stw	r19,20(sp)
 5000940:	dc800415 	stw	r18,16(sp)
 5000944:	dc400315 	stw	r17,12(sp)
 5000948:	1880020c 	andi	r2,r3,8
 500094c:	2821883a 	mov	r16,r5
 5000950:	202b883a 	mov	r21,r4
 5000954:	3029883a 	mov	r20,r6
 5000958:	10002726 	beq	r2,zero,50009f8 <__sfvwrite_r+0xe8>
 500095c:	28800417 	ldw	r2,16(r5)
 5000960:	10002526 	beq	r2,zero,50009f8 <__sfvwrite_r+0xe8>
 5000964:	1880008c 	andi	r2,r3,2
 5000968:	a4400017 	ldw	r17,0(r20)
 500096c:	10002a26 	beq	r2,zero,5000a18 <__sfvwrite_r+0x108>
 5000970:	05a00034 	movhi	r22,32768
 5000974:	0027883a 	mov	r19,zero
 5000978:	0025883a 	mov	r18,zero
 500097c:	b5bf0004 	addi	r22,r22,-1024
 5000980:	980d883a 	mov	r6,r19
 5000984:	a809883a 	mov	r4,r21
 5000988:	90004626 	beq	r18,zero,5000aa4 <__sfvwrite_r+0x194>
 500098c:	900f883a 	mov	r7,r18
 5000990:	b480022e 	bgeu	r22,r18,500099c <__sfvwrite_r+0x8c>
 5000994:	01e00034 	movhi	r7,32768
 5000998:	39ff0004 	addi	r7,r7,-1024
 500099c:	80800917 	ldw	r2,36(r16)
 50009a0:	81400717 	ldw	r5,28(r16)
 50009a4:	103ee83a 	callr	r2
 50009a8:	0080570e 	bge	zero,r2,5000b08 <__sfvwrite_r+0x1f8>
 50009ac:	a0c00217 	ldw	r3,8(r20)
 50009b0:	98a7883a 	add	r19,r19,r2
 50009b4:	90a5c83a 	sub	r18,r18,r2
 50009b8:	1885c83a 	sub	r2,r3,r2
 50009bc:	a0800215 	stw	r2,8(r20)
 50009c0:	103fef1e 	bne	r2,zero,5000980 <__alt_data_end+0xff000980>
 50009c4:	0005883a 	mov	r2,zero
 50009c8:	dfc00b17 	ldw	ra,44(sp)
 50009cc:	df000a17 	ldw	fp,40(sp)
 50009d0:	ddc00917 	ldw	r23,36(sp)
 50009d4:	dd800817 	ldw	r22,32(sp)
 50009d8:	dd400717 	ldw	r21,28(sp)
 50009dc:	dd000617 	ldw	r20,24(sp)
 50009e0:	dcc00517 	ldw	r19,20(sp)
 50009e4:	dc800417 	ldw	r18,16(sp)
 50009e8:	dc400317 	ldw	r17,12(sp)
 50009ec:	dc000217 	ldw	r16,8(sp)
 50009f0:	dec00c04 	addi	sp,sp,48
 50009f4:	f800283a 	ret
 50009f8:	800b883a 	mov	r5,r16
 50009fc:	a809883a 	mov	r4,r21
 5000a00:	50023640 	call	5002364 <__swsetup_r>
 5000a04:	1000eb1e 	bne	r2,zero,5000db4 <__sfvwrite_r+0x4a4>
 5000a08:	80c0030b 	ldhu	r3,12(r16)
 5000a0c:	a4400017 	ldw	r17,0(r20)
 5000a10:	1880008c 	andi	r2,r3,2
 5000a14:	103fd61e 	bne	r2,zero,5000970 <__alt_data_end+0xff000970>
 5000a18:	1880004c 	andi	r2,r3,1
 5000a1c:	10003f1e 	bne	r2,zero,5000b1c <__sfvwrite_r+0x20c>
 5000a20:	0039883a 	mov	fp,zero
 5000a24:	0025883a 	mov	r18,zero
 5000a28:	90001a26 	beq	r18,zero,5000a94 <__sfvwrite_r+0x184>
 5000a2c:	1880800c 	andi	r2,r3,512
 5000a30:	84c00217 	ldw	r19,8(r16)
 5000a34:	10002126 	beq	r2,zero,5000abc <__sfvwrite_r+0x1ac>
 5000a38:	982f883a 	mov	r23,r19
 5000a3c:	94c09336 	bltu	r18,r19,5000c8c <__sfvwrite_r+0x37c>
 5000a40:	1881200c 	andi	r2,r3,1152
 5000a44:	10009e1e 	bne	r2,zero,5000cc0 <__sfvwrite_r+0x3b0>
 5000a48:	81000017 	ldw	r4,0(r16)
 5000a4c:	b80d883a 	mov	r6,r23
 5000a50:	e00b883a 	mov	r5,fp
 5000a54:	500198c0 	call	500198c <memmove>
 5000a58:	80c00217 	ldw	r3,8(r16)
 5000a5c:	81000017 	ldw	r4,0(r16)
 5000a60:	9005883a 	mov	r2,r18
 5000a64:	1ce7c83a 	sub	r19,r3,r19
 5000a68:	25cf883a 	add	r7,r4,r23
 5000a6c:	84c00215 	stw	r19,8(r16)
 5000a70:	81c00015 	stw	r7,0(r16)
 5000a74:	a0c00217 	ldw	r3,8(r20)
 5000a78:	e0b9883a 	add	fp,fp,r2
 5000a7c:	90a5c83a 	sub	r18,r18,r2
 5000a80:	18a7c83a 	sub	r19,r3,r2
 5000a84:	a4c00215 	stw	r19,8(r20)
 5000a88:	983fce26 	beq	r19,zero,50009c4 <__alt_data_end+0xff0009c4>
 5000a8c:	80c0030b 	ldhu	r3,12(r16)
 5000a90:	903fe61e 	bne	r18,zero,5000a2c <__alt_data_end+0xff000a2c>
 5000a94:	8f000017 	ldw	fp,0(r17)
 5000a98:	8c800117 	ldw	r18,4(r17)
 5000a9c:	8c400204 	addi	r17,r17,8
 5000aa0:	003fe106 	br	5000a28 <__alt_data_end+0xff000a28>
 5000aa4:	8cc00017 	ldw	r19,0(r17)
 5000aa8:	8c800117 	ldw	r18,4(r17)
 5000aac:	8c400204 	addi	r17,r17,8
 5000ab0:	003fb306 	br	5000980 <__alt_data_end+0xff000980>
 5000ab4:	0005883a 	mov	r2,zero
 5000ab8:	f800283a 	ret
 5000abc:	81000017 	ldw	r4,0(r16)
 5000ac0:	80800417 	ldw	r2,16(r16)
 5000ac4:	11005736 	bltu	r2,r4,5000c24 <__sfvwrite_r+0x314>
 5000ac8:	85c00517 	ldw	r23,20(r16)
 5000acc:	95c05536 	bltu	r18,r23,5000c24 <__sfvwrite_r+0x314>
 5000ad0:	00a00034 	movhi	r2,32768
 5000ad4:	10bfffc4 	addi	r2,r2,-1
 5000ad8:	9009883a 	mov	r4,r18
 5000adc:	1480012e 	bgeu	r2,r18,5000ae4 <__sfvwrite_r+0x1d4>
 5000ae0:	1009883a 	mov	r4,r2
 5000ae4:	b80b883a 	mov	r5,r23
 5000ae8:	50030180 	call	5003018 <__divsi3>
 5000aec:	15cf383a 	mul	r7,r2,r23
 5000af0:	81400717 	ldw	r5,28(r16)
 5000af4:	80800917 	ldw	r2,36(r16)
 5000af8:	e00d883a 	mov	r6,fp
 5000afc:	a809883a 	mov	r4,r21
 5000b00:	103ee83a 	callr	r2
 5000b04:	00bfdb16 	blt	zero,r2,5000a74 <__alt_data_end+0xff000a74>
 5000b08:	8080030b 	ldhu	r2,12(r16)
 5000b0c:	10801014 	ori	r2,r2,64
 5000b10:	8080030d 	sth	r2,12(r16)
 5000b14:	00bfffc4 	movi	r2,-1
 5000b18:	003fab06 	br	50009c8 <__alt_data_end+0xff0009c8>
 5000b1c:	0027883a 	mov	r19,zero
 5000b20:	0011883a 	mov	r8,zero
 5000b24:	0039883a 	mov	fp,zero
 5000b28:	0025883a 	mov	r18,zero
 5000b2c:	90001f26 	beq	r18,zero,5000bac <__sfvwrite_r+0x29c>
 5000b30:	40005a26 	beq	r8,zero,5000c9c <__sfvwrite_r+0x38c>
 5000b34:	982d883a 	mov	r22,r19
 5000b38:	94c0012e 	bgeu	r18,r19,5000b40 <__sfvwrite_r+0x230>
 5000b3c:	902d883a 	mov	r22,r18
 5000b40:	81000017 	ldw	r4,0(r16)
 5000b44:	80800417 	ldw	r2,16(r16)
 5000b48:	b02f883a 	mov	r23,r22
 5000b4c:	81c00517 	ldw	r7,20(r16)
 5000b50:	1100032e 	bgeu	r2,r4,5000b60 <__sfvwrite_r+0x250>
 5000b54:	80c00217 	ldw	r3,8(r16)
 5000b58:	38c7883a 	add	r3,r7,r3
 5000b5c:	1d801816 	blt	r3,r22,5000bc0 <__sfvwrite_r+0x2b0>
 5000b60:	b1c03e16 	blt	r22,r7,5000c5c <__sfvwrite_r+0x34c>
 5000b64:	80800917 	ldw	r2,36(r16)
 5000b68:	81400717 	ldw	r5,28(r16)
 5000b6c:	e00d883a 	mov	r6,fp
 5000b70:	da000115 	stw	r8,4(sp)
 5000b74:	a809883a 	mov	r4,r21
 5000b78:	103ee83a 	callr	r2
 5000b7c:	102f883a 	mov	r23,r2
 5000b80:	da000117 	ldw	r8,4(sp)
 5000b84:	00bfe00e 	bge	zero,r2,5000b08 <__alt_data_end+0xff000b08>
 5000b88:	9de7c83a 	sub	r19,r19,r23
 5000b8c:	98001f26 	beq	r19,zero,5000c0c <__sfvwrite_r+0x2fc>
 5000b90:	a0800217 	ldw	r2,8(r20)
 5000b94:	e5f9883a 	add	fp,fp,r23
 5000b98:	95e5c83a 	sub	r18,r18,r23
 5000b9c:	15efc83a 	sub	r23,r2,r23
 5000ba0:	a5c00215 	stw	r23,8(r20)
 5000ba4:	b83f8726 	beq	r23,zero,50009c4 <__alt_data_end+0xff0009c4>
 5000ba8:	903fe11e 	bne	r18,zero,5000b30 <__alt_data_end+0xff000b30>
 5000bac:	8f000017 	ldw	fp,0(r17)
 5000bb0:	8c800117 	ldw	r18,4(r17)
 5000bb4:	0011883a 	mov	r8,zero
 5000bb8:	8c400204 	addi	r17,r17,8
 5000bbc:	003fdb06 	br	5000b2c <__alt_data_end+0xff000b2c>
 5000bc0:	180d883a 	mov	r6,r3
 5000bc4:	e00b883a 	mov	r5,fp
 5000bc8:	da000115 	stw	r8,4(sp)
 5000bcc:	d8c00015 	stw	r3,0(sp)
 5000bd0:	500198c0 	call	500198c <memmove>
 5000bd4:	d8c00017 	ldw	r3,0(sp)
 5000bd8:	80800017 	ldw	r2,0(r16)
 5000bdc:	800b883a 	mov	r5,r16
 5000be0:	a809883a 	mov	r4,r21
 5000be4:	10c5883a 	add	r2,r2,r3
 5000be8:	80800015 	stw	r2,0(r16)
 5000bec:	d8c00015 	stw	r3,0(sp)
 5000bf0:	500282c0 	call	500282c <_fflush_r>
 5000bf4:	d8c00017 	ldw	r3,0(sp)
 5000bf8:	da000117 	ldw	r8,4(sp)
 5000bfc:	103fc21e 	bne	r2,zero,5000b08 <__alt_data_end+0xff000b08>
 5000c00:	182f883a 	mov	r23,r3
 5000c04:	9de7c83a 	sub	r19,r19,r23
 5000c08:	983fe11e 	bne	r19,zero,5000b90 <__alt_data_end+0xff000b90>
 5000c0c:	800b883a 	mov	r5,r16
 5000c10:	a809883a 	mov	r4,r21
 5000c14:	500282c0 	call	500282c <_fflush_r>
 5000c18:	103fbb1e 	bne	r2,zero,5000b08 <__alt_data_end+0xff000b08>
 5000c1c:	0011883a 	mov	r8,zero
 5000c20:	003fdb06 	br	5000b90 <__alt_data_end+0xff000b90>
 5000c24:	94c0012e 	bgeu	r18,r19,5000c2c <__sfvwrite_r+0x31c>
 5000c28:	9027883a 	mov	r19,r18
 5000c2c:	980d883a 	mov	r6,r19
 5000c30:	e00b883a 	mov	r5,fp
 5000c34:	500198c0 	call	500198c <memmove>
 5000c38:	80800217 	ldw	r2,8(r16)
 5000c3c:	80c00017 	ldw	r3,0(r16)
 5000c40:	14c5c83a 	sub	r2,r2,r19
 5000c44:	1cc7883a 	add	r3,r3,r19
 5000c48:	80800215 	stw	r2,8(r16)
 5000c4c:	80c00015 	stw	r3,0(r16)
 5000c50:	10004326 	beq	r2,zero,5000d60 <__sfvwrite_r+0x450>
 5000c54:	9805883a 	mov	r2,r19
 5000c58:	003f8606 	br	5000a74 <__alt_data_end+0xff000a74>
 5000c5c:	b00d883a 	mov	r6,r22
 5000c60:	e00b883a 	mov	r5,fp
 5000c64:	da000115 	stw	r8,4(sp)
 5000c68:	500198c0 	call	500198c <memmove>
 5000c6c:	80800217 	ldw	r2,8(r16)
 5000c70:	80c00017 	ldw	r3,0(r16)
 5000c74:	da000117 	ldw	r8,4(sp)
 5000c78:	1585c83a 	sub	r2,r2,r22
 5000c7c:	1dad883a 	add	r22,r3,r22
 5000c80:	80800215 	stw	r2,8(r16)
 5000c84:	85800015 	stw	r22,0(r16)
 5000c88:	003fbf06 	br	5000b88 <__alt_data_end+0xff000b88>
 5000c8c:	81000017 	ldw	r4,0(r16)
 5000c90:	9027883a 	mov	r19,r18
 5000c94:	902f883a 	mov	r23,r18
 5000c98:	003f6c06 	br	5000a4c <__alt_data_end+0xff000a4c>
 5000c9c:	900d883a 	mov	r6,r18
 5000ca0:	01400284 	movi	r5,10
 5000ca4:	e009883a 	mov	r4,fp
 5000ca8:	50017600 	call	5001760 <memchr>
 5000cac:	10003e26 	beq	r2,zero,5000da8 <__sfvwrite_r+0x498>
 5000cb0:	10800044 	addi	r2,r2,1
 5000cb4:	1727c83a 	sub	r19,r2,fp
 5000cb8:	02000044 	movi	r8,1
 5000cbc:	003f9d06 	br	5000b34 <__alt_data_end+0xff000b34>
 5000cc0:	80800517 	ldw	r2,20(r16)
 5000cc4:	81400417 	ldw	r5,16(r16)
 5000cc8:	81c00017 	ldw	r7,0(r16)
 5000ccc:	10a7883a 	add	r19,r2,r2
 5000cd0:	9885883a 	add	r2,r19,r2
 5000cd4:	1026d7fa 	srli	r19,r2,31
 5000cd8:	396dc83a 	sub	r22,r7,r5
 5000cdc:	b1000044 	addi	r4,r22,1
 5000ce0:	9885883a 	add	r2,r19,r2
 5000ce4:	1027d07a 	srai	r19,r2,1
 5000ce8:	2485883a 	add	r2,r4,r18
 5000cec:	980d883a 	mov	r6,r19
 5000cf0:	9880022e 	bgeu	r19,r2,5000cfc <__sfvwrite_r+0x3ec>
 5000cf4:	1027883a 	mov	r19,r2
 5000cf8:	100d883a 	mov	r6,r2
 5000cfc:	18c1000c 	andi	r3,r3,1024
 5000d00:	18001c26 	beq	r3,zero,5000d74 <__sfvwrite_r+0x464>
 5000d04:	300b883a 	mov	r5,r6
 5000d08:	a809883a 	mov	r4,r21
 5000d0c:	5000f540 	call	5000f54 <_malloc_r>
 5000d10:	102f883a 	mov	r23,r2
 5000d14:	10002926 	beq	r2,zero,5000dbc <__sfvwrite_r+0x4ac>
 5000d18:	81400417 	ldw	r5,16(r16)
 5000d1c:	b00d883a 	mov	r6,r22
 5000d20:	1009883a 	mov	r4,r2
 5000d24:	50018440 	call	5001844 <memcpy>
 5000d28:	8080030b 	ldhu	r2,12(r16)
 5000d2c:	00fedfc4 	movi	r3,-1153
 5000d30:	10c4703a 	and	r2,r2,r3
 5000d34:	10802014 	ori	r2,r2,128
 5000d38:	8080030d 	sth	r2,12(r16)
 5000d3c:	bd89883a 	add	r4,r23,r22
 5000d40:	9d8fc83a 	sub	r7,r19,r22
 5000d44:	85c00415 	stw	r23,16(r16)
 5000d48:	84c00515 	stw	r19,20(r16)
 5000d4c:	81000015 	stw	r4,0(r16)
 5000d50:	9027883a 	mov	r19,r18
 5000d54:	81c00215 	stw	r7,8(r16)
 5000d58:	902f883a 	mov	r23,r18
 5000d5c:	003f3b06 	br	5000a4c <__alt_data_end+0xff000a4c>
 5000d60:	800b883a 	mov	r5,r16
 5000d64:	a809883a 	mov	r4,r21
 5000d68:	500282c0 	call	500282c <_fflush_r>
 5000d6c:	103fb926 	beq	r2,zero,5000c54 <__alt_data_end+0xff000c54>
 5000d70:	003f6506 	br	5000b08 <__alt_data_end+0xff000b08>
 5000d74:	a809883a 	mov	r4,r21
 5000d78:	5001c100 	call	5001c10 <_realloc_r>
 5000d7c:	102f883a 	mov	r23,r2
 5000d80:	103fee1e 	bne	r2,zero,5000d3c <__alt_data_end+0xff000d3c>
 5000d84:	81400417 	ldw	r5,16(r16)
 5000d88:	a809883a 	mov	r4,r21
 5000d8c:	50029dc0 	call	50029dc <_free_r>
 5000d90:	8080030b 	ldhu	r2,12(r16)
 5000d94:	00ffdfc4 	movi	r3,-129
 5000d98:	1884703a 	and	r2,r3,r2
 5000d9c:	00c00304 	movi	r3,12
 5000da0:	a8c00015 	stw	r3,0(r21)
 5000da4:	003f5906 	br	5000b0c <__alt_data_end+0xff000b0c>
 5000da8:	94c00044 	addi	r19,r18,1
 5000dac:	02000044 	movi	r8,1
 5000db0:	003f6006 	br	5000b34 <__alt_data_end+0xff000b34>
 5000db4:	00bfffc4 	movi	r2,-1
 5000db8:	003f0306 	br	50009c8 <__alt_data_end+0xff0009c8>
 5000dbc:	00800304 	movi	r2,12
 5000dc0:	a8800015 	stw	r2,0(r21)
 5000dc4:	8080030b 	ldhu	r2,12(r16)
 5000dc8:	003f5006 	br	5000b0c <__alt_data_end+0xff000b0c>

05000dcc <_fwalk>:
 5000dcc:	defff704 	addi	sp,sp,-36
 5000dd0:	dd000415 	stw	r20,16(sp)
 5000dd4:	dfc00815 	stw	ra,32(sp)
 5000dd8:	ddc00715 	stw	r23,28(sp)
 5000ddc:	dd800615 	stw	r22,24(sp)
 5000de0:	dd400515 	stw	r21,20(sp)
 5000de4:	dcc00315 	stw	r19,12(sp)
 5000de8:	dc800215 	stw	r18,8(sp)
 5000dec:	dc400115 	stw	r17,4(sp)
 5000df0:	dc000015 	stw	r16,0(sp)
 5000df4:	2500b804 	addi	r20,r4,736
 5000df8:	a0002326 	beq	r20,zero,5000e88 <_fwalk+0xbc>
 5000dfc:	282b883a 	mov	r21,r5
 5000e00:	002f883a 	mov	r23,zero
 5000e04:	05800044 	movi	r22,1
 5000e08:	04ffffc4 	movi	r19,-1
 5000e0c:	a4400117 	ldw	r17,4(r20)
 5000e10:	a4800217 	ldw	r18,8(r20)
 5000e14:	8c7fffc4 	addi	r17,r17,-1
 5000e18:	88000d16 	blt	r17,zero,5000e50 <_fwalk+0x84>
 5000e1c:	94000304 	addi	r16,r18,12
 5000e20:	94800384 	addi	r18,r18,14
 5000e24:	8080000b 	ldhu	r2,0(r16)
 5000e28:	8c7fffc4 	addi	r17,r17,-1
 5000e2c:	813ffd04 	addi	r4,r16,-12
 5000e30:	b080042e 	bgeu	r22,r2,5000e44 <_fwalk+0x78>
 5000e34:	9080000f 	ldh	r2,0(r18)
 5000e38:	14c00226 	beq	r2,r19,5000e44 <_fwalk+0x78>
 5000e3c:	a83ee83a 	callr	r21
 5000e40:	b8aeb03a 	or	r23,r23,r2
 5000e44:	84001a04 	addi	r16,r16,104
 5000e48:	94801a04 	addi	r18,r18,104
 5000e4c:	8cfff51e 	bne	r17,r19,5000e24 <__alt_data_end+0xff000e24>
 5000e50:	a5000017 	ldw	r20,0(r20)
 5000e54:	a03fed1e 	bne	r20,zero,5000e0c <__alt_data_end+0xff000e0c>
 5000e58:	b805883a 	mov	r2,r23
 5000e5c:	dfc00817 	ldw	ra,32(sp)
 5000e60:	ddc00717 	ldw	r23,28(sp)
 5000e64:	dd800617 	ldw	r22,24(sp)
 5000e68:	dd400517 	ldw	r21,20(sp)
 5000e6c:	dd000417 	ldw	r20,16(sp)
 5000e70:	dcc00317 	ldw	r19,12(sp)
 5000e74:	dc800217 	ldw	r18,8(sp)
 5000e78:	dc400117 	ldw	r17,4(sp)
 5000e7c:	dc000017 	ldw	r16,0(sp)
 5000e80:	dec00904 	addi	sp,sp,36
 5000e84:	f800283a 	ret
 5000e88:	002f883a 	mov	r23,zero
 5000e8c:	003ff206 	br	5000e58 <__alt_data_end+0xff000e58>

05000e90 <_fwalk_reent>:
 5000e90:	defff704 	addi	sp,sp,-36
 5000e94:	dd000415 	stw	r20,16(sp)
 5000e98:	dfc00815 	stw	ra,32(sp)
 5000e9c:	ddc00715 	stw	r23,28(sp)
 5000ea0:	dd800615 	stw	r22,24(sp)
 5000ea4:	dd400515 	stw	r21,20(sp)
 5000ea8:	dcc00315 	stw	r19,12(sp)
 5000eac:	dc800215 	stw	r18,8(sp)
 5000eb0:	dc400115 	stw	r17,4(sp)
 5000eb4:	dc000015 	stw	r16,0(sp)
 5000eb8:	2500b804 	addi	r20,r4,736
 5000ebc:	a0002326 	beq	r20,zero,5000f4c <_fwalk_reent+0xbc>
 5000ec0:	282b883a 	mov	r21,r5
 5000ec4:	2027883a 	mov	r19,r4
 5000ec8:	002f883a 	mov	r23,zero
 5000ecc:	05800044 	movi	r22,1
 5000ed0:	04bfffc4 	movi	r18,-1
 5000ed4:	a4400117 	ldw	r17,4(r20)
 5000ed8:	a4000217 	ldw	r16,8(r20)
 5000edc:	8c7fffc4 	addi	r17,r17,-1
 5000ee0:	88000c16 	blt	r17,zero,5000f14 <_fwalk_reent+0x84>
 5000ee4:	84000304 	addi	r16,r16,12
 5000ee8:	8080000b 	ldhu	r2,0(r16)
 5000eec:	8c7fffc4 	addi	r17,r17,-1
 5000ef0:	817ffd04 	addi	r5,r16,-12
 5000ef4:	b080052e 	bgeu	r22,r2,5000f0c <_fwalk_reent+0x7c>
 5000ef8:	8080008f 	ldh	r2,2(r16)
 5000efc:	9809883a 	mov	r4,r19
 5000f00:	14800226 	beq	r2,r18,5000f0c <_fwalk_reent+0x7c>
 5000f04:	a83ee83a 	callr	r21
 5000f08:	b8aeb03a 	or	r23,r23,r2
 5000f0c:	84001a04 	addi	r16,r16,104
 5000f10:	8cbff51e 	bne	r17,r18,5000ee8 <__alt_data_end+0xff000ee8>
 5000f14:	a5000017 	ldw	r20,0(r20)
 5000f18:	a03fee1e 	bne	r20,zero,5000ed4 <__alt_data_end+0xff000ed4>
 5000f1c:	b805883a 	mov	r2,r23
 5000f20:	dfc00817 	ldw	ra,32(sp)
 5000f24:	ddc00717 	ldw	r23,28(sp)
 5000f28:	dd800617 	ldw	r22,24(sp)
 5000f2c:	dd400517 	ldw	r21,20(sp)
 5000f30:	dd000417 	ldw	r20,16(sp)
 5000f34:	dcc00317 	ldw	r19,12(sp)
 5000f38:	dc800217 	ldw	r18,8(sp)
 5000f3c:	dc400117 	ldw	r17,4(sp)
 5000f40:	dc000017 	ldw	r16,0(sp)
 5000f44:	dec00904 	addi	sp,sp,36
 5000f48:	f800283a 	ret
 5000f4c:	002f883a 	mov	r23,zero
 5000f50:	003ff206 	br	5000f1c <__alt_data_end+0xff000f1c>

05000f54 <_malloc_r>:
 5000f54:	defff504 	addi	sp,sp,-44
 5000f58:	dc800315 	stw	r18,12(sp)
 5000f5c:	dfc00a15 	stw	ra,40(sp)
 5000f60:	df000915 	stw	fp,36(sp)
 5000f64:	ddc00815 	stw	r23,32(sp)
 5000f68:	dd800715 	stw	r22,28(sp)
 5000f6c:	dd400615 	stw	r21,24(sp)
 5000f70:	dd000515 	stw	r20,20(sp)
 5000f74:	dcc00415 	stw	r19,16(sp)
 5000f78:	dc400215 	stw	r17,8(sp)
 5000f7c:	dc000115 	stw	r16,4(sp)
 5000f80:	288002c4 	addi	r2,r5,11
 5000f84:	00c00584 	movi	r3,22
 5000f88:	2025883a 	mov	r18,r4
 5000f8c:	18807f2e 	bgeu	r3,r2,500118c <_malloc_r+0x238>
 5000f90:	047ffe04 	movi	r17,-8
 5000f94:	1462703a 	and	r17,r2,r17
 5000f98:	8800a316 	blt	r17,zero,5001228 <_malloc_r+0x2d4>
 5000f9c:	8940a236 	bltu	r17,r5,5001228 <_malloc_r+0x2d4>
 5000fa0:	50037900 	call	5003790 <__malloc_lock>
 5000fa4:	00807dc4 	movi	r2,503
 5000fa8:	1441e92e 	bgeu	r2,r17,5001750 <_malloc_r+0x7fc>
 5000fac:	8804d27a 	srli	r2,r17,9
 5000fb0:	1000a126 	beq	r2,zero,5001238 <_malloc_r+0x2e4>
 5000fb4:	00c00104 	movi	r3,4
 5000fb8:	18811e36 	bltu	r3,r2,5001434 <_malloc_r+0x4e0>
 5000fbc:	8804d1ba 	srli	r2,r17,6
 5000fc0:	12000e44 	addi	r8,r2,57
 5000fc4:	11c00e04 	addi	r7,r2,56
 5000fc8:	4209883a 	add	r4,r8,r8
 5000fcc:	04c14034 	movhi	r19,1280
 5000fd0:	2109883a 	add	r4,r4,r4
 5000fd4:	9cd88004 	addi	r19,r19,25088
 5000fd8:	2109883a 	add	r4,r4,r4
 5000fdc:	9909883a 	add	r4,r19,r4
 5000fe0:	24000117 	ldw	r16,4(r4)
 5000fe4:	213ffe04 	addi	r4,r4,-8
 5000fe8:	24009726 	beq	r4,r16,5001248 <_malloc_r+0x2f4>
 5000fec:	80800117 	ldw	r2,4(r16)
 5000ff0:	01bfff04 	movi	r6,-4
 5000ff4:	014003c4 	movi	r5,15
 5000ff8:	1184703a 	and	r2,r2,r6
 5000ffc:	1447c83a 	sub	r3,r2,r17
 5001000:	28c00716 	blt	r5,r3,5001020 <_malloc_r+0xcc>
 5001004:	1800920e 	bge	r3,zero,5001250 <_malloc_r+0x2fc>
 5001008:	84000317 	ldw	r16,12(r16)
 500100c:	24008e26 	beq	r4,r16,5001248 <_malloc_r+0x2f4>
 5001010:	80800117 	ldw	r2,4(r16)
 5001014:	1184703a 	and	r2,r2,r6
 5001018:	1447c83a 	sub	r3,r2,r17
 500101c:	28fff90e 	bge	r5,r3,5001004 <__alt_data_end+0xff001004>
 5001020:	3809883a 	mov	r4,r7
 5001024:	01814034 	movhi	r6,1280
 5001028:	9c000417 	ldw	r16,16(r19)
 500102c:	31988004 	addi	r6,r6,25088
 5001030:	32000204 	addi	r8,r6,8
 5001034:	82013426 	beq	r16,r8,5001508 <_malloc_r+0x5b4>
 5001038:	80c00117 	ldw	r3,4(r16)
 500103c:	00bfff04 	movi	r2,-4
 5001040:	188e703a 	and	r7,r3,r2
 5001044:	3c45c83a 	sub	r2,r7,r17
 5001048:	00c003c4 	movi	r3,15
 500104c:	18811f16 	blt	r3,r2,50014cc <_malloc_r+0x578>
 5001050:	32000515 	stw	r8,20(r6)
 5001054:	32000415 	stw	r8,16(r6)
 5001058:	10007f0e 	bge	r2,zero,5001258 <_malloc_r+0x304>
 500105c:	00807fc4 	movi	r2,511
 5001060:	11c0fd36 	bltu	r2,r7,5001458 <_malloc_r+0x504>
 5001064:	3806d0fa 	srli	r3,r7,3
 5001068:	01c00044 	movi	r7,1
 500106c:	30800117 	ldw	r2,4(r6)
 5001070:	19400044 	addi	r5,r3,1
 5001074:	294b883a 	add	r5,r5,r5
 5001078:	1807d0ba 	srai	r3,r3,2
 500107c:	294b883a 	add	r5,r5,r5
 5001080:	294b883a 	add	r5,r5,r5
 5001084:	298b883a 	add	r5,r5,r6
 5001088:	38c6983a 	sll	r3,r7,r3
 500108c:	29c00017 	ldw	r7,0(r5)
 5001090:	2a7ffe04 	addi	r9,r5,-8
 5001094:	1886b03a 	or	r3,r3,r2
 5001098:	82400315 	stw	r9,12(r16)
 500109c:	81c00215 	stw	r7,8(r16)
 50010a0:	30c00115 	stw	r3,4(r6)
 50010a4:	2c000015 	stw	r16,0(r5)
 50010a8:	3c000315 	stw	r16,12(r7)
 50010ac:	2005d0ba 	srai	r2,r4,2
 50010b0:	01400044 	movi	r5,1
 50010b4:	288a983a 	sll	r5,r5,r2
 50010b8:	19406f36 	bltu	r3,r5,5001278 <_malloc_r+0x324>
 50010bc:	28c4703a 	and	r2,r5,r3
 50010c0:	10000a1e 	bne	r2,zero,50010ec <_malloc_r+0x198>
 50010c4:	00bfff04 	movi	r2,-4
 50010c8:	294b883a 	add	r5,r5,r5
 50010cc:	2088703a 	and	r4,r4,r2
 50010d0:	28c4703a 	and	r2,r5,r3
 50010d4:	21000104 	addi	r4,r4,4
 50010d8:	1000041e 	bne	r2,zero,50010ec <_malloc_r+0x198>
 50010dc:	294b883a 	add	r5,r5,r5
 50010e0:	28c4703a 	and	r2,r5,r3
 50010e4:	21000104 	addi	r4,r4,4
 50010e8:	103ffc26 	beq	r2,zero,50010dc <__alt_data_end+0xff0010dc>
 50010ec:	02bfff04 	movi	r10,-4
 50010f0:	024003c4 	movi	r9,15
 50010f4:	21800044 	addi	r6,r4,1
 50010f8:	318d883a 	add	r6,r6,r6
 50010fc:	318d883a 	add	r6,r6,r6
 5001100:	318d883a 	add	r6,r6,r6
 5001104:	998d883a 	add	r6,r19,r6
 5001108:	333ffe04 	addi	r12,r6,-8
 500110c:	2017883a 	mov	r11,r4
 5001110:	31800104 	addi	r6,r6,4
 5001114:	34000017 	ldw	r16,0(r6)
 5001118:	31fffd04 	addi	r7,r6,-12
 500111c:	81c0041e 	bne	r16,r7,5001130 <_malloc_r+0x1dc>
 5001120:	0000fb06 	br	5001510 <_malloc_r+0x5bc>
 5001124:	1801030e 	bge	r3,zero,5001534 <_malloc_r+0x5e0>
 5001128:	84000317 	ldw	r16,12(r16)
 500112c:	81c0f826 	beq	r16,r7,5001510 <_malloc_r+0x5bc>
 5001130:	80800117 	ldw	r2,4(r16)
 5001134:	1284703a 	and	r2,r2,r10
 5001138:	1447c83a 	sub	r3,r2,r17
 500113c:	48fff90e 	bge	r9,r3,5001124 <__alt_data_end+0xff001124>
 5001140:	80800317 	ldw	r2,12(r16)
 5001144:	81000217 	ldw	r4,8(r16)
 5001148:	89400054 	ori	r5,r17,1
 500114c:	81400115 	stw	r5,4(r16)
 5001150:	20800315 	stw	r2,12(r4)
 5001154:	11000215 	stw	r4,8(r2)
 5001158:	8463883a 	add	r17,r16,r17
 500115c:	9c400515 	stw	r17,20(r19)
 5001160:	9c400415 	stw	r17,16(r19)
 5001164:	18800054 	ori	r2,r3,1
 5001168:	88800115 	stw	r2,4(r17)
 500116c:	8a000315 	stw	r8,12(r17)
 5001170:	8a000215 	stw	r8,8(r17)
 5001174:	88e3883a 	add	r17,r17,r3
 5001178:	88c00015 	stw	r3,0(r17)
 500117c:	9009883a 	mov	r4,r18
 5001180:	50037b40 	call	50037b4 <__malloc_unlock>
 5001184:	80800204 	addi	r2,r16,8
 5001188:	00001b06 	br	50011f8 <_malloc_r+0x2a4>
 500118c:	04400404 	movi	r17,16
 5001190:	89402536 	bltu	r17,r5,5001228 <_malloc_r+0x2d4>
 5001194:	50037900 	call	5003790 <__malloc_lock>
 5001198:	00800184 	movi	r2,6
 500119c:	01000084 	movi	r4,2
 50011a0:	04c14034 	movhi	r19,1280
 50011a4:	1085883a 	add	r2,r2,r2
 50011a8:	9cd88004 	addi	r19,r19,25088
 50011ac:	1085883a 	add	r2,r2,r2
 50011b0:	9885883a 	add	r2,r19,r2
 50011b4:	14000117 	ldw	r16,4(r2)
 50011b8:	10fffe04 	addi	r3,r2,-8
 50011bc:	80c0d926 	beq	r16,r3,5001524 <_malloc_r+0x5d0>
 50011c0:	80c00117 	ldw	r3,4(r16)
 50011c4:	81000317 	ldw	r4,12(r16)
 50011c8:	00bfff04 	movi	r2,-4
 50011cc:	1884703a 	and	r2,r3,r2
 50011d0:	81400217 	ldw	r5,8(r16)
 50011d4:	8085883a 	add	r2,r16,r2
 50011d8:	10c00117 	ldw	r3,4(r2)
 50011dc:	29000315 	stw	r4,12(r5)
 50011e0:	21400215 	stw	r5,8(r4)
 50011e4:	18c00054 	ori	r3,r3,1
 50011e8:	10c00115 	stw	r3,4(r2)
 50011ec:	9009883a 	mov	r4,r18
 50011f0:	50037b40 	call	50037b4 <__malloc_unlock>
 50011f4:	80800204 	addi	r2,r16,8
 50011f8:	dfc00a17 	ldw	ra,40(sp)
 50011fc:	df000917 	ldw	fp,36(sp)
 5001200:	ddc00817 	ldw	r23,32(sp)
 5001204:	dd800717 	ldw	r22,28(sp)
 5001208:	dd400617 	ldw	r21,24(sp)
 500120c:	dd000517 	ldw	r20,20(sp)
 5001210:	dcc00417 	ldw	r19,16(sp)
 5001214:	dc800317 	ldw	r18,12(sp)
 5001218:	dc400217 	ldw	r17,8(sp)
 500121c:	dc000117 	ldw	r16,4(sp)
 5001220:	dec00b04 	addi	sp,sp,44
 5001224:	f800283a 	ret
 5001228:	00800304 	movi	r2,12
 500122c:	90800015 	stw	r2,0(r18)
 5001230:	0005883a 	mov	r2,zero
 5001234:	003ff006 	br	50011f8 <__alt_data_end+0xff0011f8>
 5001238:	01002004 	movi	r4,128
 500123c:	02001004 	movi	r8,64
 5001240:	01c00fc4 	movi	r7,63
 5001244:	003f6106 	br	5000fcc <__alt_data_end+0xff000fcc>
 5001248:	4009883a 	mov	r4,r8
 500124c:	003f7506 	br	5001024 <__alt_data_end+0xff001024>
 5001250:	81000317 	ldw	r4,12(r16)
 5001254:	003fde06 	br	50011d0 <__alt_data_end+0xff0011d0>
 5001258:	81c5883a 	add	r2,r16,r7
 500125c:	11400117 	ldw	r5,4(r2)
 5001260:	9009883a 	mov	r4,r18
 5001264:	29400054 	ori	r5,r5,1
 5001268:	11400115 	stw	r5,4(r2)
 500126c:	50037b40 	call	50037b4 <__malloc_unlock>
 5001270:	80800204 	addi	r2,r16,8
 5001274:	003fe006 	br	50011f8 <__alt_data_end+0xff0011f8>
 5001278:	9c000217 	ldw	r16,8(r19)
 500127c:	00bfff04 	movi	r2,-4
 5001280:	85800117 	ldw	r22,4(r16)
 5001284:	b0ac703a 	and	r22,r22,r2
 5001288:	b4400336 	bltu	r22,r17,5001298 <_malloc_r+0x344>
 500128c:	b445c83a 	sub	r2,r22,r17
 5001290:	00c003c4 	movi	r3,15
 5001294:	18805d16 	blt	r3,r2,500140c <_malloc_r+0x4b8>
 5001298:	05c14034 	movhi	r23,1280
 500129c:	00814074 	movhi	r2,1281
 50012a0:	10a4c104 	addi	r2,r2,-27900
 50012a4:	bdde0d04 	addi	r23,r23,30772
 50012a8:	15400017 	ldw	r21,0(r2)
 50012ac:	b8c00017 	ldw	r3,0(r23)
 50012b0:	00bfffc4 	movi	r2,-1
 50012b4:	858d883a 	add	r6,r16,r22
 50012b8:	8d6b883a 	add	r21,r17,r21
 50012bc:	1880ea26 	beq	r3,r2,5001668 <_malloc_r+0x714>
 50012c0:	ad4403c4 	addi	r21,r21,4111
 50012c4:	00bc0004 	movi	r2,-4096
 50012c8:	a8aa703a 	and	r21,r21,r2
 50012cc:	a80b883a 	mov	r5,r21
 50012d0:	9009883a 	mov	r4,r18
 50012d4:	d9800015 	stw	r6,0(sp)
 50012d8:	50021740 	call	5002174 <_sbrk_r>
 50012dc:	1029883a 	mov	r20,r2
 50012e0:	00bfffc4 	movi	r2,-1
 50012e4:	d9800017 	ldw	r6,0(sp)
 50012e8:	a080e826 	beq	r20,r2,500168c <_malloc_r+0x738>
 50012ec:	a180a636 	bltu	r20,r6,5001588 <_malloc_r+0x634>
 50012f0:	07014074 	movhi	fp,1281
 50012f4:	e724ca04 	addi	fp,fp,-27864
 50012f8:	e0800017 	ldw	r2,0(fp)
 50012fc:	a887883a 	add	r3,r21,r2
 5001300:	e0c00015 	stw	r3,0(fp)
 5001304:	3500e626 	beq	r6,r20,50016a0 <_malloc_r+0x74c>
 5001308:	b9000017 	ldw	r4,0(r23)
 500130c:	00bfffc4 	movi	r2,-1
 5001310:	2080ee26 	beq	r4,r2,50016cc <_malloc_r+0x778>
 5001314:	a185c83a 	sub	r2,r20,r6
 5001318:	10c5883a 	add	r2,r2,r3
 500131c:	e0800015 	stw	r2,0(fp)
 5001320:	a0c001cc 	andi	r3,r20,7
 5001324:	1800bc26 	beq	r3,zero,5001618 <_malloc_r+0x6c4>
 5001328:	a0e9c83a 	sub	r20,r20,r3
 500132c:	00840204 	movi	r2,4104
 5001330:	a5000204 	addi	r20,r20,8
 5001334:	10c7c83a 	sub	r3,r2,r3
 5001338:	a545883a 	add	r2,r20,r21
 500133c:	1083ffcc 	andi	r2,r2,4095
 5001340:	18abc83a 	sub	r21,r3,r2
 5001344:	a80b883a 	mov	r5,r21
 5001348:	9009883a 	mov	r4,r18
 500134c:	50021740 	call	5002174 <_sbrk_r>
 5001350:	00ffffc4 	movi	r3,-1
 5001354:	10c0e126 	beq	r2,r3,50016dc <_malloc_r+0x788>
 5001358:	1505c83a 	sub	r2,r2,r20
 500135c:	1545883a 	add	r2,r2,r21
 5001360:	10800054 	ori	r2,r2,1
 5001364:	e0c00017 	ldw	r3,0(fp)
 5001368:	9d000215 	stw	r20,8(r19)
 500136c:	a0800115 	stw	r2,4(r20)
 5001370:	a8c7883a 	add	r3,r21,r3
 5001374:	e0c00015 	stw	r3,0(fp)
 5001378:	84c00e26 	beq	r16,r19,50013b4 <_malloc_r+0x460>
 500137c:	018003c4 	movi	r6,15
 5001380:	3580a72e 	bgeu	r6,r22,5001620 <_malloc_r+0x6cc>
 5001384:	81400117 	ldw	r5,4(r16)
 5001388:	013ffe04 	movi	r4,-8
 500138c:	b0bffd04 	addi	r2,r22,-12
 5001390:	1104703a 	and	r2,r2,r4
 5001394:	2900004c 	andi	r4,r5,1
 5001398:	2088b03a 	or	r4,r4,r2
 500139c:	81000115 	stw	r4,4(r16)
 50013a0:	01400144 	movi	r5,5
 50013a4:	8089883a 	add	r4,r16,r2
 50013a8:	21400115 	stw	r5,4(r4)
 50013ac:	21400215 	stw	r5,8(r4)
 50013b0:	3080cd36 	bltu	r6,r2,50016e8 <_malloc_r+0x794>
 50013b4:	00814074 	movhi	r2,1281
 50013b8:	10a4c004 	addi	r2,r2,-27904
 50013bc:	11000017 	ldw	r4,0(r2)
 50013c0:	20c0012e 	bgeu	r4,r3,50013c8 <_malloc_r+0x474>
 50013c4:	10c00015 	stw	r3,0(r2)
 50013c8:	00814074 	movhi	r2,1281
 50013cc:	10a4bf04 	addi	r2,r2,-27908
 50013d0:	11000017 	ldw	r4,0(r2)
 50013d4:	9c000217 	ldw	r16,8(r19)
 50013d8:	20c0012e 	bgeu	r4,r3,50013e0 <_malloc_r+0x48c>
 50013dc:	10c00015 	stw	r3,0(r2)
 50013e0:	80c00117 	ldw	r3,4(r16)
 50013e4:	00bfff04 	movi	r2,-4
 50013e8:	1886703a 	and	r3,r3,r2
 50013ec:	1c45c83a 	sub	r2,r3,r17
 50013f0:	1c400236 	bltu	r3,r17,50013fc <_malloc_r+0x4a8>
 50013f4:	00c003c4 	movi	r3,15
 50013f8:	18800416 	blt	r3,r2,500140c <_malloc_r+0x4b8>
 50013fc:	9009883a 	mov	r4,r18
 5001400:	50037b40 	call	50037b4 <__malloc_unlock>
 5001404:	0005883a 	mov	r2,zero
 5001408:	003f7b06 	br	50011f8 <__alt_data_end+0xff0011f8>
 500140c:	88c00054 	ori	r3,r17,1
 5001410:	80c00115 	stw	r3,4(r16)
 5001414:	8463883a 	add	r17,r16,r17
 5001418:	10800054 	ori	r2,r2,1
 500141c:	9c400215 	stw	r17,8(r19)
 5001420:	88800115 	stw	r2,4(r17)
 5001424:	9009883a 	mov	r4,r18
 5001428:	50037b40 	call	50037b4 <__malloc_unlock>
 500142c:	80800204 	addi	r2,r16,8
 5001430:	003f7106 	br	50011f8 <__alt_data_end+0xff0011f8>
 5001434:	00c00504 	movi	r3,20
 5001438:	18804a2e 	bgeu	r3,r2,5001564 <_malloc_r+0x610>
 500143c:	00c01504 	movi	r3,84
 5001440:	18806e36 	bltu	r3,r2,50015fc <_malloc_r+0x6a8>
 5001444:	8804d33a 	srli	r2,r17,12
 5001448:	12001bc4 	addi	r8,r2,111
 500144c:	11c01b84 	addi	r7,r2,110
 5001450:	4209883a 	add	r4,r8,r8
 5001454:	003edd06 	br	5000fcc <__alt_data_end+0xff000fcc>
 5001458:	3804d27a 	srli	r2,r7,9
 500145c:	00c00104 	movi	r3,4
 5001460:	1880442e 	bgeu	r3,r2,5001574 <_malloc_r+0x620>
 5001464:	00c00504 	movi	r3,20
 5001468:	18808136 	bltu	r3,r2,5001670 <_malloc_r+0x71c>
 500146c:	11401704 	addi	r5,r2,92
 5001470:	10c016c4 	addi	r3,r2,91
 5001474:	294b883a 	add	r5,r5,r5
 5001478:	294b883a 	add	r5,r5,r5
 500147c:	294b883a 	add	r5,r5,r5
 5001480:	994b883a 	add	r5,r19,r5
 5001484:	28800017 	ldw	r2,0(r5)
 5001488:	01814034 	movhi	r6,1280
 500148c:	297ffe04 	addi	r5,r5,-8
 5001490:	31988004 	addi	r6,r6,25088
 5001494:	28806526 	beq	r5,r2,500162c <_malloc_r+0x6d8>
 5001498:	01bfff04 	movi	r6,-4
 500149c:	10c00117 	ldw	r3,4(r2)
 50014a0:	1986703a 	and	r3,r3,r6
 50014a4:	38c0022e 	bgeu	r7,r3,50014b0 <_malloc_r+0x55c>
 50014a8:	10800217 	ldw	r2,8(r2)
 50014ac:	28bffb1e 	bne	r5,r2,500149c <__alt_data_end+0xff00149c>
 50014b0:	11400317 	ldw	r5,12(r2)
 50014b4:	98c00117 	ldw	r3,4(r19)
 50014b8:	81400315 	stw	r5,12(r16)
 50014bc:	80800215 	stw	r2,8(r16)
 50014c0:	2c000215 	stw	r16,8(r5)
 50014c4:	14000315 	stw	r16,12(r2)
 50014c8:	003ef806 	br	50010ac <__alt_data_end+0xff0010ac>
 50014cc:	88c00054 	ori	r3,r17,1
 50014d0:	80c00115 	stw	r3,4(r16)
 50014d4:	8463883a 	add	r17,r16,r17
 50014d8:	34400515 	stw	r17,20(r6)
 50014dc:	34400415 	stw	r17,16(r6)
 50014e0:	10c00054 	ori	r3,r2,1
 50014e4:	8a000315 	stw	r8,12(r17)
 50014e8:	8a000215 	stw	r8,8(r17)
 50014ec:	88c00115 	stw	r3,4(r17)
 50014f0:	88a3883a 	add	r17,r17,r2
 50014f4:	88800015 	stw	r2,0(r17)
 50014f8:	9009883a 	mov	r4,r18
 50014fc:	50037b40 	call	50037b4 <__malloc_unlock>
 5001500:	80800204 	addi	r2,r16,8
 5001504:	003f3c06 	br	50011f8 <__alt_data_end+0xff0011f8>
 5001508:	30c00117 	ldw	r3,4(r6)
 500150c:	003ee706 	br	50010ac <__alt_data_end+0xff0010ac>
 5001510:	5ac00044 	addi	r11,r11,1
 5001514:	588000cc 	andi	r2,r11,3
 5001518:	31800204 	addi	r6,r6,8
 500151c:	103efd1e 	bne	r2,zero,5001114 <__alt_data_end+0xff001114>
 5001520:	00002406 	br	50015b4 <_malloc_r+0x660>
 5001524:	14000317 	ldw	r16,12(r2)
 5001528:	143f251e 	bne	r2,r16,50011c0 <__alt_data_end+0xff0011c0>
 500152c:	21000084 	addi	r4,r4,2
 5001530:	003ebc06 	br	5001024 <__alt_data_end+0xff001024>
 5001534:	8085883a 	add	r2,r16,r2
 5001538:	10c00117 	ldw	r3,4(r2)
 500153c:	81000317 	ldw	r4,12(r16)
 5001540:	81400217 	ldw	r5,8(r16)
 5001544:	18c00054 	ori	r3,r3,1
 5001548:	10c00115 	stw	r3,4(r2)
 500154c:	29000315 	stw	r4,12(r5)
 5001550:	21400215 	stw	r5,8(r4)
 5001554:	9009883a 	mov	r4,r18
 5001558:	50037b40 	call	50037b4 <__malloc_unlock>
 500155c:	80800204 	addi	r2,r16,8
 5001560:	003f2506 	br	50011f8 <__alt_data_end+0xff0011f8>
 5001564:	12001704 	addi	r8,r2,92
 5001568:	11c016c4 	addi	r7,r2,91
 500156c:	4209883a 	add	r4,r8,r8
 5001570:	003e9606 	br	5000fcc <__alt_data_end+0xff000fcc>
 5001574:	3804d1ba 	srli	r2,r7,6
 5001578:	11400e44 	addi	r5,r2,57
 500157c:	10c00e04 	addi	r3,r2,56
 5001580:	294b883a 	add	r5,r5,r5
 5001584:	003fbc06 	br	5001478 <__alt_data_end+0xff001478>
 5001588:	84ff5926 	beq	r16,r19,50012f0 <__alt_data_end+0xff0012f0>
 500158c:	00814034 	movhi	r2,1280
 5001590:	10988004 	addi	r2,r2,25088
 5001594:	14000217 	ldw	r16,8(r2)
 5001598:	00bfff04 	movi	r2,-4
 500159c:	80c00117 	ldw	r3,4(r16)
 50015a0:	1886703a 	and	r3,r3,r2
 50015a4:	003f9106 	br	50013ec <__alt_data_end+0xff0013ec>
 50015a8:	60800217 	ldw	r2,8(r12)
 50015ac:	213fffc4 	addi	r4,r4,-1
 50015b0:	1300651e 	bne	r2,r12,5001748 <_malloc_r+0x7f4>
 50015b4:	208000cc 	andi	r2,r4,3
 50015b8:	633ffe04 	addi	r12,r12,-8
 50015bc:	103ffa1e 	bne	r2,zero,50015a8 <__alt_data_end+0xff0015a8>
 50015c0:	98800117 	ldw	r2,4(r19)
 50015c4:	0146303a 	nor	r3,zero,r5
 50015c8:	1884703a 	and	r2,r3,r2
 50015cc:	98800115 	stw	r2,4(r19)
 50015d0:	294b883a 	add	r5,r5,r5
 50015d4:	117f2836 	bltu	r2,r5,5001278 <__alt_data_end+0xff001278>
 50015d8:	283f2726 	beq	r5,zero,5001278 <__alt_data_end+0xff001278>
 50015dc:	2886703a 	and	r3,r5,r2
 50015e0:	5809883a 	mov	r4,r11
 50015e4:	183ec31e 	bne	r3,zero,50010f4 <__alt_data_end+0xff0010f4>
 50015e8:	294b883a 	add	r5,r5,r5
 50015ec:	2886703a 	and	r3,r5,r2
 50015f0:	21000104 	addi	r4,r4,4
 50015f4:	183ffc26 	beq	r3,zero,50015e8 <__alt_data_end+0xff0015e8>
 50015f8:	003ebe06 	br	50010f4 <__alt_data_end+0xff0010f4>
 50015fc:	00c05504 	movi	r3,340
 5001600:	18801236 	bltu	r3,r2,500164c <_malloc_r+0x6f8>
 5001604:	8804d3fa 	srli	r2,r17,15
 5001608:	12001e04 	addi	r8,r2,120
 500160c:	11c01dc4 	addi	r7,r2,119
 5001610:	4209883a 	add	r4,r8,r8
 5001614:	003e6d06 	br	5000fcc <__alt_data_end+0xff000fcc>
 5001618:	00c40004 	movi	r3,4096
 500161c:	003f4606 	br	5001338 <__alt_data_end+0xff001338>
 5001620:	00800044 	movi	r2,1
 5001624:	a0800115 	stw	r2,4(r20)
 5001628:	003f7406 	br	50013fc <__alt_data_end+0xff0013fc>
 500162c:	1805d0ba 	srai	r2,r3,2
 5001630:	01c00044 	movi	r7,1
 5001634:	30c00117 	ldw	r3,4(r6)
 5001638:	388e983a 	sll	r7,r7,r2
 500163c:	2805883a 	mov	r2,r5
 5001640:	38c6b03a 	or	r3,r7,r3
 5001644:	30c00115 	stw	r3,4(r6)
 5001648:	003f9b06 	br	50014b8 <__alt_data_end+0xff0014b8>
 500164c:	00c15504 	movi	r3,1364
 5001650:	18801a36 	bltu	r3,r2,50016bc <_malloc_r+0x768>
 5001654:	8804d4ba 	srli	r2,r17,18
 5001658:	12001f44 	addi	r8,r2,125
 500165c:	11c01f04 	addi	r7,r2,124
 5001660:	4209883a 	add	r4,r8,r8
 5001664:	003e5906 	br	5000fcc <__alt_data_end+0xff000fcc>
 5001668:	ad400404 	addi	r21,r21,16
 500166c:	003f1706 	br	50012cc <__alt_data_end+0xff0012cc>
 5001670:	00c01504 	movi	r3,84
 5001674:	18802336 	bltu	r3,r2,5001704 <_malloc_r+0x7b0>
 5001678:	3804d33a 	srli	r2,r7,12
 500167c:	11401bc4 	addi	r5,r2,111
 5001680:	10c01b84 	addi	r3,r2,110
 5001684:	294b883a 	add	r5,r5,r5
 5001688:	003f7b06 	br	5001478 <__alt_data_end+0xff001478>
 500168c:	9c000217 	ldw	r16,8(r19)
 5001690:	00bfff04 	movi	r2,-4
 5001694:	80c00117 	ldw	r3,4(r16)
 5001698:	1886703a 	and	r3,r3,r2
 500169c:	003f5306 	br	50013ec <__alt_data_end+0xff0013ec>
 50016a0:	3083ffcc 	andi	r2,r6,4095
 50016a4:	103f181e 	bne	r2,zero,5001308 <__alt_data_end+0xff001308>
 50016a8:	99000217 	ldw	r4,8(r19)
 50016ac:	b545883a 	add	r2,r22,r21
 50016b0:	10800054 	ori	r2,r2,1
 50016b4:	20800115 	stw	r2,4(r4)
 50016b8:	003f3e06 	br	50013b4 <__alt_data_end+0xff0013b4>
 50016bc:	01003f84 	movi	r4,254
 50016c0:	02001fc4 	movi	r8,127
 50016c4:	01c01f84 	movi	r7,126
 50016c8:	003e4006 	br	5000fcc <__alt_data_end+0xff000fcc>
 50016cc:	00814034 	movhi	r2,1280
 50016d0:	109e0d04 	addi	r2,r2,30772
 50016d4:	15000015 	stw	r20,0(r2)
 50016d8:	003f1106 	br	5001320 <__alt_data_end+0xff001320>
 50016dc:	00800044 	movi	r2,1
 50016e0:	002b883a 	mov	r21,zero
 50016e4:	003f1f06 	br	5001364 <__alt_data_end+0xff001364>
 50016e8:	81400204 	addi	r5,r16,8
 50016ec:	9009883a 	mov	r4,r18
 50016f0:	50029dc0 	call	50029dc <_free_r>
 50016f4:	00814074 	movhi	r2,1281
 50016f8:	10a4ca04 	addi	r2,r2,-27864
 50016fc:	10c00017 	ldw	r3,0(r2)
 5001700:	003f2c06 	br	50013b4 <__alt_data_end+0xff0013b4>
 5001704:	00c05504 	movi	r3,340
 5001708:	18800536 	bltu	r3,r2,5001720 <_malloc_r+0x7cc>
 500170c:	3804d3fa 	srli	r2,r7,15
 5001710:	11401e04 	addi	r5,r2,120
 5001714:	10c01dc4 	addi	r3,r2,119
 5001718:	294b883a 	add	r5,r5,r5
 500171c:	003f5606 	br	5001478 <__alt_data_end+0xff001478>
 5001720:	00c15504 	movi	r3,1364
 5001724:	18800536 	bltu	r3,r2,500173c <_malloc_r+0x7e8>
 5001728:	3804d4ba 	srli	r2,r7,18
 500172c:	11401f44 	addi	r5,r2,125
 5001730:	10c01f04 	addi	r3,r2,124
 5001734:	294b883a 	add	r5,r5,r5
 5001738:	003f4f06 	br	5001478 <__alt_data_end+0xff001478>
 500173c:	01403f84 	movi	r5,254
 5001740:	00c01f84 	movi	r3,126
 5001744:	003f4c06 	br	5001478 <__alt_data_end+0xff001478>
 5001748:	98800117 	ldw	r2,4(r19)
 500174c:	003fa006 	br	50015d0 <__alt_data_end+0xff0015d0>
 5001750:	8808d0fa 	srli	r4,r17,3
 5001754:	20800044 	addi	r2,r4,1
 5001758:	1085883a 	add	r2,r2,r2
 500175c:	003e9006 	br	50011a0 <__alt_data_end+0xff0011a0>

05001760 <memchr>:
 5001760:	208000cc 	andi	r2,r4,3
 5001764:	280f883a 	mov	r7,r5
 5001768:	10003426 	beq	r2,zero,500183c <memchr+0xdc>
 500176c:	30bfffc4 	addi	r2,r6,-1
 5001770:	30001a26 	beq	r6,zero,50017dc <memchr+0x7c>
 5001774:	20c00003 	ldbu	r3,0(r4)
 5001778:	29803fcc 	andi	r6,r5,255
 500177c:	30c0051e 	bne	r6,r3,5001794 <memchr+0x34>
 5001780:	00001806 	br	50017e4 <memchr+0x84>
 5001784:	10001526 	beq	r2,zero,50017dc <memchr+0x7c>
 5001788:	20c00003 	ldbu	r3,0(r4)
 500178c:	10bfffc4 	addi	r2,r2,-1
 5001790:	30c01426 	beq	r6,r3,50017e4 <memchr+0x84>
 5001794:	21000044 	addi	r4,r4,1
 5001798:	20c000cc 	andi	r3,r4,3
 500179c:	183ff91e 	bne	r3,zero,5001784 <__alt_data_end+0xff001784>
 50017a0:	020000c4 	movi	r8,3
 50017a4:	40801136 	bltu	r8,r2,50017ec <memchr+0x8c>
 50017a8:	10000c26 	beq	r2,zero,50017dc <memchr+0x7c>
 50017ac:	20c00003 	ldbu	r3,0(r4)
 50017b0:	29403fcc 	andi	r5,r5,255
 50017b4:	28c00b26 	beq	r5,r3,50017e4 <memchr+0x84>
 50017b8:	20c00044 	addi	r3,r4,1
 50017bc:	39803fcc 	andi	r6,r7,255
 50017c0:	2089883a 	add	r4,r4,r2
 50017c4:	00000306 	br	50017d4 <memchr+0x74>
 50017c8:	18c00044 	addi	r3,r3,1
 50017cc:	197fffc3 	ldbu	r5,-1(r3)
 50017d0:	31400526 	beq	r6,r5,50017e8 <memchr+0x88>
 50017d4:	1805883a 	mov	r2,r3
 50017d8:	20fffb1e 	bne	r4,r3,50017c8 <__alt_data_end+0xff0017c8>
 50017dc:	0005883a 	mov	r2,zero
 50017e0:	f800283a 	ret
 50017e4:	2005883a 	mov	r2,r4
 50017e8:	f800283a 	ret
 50017ec:	28c03fcc 	andi	r3,r5,255
 50017f0:	1812923a 	slli	r9,r3,8
 50017f4:	02ffbff4 	movhi	r11,65279
 50017f8:	02a02074 	movhi	r10,32897
 50017fc:	48d2b03a 	or	r9,r9,r3
 5001800:	4806943a 	slli	r3,r9,16
 5001804:	5affbfc4 	addi	r11,r11,-257
 5001808:	52a02004 	addi	r10,r10,-32640
 500180c:	48d2b03a 	or	r9,r9,r3
 5001810:	20c00017 	ldw	r3,0(r4)
 5001814:	48c6f03a 	xor	r3,r9,r3
 5001818:	1acd883a 	add	r6,r3,r11
 500181c:	00c6303a 	nor	r3,zero,r3
 5001820:	30c6703a 	and	r3,r6,r3
 5001824:	1a86703a 	and	r3,r3,r10
 5001828:	183fe01e 	bne	r3,zero,50017ac <__alt_data_end+0xff0017ac>
 500182c:	10bfff04 	addi	r2,r2,-4
 5001830:	21000104 	addi	r4,r4,4
 5001834:	40bff636 	bltu	r8,r2,5001810 <__alt_data_end+0xff001810>
 5001838:	003fdb06 	br	50017a8 <__alt_data_end+0xff0017a8>
 500183c:	3005883a 	mov	r2,r6
 5001840:	003fd706 	br	50017a0 <__alt_data_end+0xff0017a0>

05001844 <memcpy>:
 5001844:	defffd04 	addi	sp,sp,-12
 5001848:	dfc00215 	stw	ra,8(sp)
 500184c:	dc400115 	stw	r17,4(sp)
 5001850:	dc000015 	stw	r16,0(sp)
 5001854:	00c003c4 	movi	r3,15
 5001858:	2005883a 	mov	r2,r4
 500185c:	1980452e 	bgeu	r3,r6,5001974 <memcpy+0x130>
 5001860:	2906b03a 	or	r3,r5,r4
 5001864:	18c000cc 	andi	r3,r3,3
 5001868:	1800441e 	bne	r3,zero,500197c <memcpy+0x138>
 500186c:	347ffc04 	addi	r17,r6,-16
 5001870:	8822d13a 	srli	r17,r17,4
 5001874:	28c00104 	addi	r3,r5,4
 5001878:	23400104 	addi	r13,r4,4
 500187c:	8820913a 	slli	r16,r17,4
 5001880:	2b000204 	addi	r12,r5,8
 5001884:	22c00204 	addi	r11,r4,8
 5001888:	84000504 	addi	r16,r16,20
 500188c:	2a800304 	addi	r10,r5,12
 5001890:	22400304 	addi	r9,r4,12
 5001894:	2c21883a 	add	r16,r5,r16
 5001898:	2811883a 	mov	r8,r5
 500189c:	200f883a 	mov	r7,r4
 50018a0:	41000017 	ldw	r4,0(r8)
 50018a4:	1fc00017 	ldw	ra,0(r3)
 50018a8:	63c00017 	ldw	r15,0(r12)
 50018ac:	39000015 	stw	r4,0(r7)
 50018b0:	53800017 	ldw	r14,0(r10)
 50018b4:	6fc00015 	stw	ra,0(r13)
 50018b8:	5bc00015 	stw	r15,0(r11)
 50018bc:	4b800015 	stw	r14,0(r9)
 50018c0:	18c00404 	addi	r3,r3,16
 50018c4:	39c00404 	addi	r7,r7,16
 50018c8:	42000404 	addi	r8,r8,16
 50018cc:	6b400404 	addi	r13,r13,16
 50018d0:	63000404 	addi	r12,r12,16
 50018d4:	5ac00404 	addi	r11,r11,16
 50018d8:	52800404 	addi	r10,r10,16
 50018dc:	4a400404 	addi	r9,r9,16
 50018e0:	1c3fef1e 	bne	r3,r16,50018a0 <__alt_data_end+0xff0018a0>
 50018e4:	89c00044 	addi	r7,r17,1
 50018e8:	380e913a 	slli	r7,r7,4
 50018ec:	310003cc 	andi	r4,r6,15
 50018f0:	02c000c4 	movi	r11,3
 50018f4:	11c7883a 	add	r3,r2,r7
 50018f8:	29cb883a 	add	r5,r5,r7
 50018fc:	5900212e 	bgeu	r11,r4,5001984 <memcpy+0x140>
 5001900:	1813883a 	mov	r9,r3
 5001904:	2811883a 	mov	r8,r5
 5001908:	200f883a 	mov	r7,r4
 500190c:	42800017 	ldw	r10,0(r8)
 5001910:	4a400104 	addi	r9,r9,4
 5001914:	39ffff04 	addi	r7,r7,-4
 5001918:	4abfff15 	stw	r10,-4(r9)
 500191c:	42000104 	addi	r8,r8,4
 5001920:	59fffa36 	bltu	r11,r7,500190c <__alt_data_end+0xff00190c>
 5001924:	213fff04 	addi	r4,r4,-4
 5001928:	2008d0ba 	srli	r4,r4,2
 500192c:	318000cc 	andi	r6,r6,3
 5001930:	21000044 	addi	r4,r4,1
 5001934:	2109883a 	add	r4,r4,r4
 5001938:	2109883a 	add	r4,r4,r4
 500193c:	1907883a 	add	r3,r3,r4
 5001940:	290b883a 	add	r5,r5,r4
 5001944:	30000626 	beq	r6,zero,5001960 <memcpy+0x11c>
 5001948:	198d883a 	add	r6,r3,r6
 500194c:	29c00003 	ldbu	r7,0(r5)
 5001950:	18c00044 	addi	r3,r3,1
 5001954:	29400044 	addi	r5,r5,1
 5001958:	19ffffc5 	stb	r7,-1(r3)
 500195c:	19bffb1e 	bne	r3,r6,500194c <__alt_data_end+0xff00194c>
 5001960:	dfc00217 	ldw	ra,8(sp)
 5001964:	dc400117 	ldw	r17,4(sp)
 5001968:	dc000017 	ldw	r16,0(sp)
 500196c:	dec00304 	addi	sp,sp,12
 5001970:	f800283a 	ret
 5001974:	2007883a 	mov	r3,r4
 5001978:	003ff206 	br	5001944 <__alt_data_end+0xff001944>
 500197c:	2007883a 	mov	r3,r4
 5001980:	003ff106 	br	5001948 <__alt_data_end+0xff001948>
 5001984:	200d883a 	mov	r6,r4
 5001988:	003fee06 	br	5001944 <__alt_data_end+0xff001944>

0500198c <memmove>:
 500198c:	2005883a 	mov	r2,r4
 5001990:	29000b2e 	bgeu	r5,r4,50019c0 <memmove+0x34>
 5001994:	298f883a 	add	r7,r5,r6
 5001998:	21c0092e 	bgeu	r4,r7,50019c0 <memmove+0x34>
 500199c:	2187883a 	add	r3,r4,r6
 50019a0:	198bc83a 	sub	r5,r3,r6
 50019a4:	30004826 	beq	r6,zero,5001ac8 <memmove+0x13c>
 50019a8:	39ffffc4 	addi	r7,r7,-1
 50019ac:	39000003 	ldbu	r4,0(r7)
 50019b0:	18ffffc4 	addi	r3,r3,-1
 50019b4:	19000005 	stb	r4,0(r3)
 50019b8:	28fffb1e 	bne	r5,r3,50019a8 <__alt_data_end+0xff0019a8>
 50019bc:	f800283a 	ret
 50019c0:	00c003c4 	movi	r3,15
 50019c4:	1980412e 	bgeu	r3,r6,5001acc <memmove+0x140>
 50019c8:	2886b03a 	or	r3,r5,r2
 50019cc:	18c000cc 	andi	r3,r3,3
 50019d0:	1800401e 	bne	r3,zero,5001ad4 <memmove+0x148>
 50019d4:	33fffc04 	addi	r15,r6,-16
 50019d8:	781ed13a 	srli	r15,r15,4
 50019dc:	28c00104 	addi	r3,r5,4
 50019e0:	13400104 	addi	r13,r2,4
 50019e4:	781c913a 	slli	r14,r15,4
 50019e8:	2b000204 	addi	r12,r5,8
 50019ec:	12c00204 	addi	r11,r2,8
 50019f0:	73800504 	addi	r14,r14,20
 50019f4:	2a800304 	addi	r10,r5,12
 50019f8:	12400304 	addi	r9,r2,12
 50019fc:	2b9d883a 	add	r14,r5,r14
 5001a00:	2811883a 	mov	r8,r5
 5001a04:	100f883a 	mov	r7,r2
 5001a08:	41000017 	ldw	r4,0(r8)
 5001a0c:	39c00404 	addi	r7,r7,16
 5001a10:	18c00404 	addi	r3,r3,16
 5001a14:	393ffc15 	stw	r4,-16(r7)
 5001a18:	193ffc17 	ldw	r4,-16(r3)
 5001a1c:	6b400404 	addi	r13,r13,16
 5001a20:	5ac00404 	addi	r11,r11,16
 5001a24:	693ffc15 	stw	r4,-16(r13)
 5001a28:	61000017 	ldw	r4,0(r12)
 5001a2c:	4a400404 	addi	r9,r9,16
 5001a30:	42000404 	addi	r8,r8,16
 5001a34:	593ffc15 	stw	r4,-16(r11)
 5001a38:	51000017 	ldw	r4,0(r10)
 5001a3c:	63000404 	addi	r12,r12,16
 5001a40:	52800404 	addi	r10,r10,16
 5001a44:	493ffc15 	stw	r4,-16(r9)
 5001a48:	1bbfef1e 	bne	r3,r14,5001a08 <__alt_data_end+0xff001a08>
 5001a4c:	79000044 	addi	r4,r15,1
 5001a50:	2008913a 	slli	r4,r4,4
 5001a54:	328003cc 	andi	r10,r6,15
 5001a58:	02c000c4 	movi	r11,3
 5001a5c:	1107883a 	add	r3,r2,r4
 5001a60:	290b883a 	add	r5,r5,r4
 5001a64:	5a801e2e 	bgeu	r11,r10,5001ae0 <memmove+0x154>
 5001a68:	1813883a 	mov	r9,r3
 5001a6c:	2811883a 	mov	r8,r5
 5001a70:	500f883a 	mov	r7,r10
 5001a74:	41000017 	ldw	r4,0(r8)
 5001a78:	4a400104 	addi	r9,r9,4
 5001a7c:	39ffff04 	addi	r7,r7,-4
 5001a80:	493fff15 	stw	r4,-4(r9)
 5001a84:	42000104 	addi	r8,r8,4
 5001a88:	59fffa36 	bltu	r11,r7,5001a74 <__alt_data_end+0xff001a74>
 5001a8c:	513fff04 	addi	r4,r10,-4
 5001a90:	2008d0ba 	srli	r4,r4,2
 5001a94:	318000cc 	andi	r6,r6,3
 5001a98:	21000044 	addi	r4,r4,1
 5001a9c:	2109883a 	add	r4,r4,r4
 5001aa0:	2109883a 	add	r4,r4,r4
 5001aa4:	1907883a 	add	r3,r3,r4
 5001aa8:	290b883a 	add	r5,r5,r4
 5001aac:	30000b26 	beq	r6,zero,5001adc <memmove+0x150>
 5001ab0:	198d883a 	add	r6,r3,r6
 5001ab4:	29c00003 	ldbu	r7,0(r5)
 5001ab8:	18c00044 	addi	r3,r3,1
 5001abc:	29400044 	addi	r5,r5,1
 5001ac0:	19ffffc5 	stb	r7,-1(r3)
 5001ac4:	19bffb1e 	bne	r3,r6,5001ab4 <__alt_data_end+0xff001ab4>
 5001ac8:	f800283a 	ret
 5001acc:	1007883a 	mov	r3,r2
 5001ad0:	003ff606 	br	5001aac <__alt_data_end+0xff001aac>
 5001ad4:	1007883a 	mov	r3,r2
 5001ad8:	003ff506 	br	5001ab0 <__alt_data_end+0xff001ab0>
 5001adc:	f800283a 	ret
 5001ae0:	500d883a 	mov	r6,r10
 5001ae4:	003ff106 	br	5001aac <__alt_data_end+0xff001aac>

05001ae8 <memset>:
 5001ae8:	20c000cc 	andi	r3,r4,3
 5001aec:	2005883a 	mov	r2,r4
 5001af0:	18004426 	beq	r3,zero,5001c04 <memset+0x11c>
 5001af4:	31ffffc4 	addi	r7,r6,-1
 5001af8:	30004026 	beq	r6,zero,5001bfc <memset+0x114>
 5001afc:	2813883a 	mov	r9,r5
 5001b00:	200d883a 	mov	r6,r4
 5001b04:	2007883a 	mov	r3,r4
 5001b08:	00000406 	br	5001b1c <memset+0x34>
 5001b0c:	3a3fffc4 	addi	r8,r7,-1
 5001b10:	31800044 	addi	r6,r6,1
 5001b14:	38003926 	beq	r7,zero,5001bfc <memset+0x114>
 5001b18:	400f883a 	mov	r7,r8
 5001b1c:	18c00044 	addi	r3,r3,1
 5001b20:	32400005 	stb	r9,0(r6)
 5001b24:	1a0000cc 	andi	r8,r3,3
 5001b28:	403ff81e 	bne	r8,zero,5001b0c <__alt_data_end+0xff001b0c>
 5001b2c:	010000c4 	movi	r4,3
 5001b30:	21c02d2e 	bgeu	r4,r7,5001be8 <memset+0x100>
 5001b34:	29003fcc 	andi	r4,r5,255
 5001b38:	200c923a 	slli	r6,r4,8
 5001b3c:	3108b03a 	or	r4,r6,r4
 5001b40:	200c943a 	slli	r6,r4,16
 5001b44:	218cb03a 	or	r6,r4,r6
 5001b48:	010003c4 	movi	r4,15
 5001b4c:	21c0182e 	bgeu	r4,r7,5001bb0 <memset+0xc8>
 5001b50:	3b3ffc04 	addi	r12,r7,-16
 5001b54:	6018d13a 	srli	r12,r12,4
 5001b58:	1a000104 	addi	r8,r3,4
 5001b5c:	1ac00204 	addi	r11,r3,8
 5001b60:	6008913a 	slli	r4,r12,4
 5001b64:	1a800304 	addi	r10,r3,12
 5001b68:	1813883a 	mov	r9,r3
 5001b6c:	21000504 	addi	r4,r4,20
 5001b70:	1909883a 	add	r4,r3,r4
 5001b74:	49800015 	stw	r6,0(r9)
 5001b78:	41800015 	stw	r6,0(r8)
 5001b7c:	59800015 	stw	r6,0(r11)
 5001b80:	51800015 	stw	r6,0(r10)
 5001b84:	42000404 	addi	r8,r8,16
 5001b88:	4a400404 	addi	r9,r9,16
 5001b8c:	5ac00404 	addi	r11,r11,16
 5001b90:	52800404 	addi	r10,r10,16
 5001b94:	413ff71e 	bne	r8,r4,5001b74 <__alt_data_end+0xff001b74>
 5001b98:	63000044 	addi	r12,r12,1
 5001b9c:	6018913a 	slli	r12,r12,4
 5001ba0:	39c003cc 	andi	r7,r7,15
 5001ba4:	010000c4 	movi	r4,3
 5001ba8:	1b07883a 	add	r3,r3,r12
 5001bac:	21c00e2e 	bgeu	r4,r7,5001be8 <memset+0x100>
 5001bb0:	1813883a 	mov	r9,r3
 5001bb4:	3811883a 	mov	r8,r7
 5001bb8:	010000c4 	movi	r4,3
 5001bbc:	49800015 	stw	r6,0(r9)
 5001bc0:	423fff04 	addi	r8,r8,-4
 5001bc4:	4a400104 	addi	r9,r9,4
 5001bc8:	223ffc36 	bltu	r4,r8,5001bbc <__alt_data_end+0xff001bbc>
 5001bcc:	393fff04 	addi	r4,r7,-4
 5001bd0:	2008d0ba 	srli	r4,r4,2
 5001bd4:	39c000cc 	andi	r7,r7,3
 5001bd8:	21000044 	addi	r4,r4,1
 5001bdc:	2109883a 	add	r4,r4,r4
 5001be0:	2109883a 	add	r4,r4,r4
 5001be4:	1907883a 	add	r3,r3,r4
 5001be8:	38000526 	beq	r7,zero,5001c00 <memset+0x118>
 5001bec:	19cf883a 	add	r7,r3,r7
 5001bf0:	19400005 	stb	r5,0(r3)
 5001bf4:	18c00044 	addi	r3,r3,1
 5001bf8:	38fffd1e 	bne	r7,r3,5001bf0 <__alt_data_end+0xff001bf0>
 5001bfc:	f800283a 	ret
 5001c00:	f800283a 	ret
 5001c04:	2007883a 	mov	r3,r4
 5001c08:	300f883a 	mov	r7,r6
 5001c0c:	003fc706 	br	5001b2c <__alt_data_end+0xff001b2c>

05001c10 <_realloc_r>:
 5001c10:	defff604 	addi	sp,sp,-40
 5001c14:	dc800215 	stw	r18,8(sp)
 5001c18:	dfc00915 	stw	ra,36(sp)
 5001c1c:	df000815 	stw	fp,32(sp)
 5001c20:	ddc00715 	stw	r23,28(sp)
 5001c24:	dd800615 	stw	r22,24(sp)
 5001c28:	dd400515 	stw	r21,20(sp)
 5001c2c:	dd000415 	stw	r20,16(sp)
 5001c30:	dcc00315 	stw	r19,12(sp)
 5001c34:	dc400115 	stw	r17,4(sp)
 5001c38:	dc000015 	stw	r16,0(sp)
 5001c3c:	3025883a 	mov	r18,r6
 5001c40:	2800b726 	beq	r5,zero,5001f20 <_realloc_r+0x310>
 5001c44:	282b883a 	mov	r21,r5
 5001c48:	2029883a 	mov	r20,r4
 5001c4c:	50037900 	call	5003790 <__malloc_lock>
 5001c50:	a8bfff17 	ldw	r2,-4(r21)
 5001c54:	043fff04 	movi	r16,-4
 5001c58:	90c002c4 	addi	r3,r18,11
 5001c5c:	01000584 	movi	r4,22
 5001c60:	acfffe04 	addi	r19,r21,-8
 5001c64:	1420703a 	and	r16,r2,r16
 5001c68:	20c0332e 	bgeu	r4,r3,5001d38 <_realloc_r+0x128>
 5001c6c:	047ffe04 	movi	r17,-8
 5001c70:	1c62703a 	and	r17,r3,r17
 5001c74:	8807883a 	mov	r3,r17
 5001c78:	88005816 	blt	r17,zero,5001ddc <_realloc_r+0x1cc>
 5001c7c:	8c805736 	bltu	r17,r18,5001ddc <_realloc_r+0x1cc>
 5001c80:	80c0300e 	bge	r16,r3,5001d44 <_realloc_r+0x134>
 5001c84:	07014034 	movhi	fp,1280
 5001c88:	e7188004 	addi	fp,fp,25088
 5001c8c:	e1c00217 	ldw	r7,8(fp)
 5001c90:	9c09883a 	add	r4,r19,r16
 5001c94:	22000117 	ldw	r8,4(r4)
 5001c98:	21c06326 	beq	r4,r7,5001e28 <_realloc_r+0x218>
 5001c9c:	017fff84 	movi	r5,-2
 5001ca0:	414a703a 	and	r5,r8,r5
 5001ca4:	214b883a 	add	r5,r4,r5
 5001ca8:	29800117 	ldw	r6,4(r5)
 5001cac:	3180004c 	andi	r6,r6,1
 5001cb0:	30003f26 	beq	r6,zero,5001db0 <_realloc_r+0x1a0>
 5001cb4:	1080004c 	andi	r2,r2,1
 5001cb8:	10008326 	beq	r2,zero,5001ec8 <_realloc_r+0x2b8>
 5001cbc:	900b883a 	mov	r5,r18
 5001cc0:	a009883a 	mov	r4,r20
 5001cc4:	5000f540 	call	5000f54 <_malloc_r>
 5001cc8:	1025883a 	mov	r18,r2
 5001ccc:	10011e26 	beq	r2,zero,5002148 <_realloc_r+0x538>
 5001cd0:	a93fff17 	ldw	r4,-4(r21)
 5001cd4:	10fffe04 	addi	r3,r2,-8
 5001cd8:	00bfff84 	movi	r2,-2
 5001cdc:	2084703a 	and	r2,r4,r2
 5001ce0:	9885883a 	add	r2,r19,r2
 5001ce4:	1880ee26 	beq	r3,r2,50020a0 <_realloc_r+0x490>
 5001ce8:	81bfff04 	addi	r6,r16,-4
 5001cec:	00800904 	movi	r2,36
 5001cf0:	1180b836 	bltu	r2,r6,5001fd4 <_realloc_r+0x3c4>
 5001cf4:	00c004c4 	movi	r3,19
 5001cf8:	19809636 	bltu	r3,r6,5001f54 <_realloc_r+0x344>
 5001cfc:	9005883a 	mov	r2,r18
 5001d00:	a807883a 	mov	r3,r21
 5001d04:	19000017 	ldw	r4,0(r3)
 5001d08:	11000015 	stw	r4,0(r2)
 5001d0c:	19000117 	ldw	r4,4(r3)
 5001d10:	11000115 	stw	r4,4(r2)
 5001d14:	18c00217 	ldw	r3,8(r3)
 5001d18:	10c00215 	stw	r3,8(r2)
 5001d1c:	a80b883a 	mov	r5,r21
 5001d20:	a009883a 	mov	r4,r20
 5001d24:	50029dc0 	call	50029dc <_free_r>
 5001d28:	a009883a 	mov	r4,r20
 5001d2c:	50037b40 	call	50037b4 <__malloc_unlock>
 5001d30:	9005883a 	mov	r2,r18
 5001d34:	00001206 	br	5001d80 <_realloc_r+0x170>
 5001d38:	00c00404 	movi	r3,16
 5001d3c:	1823883a 	mov	r17,r3
 5001d40:	003fce06 	br	5001c7c <__alt_data_end+0xff001c7c>
 5001d44:	a825883a 	mov	r18,r21
 5001d48:	8445c83a 	sub	r2,r16,r17
 5001d4c:	00c003c4 	movi	r3,15
 5001d50:	18802636 	bltu	r3,r2,5001dec <_realloc_r+0x1dc>
 5001d54:	99800117 	ldw	r6,4(r19)
 5001d58:	9c07883a 	add	r3,r19,r16
 5001d5c:	3180004c 	andi	r6,r6,1
 5001d60:	3420b03a 	or	r16,r6,r16
 5001d64:	9c000115 	stw	r16,4(r19)
 5001d68:	18800117 	ldw	r2,4(r3)
 5001d6c:	10800054 	ori	r2,r2,1
 5001d70:	18800115 	stw	r2,4(r3)
 5001d74:	a009883a 	mov	r4,r20
 5001d78:	50037b40 	call	50037b4 <__malloc_unlock>
 5001d7c:	9005883a 	mov	r2,r18
 5001d80:	dfc00917 	ldw	ra,36(sp)
 5001d84:	df000817 	ldw	fp,32(sp)
 5001d88:	ddc00717 	ldw	r23,28(sp)
 5001d8c:	dd800617 	ldw	r22,24(sp)
 5001d90:	dd400517 	ldw	r21,20(sp)
 5001d94:	dd000417 	ldw	r20,16(sp)
 5001d98:	dcc00317 	ldw	r19,12(sp)
 5001d9c:	dc800217 	ldw	r18,8(sp)
 5001da0:	dc400117 	ldw	r17,4(sp)
 5001da4:	dc000017 	ldw	r16,0(sp)
 5001da8:	dec00a04 	addi	sp,sp,40
 5001dac:	f800283a 	ret
 5001db0:	017fff04 	movi	r5,-4
 5001db4:	414a703a 	and	r5,r8,r5
 5001db8:	814d883a 	add	r6,r16,r5
 5001dbc:	30c01f16 	blt	r6,r3,5001e3c <_realloc_r+0x22c>
 5001dc0:	20800317 	ldw	r2,12(r4)
 5001dc4:	20c00217 	ldw	r3,8(r4)
 5001dc8:	a825883a 	mov	r18,r21
 5001dcc:	3021883a 	mov	r16,r6
 5001dd0:	18800315 	stw	r2,12(r3)
 5001dd4:	10c00215 	stw	r3,8(r2)
 5001dd8:	003fdb06 	br	5001d48 <__alt_data_end+0xff001d48>
 5001ddc:	00800304 	movi	r2,12
 5001de0:	a0800015 	stw	r2,0(r20)
 5001de4:	0005883a 	mov	r2,zero
 5001de8:	003fe506 	br	5001d80 <__alt_data_end+0xff001d80>
 5001dec:	98c00117 	ldw	r3,4(r19)
 5001df0:	9c4b883a 	add	r5,r19,r17
 5001df4:	11000054 	ori	r4,r2,1
 5001df8:	18c0004c 	andi	r3,r3,1
 5001dfc:	1c62b03a 	or	r17,r3,r17
 5001e00:	9c400115 	stw	r17,4(r19)
 5001e04:	29000115 	stw	r4,4(r5)
 5001e08:	2885883a 	add	r2,r5,r2
 5001e0c:	10c00117 	ldw	r3,4(r2)
 5001e10:	29400204 	addi	r5,r5,8
 5001e14:	a009883a 	mov	r4,r20
 5001e18:	18c00054 	ori	r3,r3,1
 5001e1c:	10c00115 	stw	r3,4(r2)
 5001e20:	50029dc0 	call	50029dc <_free_r>
 5001e24:	003fd306 	br	5001d74 <__alt_data_end+0xff001d74>
 5001e28:	017fff04 	movi	r5,-4
 5001e2c:	414a703a 	and	r5,r8,r5
 5001e30:	89800404 	addi	r6,r17,16
 5001e34:	8151883a 	add	r8,r16,r5
 5001e38:	4180590e 	bge	r8,r6,5001fa0 <_realloc_r+0x390>
 5001e3c:	1080004c 	andi	r2,r2,1
 5001e40:	103f9e1e 	bne	r2,zero,5001cbc <__alt_data_end+0xff001cbc>
 5001e44:	adbffe17 	ldw	r22,-8(r21)
 5001e48:	00bfff04 	movi	r2,-4
 5001e4c:	9dadc83a 	sub	r22,r19,r22
 5001e50:	b1800117 	ldw	r6,4(r22)
 5001e54:	3084703a 	and	r2,r6,r2
 5001e58:	20002026 	beq	r4,zero,5001edc <_realloc_r+0x2cc>
 5001e5c:	80af883a 	add	r23,r16,r2
 5001e60:	b96f883a 	add	r23,r23,r5
 5001e64:	21c05f26 	beq	r4,r7,5001fe4 <_realloc_r+0x3d4>
 5001e68:	b8c01c16 	blt	r23,r3,5001edc <_realloc_r+0x2cc>
 5001e6c:	20800317 	ldw	r2,12(r4)
 5001e70:	20c00217 	ldw	r3,8(r4)
 5001e74:	81bfff04 	addi	r6,r16,-4
 5001e78:	01000904 	movi	r4,36
 5001e7c:	18800315 	stw	r2,12(r3)
 5001e80:	10c00215 	stw	r3,8(r2)
 5001e84:	b0c00217 	ldw	r3,8(r22)
 5001e88:	b0800317 	ldw	r2,12(r22)
 5001e8c:	b4800204 	addi	r18,r22,8
 5001e90:	18800315 	stw	r2,12(r3)
 5001e94:	10c00215 	stw	r3,8(r2)
 5001e98:	21801b36 	bltu	r4,r6,5001f08 <_realloc_r+0x2f8>
 5001e9c:	008004c4 	movi	r2,19
 5001ea0:	1180352e 	bgeu	r2,r6,5001f78 <_realloc_r+0x368>
 5001ea4:	a8800017 	ldw	r2,0(r21)
 5001ea8:	b0800215 	stw	r2,8(r22)
 5001eac:	a8800117 	ldw	r2,4(r21)
 5001eb0:	b0800315 	stw	r2,12(r22)
 5001eb4:	008006c4 	movi	r2,27
 5001eb8:	11807f36 	bltu	r2,r6,50020b8 <_realloc_r+0x4a8>
 5001ebc:	b0800404 	addi	r2,r22,16
 5001ec0:	ad400204 	addi	r21,r21,8
 5001ec4:	00002d06 	br	5001f7c <_realloc_r+0x36c>
 5001ec8:	adbffe17 	ldw	r22,-8(r21)
 5001ecc:	00bfff04 	movi	r2,-4
 5001ed0:	9dadc83a 	sub	r22,r19,r22
 5001ed4:	b1000117 	ldw	r4,4(r22)
 5001ed8:	2084703a 	and	r2,r4,r2
 5001edc:	b03f7726 	beq	r22,zero,5001cbc <__alt_data_end+0xff001cbc>
 5001ee0:	80af883a 	add	r23,r16,r2
 5001ee4:	b8ff7516 	blt	r23,r3,5001cbc <__alt_data_end+0xff001cbc>
 5001ee8:	b0800317 	ldw	r2,12(r22)
 5001eec:	b0c00217 	ldw	r3,8(r22)
 5001ef0:	81bfff04 	addi	r6,r16,-4
 5001ef4:	01000904 	movi	r4,36
 5001ef8:	18800315 	stw	r2,12(r3)
 5001efc:	10c00215 	stw	r3,8(r2)
 5001f00:	b4800204 	addi	r18,r22,8
 5001f04:	21bfe52e 	bgeu	r4,r6,5001e9c <__alt_data_end+0xff001e9c>
 5001f08:	a80b883a 	mov	r5,r21
 5001f0c:	9009883a 	mov	r4,r18
 5001f10:	500198c0 	call	500198c <memmove>
 5001f14:	b821883a 	mov	r16,r23
 5001f18:	b027883a 	mov	r19,r22
 5001f1c:	003f8a06 	br	5001d48 <__alt_data_end+0xff001d48>
 5001f20:	300b883a 	mov	r5,r6
 5001f24:	dfc00917 	ldw	ra,36(sp)
 5001f28:	df000817 	ldw	fp,32(sp)
 5001f2c:	ddc00717 	ldw	r23,28(sp)
 5001f30:	dd800617 	ldw	r22,24(sp)
 5001f34:	dd400517 	ldw	r21,20(sp)
 5001f38:	dd000417 	ldw	r20,16(sp)
 5001f3c:	dcc00317 	ldw	r19,12(sp)
 5001f40:	dc800217 	ldw	r18,8(sp)
 5001f44:	dc400117 	ldw	r17,4(sp)
 5001f48:	dc000017 	ldw	r16,0(sp)
 5001f4c:	dec00a04 	addi	sp,sp,40
 5001f50:	5000f541 	jmpi	5000f54 <_malloc_r>
 5001f54:	a8c00017 	ldw	r3,0(r21)
 5001f58:	90c00015 	stw	r3,0(r18)
 5001f5c:	a8c00117 	ldw	r3,4(r21)
 5001f60:	90c00115 	stw	r3,4(r18)
 5001f64:	00c006c4 	movi	r3,27
 5001f68:	19804536 	bltu	r3,r6,5002080 <_realloc_r+0x470>
 5001f6c:	90800204 	addi	r2,r18,8
 5001f70:	a8c00204 	addi	r3,r21,8
 5001f74:	003f6306 	br	5001d04 <__alt_data_end+0xff001d04>
 5001f78:	9005883a 	mov	r2,r18
 5001f7c:	a8c00017 	ldw	r3,0(r21)
 5001f80:	b821883a 	mov	r16,r23
 5001f84:	b027883a 	mov	r19,r22
 5001f88:	10c00015 	stw	r3,0(r2)
 5001f8c:	a8c00117 	ldw	r3,4(r21)
 5001f90:	10c00115 	stw	r3,4(r2)
 5001f94:	a8c00217 	ldw	r3,8(r21)
 5001f98:	10c00215 	stw	r3,8(r2)
 5001f9c:	003f6a06 	br	5001d48 <__alt_data_end+0xff001d48>
 5001fa0:	9c67883a 	add	r19,r19,r17
 5001fa4:	4445c83a 	sub	r2,r8,r17
 5001fa8:	e4c00215 	stw	r19,8(fp)
 5001fac:	10800054 	ori	r2,r2,1
 5001fb0:	98800115 	stw	r2,4(r19)
 5001fb4:	a8bfff17 	ldw	r2,-4(r21)
 5001fb8:	a009883a 	mov	r4,r20
 5001fbc:	1080004c 	andi	r2,r2,1
 5001fc0:	1462b03a 	or	r17,r2,r17
 5001fc4:	ac7fff15 	stw	r17,-4(r21)
 5001fc8:	50037b40 	call	50037b4 <__malloc_unlock>
 5001fcc:	a805883a 	mov	r2,r21
 5001fd0:	003f6b06 	br	5001d80 <__alt_data_end+0xff001d80>
 5001fd4:	a80b883a 	mov	r5,r21
 5001fd8:	9009883a 	mov	r4,r18
 5001fdc:	500198c0 	call	500198c <memmove>
 5001fe0:	003f4e06 	br	5001d1c <__alt_data_end+0xff001d1c>
 5001fe4:	89000404 	addi	r4,r17,16
 5001fe8:	b93fbc16 	blt	r23,r4,5001edc <__alt_data_end+0xff001edc>
 5001fec:	b0800317 	ldw	r2,12(r22)
 5001ff0:	b0c00217 	ldw	r3,8(r22)
 5001ff4:	81bfff04 	addi	r6,r16,-4
 5001ff8:	01000904 	movi	r4,36
 5001ffc:	18800315 	stw	r2,12(r3)
 5002000:	10c00215 	stw	r3,8(r2)
 5002004:	b4800204 	addi	r18,r22,8
 5002008:	21804336 	bltu	r4,r6,5002118 <_realloc_r+0x508>
 500200c:	008004c4 	movi	r2,19
 5002010:	11803f2e 	bgeu	r2,r6,5002110 <_realloc_r+0x500>
 5002014:	a8800017 	ldw	r2,0(r21)
 5002018:	b0800215 	stw	r2,8(r22)
 500201c:	a8800117 	ldw	r2,4(r21)
 5002020:	b0800315 	stw	r2,12(r22)
 5002024:	008006c4 	movi	r2,27
 5002028:	11803f36 	bltu	r2,r6,5002128 <_realloc_r+0x518>
 500202c:	b0800404 	addi	r2,r22,16
 5002030:	ad400204 	addi	r21,r21,8
 5002034:	a8c00017 	ldw	r3,0(r21)
 5002038:	10c00015 	stw	r3,0(r2)
 500203c:	a8c00117 	ldw	r3,4(r21)
 5002040:	10c00115 	stw	r3,4(r2)
 5002044:	a8c00217 	ldw	r3,8(r21)
 5002048:	10c00215 	stw	r3,8(r2)
 500204c:	b447883a 	add	r3,r22,r17
 5002050:	bc45c83a 	sub	r2,r23,r17
 5002054:	e0c00215 	stw	r3,8(fp)
 5002058:	10800054 	ori	r2,r2,1
 500205c:	18800115 	stw	r2,4(r3)
 5002060:	b0800117 	ldw	r2,4(r22)
 5002064:	a009883a 	mov	r4,r20
 5002068:	1080004c 	andi	r2,r2,1
 500206c:	1462b03a 	or	r17,r2,r17
 5002070:	b4400115 	stw	r17,4(r22)
 5002074:	50037b40 	call	50037b4 <__malloc_unlock>
 5002078:	9005883a 	mov	r2,r18
 500207c:	003f4006 	br	5001d80 <__alt_data_end+0xff001d80>
 5002080:	a8c00217 	ldw	r3,8(r21)
 5002084:	90c00215 	stw	r3,8(r18)
 5002088:	a8c00317 	ldw	r3,12(r21)
 500208c:	90c00315 	stw	r3,12(r18)
 5002090:	30801126 	beq	r6,r2,50020d8 <_realloc_r+0x4c8>
 5002094:	90800404 	addi	r2,r18,16
 5002098:	a8c00404 	addi	r3,r21,16
 500209c:	003f1906 	br	5001d04 <__alt_data_end+0xff001d04>
 50020a0:	90ffff17 	ldw	r3,-4(r18)
 50020a4:	00bfff04 	movi	r2,-4
 50020a8:	a825883a 	mov	r18,r21
 50020ac:	1884703a 	and	r2,r3,r2
 50020b0:	80a1883a 	add	r16,r16,r2
 50020b4:	003f2406 	br	5001d48 <__alt_data_end+0xff001d48>
 50020b8:	a8800217 	ldw	r2,8(r21)
 50020bc:	b0800415 	stw	r2,16(r22)
 50020c0:	a8800317 	ldw	r2,12(r21)
 50020c4:	b0800515 	stw	r2,20(r22)
 50020c8:	31000a26 	beq	r6,r4,50020f4 <_realloc_r+0x4e4>
 50020cc:	b0800604 	addi	r2,r22,24
 50020d0:	ad400404 	addi	r21,r21,16
 50020d4:	003fa906 	br	5001f7c <__alt_data_end+0xff001f7c>
 50020d8:	a9000417 	ldw	r4,16(r21)
 50020dc:	90800604 	addi	r2,r18,24
 50020e0:	a8c00604 	addi	r3,r21,24
 50020e4:	91000415 	stw	r4,16(r18)
 50020e8:	a9000517 	ldw	r4,20(r21)
 50020ec:	91000515 	stw	r4,20(r18)
 50020f0:	003f0406 	br	5001d04 <__alt_data_end+0xff001d04>
 50020f4:	a8c00417 	ldw	r3,16(r21)
 50020f8:	ad400604 	addi	r21,r21,24
 50020fc:	b0800804 	addi	r2,r22,32
 5002100:	b0c00615 	stw	r3,24(r22)
 5002104:	a8ffff17 	ldw	r3,-4(r21)
 5002108:	b0c00715 	stw	r3,28(r22)
 500210c:	003f9b06 	br	5001f7c <__alt_data_end+0xff001f7c>
 5002110:	9005883a 	mov	r2,r18
 5002114:	003fc706 	br	5002034 <__alt_data_end+0xff002034>
 5002118:	a80b883a 	mov	r5,r21
 500211c:	9009883a 	mov	r4,r18
 5002120:	500198c0 	call	500198c <memmove>
 5002124:	003fc906 	br	500204c <__alt_data_end+0xff00204c>
 5002128:	a8800217 	ldw	r2,8(r21)
 500212c:	b0800415 	stw	r2,16(r22)
 5002130:	a8800317 	ldw	r2,12(r21)
 5002134:	b0800515 	stw	r2,20(r22)
 5002138:	31000726 	beq	r6,r4,5002158 <_realloc_r+0x548>
 500213c:	b0800604 	addi	r2,r22,24
 5002140:	ad400404 	addi	r21,r21,16
 5002144:	003fbb06 	br	5002034 <__alt_data_end+0xff002034>
 5002148:	a009883a 	mov	r4,r20
 500214c:	50037b40 	call	50037b4 <__malloc_unlock>
 5002150:	0005883a 	mov	r2,zero
 5002154:	003f0a06 	br	5001d80 <__alt_data_end+0xff001d80>
 5002158:	a8c00417 	ldw	r3,16(r21)
 500215c:	ad400604 	addi	r21,r21,24
 5002160:	b0800804 	addi	r2,r22,32
 5002164:	b0c00615 	stw	r3,24(r22)
 5002168:	a8ffff17 	ldw	r3,-4(r21)
 500216c:	b0c00715 	stw	r3,28(r22)
 5002170:	003fb006 	br	5002034 <__alt_data_end+0xff002034>

05002174 <_sbrk_r>:
 5002174:	defffd04 	addi	sp,sp,-12
 5002178:	dc000015 	stw	r16,0(sp)
 500217c:	04014074 	movhi	r16,1281
 5002180:	dc400115 	stw	r17,4(sp)
 5002184:	8424c204 	addi	r16,r16,-27896
 5002188:	2023883a 	mov	r17,r4
 500218c:	2809883a 	mov	r4,r5
 5002190:	dfc00215 	stw	ra,8(sp)
 5002194:	80000015 	stw	zero,0(r16)
 5002198:	50039740 	call	5003974 <sbrk>
 500219c:	00ffffc4 	movi	r3,-1
 50021a0:	10c00526 	beq	r2,r3,50021b8 <_sbrk_r+0x44>
 50021a4:	dfc00217 	ldw	ra,8(sp)
 50021a8:	dc400117 	ldw	r17,4(sp)
 50021ac:	dc000017 	ldw	r16,0(sp)
 50021b0:	dec00304 	addi	sp,sp,12
 50021b4:	f800283a 	ret
 50021b8:	80c00017 	ldw	r3,0(r16)
 50021bc:	183ff926 	beq	r3,zero,50021a4 <__alt_data_end+0xff0021a4>
 50021c0:	88c00015 	stw	r3,0(r17)
 50021c4:	003ff706 	br	50021a4 <__alt_data_end+0xff0021a4>

050021c8 <__sread>:
 50021c8:	defffe04 	addi	sp,sp,-8
 50021cc:	dc000015 	stw	r16,0(sp)
 50021d0:	2821883a 	mov	r16,r5
 50021d4:	2940038f 	ldh	r5,14(r5)
 50021d8:	dfc00115 	stw	ra,4(sp)
 50021dc:	5002f080 	call	5002f08 <_read_r>
 50021e0:	10000716 	blt	r2,zero,5002200 <__sread+0x38>
 50021e4:	80c01417 	ldw	r3,80(r16)
 50021e8:	1887883a 	add	r3,r3,r2
 50021ec:	80c01415 	stw	r3,80(r16)
 50021f0:	dfc00117 	ldw	ra,4(sp)
 50021f4:	dc000017 	ldw	r16,0(sp)
 50021f8:	dec00204 	addi	sp,sp,8
 50021fc:	f800283a 	ret
 5002200:	80c0030b 	ldhu	r3,12(r16)
 5002204:	18fbffcc 	andi	r3,r3,61439
 5002208:	80c0030d 	sth	r3,12(r16)
 500220c:	dfc00117 	ldw	ra,4(sp)
 5002210:	dc000017 	ldw	r16,0(sp)
 5002214:	dec00204 	addi	sp,sp,8
 5002218:	f800283a 	ret

0500221c <__seofread>:
 500221c:	0005883a 	mov	r2,zero
 5002220:	f800283a 	ret

05002224 <__swrite>:
 5002224:	2880030b 	ldhu	r2,12(r5)
 5002228:	defffb04 	addi	sp,sp,-20
 500222c:	dcc00315 	stw	r19,12(sp)
 5002230:	dc800215 	stw	r18,8(sp)
 5002234:	dc400115 	stw	r17,4(sp)
 5002238:	dc000015 	stw	r16,0(sp)
 500223c:	dfc00415 	stw	ra,16(sp)
 5002240:	10c0400c 	andi	r3,r2,256
 5002244:	2821883a 	mov	r16,r5
 5002248:	2023883a 	mov	r17,r4
 500224c:	3025883a 	mov	r18,r6
 5002250:	3827883a 	mov	r19,r7
 5002254:	18000526 	beq	r3,zero,500226c <__swrite+0x48>
 5002258:	2940038f 	ldh	r5,14(r5)
 500225c:	01c00084 	movi	r7,2
 5002260:	000d883a 	mov	r6,zero
 5002264:	5002cec0 	call	5002cec <_lseek_r>
 5002268:	8080030b 	ldhu	r2,12(r16)
 500226c:	8140038f 	ldh	r5,14(r16)
 5002270:	10bbffcc 	andi	r2,r2,61439
 5002274:	980f883a 	mov	r7,r19
 5002278:	900d883a 	mov	r6,r18
 500227c:	8809883a 	mov	r4,r17
 5002280:	8080030d 	sth	r2,12(r16)
 5002284:	dfc00417 	ldw	ra,16(sp)
 5002288:	dcc00317 	ldw	r19,12(sp)
 500228c:	dc800217 	ldw	r18,8(sp)
 5002290:	dc400117 	ldw	r17,4(sp)
 5002294:	dc000017 	ldw	r16,0(sp)
 5002298:	dec00504 	addi	sp,sp,20
 500229c:	50023041 	jmpi	5002304 <_write_r>

050022a0 <__sseek>:
 50022a0:	defffe04 	addi	sp,sp,-8
 50022a4:	dc000015 	stw	r16,0(sp)
 50022a8:	2821883a 	mov	r16,r5
 50022ac:	2940038f 	ldh	r5,14(r5)
 50022b0:	dfc00115 	stw	ra,4(sp)
 50022b4:	5002cec0 	call	5002cec <_lseek_r>
 50022b8:	00ffffc4 	movi	r3,-1
 50022bc:	10c00826 	beq	r2,r3,50022e0 <__sseek+0x40>
 50022c0:	80c0030b 	ldhu	r3,12(r16)
 50022c4:	80801415 	stw	r2,80(r16)
 50022c8:	18c40014 	ori	r3,r3,4096
 50022cc:	80c0030d 	sth	r3,12(r16)
 50022d0:	dfc00117 	ldw	ra,4(sp)
 50022d4:	dc000017 	ldw	r16,0(sp)
 50022d8:	dec00204 	addi	sp,sp,8
 50022dc:	f800283a 	ret
 50022e0:	80c0030b 	ldhu	r3,12(r16)
 50022e4:	18fbffcc 	andi	r3,r3,61439
 50022e8:	80c0030d 	sth	r3,12(r16)
 50022ec:	dfc00117 	ldw	ra,4(sp)
 50022f0:	dc000017 	ldw	r16,0(sp)
 50022f4:	dec00204 	addi	sp,sp,8
 50022f8:	f800283a 	ret

050022fc <__sclose>:
 50022fc:	2940038f 	ldh	r5,14(r5)
 5002300:	50024b81 	jmpi	50024b8 <_close_r>

05002304 <_write_r>:
 5002304:	defffd04 	addi	sp,sp,-12
 5002308:	2805883a 	mov	r2,r5
 500230c:	dc000015 	stw	r16,0(sp)
 5002310:	04014074 	movhi	r16,1281
 5002314:	dc400115 	stw	r17,4(sp)
 5002318:	300b883a 	mov	r5,r6
 500231c:	8424c204 	addi	r16,r16,-27896
 5002320:	2023883a 	mov	r17,r4
 5002324:	380d883a 	mov	r6,r7
 5002328:	1009883a 	mov	r4,r2
 500232c:	dfc00215 	stw	ra,8(sp)
 5002330:	80000015 	stw	zero,0(r16)
 5002334:	5003a600 	call	5003a60 <write>
 5002338:	00ffffc4 	movi	r3,-1
 500233c:	10c00526 	beq	r2,r3,5002354 <_write_r+0x50>
 5002340:	dfc00217 	ldw	ra,8(sp)
 5002344:	dc400117 	ldw	r17,4(sp)
 5002348:	dc000017 	ldw	r16,0(sp)
 500234c:	dec00304 	addi	sp,sp,12
 5002350:	f800283a 	ret
 5002354:	80c00017 	ldw	r3,0(r16)
 5002358:	183ff926 	beq	r3,zero,5002340 <__alt_data_end+0xff002340>
 500235c:	88c00015 	stw	r3,0(r17)
 5002360:	003ff706 	br	5002340 <__alt_data_end+0xff002340>

05002364 <__swsetup_r>:
 5002364:	00814034 	movhi	r2,1280
 5002368:	defffd04 	addi	sp,sp,-12
 500236c:	109e0c04 	addi	r2,r2,30768
 5002370:	dc400115 	stw	r17,4(sp)
 5002374:	2023883a 	mov	r17,r4
 5002378:	11000017 	ldw	r4,0(r2)
 500237c:	dc000015 	stw	r16,0(sp)
 5002380:	dfc00215 	stw	ra,8(sp)
 5002384:	2821883a 	mov	r16,r5
 5002388:	20000226 	beq	r4,zero,5002394 <__swsetup_r+0x30>
 500238c:	20800e17 	ldw	r2,56(r4)
 5002390:	10003126 	beq	r2,zero,5002458 <__swsetup_r+0xf4>
 5002394:	8080030b 	ldhu	r2,12(r16)
 5002398:	10c0020c 	andi	r3,r2,8
 500239c:	1009883a 	mov	r4,r2
 50023a0:	18000f26 	beq	r3,zero,50023e0 <__swsetup_r+0x7c>
 50023a4:	80c00417 	ldw	r3,16(r16)
 50023a8:	18001526 	beq	r3,zero,5002400 <__swsetup_r+0x9c>
 50023ac:	1100004c 	andi	r4,r2,1
 50023b0:	20001c1e 	bne	r4,zero,5002424 <__swsetup_r+0xc0>
 50023b4:	1080008c 	andi	r2,r2,2
 50023b8:	1000291e 	bne	r2,zero,5002460 <__swsetup_r+0xfc>
 50023bc:	80800517 	ldw	r2,20(r16)
 50023c0:	80800215 	stw	r2,8(r16)
 50023c4:	18001c26 	beq	r3,zero,5002438 <__swsetup_r+0xd4>
 50023c8:	0005883a 	mov	r2,zero
 50023cc:	dfc00217 	ldw	ra,8(sp)
 50023d0:	dc400117 	ldw	r17,4(sp)
 50023d4:	dc000017 	ldw	r16,0(sp)
 50023d8:	dec00304 	addi	sp,sp,12
 50023dc:	f800283a 	ret
 50023e0:	2080040c 	andi	r2,r4,16
 50023e4:	10002e26 	beq	r2,zero,50024a0 <__swsetup_r+0x13c>
 50023e8:	2080010c 	andi	r2,r4,4
 50023ec:	10001e1e 	bne	r2,zero,5002468 <__swsetup_r+0x104>
 50023f0:	80c00417 	ldw	r3,16(r16)
 50023f4:	20800214 	ori	r2,r4,8
 50023f8:	8080030d 	sth	r2,12(r16)
 50023fc:	183feb1e 	bne	r3,zero,50023ac <__alt_data_end+0xff0023ac>
 5002400:	1100a00c 	andi	r4,r2,640
 5002404:	01408004 	movi	r5,512
 5002408:	217fe826 	beq	r4,r5,50023ac <__alt_data_end+0xff0023ac>
 500240c:	800b883a 	mov	r5,r16
 5002410:	8809883a 	mov	r4,r17
 5002414:	5002d4c0 	call	5002d4c <__smakebuf_r>
 5002418:	8080030b 	ldhu	r2,12(r16)
 500241c:	80c00417 	ldw	r3,16(r16)
 5002420:	003fe206 	br	50023ac <__alt_data_end+0xff0023ac>
 5002424:	80800517 	ldw	r2,20(r16)
 5002428:	80000215 	stw	zero,8(r16)
 500242c:	0085c83a 	sub	r2,zero,r2
 5002430:	80800615 	stw	r2,24(r16)
 5002434:	183fe41e 	bne	r3,zero,50023c8 <__alt_data_end+0xff0023c8>
 5002438:	80c0030b 	ldhu	r3,12(r16)
 500243c:	0005883a 	mov	r2,zero
 5002440:	1900200c 	andi	r4,r3,128
 5002444:	203fe126 	beq	r4,zero,50023cc <__alt_data_end+0xff0023cc>
 5002448:	18c01014 	ori	r3,r3,64
 500244c:	80c0030d 	sth	r3,12(r16)
 5002450:	00bfffc4 	movi	r2,-1
 5002454:	003fdd06 	br	50023cc <__alt_data_end+0xff0023cc>
 5002458:	50008c00 	call	50008c0 <__sinit>
 500245c:	003fcd06 	br	5002394 <__alt_data_end+0xff002394>
 5002460:	0005883a 	mov	r2,zero
 5002464:	003fd606 	br	50023c0 <__alt_data_end+0xff0023c0>
 5002468:	81400c17 	ldw	r5,48(r16)
 500246c:	28000626 	beq	r5,zero,5002488 <__swsetup_r+0x124>
 5002470:	80801004 	addi	r2,r16,64
 5002474:	28800326 	beq	r5,r2,5002484 <__swsetup_r+0x120>
 5002478:	8809883a 	mov	r4,r17
 500247c:	50029dc0 	call	50029dc <_free_r>
 5002480:	8100030b 	ldhu	r4,12(r16)
 5002484:	80000c15 	stw	zero,48(r16)
 5002488:	80c00417 	ldw	r3,16(r16)
 500248c:	00bff6c4 	movi	r2,-37
 5002490:	1108703a 	and	r4,r2,r4
 5002494:	80000115 	stw	zero,4(r16)
 5002498:	80c00015 	stw	r3,0(r16)
 500249c:	003fd506 	br	50023f4 <__alt_data_end+0xff0023f4>
 50024a0:	00800244 	movi	r2,9
 50024a4:	88800015 	stw	r2,0(r17)
 50024a8:	20801014 	ori	r2,r4,64
 50024ac:	8080030d 	sth	r2,12(r16)
 50024b0:	00bfffc4 	movi	r2,-1
 50024b4:	003fc506 	br	50023cc <__alt_data_end+0xff0023cc>

050024b8 <_close_r>:
 50024b8:	defffd04 	addi	sp,sp,-12
 50024bc:	dc000015 	stw	r16,0(sp)
 50024c0:	04014074 	movhi	r16,1281
 50024c4:	dc400115 	stw	r17,4(sp)
 50024c8:	8424c204 	addi	r16,r16,-27896
 50024cc:	2023883a 	mov	r17,r4
 50024d0:	2809883a 	mov	r4,r5
 50024d4:	dfc00215 	stw	ra,8(sp)
 50024d8:	80000015 	stw	zero,0(r16)
 50024dc:	50032080 	call	5003208 <close>
 50024e0:	00ffffc4 	movi	r3,-1
 50024e4:	10c00526 	beq	r2,r3,50024fc <_close_r+0x44>
 50024e8:	dfc00217 	ldw	ra,8(sp)
 50024ec:	dc400117 	ldw	r17,4(sp)
 50024f0:	dc000017 	ldw	r16,0(sp)
 50024f4:	dec00304 	addi	sp,sp,12
 50024f8:	f800283a 	ret
 50024fc:	80c00017 	ldw	r3,0(r16)
 5002500:	183ff926 	beq	r3,zero,50024e8 <__alt_data_end+0xff0024e8>
 5002504:	88c00015 	stw	r3,0(r17)
 5002508:	003ff706 	br	50024e8 <__alt_data_end+0xff0024e8>

0500250c <_fclose_r>:
 500250c:	28003926 	beq	r5,zero,50025f4 <_fclose_r+0xe8>
 5002510:	defffc04 	addi	sp,sp,-16
 5002514:	dc400115 	stw	r17,4(sp)
 5002518:	dc000015 	stw	r16,0(sp)
 500251c:	dfc00315 	stw	ra,12(sp)
 5002520:	dc800215 	stw	r18,8(sp)
 5002524:	2023883a 	mov	r17,r4
 5002528:	2821883a 	mov	r16,r5
 500252c:	20000226 	beq	r4,zero,5002538 <_fclose_r+0x2c>
 5002530:	20800e17 	ldw	r2,56(r4)
 5002534:	10002726 	beq	r2,zero,50025d4 <_fclose_r+0xc8>
 5002538:	8080030f 	ldh	r2,12(r16)
 500253c:	1000071e 	bne	r2,zero,500255c <_fclose_r+0x50>
 5002540:	0005883a 	mov	r2,zero
 5002544:	dfc00317 	ldw	ra,12(sp)
 5002548:	dc800217 	ldw	r18,8(sp)
 500254c:	dc400117 	ldw	r17,4(sp)
 5002550:	dc000017 	ldw	r16,0(sp)
 5002554:	dec00404 	addi	sp,sp,16
 5002558:	f800283a 	ret
 500255c:	800b883a 	mov	r5,r16
 5002560:	8809883a 	mov	r4,r17
 5002564:	50026100 	call	5002610 <__sflush_r>
 5002568:	1025883a 	mov	r18,r2
 500256c:	80800b17 	ldw	r2,44(r16)
 5002570:	10000426 	beq	r2,zero,5002584 <_fclose_r+0x78>
 5002574:	81400717 	ldw	r5,28(r16)
 5002578:	8809883a 	mov	r4,r17
 500257c:	103ee83a 	callr	r2
 5002580:	10001616 	blt	r2,zero,50025dc <_fclose_r+0xd0>
 5002584:	8080030b 	ldhu	r2,12(r16)
 5002588:	1080200c 	andi	r2,r2,128
 500258c:	1000151e 	bne	r2,zero,50025e4 <_fclose_r+0xd8>
 5002590:	81400c17 	ldw	r5,48(r16)
 5002594:	28000526 	beq	r5,zero,50025ac <_fclose_r+0xa0>
 5002598:	80801004 	addi	r2,r16,64
 500259c:	28800226 	beq	r5,r2,50025a8 <_fclose_r+0x9c>
 50025a0:	8809883a 	mov	r4,r17
 50025a4:	50029dc0 	call	50029dc <_free_r>
 50025a8:	80000c15 	stw	zero,48(r16)
 50025ac:	81401117 	ldw	r5,68(r16)
 50025b0:	28000326 	beq	r5,zero,50025c0 <_fclose_r+0xb4>
 50025b4:	8809883a 	mov	r4,r17
 50025b8:	50029dc0 	call	50029dc <_free_r>
 50025bc:	80001115 	stw	zero,68(r16)
 50025c0:	50008d00 	call	50008d0 <__sfp_lock_acquire>
 50025c4:	8000030d 	sth	zero,12(r16)
 50025c8:	50008d40 	call	50008d4 <__sfp_lock_release>
 50025cc:	9005883a 	mov	r2,r18
 50025d0:	003fdc06 	br	5002544 <__alt_data_end+0xff002544>
 50025d4:	50008c00 	call	50008c0 <__sinit>
 50025d8:	003fd706 	br	5002538 <__alt_data_end+0xff002538>
 50025dc:	04bfffc4 	movi	r18,-1
 50025e0:	003fe806 	br	5002584 <__alt_data_end+0xff002584>
 50025e4:	81400417 	ldw	r5,16(r16)
 50025e8:	8809883a 	mov	r4,r17
 50025ec:	50029dc0 	call	50029dc <_free_r>
 50025f0:	003fe706 	br	5002590 <__alt_data_end+0xff002590>
 50025f4:	0005883a 	mov	r2,zero
 50025f8:	f800283a 	ret

050025fc <fclose>:
 50025fc:	00814034 	movhi	r2,1280
 5002600:	109e0c04 	addi	r2,r2,30768
 5002604:	200b883a 	mov	r5,r4
 5002608:	11000017 	ldw	r4,0(r2)
 500260c:	500250c1 	jmpi	500250c <_fclose_r>

05002610 <__sflush_r>:
 5002610:	2880030b 	ldhu	r2,12(r5)
 5002614:	defffb04 	addi	sp,sp,-20
 5002618:	dcc00315 	stw	r19,12(sp)
 500261c:	dc400115 	stw	r17,4(sp)
 5002620:	dfc00415 	stw	ra,16(sp)
 5002624:	dc800215 	stw	r18,8(sp)
 5002628:	dc000015 	stw	r16,0(sp)
 500262c:	10c0020c 	andi	r3,r2,8
 5002630:	2823883a 	mov	r17,r5
 5002634:	2027883a 	mov	r19,r4
 5002638:	1800311e 	bne	r3,zero,5002700 <__sflush_r+0xf0>
 500263c:	28c00117 	ldw	r3,4(r5)
 5002640:	10820014 	ori	r2,r2,2048
 5002644:	2880030d 	sth	r2,12(r5)
 5002648:	00c04b0e 	bge	zero,r3,5002778 <__sflush_r+0x168>
 500264c:	8a000a17 	ldw	r8,40(r17)
 5002650:	40002326 	beq	r8,zero,50026e0 <__sflush_r+0xd0>
 5002654:	9c000017 	ldw	r16,0(r19)
 5002658:	10c4000c 	andi	r3,r2,4096
 500265c:	98000015 	stw	zero,0(r19)
 5002660:	18004826 	beq	r3,zero,5002784 <__sflush_r+0x174>
 5002664:	89801417 	ldw	r6,80(r17)
 5002668:	10c0010c 	andi	r3,r2,4
 500266c:	18000626 	beq	r3,zero,5002688 <__sflush_r+0x78>
 5002670:	88c00117 	ldw	r3,4(r17)
 5002674:	88800c17 	ldw	r2,48(r17)
 5002678:	30cdc83a 	sub	r6,r6,r3
 500267c:	10000226 	beq	r2,zero,5002688 <__sflush_r+0x78>
 5002680:	88800f17 	ldw	r2,60(r17)
 5002684:	308dc83a 	sub	r6,r6,r2
 5002688:	89400717 	ldw	r5,28(r17)
 500268c:	000f883a 	mov	r7,zero
 5002690:	9809883a 	mov	r4,r19
 5002694:	403ee83a 	callr	r8
 5002698:	00ffffc4 	movi	r3,-1
 500269c:	10c04426 	beq	r2,r3,50027b0 <__sflush_r+0x1a0>
 50026a0:	88c0030b 	ldhu	r3,12(r17)
 50026a4:	89000417 	ldw	r4,16(r17)
 50026a8:	88000115 	stw	zero,4(r17)
 50026ac:	197dffcc 	andi	r5,r3,63487
 50026b0:	8940030d 	sth	r5,12(r17)
 50026b4:	89000015 	stw	r4,0(r17)
 50026b8:	18c4000c 	andi	r3,r3,4096
 50026bc:	18002c1e 	bne	r3,zero,5002770 <__sflush_r+0x160>
 50026c0:	89400c17 	ldw	r5,48(r17)
 50026c4:	9c000015 	stw	r16,0(r19)
 50026c8:	28000526 	beq	r5,zero,50026e0 <__sflush_r+0xd0>
 50026cc:	88801004 	addi	r2,r17,64
 50026d0:	28800226 	beq	r5,r2,50026dc <__sflush_r+0xcc>
 50026d4:	9809883a 	mov	r4,r19
 50026d8:	50029dc0 	call	50029dc <_free_r>
 50026dc:	88000c15 	stw	zero,48(r17)
 50026e0:	0005883a 	mov	r2,zero
 50026e4:	dfc00417 	ldw	ra,16(sp)
 50026e8:	dcc00317 	ldw	r19,12(sp)
 50026ec:	dc800217 	ldw	r18,8(sp)
 50026f0:	dc400117 	ldw	r17,4(sp)
 50026f4:	dc000017 	ldw	r16,0(sp)
 50026f8:	dec00504 	addi	sp,sp,20
 50026fc:	f800283a 	ret
 5002700:	2c800417 	ldw	r18,16(r5)
 5002704:	903ff626 	beq	r18,zero,50026e0 <__alt_data_end+0xff0026e0>
 5002708:	2c000017 	ldw	r16,0(r5)
 500270c:	108000cc 	andi	r2,r2,3
 5002710:	2c800015 	stw	r18,0(r5)
 5002714:	84a1c83a 	sub	r16,r16,r18
 5002718:	1000131e 	bne	r2,zero,5002768 <__sflush_r+0x158>
 500271c:	28800517 	ldw	r2,20(r5)
 5002720:	88800215 	stw	r2,8(r17)
 5002724:	04000316 	blt	zero,r16,5002734 <__sflush_r+0x124>
 5002728:	003fed06 	br	50026e0 <__alt_data_end+0xff0026e0>
 500272c:	90a5883a 	add	r18,r18,r2
 5002730:	043feb0e 	bge	zero,r16,50026e0 <__alt_data_end+0xff0026e0>
 5002734:	88800917 	ldw	r2,36(r17)
 5002738:	89400717 	ldw	r5,28(r17)
 500273c:	800f883a 	mov	r7,r16
 5002740:	900d883a 	mov	r6,r18
 5002744:	9809883a 	mov	r4,r19
 5002748:	103ee83a 	callr	r2
 500274c:	80a1c83a 	sub	r16,r16,r2
 5002750:	00bff616 	blt	zero,r2,500272c <__alt_data_end+0xff00272c>
 5002754:	88c0030b 	ldhu	r3,12(r17)
 5002758:	00bfffc4 	movi	r2,-1
 500275c:	18c01014 	ori	r3,r3,64
 5002760:	88c0030d 	sth	r3,12(r17)
 5002764:	003fdf06 	br	50026e4 <__alt_data_end+0xff0026e4>
 5002768:	0005883a 	mov	r2,zero
 500276c:	003fec06 	br	5002720 <__alt_data_end+0xff002720>
 5002770:	88801415 	stw	r2,80(r17)
 5002774:	003fd206 	br	50026c0 <__alt_data_end+0xff0026c0>
 5002778:	28c00f17 	ldw	r3,60(r5)
 500277c:	00ffb316 	blt	zero,r3,500264c <__alt_data_end+0xff00264c>
 5002780:	003fd706 	br	50026e0 <__alt_data_end+0xff0026e0>
 5002784:	89400717 	ldw	r5,28(r17)
 5002788:	000d883a 	mov	r6,zero
 500278c:	01c00044 	movi	r7,1
 5002790:	9809883a 	mov	r4,r19
 5002794:	403ee83a 	callr	r8
 5002798:	100d883a 	mov	r6,r2
 500279c:	00bfffc4 	movi	r2,-1
 50027a0:	30801426 	beq	r6,r2,50027f4 <__sflush_r+0x1e4>
 50027a4:	8880030b 	ldhu	r2,12(r17)
 50027a8:	8a000a17 	ldw	r8,40(r17)
 50027ac:	003fae06 	br	5002668 <__alt_data_end+0xff002668>
 50027b0:	98c00017 	ldw	r3,0(r19)
 50027b4:	183fba26 	beq	r3,zero,50026a0 <__alt_data_end+0xff0026a0>
 50027b8:	01000744 	movi	r4,29
 50027bc:	19000626 	beq	r3,r4,50027d8 <__sflush_r+0x1c8>
 50027c0:	01000584 	movi	r4,22
 50027c4:	19000426 	beq	r3,r4,50027d8 <__sflush_r+0x1c8>
 50027c8:	88c0030b 	ldhu	r3,12(r17)
 50027cc:	18c01014 	ori	r3,r3,64
 50027d0:	88c0030d 	sth	r3,12(r17)
 50027d4:	003fc306 	br	50026e4 <__alt_data_end+0xff0026e4>
 50027d8:	8880030b 	ldhu	r2,12(r17)
 50027dc:	88c00417 	ldw	r3,16(r17)
 50027e0:	88000115 	stw	zero,4(r17)
 50027e4:	10bdffcc 	andi	r2,r2,63487
 50027e8:	8880030d 	sth	r2,12(r17)
 50027ec:	88c00015 	stw	r3,0(r17)
 50027f0:	003fb306 	br	50026c0 <__alt_data_end+0xff0026c0>
 50027f4:	98800017 	ldw	r2,0(r19)
 50027f8:	103fea26 	beq	r2,zero,50027a4 <__alt_data_end+0xff0027a4>
 50027fc:	00c00744 	movi	r3,29
 5002800:	10c00226 	beq	r2,r3,500280c <__sflush_r+0x1fc>
 5002804:	00c00584 	movi	r3,22
 5002808:	10c0031e 	bne	r2,r3,5002818 <__sflush_r+0x208>
 500280c:	9c000015 	stw	r16,0(r19)
 5002810:	0005883a 	mov	r2,zero
 5002814:	003fb306 	br	50026e4 <__alt_data_end+0xff0026e4>
 5002818:	88c0030b 	ldhu	r3,12(r17)
 500281c:	3005883a 	mov	r2,r6
 5002820:	18c01014 	ori	r3,r3,64
 5002824:	88c0030d 	sth	r3,12(r17)
 5002828:	003fae06 	br	50026e4 <__alt_data_end+0xff0026e4>

0500282c <_fflush_r>:
 500282c:	defffd04 	addi	sp,sp,-12
 5002830:	dc000115 	stw	r16,4(sp)
 5002834:	dfc00215 	stw	ra,8(sp)
 5002838:	2021883a 	mov	r16,r4
 500283c:	20000226 	beq	r4,zero,5002848 <_fflush_r+0x1c>
 5002840:	20800e17 	ldw	r2,56(r4)
 5002844:	10000c26 	beq	r2,zero,5002878 <_fflush_r+0x4c>
 5002848:	2880030f 	ldh	r2,12(r5)
 500284c:	1000051e 	bne	r2,zero,5002864 <_fflush_r+0x38>
 5002850:	0005883a 	mov	r2,zero
 5002854:	dfc00217 	ldw	ra,8(sp)
 5002858:	dc000117 	ldw	r16,4(sp)
 500285c:	dec00304 	addi	sp,sp,12
 5002860:	f800283a 	ret
 5002864:	8009883a 	mov	r4,r16
 5002868:	dfc00217 	ldw	ra,8(sp)
 500286c:	dc000117 	ldw	r16,4(sp)
 5002870:	dec00304 	addi	sp,sp,12
 5002874:	50026101 	jmpi	5002610 <__sflush_r>
 5002878:	d9400015 	stw	r5,0(sp)
 500287c:	50008c00 	call	50008c0 <__sinit>
 5002880:	d9400017 	ldw	r5,0(sp)
 5002884:	003ff006 	br	5002848 <__alt_data_end+0xff002848>

05002888 <fflush>:
 5002888:	20000526 	beq	r4,zero,50028a0 <fflush+0x18>
 500288c:	00814034 	movhi	r2,1280
 5002890:	109e0c04 	addi	r2,r2,30768
 5002894:	200b883a 	mov	r5,r4
 5002898:	11000017 	ldw	r4,0(r2)
 500289c:	500282c1 	jmpi	500282c <_fflush_r>
 50028a0:	00814034 	movhi	r2,1280
 50028a4:	109e0b04 	addi	r2,r2,30764
 50028a8:	11000017 	ldw	r4,0(r2)
 50028ac:	01414034 	movhi	r5,1280
 50028b0:	294a0b04 	addi	r5,r5,10284
 50028b4:	5000e901 	jmpi	5000e90 <_fwalk_reent>

050028b8 <_malloc_trim_r>:
 50028b8:	defffb04 	addi	sp,sp,-20
 50028bc:	dcc00315 	stw	r19,12(sp)
 50028c0:	04c14034 	movhi	r19,1280
 50028c4:	dc800215 	stw	r18,8(sp)
 50028c8:	dc400115 	stw	r17,4(sp)
 50028cc:	dc000015 	stw	r16,0(sp)
 50028d0:	dfc00415 	stw	ra,16(sp)
 50028d4:	2821883a 	mov	r16,r5
 50028d8:	9cd88004 	addi	r19,r19,25088
 50028dc:	2025883a 	mov	r18,r4
 50028e0:	50037900 	call	5003790 <__malloc_lock>
 50028e4:	98800217 	ldw	r2,8(r19)
 50028e8:	14400117 	ldw	r17,4(r2)
 50028ec:	00bfff04 	movi	r2,-4
 50028f0:	88a2703a 	and	r17,r17,r2
 50028f4:	8c21c83a 	sub	r16,r17,r16
 50028f8:	8403fbc4 	addi	r16,r16,4079
 50028fc:	8020d33a 	srli	r16,r16,12
 5002900:	0083ffc4 	movi	r2,4095
 5002904:	843fffc4 	addi	r16,r16,-1
 5002908:	8020933a 	slli	r16,r16,12
 500290c:	1400060e 	bge	r2,r16,5002928 <_malloc_trim_r+0x70>
 5002910:	000b883a 	mov	r5,zero
 5002914:	9009883a 	mov	r4,r18
 5002918:	50021740 	call	5002174 <_sbrk_r>
 500291c:	98c00217 	ldw	r3,8(r19)
 5002920:	1c47883a 	add	r3,r3,r17
 5002924:	10c00a26 	beq	r2,r3,5002950 <_malloc_trim_r+0x98>
 5002928:	9009883a 	mov	r4,r18
 500292c:	50037b40 	call	50037b4 <__malloc_unlock>
 5002930:	0005883a 	mov	r2,zero
 5002934:	dfc00417 	ldw	ra,16(sp)
 5002938:	dcc00317 	ldw	r19,12(sp)
 500293c:	dc800217 	ldw	r18,8(sp)
 5002940:	dc400117 	ldw	r17,4(sp)
 5002944:	dc000017 	ldw	r16,0(sp)
 5002948:	dec00504 	addi	sp,sp,20
 500294c:	f800283a 	ret
 5002950:	040bc83a 	sub	r5,zero,r16
 5002954:	9009883a 	mov	r4,r18
 5002958:	50021740 	call	5002174 <_sbrk_r>
 500295c:	00ffffc4 	movi	r3,-1
 5002960:	10c00d26 	beq	r2,r3,5002998 <_malloc_trim_r+0xe0>
 5002964:	00c14074 	movhi	r3,1281
 5002968:	18e4ca04 	addi	r3,r3,-27864
 500296c:	18800017 	ldw	r2,0(r3)
 5002970:	99000217 	ldw	r4,8(r19)
 5002974:	8c23c83a 	sub	r17,r17,r16
 5002978:	8c400054 	ori	r17,r17,1
 500297c:	1421c83a 	sub	r16,r2,r16
 5002980:	24400115 	stw	r17,4(r4)
 5002984:	9009883a 	mov	r4,r18
 5002988:	1c000015 	stw	r16,0(r3)
 500298c:	50037b40 	call	50037b4 <__malloc_unlock>
 5002990:	00800044 	movi	r2,1
 5002994:	003fe706 	br	5002934 <__alt_data_end+0xff002934>
 5002998:	000b883a 	mov	r5,zero
 500299c:	9009883a 	mov	r4,r18
 50029a0:	50021740 	call	5002174 <_sbrk_r>
 50029a4:	99000217 	ldw	r4,8(r19)
 50029a8:	014003c4 	movi	r5,15
 50029ac:	1107c83a 	sub	r3,r2,r4
 50029b0:	28ffdd0e 	bge	r5,r3,5002928 <__alt_data_end+0xff002928>
 50029b4:	01414034 	movhi	r5,1280
 50029b8:	295e0d04 	addi	r5,r5,30772
 50029bc:	29400017 	ldw	r5,0(r5)
 50029c0:	18c00054 	ori	r3,r3,1
 50029c4:	20c00115 	stw	r3,4(r4)
 50029c8:	00c14074 	movhi	r3,1281
 50029cc:	1145c83a 	sub	r2,r2,r5
 50029d0:	18e4ca04 	addi	r3,r3,-27864
 50029d4:	18800015 	stw	r2,0(r3)
 50029d8:	003fd306 	br	5002928 <__alt_data_end+0xff002928>

050029dc <_free_r>:
 50029dc:	28004126 	beq	r5,zero,5002ae4 <_free_r+0x108>
 50029e0:	defffd04 	addi	sp,sp,-12
 50029e4:	dc400115 	stw	r17,4(sp)
 50029e8:	dc000015 	stw	r16,0(sp)
 50029ec:	2023883a 	mov	r17,r4
 50029f0:	2821883a 	mov	r16,r5
 50029f4:	dfc00215 	stw	ra,8(sp)
 50029f8:	50037900 	call	5003790 <__malloc_lock>
 50029fc:	81ffff17 	ldw	r7,-4(r16)
 5002a00:	00bfff84 	movi	r2,-2
 5002a04:	01014034 	movhi	r4,1280
 5002a08:	81bffe04 	addi	r6,r16,-8
 5002a0c:	3884703a 	and	r2,r7,r2
 5002a10:	21188004 	addi	r4,r4,25088
 5002a14:	308b883a 	add	r5,r6,r2
 5002a18:	2a400117 	ldw	r9,4(r5)
 5002a1c:	22000217 	ldw	r8,8(r4)
 5002a20:	00ffff04 	movi	r3,-4
 5002a24:	48c6703a 	and	r3,r9,r3
 5002a28:	2a005726 	beq	r5,r8,5002b88 <_free_r+0x1ac>
 5002a2c:	28c00115 	stw	r3,4(r5)
 5002a30:	39c0004c 	andi	r7,r7,1
 5002a34:	3800091e 	bne	r7,zero,5002a5c <_free_r+0x80>
 5002a38:	823ffe17 	ldw	r8,-8(r16)
 5002a3c:	22400204 	addi	r9,r4,8
 5002a40:	320dc83a 	sub	r6,r6,r8
 5002a44:	31c00217 	ldw	r7,8(r6)
 5002a48:	1205883a 	add	r2,r2,r8
 5002a4c:	3a406526 	beq	r7,r9,5002be4 <_free_r+0x208>
 5002a50:	32000317 	ldw	r8,12(r6)
 5002a54:	3a000315 	stw	r8,12(r7)
 5002a58:	41c00215 	stw	r7,8(r8)
 5002a5c:	28cf883a 	add	r7,r5,r3
 5002a60:	39c00117 	ldw	r7,4(r7)
 5002a64:	39c0004c 	andi	r7,r7,1
 5002a68:	38003a26 	beq	r7,zero,5002b54 <_free_r+0x178>
 5002a6c:	10c00054 	ori	r3,r2,1
 5002a70:	30c00115 	stw	r3,4(r6)
 5002a74:	3087883a 	add	r3,r6,r2
 5002a78:	18800015 	stw	r2,0(r3)
 5002a7c:	00c07fc4 	movi	r3,511
 5002a80:	18801936 	bltu	r3,r2,5002ae8 <_free_r+0x10c>
 5002a84:	1004d0fa 	srli	r2,r2,3
 5002a88:	01c00044 	movi	r7,1
 5002a8c:	21400117 	ldw	r5,4(r4)
 5002a90:	10c00044 	addi	r3,r2,1
 5002a94:	18c7883a 	add	r3,r3,r3
 5002a98:	1005d0ba 	srai	r2,r2,2
 5002a9c:	18c7883a 	add	r3,r3,r3
 5002aa0:	18c7883a 	add	r3,r3,r3
 5002aa4:	1907883a 	add	r3,r3,r4
 5002aa8:	3884983a 	sll	r2,r7,r2
 5002aac:	19c00017 	ldw	r7,0(r3)
 5002ab0:	1a3ffe04 	addi	r8,r3,-8
 5002ab4:	1144b03a 	or	r2,r2,r5
 5002ab8:	32000315 	stw	r8,12(r6)
 5002abc:	31c00215 	stw	r7,8(r6)
 5002ac0:	20800115 	stw	r2,4(r4)
 5002ac4:	19800015 	stw	r6,0(r3)
 5002ac8:	39800315 	stw	r6,12(r7)
 5002acc:	8809883a 	mov	r4,r17
 5002ad0:	dfc00217 	ldw	ra,8(sp)
 5002ad4:	dc400117 	ldw	r17,4(sp)
 5002ad8:	dc000017 	ldw	r16,0(sp)
 5002adc:	dec00304 	addi	sp,sp,12
 5002ae0:	50037b41 	jmpi	50037b4 <__malloc_unlock>
 5002ae4:	f800283a 	ret
 5002ae8:	100ad27a 	srli	r5,r2,9
 5002aec:	00c00104 	movi	r3,4
 5002af0:	19404a36 	bltu	r3,r5,5002c1c <_free_r+0x240>
 5002af4:	100ad1ba 	srli	r5,r2,6
 5002af8:	28c00e44 	addi	r3,r5,57
 5002afc:	18c7883a 	add	r3,r3,r3
 5002b00:	29400e04 	addi	r5,r5,56
 5002b04:	18c7883a 	add	r3,r3,r3
 5002b08:	18c7883a 	add	r3,r3,r3
 5002b0c:	1909883a 	add	r4,r3,r4
 5002b10:	20c00017 	ldw	r3,0(r4)
 5002b14:	01c14034 	movhi	r7,1280
 5002b18:	213ffe04 	addi	r4,r4,-8
 5002b1c:	39d88004 	addi	r7,r7,25088
 5002b20:	20c04426 	beq	r4,r3,5002c34 <_free_r+0x258>
 5002b24:	01ffff04 	movi	r7,-4
 5002b28:	19400117 	ldw	r5,4(r3)
 5002b2c:	29ca703a 	and	r5,r5,r7
 5002b30:	1140022e 	bgeu	r2,r5,5002b3c <_free_r+0x160>
 5002b34:	18c00217 	ldw	r3,8(r3)
 5002b38:	20fffb1e 	bne	r4,r3,5002b28 <__alt_data_end+0xff002b28>
 5002b3c:	19000317 	ldw	r4,12(r3)
 5002b40:	31000315 	stw	r4,12(r6)
 5002b44:	30c00215 	stw	r3,8(r6)
 5002b48:	21800215 	stw	r6,8(r4)
 5002b4c:	19800315 	stw	r6,12(r3)
 5002b50:	003fde06 	br	5002acc <__alt_data_end+0xff002acc>
 5002b54:	29c00217 	ldw	r7,8(r5)
 5002b58:	10c5883a 	add	r2,r2,r3
 5002b5c:	00c14034 	movhi	r3,1280
 5002b60:	18d88204 	addi	r3,r3,25096
 5002b64:	38c03b26 	beq	r7,r3,5002c54 <_free_r+0x278>
 5002b68:	2a000317 	ldw	r8,12(r5)
 5002b6c:	11400054 	ori	r5,r2,1
 5002b70:	3087883a 	add	r3,r6,r2
 5002b74:	3a000315 	stw	r8,12(r7)
 5002b78:	41c00215 	stw	r7,8(r8)
 5002b7c:	31400115 	stw	r5,4(r6)
 5002b80:	18800015 	stw	r2,0(r3)
 5002b84:	003fbd06 	br	5002a7c <__alt_data_end+0xff002a7c>
 5002b88:	39c0004c 	andi	r7,r7,1
 5002b8c:	10c5883a 	add	r2,r2,r3
 5002b90:	3800071e 	bne	r7,zero,5002bb0 <_free_r+0x1d4>
 5002b94:	81fffe17 	ldw	r7,-8(r16)
 5002b98:	31cdc83a 	sub	r6,r6,r7
 5002b9c:	30c00317 	ldw	r3,12(r6)
 5002ba0:	31400217 	ldw	r5,8(r6)
 5002ba4:	11c5883a 	add	r2,r2,r7
 5002ba8:	28c00315 	stw	r3,12(r5)
 5002bac:	19400215 	stw	r5,8(r3)
 5002bb0:	10c00054 	ori	r3,r2,1
 5002bb4:	30c00115 	stw	r3,4(r6)
 5002bb8:	00c14034 	movhi	r3,1280
 5002bbc:	18de0e04 	addi	r3,r3,30776
 5002bc0:	18c00017 	ldw	r3,0(r3)
 5002bc4:	21800215 	stw	r6,8(r4)
 5002bc8:	10ffc036 	bltu	r2,r3,5002acc <__alt_data_end+0xff002acc>
 5002bcc:	00814074 	movhi	r2,1281
 5002bd0:	10a4c104 	addi	r2,r2,-27900
 5002bd4:	11400017 	ldw	r5,0(r2)
 5002bd8:	8809883a 	mov	r4,r17
 5002bdc:	50028b80 	call	50028b8 <_malloc_trim_r>
 5002be0:	003fba06 	br	5002acc <__alt_data_end+0xff002acc>
 5002be4:	28c9883a 	add	r4,r5,r3
 5002be8:	21000117 	ldw	r4,4(r4)
 5002bec:	2100004c 	andi	r4,r4,1
 5002bf0:	2000391e 	bne	r4,zero,5002cd8 <_free_r+0x2fc>
 5002bf4:	29c00217 	ldw	r7,8(r5)
 5002bf8:	29000317 	ldw	r4,12(r5)
 5002bfc:	1885883a 	add	r2,r3,r2
 5002c00:	10c00054 	ori	r3,r2,1
 5002c04:	39000315 	stw	r4,12(r7)
 5002c08:	21c00215 	stw	r7,8(r4)
 5002c0c:	30c00115 	stw	r3,4(r6)
 5002c10:	308d883a 	add	r6,r6,r2
 5002c14:	30800015 	stw	r2,0(r6)
 5002c18:	003fac06 	br	5002acc <__alt_data_end+0xff002acc>
 5002c1c:	00c00504 	movi	r3,20
 5002c20:	19401536 	bltu	r3,r5,5002c78 <_free_r+0x29c>
 5002c24:	28c01704 	addi	r3,r5,92
 5002c28:	18c7883a 	add	r3,r3,r3
 5002c2c:	294016c4 	addi	r5,r5,91
 5002c30:	003fb406 	br	5002b04 <__alt_data_end+0xff002b04>
 5002c34:	280bd0ba 	srai	r5,r5,2
 5002c38:	00c00044 	movi	r3,1
 5002c3c:	38800117 	ldw	r2,4(r7)
 5002c40:	194a983a 	sll	r5,r3,r5
 5002c44:	2007883a 	mov	r3,r4
 5002c48:	2884b03a 	or	r2,r5,r2
 5002c4c:	38800115 	stw	r2,4(r7)
 5002c50:	003fbb06 	br	5002b40 <__alt_data_end+0xff002b40>
 5002c54:	21800515 	stw	r6,20(r4)
 5002c58:	21800415 	stw	r6,16(r4)
 5002c5c:	10c00054 	ori	r3,r2,1
 5002c60:	31c00315 	stw	r7,12(r6)
 5002c64:	31c00215 	stw	r7,8(r6)
 5002c68:	30c00115 	stw	r3,4(r6)
 5002c6c:	308d883a 	add	r6,r6,r2
 5002c70:	30800015 	stw	r2,0(r6)
 5002c74:	003f9506 	br	5002acc <__alt_data_end+0xff002acc>
 5002c78:	00c01504 	movi	r3,84
 5002c7c:	19400536 	bltu	r3,r5,5002c94 <_free_r+0x2b8>
 5002c80:	100ad33a 	srli	r5,r2,12
 5002c84:	28c01bc4 	addi	r3,r5,111
 5002c88:	18c7883a 	add	r3,r3,r3
 5002c8c:	29401b84 	addi	r5,r5,110
 5002c90:	003f9c06 	br	5002b04 <__alt_data_end+0xff002b04>
 5002c94:	00c05504 	movi	r3,340
 5002c98:	19400536 	bltu	r3,r5,5002cb0 <_free_r+0x2d4>
 5002c9c:	100ad3fa 	srli	r5,r2,15
 5002ca0:	28c01e04 	addi	r3,r5,120
 5002ca4:	18c7883a 	add	r3,r3,r3
 5002ca8:	29401dc4 	addi	r5,r5,119
 5002cac:	003f9506 	br	5002b04 <__alt_data_end+0xff002b04>
 5002cb0:	00c15504 	movi	r3,1364
 5002cb4:	19400536 	bltu	r3,r5,5002ccc <_free_r+0x2f0>
 5002cb8:	100ad4ba 	srli	r5,r2,18
 5002cbc:	28c01f44 	addi	r3,r5,125
 5002cc0:	18c7883a 	add	r3,r3,r3
 5002cc4:	29401f04 	addi	r5,r5,124
 5002cc8:	003f8e06 	br	5002b04 <__alt_data_end+0xff002b04>
 5002ccc:	00c03f84 	movi	r3,254
 5002cd0:	01401f84 	movi	r5,126
 5002cd4:	003f8b06 	br	5002b04 <__alt_data_end+0xff002b04>
 5002cd8:	10c00054 	ori	r3,r2,1
 5002cdc:	30c00115 	stw	r3,4(r6)
 5002ce0:	308d883a 	add	r6,r6,r2
 5002ce4:	30800015 	stw	r2,0(r6)
 5002ce8:	003f7806 	br	5002acc <__alt_data_end+0xff002acc>

05002cec <_lseek_r>:
 5002cec:	defffd04 	addi	sp,sp,-12
 5002cf0:	2805883a 	mov	r2,r5
 5002cf4:	dc000015 	stw	r16,0(sp)
 5002cf8:	04014074 	movhi	r16,1281
 5002cfc:	dc400115 	stw	r17,4(sp)
 5002d00:	300b883a 	mov	r5,r6
 5002d04:	8424c204 	addi	r16,r16,-27896
 5002d08:	2023883a 	mov	r17,r4
 5002d0c:	380d883a 	mov	r6,r7
 5002d10:	1009883a 	mov	r4,r2
 5002d14:	dfc00215 	stw	ra,8(sp)
 5002d18:	80000015 	stw	zero,0(r16)
 5002d1c:	50036400 	call	5003640 <lseek>
 5002d20:	00ffffc4 	movi	r3,-1
 5002d24:	10c00526 	beq	r2,r3,5002d3c <_lseek_r+0x50>
 5002d28:	dfc00217 	ldw	ra,8(sp)
 5002d2c:	dc400117 	ldw	r17,4(sp)
 5002d30:	dc000017 	ldw	r16,0(sp)
 5002d34:	dec00304 	addi	sp,sp,12
 5002d38:	f800283a 	ret
 5002d3c:	80c00017 	ldw	r3,0(r16)
 5002d40:	183ff926 	beq	r3,zero,5002d28 <__alt_data_end+0xff002d28>
 5002d44:	88c00015 	stw	r3,0(r17)
 5002d48:	003ff706 	br	5002d28 <__alt_data_end+0xff002d28>

05002d4c <__smakebuf_r>:
 5002d4c:	2880030b 	ldhu	r2,12(r5)
 5002d50:	10c0008c 	andi	r3,r2,2
 5002d54:	1800411e 	bne	r3,zero,5002e5c <__smakebuf_r+0x110>
 5002d58:	deffec04 	addi	sp,sp,-80
 5002d5c:	dc000f15 	stw	r16,60(sp)
 5002d60:	2821883a 	mov	r16,r5
 5002d64:	2940038f 	ldh	r5,14(r5)
 5002d68:	dc401015 	stw	r17,64(sp)
 5002d6c:	dfc01315 	stw	ra,76(sp)
 5002d70:	dcc01215 	stw	r19,72(sp)
 5002d74:	dc801115 	stw	r18,68(sp)
 5002d78:	2023883a 	mov	r17,r4
 5002d7c:	28001c16 	blt	r5,zero,5002df0 <__smakebuf_r+0xa4>
 5002d80:	d80d883a 	mov	r6,sp
 5002d84:	5002f680 	call	5002f68 <_fstat_r>
 5002d88:	10001816 	blt	r2,zero,5002dec <__smakebuf_r+0xa0>
 5002d8c:	d8800117 	ldw	r2,4(sp)
 5002d90:	00e00014 	movui	r3,32768
 5002d94:	10bc000c 	andi	r2,r2,61440
 5002d98:	14c80020 	cmpeqi	r19,r2,8192
 5002d9c:	10c03726 	beq	r2,r3,5002e7c <__smakebuf_r+0x130>
 5002da0:	80c0030b 	ldhu	r3,12(r16)
 5002da4:	18c20014 	ori	r3,r3,2048
 5002da8:	80c0030d 	sth	r3,12(r16)
 5002dac:	00c80004 	movi	r3,8192
 5002db0:	10c0521e 	bne	r2,r3,5002efc <__smakebuf_r+0x1b0>
 5002db4:	8140038f 	ldh	r5,14(r16)
 5002db8:	8809883a 	mov	r4,r17
 5002dbc:	5002fc40 	call	5002fc4 <_isatty_r>
 5002dc0:	10004c26 	beq	r2,zero,5002ef4 <__smakebuf_r+0x1a8>
 5002dc4:	8080030b 	ldhu	r2,12(r16)
 5002dc8:	80c010c4 	addi	r3,r16,67
 5002dcc:	80c00015 	stw	r3,0(r16)
 5002dd0:	10800054 	ori	r2,r2,1
 5002dd4:	8080030d 	sth	r2,12(r16)
 5002dd8:	00800044 	movi	r2,1
 5002ddc:	80c00415 	stw	r3,16(r16)
 5002de0:	80800515 	stw	r2,20(r16)
 5002de4:	04810004 	movi	r18,1024
 5002de8:	00000706 	br	5002e08 <__smakebuf_r+0xbc>
 5002dec:	8080030b 	ldhu	r2,12(r16)
 5002df0:	10c0200c 	andi	r3,r2,128
 5002df4:	18001f1e 	bne	r3,zero,5002e74 <__smakebuf_r+0x128>
 5002df8:	04810004 	movi	r18,1024
 5002dfc:	10820014 	ori	r2,r2,2048
 5002e00:	8080030d 	sth	r2,12(r16)
 5002e04:	0027883a 	mov	r19,zero
 5002e08:	900b883a 	mov	r5,r18
 5002e0c:	8809883a 	mov	r4,r17
 5002e10:	5000f540 	call	5000f54 <_malloc_r>
 5002e14:	10002c26 	beq	r2,zero,5002ec8 <__smakebuf_r+0x17c>
 5002e18:	80c0030b 	ldhu	r3,12(r16)
 5002e1c:	01014034 	movhi	r4,1280
 5002e20:	21015e04 	addi	r4,r4,1400
 5002e24:	89000f15 	stw	r4,60(r17)
 5002e28:	18c02014 	ori	r3,r3,128
 5002e2c:	80c0030d 	sth	r3,12(r16)
 5002e30:	80800015 	stw	r2,0(r16)
 5002e34:	80800415 	stw	r2,16(r16)
 5002e38:	84800515 	stw	r18,20(r16)
 5002e3c:	98001a1e 	bne	r19,zero,5002ea8 <__smakebuf_r+0x15c>
 5002e40:	dfc01317 	ldw	ra,76(sp)
 5002e44:	dcc01217 	ldw	r19,72(sp)
 5002e48:	dc801117 	ldw	r18,68(sp)
 5002e4c:	dc401017 	ldw	r17,64(sp)
 5002e50:	dc000f17 	ldw	r16,60(sp)
 5002e54:	dec01404 	addi	sp,sp,80
 5002e58:	f800283a 	ret
 5002e5c:	288010c4 	addi	r2,r5,67
 5002e60:	28800015 	stw	r2,0(r5)
 5002e64:	28800415 	stw	r2,16(r5)
 5002e68:	00800044 	movi	r2,1
 5002e6c:	28800515 	stw	r2,20(r5)
 5002e70:	f800283a 	ret
 5002e74:	04801004 	movi	r18,64
 5002e78:	003fe006 	br	5002dfc <__alt_data_end+0xff002dfc>
 5002e7c:	81000a17 	ldw	r4,40(r16)
 5002e80:	00c14034 	movhi	r3,1280
 5002e84:	18c8a804 	addi	r3,r3,8864
 5002e88:	20ffc51e 	bne	r4,r3,5002da0 <__alt_data_end+0xff002da0>
 5002e8c:	8080030b 	ldhu	r2,12(r16)
 5002e90:	04810004 	movi	r18,1024
 5002e94:	84801315 	stw	r18,76(r16)
 5002e98:	1484b03a 	or	r2,r2,r18
 5002e9c:	8080030d 	sth	r2,12(r16)
 5002ea0:	0027883a 	mov	r19,zero
 5002ea4:	003fd806 	br	5002e08 <__alt_data_end+0xff002e08>
 5002ea8:	8140038f 	ldh	r5,14(r16)
 5002eac:	8809883a 	mov	r4,r17
 5002eb0:	5002fc40 	call	5002fc4 <_isatty_r>
 5002eb4:	103fe226 	beq	r2,zero,5002e40 <__alt_data_end+0xff002e40>
 5002eb8:	8080030b 	ldhu	r2,12(r16)
 5002ebc:	10800054 	ori	r2,r2,1
 5002ec0:	8080030d 	sth	r2,12(r16)
 5002ec4:	003fde06 	br	5002e40 <__alt_data_end+0xff002e40>
 5002ec8:	8080030b 	ldhu	r2,12(r16)
 5002ecc:	10c0800c 	andi	r3,r2,512
 5002ed0:	183fdb1e 	bne	r3,zero,5002e40 <__alt_data_end+0xff002e40>
 5002ed4:	10800094 	ori	r2,r2,2
 5002ed8:	80c010c4 	addi	r3,r16,67
 5002edc:	8080030d 	sth	r2,12(r16)
 5002ee0:	00800044 	movi	r2,1
 5002ee4:	80c00015 	stw	r3,0(r16)
 5002ee8:	80c00415 	stw	r3,16(r16)
 5002eec:	80800515 	stw	r2,20(r16)
 5002ef0:	003fd306 	br	5002e40 <__alt_data_end+0xff002e40>
 5002ef4:	04810004 	movi	r18,1024
 5002ef8:	003fc306 	br	5002e08 <__alt_data_end+0xff002e08>
 5002efc:	0027883a 	mov	r19,zero
 5002f00:	04810004 	movi	r18,1024
 5002f04:	003fc006 	br	5002e08 <__alt_data_end+0xff002e08>

05002f08 <_read_r>:
 5002f08:	defffd04 	addi	sp,sp,-12
 5002f0c:	2805883a 	mov	r2,r5
 5002f10:	dc000015 	stw	r16,0(sp)
 5002f14:	04014074 	movhi	r16,1281
 5002f18:	dc400115 	stw	r17,4(sp)
 5002f1c:	300b883a 	mov	r5,r6
 5002f20:	8424c204 	addi	r16,r16,-27896
 5002f24:	2023883a 	mov	r17,r4
 5002f28:	380d883a 	mov	r6,r7
 5002f2c:	1009883a 	mov	r4,r2
 5002f30:	dfc00215 	stw	ra,8(sp)
 5002f34:	80000015 	stw	zero,0(r16)
 5002f38:	50038140 	call	5003814 <read>
 5002f3c:	00ffffc4 	movi	r3,-1
 5002f40:	10c00526 	beq	r2,r3,5002f58 <_read_r+0x50>
 5002f44:	dfc00217 	ldw	ra,8(sp)
 5002f48:	dc400117 	ldw	r17,4(sp)
 5002f4c:	dc000017 	ldw	r16,0(sp)
 5002f50:	dec00304 	addi	sp,sp,12
 5002f54:	f800283a 	ret
 5002f58:	80c00017 	ldw	r3,0(r16)
 5002f5c:	183ff926 	beq	r3,zero,5002f44 <__alt_data_end+0xff002f44>
 5002f60:	88c00015 	stw	r3,0(r17)
 5002f64:	003ff706 	br	5002f44 <__alt_data_end+0xff002f44>

05002f68 <_fstat_r>:
 5002f68:	defffd04 	addi	sp,sp,-12
 5002f6c:	2805883a 	mov	r2,r5
 5002f70:	dc000015 	stw	r16,0(sp)
 5002f74:	04014074 	movhi	r16,1281
 5002f78:	dc400115 	stw	r17,4(sp)
 5002f7c:	8424c204 	addi	r16,r16,-27896
 5002f80:	2023883a 	mov	r17,r4
 5002f84:	300b883a 	mov	r5,r6
 5002f88:	1009883a 	mov	r4,r2
 5002f8c:	dfc00215 	stw	ra,8(sp)
 5002f90:	80000015 	stw	zero,0(r16)
 5002f94:	50033880 	call	5003388 <fstat>
 5002f98:	00ffffc4 	movi	r3,-1
 5002f9c:	10c00526 	beq	r2,r3,5002fb4 <_fstat_r+0x4c>
 5002fa0:	dfc00217 	ldw	ra,8(sp)
 5002fa4:	dc400117 	ldw	r17,4(sp)
 5002fa8:	dc000017 	ldw	r16,0(sp)
 5002fac:	dec00304 	addi	sp,sp,12
 5002fb0:	f800283a 	ret
 5002fb4:	80c00017 	ldw	r3,0(r16)
 5002fb8:	183ff926 	beq	r3,zero,5002fa0 <__alt_data_end+0xff002fa0>
 5002fbc:	88c00015 	stw	r3,0(r17)
 5002fc0:	003ff706 	br	5002fa0 <__alt_data_end+0xff002fa0>

05002fc4 <_isatty_r>:
 5002fc4:	defffd04 	addi	sp,sp,-12
 5002fc8:	dc000015 	stw	r16,0(sp)
 5002fcc:	04014074 	movhi	r16,1281
 5002fd0:	dc400115 	stw	r17,4(sp)
 5002fd4:	8424c204 	addi	r16,r16,-27896
 5002fd8:	2023883a 	mov	r17,r4
 5002fdc:	2809883a 	mov	r4,r5
 5002fe0:	dfc00215 	stw	ra,8(sp)
 5002fe4:	80000015 	stw	zero,0(r16)
 5002fe8:	50034740 	call	5003474 <isatty>
 5002fec:	00ffffc4 	movi	r3,-1
 5002ff0:	10c00526 	beq	r2,r3,5003008 <_isatty_r+0x44>
 5002ff4:	dfc00217 	ldw	ra,8(sp)
 5002ff8:	dc400117 	ldw	r17,4(sp)
 5002ffc:	dc000017 	ldw	r16,0(sp)
 5003000:	dec00304 	addi	sp,sp,12
 5003004:	f800283a 	ret
 5003008:	80c00017 	ldw	r3,0(r16)
 500300c:	183ff926 	beq	r3,zero,5002ff4 <__alt_data_end+0xff002ff4>
 5003010:	88c00015 	stw	r3,0(r17)
 5003014:	003ff706 	br	5002ff4 <__alt_data_end+0xff002ff4>

05003018 <__divsi3>:
 5003018:	20001b16 	blt	r4,zero,5003088 <__divsi3+0x70>
 500301c:	000f883a 	mov	r7,zero
 5003020:	28001616 	blt	r5,zero,500307c <__divsi3+0x64>
 5003024:	200d883a 	mov	r6,r4
 5003028:	29001a2e 	bgeu	r5,r4,5003094 <__divsi3+0x7c>
 500302c:	00800804 	movi	r2,32
 5003030:	00c00044 	movi	r3,1
 5003034:	00000106 	br	500303c <__divsi3+0x24>
 5003038:	10000d26 	beq	r2,zero,5003070 <__divsi3+0x58>
 500303c:	294b883a 	add	r5,r5,r5
 5003040:	10bfffc4 	addi	r2,r2,-1
 5003044:	18c7883a 	add	r3,r3,r3
 5003048:	293ffb36 	bltu	r5,r4,5003038 <__alt_data_end+0xff003038>
 500304c:	0005883a 	mov	r2,zero
 5003050:	18000726 	beq	r3,zero,5003070 <__divsi3+0x58>
 5003054:	0005883a 	mov	r2,zero
 5003058:	31400236 	bltu	r6,r5,5003064 <__divsi3+0x4c>
 500305c:	314dc83a 	sub	r6,r6,r5
 5003060:	10c4b03a 	or	r2,r2,r3
 5003064:	1806d07a 	srli	r3,r3,1
 5003068:	280ad07a 	srli	r5,r5,1
 500306c:	183ffa1e 	bne	r3,zero,5003058 <__alt_data_end+0xff003058>
 5003070:	38000126 	beq	r7,zero,5003078 <__divsi3+0x60>
 5003074:	0085c83a 	sub	r2,zero,r2
 5003078:	f800283a 	ret
 500307c:	014bc83a 	sub	r5,zero,r5
 5003080:	39c0005c 	xori	r7,r7,1
 5003084:	003fe706 	br	5003024 <__alt_data_end+0xff003024>
 5003088:	0109c83a 	sub	r4,zero,r4
 500308c:	01c00044 	movi	r7,1
 5003090:	003fe306 	br	5003020 <__alt_data_end+0xff003020>
 5003094:	00c00044 	movi	r3,1
 5003098:	003fee06 	br	5003054 <__alt_data_end+0xff003054>

0500309c <__modsi3>:
 500309c:	20001716 	blt	r4,zero,50030fc <__modsi3+0x60>
 50030a0:	000f883a 	mov	r7,zero
 50030a4:	2005883a 	mov	r2,r4
 50030a8:	28001216 	blt	r5,zero,50030f4 <__modsi3+0x58>
 50030ac:	2900162e 	bgeu	r5,r4,5003108 <__modsi3+0x6c>
 50030b0:	01800804 	movi	r6,32
 50030b4:	00c00044 	movi	r3,1
 50030b8:	00000106 	br	50030c0 <__modsi3+0x24>
 50030bc:	30000a26 	beq	r6,zero,50030e8 <__modsi3+0x4c>
 50030c0:	294b883a 	add	r5,r5,r5
 50030c4:	31bfffc4 	addi	r6,r6,-1
 50030c8:	18c7883a 	add	r3,r3,r3
 50030cc:	293ffb36 	bltu	r5,r4,50030bc <__alt_data_end+0xff0030bc>
 50030d0:	18000526 	beq	r3,zero,50030e8 <__modsi3+0x4c>
 50030d4:	1806d07a 	srli	r3,r3,1
 50030d8:	11400136 	bltu	r2,r5,50030e0 <__modsi3+0x44>
 50030dc:	1145c83a 	sub	r2,r2,r5
 50030e0:	280ad07a 	srli	r5,r5,1
 50030e4:	183ffb1e 	bne	r3,zero,50030d4 <__alt_data_end+0xff0030d4>
 50030e8:	38000126 	beq	r7,zero,50030f0 <__modsi3+0x54>
 50030ec:	0085c83a 	sub	r2,zero,r2
 50030f0:	f800283a 	ret
 50030f4:	014bc83a 	sub	r5,zero,r5
 50030f8:	003fec06 	br	50030ac <__alt_data_end+0xff0030ac>
 50030fc:	0109c83a 	sub	r4,zero,r4
 5003100:	01c00044 	movi	r7,1
 5003104:	003fe706 	br	50030a4 <__alt_data_end+0xff0030a4>
 5003108:	00c00044 	movi	r3,1
 500310c:	003ff106 	br	50030d4 <__alt_data_end+0xff0030d4>

05003110 <__udivsi3>:
 5003110:	200d883a 	mov	r6,r4
 5003114:	2900152e 	bgeu	r5,r4,500316c <__udivsi3+0x5c>
 5003118:	28001416 	blt	r5,zero,500316c <__udivsi3+0x5c>
 500311c:	00800804 	movi	r2,32
 5003120:	00c00044 	movi	r3,1
 5003124:	00000206 	br	5003130 <__udivsi3+0x20>
 5003128:	10000e26 	beq	r2,zero,5003164 <__udivsi3+0x54>
 500312c:	28000516 	blt	r5,zero,5003144 <__udivsi3+0x34>
 5003130:	294b883a 	add	r5,r5,r5
 5003134:	10bfffc4 	addi	r2,r2,-1
 5003138:	18c7883a 	add	r3,r3,r3
 500313c:	293ffa36 	bltu	r5,r4,5003128 <__alt_data_end+0xff003128>
 5003140:	18000826 	beq	r3,zero,5003164 <__udivsi3+0x54>
 5003144:	0005883a 	mov	r2,zero
 5003148:	31400236 	bltu	r6,r5,5003154 <__udivsi3+0x44>
 500314c:	314dc83a 	sub	r6,r6,r5
 5003150:	10c4b03a 	or	r2,r2,r3
 5003154:	1806d07a 	srli	r3,r3,1
 5003158:	280ad07a 	srli	r5,r5,1
 500315c:	183ffa1e 	bne	r3,zero,5003148 <__alt_data_end+0xff003148>
 5003160:	f800283a 	ret
 5003164:	0005883a 	mov	r2,zero
 5003168:	f800283a 	ret
 500316c:	00c00044 	movi	r3,1
 5003170:	003ff406 	br	5003144 <__alt_data_end+0xff003144>

05003174 <__umodsi3>:
 5003174:	2005883a 	mov	r2,r4
 5003178:	2900122e 	bgeu	r5,r4,50031c4 <__umodsi3+0x50>
 500317c:	28001116 	blt	r5,zero,50031c4 <__umodsi3+0x50>
 5003180:	01800804 	movi	r6,32
 5003184:	00c00044 	movi	r3,1
 5003188:	00000206 	br	5003194 <__umodsi3+0x20>
 500318c:	30000c26 	beq	r6,zero,50031c0 <__umodsi3+0x4c>
 5003190:	28000516 	blt	r5,zero,50031a8 <__umodsi3+0x34>
 5003194:	294b883a 	add	r5,r5,r5
 5003198:	31bfffc4 	addi	r6,r6,-1
 500319c:	18c7883a 	add	r3,r3,r3
 50031a0:	293ffa36 	bltu	r5,r4,500318c <__alt_data_end+0xff00318c>
 50031a4:	18000626 	beq	r3,zero,50031c0 <__umodsi3+0x4c>
 50031a8:	1806d07a 	srli	r3,r3,1
 50031ac:	11400136 	bltu	r2,r5,50031b4 <__umodsi3+0x40>
 50031b0:	1145c83a 	sub	r2,r2,r5
 50031b4:	280ad07a 	srli	r5,r5,1
 50031b8:	183ffb1e 	bne	r3,zero,50031a8 <__alt_data_end+0xff0031a8>
 50031bc:	f800283a 	ret
 50031c0:	f800283a 	ret
 50031c4:	00c00044 	movi	r3,1
 50031c8:	003ff706 	br	50031a8 <__alt_data_end+0xff0031a8>

050031cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50031cc:	defffe04 	addi	sp,sp,-8
 50031d0:	dfc00115 	stw	ra,4(sp)
 50031d4:	df000015 	stw	fp,0(sp)
 50031d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50031dc:	d0a00c17 	ldw	r2,-32720(gp)
 50031e0:	10000326 	beq	r2,zero,50031f0 <alt_get_errno+0x24>
 50031e4:	d0a00c17 	ldw	r2,-32720(gp)
 50031e8:	103ee83a 	callr	r2
 50031ec:	00000106 	br	50031f4 <alt_get_errno+0x28>
 50031f0:	d0a6ba04 	addi	r2,gp,-25880
}
 50031f4:	e037883a 	mov	sp,fp
 50031f8:	dfc00117 	ldw	ra,4(sp)
 50031fc:	df000017 	ldw	fp,0(sp)
 5003200:	dec00204 	addi	sp,sp,8
 5003204:	f800283a 	ret

05003208 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 5003208:	defffb04 	addi	sp,sp,-20
 500320c:	dfc00415 	stw	ra,16(sp)
 5003210:	df000315 	stw	fp,12(sp)
 5003214:	df000304 	addi	fp,sp,12
 5003218:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 500321c:	e0bfff17 	ldw	r2,-4(fp)
 5003220:	10000616 	blt	r2,zero,500323c <close+0x34>
 5003224:	e0bfff17 	ldw	r2,-4(fp)
 5003228:	10c00324 	muli	r3,r2,12
 500322c:	00814034 	movhi	r2,1280
 5003230:	10998c04 	addi	r2,r2,26160
 5003234:	1885883a 	add	r2,r3,r2
 5003238:	00000106 	br	5003240 <close+0x38>
 500323c:	0005883a 	mov	r2,zero
 5003240:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 5003244:	e0bffd17 	ldw	r2,-12(fp)
 5003248:	10001926 	beq	r2,zero,50032b0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 500324c:	e0bffd17 	ldw	r2,-12(fp)
 5003250:	10800017 	ldw	r2,0(r2)
 5003254:	10800417 	ldw	r2,16(r2)
 5003258:	10000626 	beq	r2,zero,5003274 <close+0x6c>
 500325c:	e0bffd17 	ldw	r2,-12(fp)
 5003260:	10800017 	ldw	r2,0(r2)
 5003264:	10800417 	ldw	r2,16(r2)
 5003268:	e13ffd17 	ldw	r4,-12(fp)
 500326c:	103ee83a 	callr	r2
 5003270:	00000106 	br	5003278 <close+0x70>
 5003274:	0005883a 	mov	r2,zero
 5003278:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 500327c:	e13fff17 	ldw	r4,-4(fp)
 5003280:	50039100 	call	5003910 <alt_release_fd>
    if (rval < 0)
 5003284:	e0bffe17 	ldw	r2,-8(fp)
 5003288:	1000070e 	bge	r2,zero,50032a8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 500328c:	50031cc0 	call	50031cc <alt_get_errno>
 5003290:	1007883a 	mov	r3,r2
 5003294:	e0bffe17 	ldw	r2,-8(fp)
 5003298:	0085c83a 	sub	r2,zero,r2
 500329c:	18800015 	stw	r2,0(r3)
      return -1;
 50032a0:	00bfffc4 	movi	r2,-1
 50032a4:	00000706 	br	50032c4 <close+0xbc>
    }
    return 0;
 50032a8:	0005883a 	mov	r2,zero
 50032ac:	00000506 	br	50032c4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 50032b0:	50031cc0 	call	50031cc <alt_get_errno>
 50032b4:	1007883a 	mov	r3,r2
 50032b8:	00801444 	movi	r2,81
 50032bc:	18800015 	stw	r2,0(r3)
    return -1;
 50032c0:	00bfffc4 	movi	r2,-1
  }
}
 50032c4:	e037883a 	mov	sp,fp
 50032c8:	dfc00117 	ldw	ra,4(sp)
 50032cc:	df000017 	ldw	fp,0(sp)
 50032d0:	dec00204 	addi	sp,sp,8
 50032d4:	f800283a 	ret

050032d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 50032d8:	defffe04 	addi	sp,sp,-8
 50032dc:	df000115 	stw	fp,4(sp)
 50032e0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 50032e4:	e03fff15 	stw	zero,-4(fp)
 50032e8:	00000506 	br	5003300 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 50032ec:	e0bfff17 	ldw	r2,-4(fp)
 50032f0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 50032f4:	e0bfff17 	ldw	r2,-4(fp)
 50032f8:	10800804 	addi	r2,r2,32
 50032fc:	e0bfff15 	stw	r2,-4(fp)
 5003300:	e0bfff17 	ldw	r2,-4(fp)
 5003304:	10820030 	cmpltui	r2,r2,2048
 5003308:	103ff81e 	bne	r2,zero,50032ec <__alt_data_end+0xff0032ec>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 500330c:	0001883a 	nop
 5003310:	e037883a 	mov	sp,fp
 5003314:	df000017 	ldw	fp,0(sp)
 5003318:	dec00104 	addi	sp,sp,4
 500331c:	f800283a 	ret

05003320 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 5003320:	defffc04 	addi	sp,sp,-16
 5003324:	df000315 	stw	fp,12(sp)
 5003328:	df000304 	addi	fp,sp,12
 500332c:	e13ffd15 	stw	r4,-12(fp)
 5003330:	e17ffe15 	stw	r5,-8(fp)
 5003334:	e1bfff15 	stw	r6,-4(fp)
  return len;
 5003338:	e0bfff17 	ldw	r2,-4(fp)
}
 500333c:	e037883a 	mov	sp,fp
 5003340:	df000017 	ldw	fp,0(sp)
 5003344:	dec00104 	addi	sp,sp,4
 5003348:	f800283a 	ret

0500334c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 500334c:	defffe04 	addi	sp,sp,-8
 5003350:	dfc00115 	stw	ra,4(sp)
 5003354:	df000015 	stw	fp,0(sp)
 5003358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500335c:	d0a00c17 	ldw	r2,-32720(gp)
 5003360:	10000326 	beq	r2,zero,5003370 <alt_get_errno+0x24>
 5003364:	d0a00c17 	ldw	r2,-32720(gp)
 5003368:	103ee83a 	callr	r2
 500336c:	00000106 	br	5003374 <alt_get_errno+0x28>
 5003370:	d0a6ba04 	addi	r2,gp,-25880
}
 5003374:	e037883a 	mov	sp,fp
 5003378:	dfc00117 	ldw	ra,4(sp)
 500337c:	df000017 	ldw	fp,0(sp)
 5003380:	dec00204 	addi	sp,sp,8
 5003384:	f800283a 	ret

05003388 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 5003388:	defffb04 	addi	sp,sp,-20
 500338c:	dfc00415 	stw	ra,16(sp)
 5003390:	df000315 	stw	fp,12(sp)
 5003394:	df000304 	addi	fp,sp,12
 5003398:	e13ffe15 	stw	r4,-8(fp)
 500339c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50033a0:	e0bffe17 	ldw	r2,-8(fp)
 50033a4:	10000616 	blt	r2,zero,50033c0 <fstat+0x38>
 50033a8:	e0bffe17 	ldw	r2,-8(fp)
 50033ac:	10c00324 	muli	r3,r2,12
 50033b0:	00814034 	movhi	r2,1280
 50033b4:	10998c04 	addi	r2,r2,26160
 50033b8:	1885883a 	add	r2,r3,r2
 50033bc:	00000106 	br	50033c4 <fstat+0x3c>
 50033c0:	0005883a 	mov	r2,zero
 50033c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 50033c8:	e0bffd17 	ldw	r2,-12(fp)
 50033cc:	10001026 	beq	r2,zero,5003410 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 50033d0:	e0bffd17 	ldw	r2,-12(fp)
 50033d4:	10800017 	ldw	r2,0(r2)
 50033d8:	10800817 	ldw	r2,32(r2)
 50033dc:	10000726 	beq	r2,zero,50033fc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 50033e0:	e0bffd17 	ldw	r2,-12(fp)
 50033e4:	10800017 	ldw	r2,0(r2)
 50033e8:	10800817 	ldw	r2,32(r2)
 50033ec:	e17fff17 	ldw	r5,-4(fp)
 50033f0:	e13ffd17 	ldw	r4,-12(fp)
 50033f4:	103ee83a 	callr	r2
 50033f8:	00000a06 	br	5003424 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 50033fc:	e0bfff17 	ldw	r2,-4(fp)
 5003400:	00c80004 	movi	r3,8192
 5003404:	10c00115 	stw	r3,4(r2)
      return 0;
 5003408:	0005883a 	mov	r2,zero
 500340c:	00000506 	br	5003424 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5003410:	500334c0 	call	500334c <alt_get_errno>
 5003414:	1007883a 	mov	r3,r2
 5003418:	00801444 	movi	r2,81
 500341c:	18800015 	stw	r2,0(r3)
    return -1;
 5003420:	00bfffc4 	movi	r2,-1
  }
}
 5003424:	e037883a 	mov	sp,fp
 5003428:	dfc00117 	ldw	ra,4(sp)
 500342c:	df000017 	ldw	fp,0(sp)
 5003430:	dec00204 	addi	sp,sp,8
 5003434:	f800283a 	ret

05003438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003438:	defffe04 	addi	sp,sp,-8
 500343c:	dfc00115 	stw	ra,4(sp)
 5003440:	df000015 	stw	fp,0(sp)
 5003444:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003448:	d0a00c17 	ldw	r2,-32720(gp)
 500344c:	10000326 	beq	r2,zero,500345c <alt_get_errno+0x24>
 5003450:	d0a00c17 	ldw	r2,-32720(gp)
 5003454:	103ee83a 	callr	r2
 5003458:	00000106 	br	5003460 <alt_get_errno+0x28>
 500345c:	d0a6ba04 	addi	r2,gp,-25880
}
 5003460:	e037883a 	mov	sp,fp
 5003464:	dfc00117 	ldw	ra,4(sp)
 5003468:	df000017 	ldw	fp,0(sp)
 500346c:	dec00204 	addi	sp,sp,8
 5003470:	f800283a 	ret

05003474 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 5003474:	deffed04 	addi	sp,sp,-76
 5003478:	dfc01215 	stw	ra,72(sp)
 500347c:	df001115 	stw	fp,68(sp)
 5003480:	df001104 	addi	fp,sp,68
 5003484:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5003488:	e0bfff17 	ldw	r2,-4(fp)
 500348c:	10000616 	blt	r2,zero,50034a8 <isatty+0x34>
 5003490:	e0bfff17 	ldw	r2,-4(fp)
 5003494:	10c00324 	muli	r3,r2,12
 5003498:	00814034 	movhi	r2,1280
 500349c:	10998c04 	addi	r2,r2,26160
 50034a0:	1885883a 	add	r2,r3,r2
 50034a4:	00000106 	br	50034ac <isatty+0x38>
 50034a8:	0005883a 	mov	r2,zero
 50034ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 50034b0:	e0bfef17 	ldw	r2,-68(fp)
 50034b4:	10000e26 	beq	r2,zero,50034f0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 50034b8:	e0bfef17 	ldw	r2,-68(fp)
 50034bc:	10800017 	ldw	r2,0(r2)
 50034c0:	10800817 	ldw	r2,32(r2)
 50034c4:	1000021e 	bne	r2,zero,50034d0 <isatty+0x5c>
    {
      return 1;
 50034c8:	00800044 	movi	r2,1
 50034cc:	00000d06 	br	5003504 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 50034d0:	e0bff004 	addi	r2,fp,-64
 50034d4:	100b883a 	mov	r5,r2
 50034d8:	e13fff17 	ldw	r4,-4(fp)
 50034dc:	50033880 	call	5003388 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 50034e0:	e0bff117 	ldw	r2,-60(fp)
 50034e4:	10880020 	cmpeqi	r2,r2,8192
 50034e8:	10803fcc 	andi	r2,r2,255
 50034ec:	00000506 	br	5003504 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 50034f0:	50034380 	call	5003438 <alt_get_errno>
 50034f4:	1007883a 	mov	r3,r2
 50034f8:	00801444 	movi	r2,81
 50034fc:	18800015 	stw	r2,0(r3)
    return 0;
 5003500:	0005883a 	mov	r2,zero
  }
}
 5003504:	e037883a 	mov	sp,fp
 5003508:	dfc00117 	ldw	ra,4(sp)
 500350c:	df000017 	ldw	fp,0(sp)
 5003510:	dec00204 	addi	sp,sp,8
 5003514:	f800283a 	ret

05003518 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 5003518:	defffc04 	addi	sp,sp,-16
 500351c:	df000315 	stw	fp,12(sp)
 5003520:	df000304 	addi	fp,sp,12
 5003524:	e13ffd15 	stw	r4,-12(fp)
 5003528:	e17ffe15 	stw	r5,-8(fp)
 500352c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 5003530:	e0fffe17 	ldw	r3,-8(fp)
 5003534:	e0bffd17 	ldw	r2,-12(fp)
 5003538:	18800c26 	beq	r3,r2,500356c <alt_load_section+0x54>
  {
    while( to != end )
 500353c:	00000806 	br	5003560 <alt_load_section+0x48>
    {
      *to++ = *from++;
 5003540:	e0bffe17 	ldw	r2,-8(fp)
 5003544:	10c00104 	addi	r3,r2,4
 5003548:	e0fffe15 	stw	r3,-8(fp)
 500354c:	e0fffd17 	ldw	r3,-12(fp)
 5003550:	19000104 	addi	r4,r3,4
 5003554:	e13ffd15 	stw	r4,-12(fp)
 5003558:	18c00017 	ldw	r3,0(r3)
 500355c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 5003560:	e0fffe17 	ldw	r3,-8(fp)
 5003564:	e0bfff17 	ldw	r2,-4(fp)
 5003568:	18bff51e 	bne	r3,r2,5003540 <__alt_data_end+0xff003540>
    {
      *to++ = *from++;
    }
  }
}
 500356c:	0001883a 	nop
 5003570:	e037883a 	mov	sp,fp
 5003574:	df000017 	ldw	fp,0(sp)
 5003578:	dec00104 	addi	sp,sp,4
 500357c:	f800283a 	ret

05003580 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 5003580:	defffe04 	addi	sp,sp,-8
 5003584:	dfc00115 	stw	ra,4(sp)
 5003588:	df000015 	stw	fp,0(sp)
 500358c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 5003590:	01814034 	movhi	r6,1280
 5003594:	319e1b04 	addi	r6,r6,30828
 5003598:	01414034 	movhi	r5,1280
 500359c:	29577704 	addi	r5,r5,24028
 50035a0:	01014034 	movhi	r4,1280
 50035a4:	211e1b04 	addi	r4,r4,30828
 50035a8:	50035180 	call	5003518 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 50035ac:	01814034 	movhi	r6,1280
 50035b0:	31809104 	addi	r6,r6,580
 50035b4:	01414034 	movhi	r5,1280
 50035b8:	29400804 	addi	r5,r5,32
 50035bc:	01014034 	movhi	r4,1280
 50035c0:	21000804 	addi	r4,r4,32
 50035c4:	50035180 	call	5003518 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 50035c8:	01814034 	movhi	r6,1280
 50035cc:	31977704 	addi	r6,r6,24028
 50035d0:	01414034 	movhi	r5,1280
 50035d4:	29573d04 	addi	r5,r5,23796
 50035d8:	01014034 	movhi	r4,1280
 50035dc:	21173d04 	addi	r4,r4,23796
 50035e0:	50035180 	call	5003518 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 50035e4:	50032d80 	call	50032d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 50035e8:	5004e580 	call	5004e58 <alt_icache_flush_all>
}
 50035ec:	0001883a 	nop
 50035f0:	e037883a 	mov	sp,fp
 50035f4:	dfc00117 	ldw	ra,4(sp)
 50035f8:	df000017 	ldw	fp,0(sp)
 50035fc:	dec00204 	addi	sp,sp,8
 5003600:	f800283a 	ret

05003604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003604:	defffe04 	addi	sp,sp,-8
 5003608:	dfc00115 	stw	ra,4(sp)
 500360c:	df000015 	stw	fp,0(sp)
 5003610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003614:	d0a00c17 	ldw	r2,-32720(gp)
 5003618:	10000326 	beq	r2,zero,5003628 <alt_get_errno+0x24>
 500361c:	d0a00c17 	ldw	r2,-32720(gp)
 5003620:	103ee83a 	callr	r2
 5003624:	00000106 	br	500362c <alt_get_errno+0x28>
 5003628:	d0a6ba04 	addi	r2,gp,-25880
}
 500362c:	e037883a 	mov	sp,fp
 5003630:	dfc00117 	ldw	ra,4(sp)
 5003634:	df000017 	ldw	fp,0(sp)
 5003638:	dec00204 	addi	sp,sp,8
 500363c:	f800283a 	ret

05003640 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 5003640:	defff904 	addi	sp,sp,-28
 5003644:	dfc00615 	stw	ra,24(sp)
 5003648:	df000515 	stw	fp,20(sp)
 500364c:	df000504 	addi	fp,sp,20
 5003650:	e13ffd15 	stw	r4,-12(fp)
 5003654:	e17ffe15 	stw	r5,-8(fp)
 5003658:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 500365c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5003660:	e0bffd17 	ldw	r2,-12(fp)
 5003664:	10000616 	blt	r2,zero,5003680 <lseek+0x40>
 5003668:	e0bffd17 	ldw	r2,-12(fp)
 500366c:	10c00324 	muli	r3,r2,12
 5003670:	00814034 	movhi	r2,1280
 5003674:	10998c04 	addi	r2,r2,26160
 5003678:	1885883a 	add	r2,r3,r2
 500367c:	00000106 	br	5003684 <lseek+0x44>
 5003680:	0005883a 	mov	r2,zero
 5003684:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 5003688:	e0bffc17 	ldw	r2,-16(fp)
 500368c:	10001026 	beq	r2,zero,50036d0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 5003690:	e0bffc17 	ldw	r2,-16(fp)
 5003694:	10800017 	ldw	r2,0(r2)
 5003698:	10800717 	ldw	r2,28(r2)
 500369c:	10000926 	beq	r2,zero,50036c4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 50036a0:	e0bffc17 	ldw	r2,-16(fp)
 50036a4:	10800017 	ldw	r2,0(r2)
 50036a8:	10800717 	ldw	r2,28(r2)
 50036ac:	e1bfff17 	ldw	r6,-4(fp)
 50036b0:	e17ffe17 	ldw	r5,-8(fp)
 50036b4:	e13ffc17 	ldw	r4,-16(fp)
 50036b8:	103ee83a 	callr	r2
 50036bc:	e0bffb15 	stw	r2,-20(fp)
 50036c0:	00000506 	br	50036d8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 50036c4:	00bfde84 	movi	r2,-134
 50036c8:	e0bffb15 	stw	r2,-20(fp)
 50036cc:	00000206 	br	50036d8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 50036d0:	00bfebc4 	movi	r2,-81
 50036d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 50036d8:	e0bffb17 	ldw	r2,-20(fp)
 50036dc:	1000070e 	bge	r2,zero,50036fc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 50036e0:	50036040 	call	5003604 <alt_get_errno>
 50036e4:	1007883a 	mov	r3,r2
 50036e8:	e0bffb17 	ldw	r2,-20(fp)
 50036ec:	0085c83a 	sub	r2,zero,r2
 50036f0:	18800015 	stw	r2,0(r3)
    rc = -1;
 50036f4:	00bfffc4 	movi	r2,-1
 50036f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 50036fc:	e0bffb17 	ldw	r2,-20(fp)
}
 5003700:	e037883a 	mov	sp,fp
 5003704:	dfc00117 	ldw	ra,4(sp)
 5003708:	df000017 	ldw	fp,0(sp)
 500370c:	dec00204 	addi	sp,sp,8
 5003710:	f800283a 	ret

05003714 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 5003714:	defffd04 	addi	sp,sp,-12
 5003718:	dfc00215 	stw	ra,8(sp)
 500371c:	df000115 	stw	fp,4(sp)
 5003720:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 5003724:	0009883a 	mov	r4,zero
 5003728:	5003c300 	call	5003c30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 500372c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 5003730:	5003c680 	call	5003c68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 5003734:	01814034 	movhi	r6,1280
 5003738:	31976c04 	addi	r6,r6,23984
 500373c:	01414034 	movhi	r5,1280
 5003740:	29576c04 	addi	r5,r5,23984
 5003744:	01014034 	movhi	r4,1280
 5003748:	21176c04 	addi	r4,r4,23984
 500374c:	50051f00 	call	50051f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 5003750:	5004d080 	call	5004d08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 5003754:	01014034 	movhi	r4,1280
 5003758:	21135a04 	addi	r4,r4,19816
 500375c:	50059600 	call	5005960 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 5003760:	d0a6bb17 	ldw	r2,-25876(gp)
 5003764:	d0e6bc17 	ldw	r3,-25872(gp)
 5003768:	d126bd17 	ldw	r4,-25868(gp)
 500376c:	200d883a 	mov	r6,r4
 5003770:	180b883a 	mov	r5,r3
 5003774:	1009883a 	mov	r4,r2
 5003778:	50003a00 	call	50003a0 <main>
 500377c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 5003780:	01000044 	movi	r4,1
 5003784:	50032080 	call	5003208 <close>
  exit (result);
 5003788:	e13fff17 	ldw	r4,-4(fp)
 500378c:	50059740 	call	5005974 <exit>

05003790 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 5003790:	defffe04 	addi	sp,sp,-8
 5003794:	df000115 	stw	fp,4(sp)
 5003798:	df000104 	addi	fp,sp,4
 500379c:	e13fff15 	stw	r4,-4(fp)
}
 50037a0:	0001883a 	nop
 50037a4:	e037883a 	mov	sp,fp
 50037a8:	df000017 	ldw	fp,0(sp)
 50037ac:	dec00104 	addi	sp,sp,4
 50037b0:	f800283a 	ret

050037b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 50037b4:	defffe04 	addi	sp,sp,-8
 50037b8:	df000115 	stw	fp,4(sp)
 50037bc:	df000104 	addi	fp,sp,4
 50037c0:	e13fff15 	stw	r4,-4(fp)
}
 50037c4:	0001883a 	nop
 50037c8:	e037883a 	mov	sp,fp
 50037cc:	df000017 	ldw	fp,0(sp)
 50037d0:	dec00104 	addi	sp,sp,4
 50037d4:	f800283a 	ret

050037d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50037d8:	defffe04 	addi	sp,sp,-8
 50037dc:	dfc00115 	stw	ra,4(sp)
 50037e0:	df000015 	stw	fp,0(sp)
 50037e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50037e8:	d0a00c17 	ldw	r2,-32720(gp)
 50037ec:	10000326 	beq	r2,zero,50037fc <alt_get_errno+0x24>
 50037f0:	d0a00c17 	ldw	r2,-32720(gp)
 50037f4:	103ee83a 	callr	r2
 50037f8:	00000106 	br	5003800 <alt_get_errno+0x28>
 50037fc:	d0a6ba04 	addi	r2,gp,-25880
}
 5003800:	e037883a 	mov	sp,fp
 5003804:	dfc00117 	ldw	ra,4(sp)
 5003808:	df000017 	ldw	fp,0(sp)
 500380c:	dec00204 	addi	sp,sp,8
 5003810:	f800283a 	ret

05003814 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 5003814:	defff904 	addi	sp,sp,-28
 5003818:	dfc00615 	stw	ra,24(sp)
 500381c:	df000515 	stw	fp,20(sp)
 5003820:	df000504 	addi	fp,sp,20
 5003824:	e13ffd15 	stw	r4,-12(fp)
 5003828:	e17ffe15 	stw	r5,-8(fp)
 500382c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5003830:	e0bffd17 	ldw	r2,-12(fp)
 5003834:	10000616 	blt	r2,zero,5003850 <read+0x3c>
 5003838:	e0bffd17 	ldw	r2,-12(fp)
 500383c:	10c00324 	muli	r3,r2,12
 5003840:	00814034 	movhi	r2,1280
 5003844:	10998c04 	addi	r2,r2,26160
 5003848:	1885883a 	add	r2,r3,r2
 500384c:	00000106 	br	5003854 <read+0x40>
 5003850:	0005883a 	mov	r2,zero
 5003854:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 5003858:	e0bffb17 	ldw	r2,-20(fp)
 500385c:	10002226 	beq	r2,zero,50038e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5003860:	e0bffb17 	ldw	r2,-20(fp)
 5003864:	10800217 	ldw	r2,8(r2)
 5003868:	108000cc 	andi	r2,r2,3
 500386c:	10800060 	cmpeqi	r2,r2,1
 5003870:	1000181e 	bne	r2,zero,50038d4 <read+0xc0>
        (fd->dev->read))
 5003874:	e0bffb17 	ldw	r2,-20(fp)
 5003878:	10800017 	ldw	r2,0(r2)
 500387c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5003880:	10001426 	beq	r2,zero,50038d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 5003884:	e0bffb17 	ldw	r2,-20(fp)
 5003888:	10800017 	ldw	r2,0(r2)
 500388c:	10800517 	ldw	r2,20(r2)
 5003890:	e0ffff17 	ldw	r3,-4(fp)
 5003894:	180d883a 	mov	r6,r3
 5003898:	e17ffe17 	ldw	r5,-8(fp)
 500389c:	e13ffb17 	ldw	r4,-20(fp)
 50038a0:	103ee83a 	callr	r2
 50038a4:	e0bffc15 	stw	r2,-16(fp)
 50038a8:	e0bffc17 	ldw	r2,-16(fp)
 50038ac:	1000070e 	bge	r2,zero,50038cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
 50038b0:	50037d80 	call	50037d8 <alt_get_errno>
 50038b4:	1007883a 	mov	r3,r2
 50038b8:	e0bffc17 	ldw	r2,-16(fp)
 50038bc:	0085c83a 	sub	r2,zero,r2
 50038c0:	18800015 	stw	r2,0(r3)
          return -1;
 50038c4:	00bfffc4 	movi	r2,-1
 50038c8:	00000c06 	br	50038fc <read+0xe8>
        }
        return rval;
 50038cc:	e0bffc17 	ldw	r2,-16(fp)
 50038d0:	00000a06 	br	50038fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 50038d4:	50037d80 	call	50037d8 <alt_get_errno>
 50038d8:	1007883a 	mov	r3,r2
 50038dc:	00800344 	movi	r2,13
 50038e0:	18800015 	stw	r2,0(r3)
 50038e4:	00000406 	br	50038f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 50038e8:	50037d80 	call	50037d8 <alt_get_errno>
 50038ec:	1007883a 	mov	r3,r2
 50038f0:	00801444 	movi	r2,81
 50038f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 50038f8:	00bfffc4 	movi	r2,-1
}
 50038fc:	e037883a 	mov	sp,fp
 5003900:	dfc00117 	ldw	ra,4(sp)
 5003904:	df000017 	ldw	fp,0(sp)
 5003908:	dec00204 	addi	sp,sp,8
 500390c:	f800283a 	ret

05003910 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 5003910:	defffe04 	addi	sp,sp,-8
 5003914:	df000115 	stw	fp,4(sp)
 5003918:	df000104 	addi	fp,sp,4
 500391c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 5003920:	e0bfff17 	ldw	r2,-4(fp)
 5003924:	108000d0 	cmplti	r2,r2,3
 5003928:	10000d1e 	bne	r2,zero,5003960 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 500392c:	00814034 	movhi	r2,1280
 5003930:	10998c04 	addi	r2,r2,26160
 5003934:	e0ffff17 	ldw	r3,-4(fp)
 5003938:	18c00324 	muli	r3,r3,12
 500393c:	10c5883a 	add	r2,r2,r3
 5003940:	10800204 	addi	r2,r2,8
 5003944:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 5003948:	00814034 	movhi	r2,1280
 500394c:	10998c04 	addi	r2,r2,26160
 5003950:	e0ffff17 	ldw	r3,-4(fp)
 5003954:	18c00324 	muli	r3,r3,12
 5003958:	10c5883a 	add	r2,r2,r3
 500395c:	10000015 	stw	zero,0(r2)
  }
}
 5003960:	0001883a 	nop
 5003964:	e037883a 	mov	sp,fp
 5003968:	df000017 	ldw	fp,0(sp)
 500396c:	dec00104 	addi	sp,sp,4
 5003970:	f800283a 	ret

05003974 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 5003974:	defff904 	addi	sp,sp,-28
 5003978:	df000615 	stw	fp,24(sp)
 500397c:	df000604 	addi	fp,sp,24
 5003980:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5003984:	0005303a 	rdctl	r2,status
 5003988:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500398c:	e0fffe17 	ldw	r3,-8(fp)
 5003990:	00bfff84 	movi	r2,-2
 5003994:	1884703a 	and	r2,r3,r2
 5003998:	1001703a 	wrctl	status,r2
  
  return context;
 500399c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 50039a0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 50039a4:	d0a00d17 	ldw	r2,-32716(gp)
 50039a8:	10c000c4 	addi	r3,r2,3
 50039ac:	00bfff04 	movi	r2,-4
 50039b0:	1884703a 	and	r2,r3,r2
 50039b4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 50039b8:	d0e00d17 	ldw	r3,-32716(gp)
 50039bc:	e0bfff17 	ldw	r2,-4(fp)
 50039c0:	1887883a 	add	r3,r3,r2
 50039c4:	00818034 	movhi	r2,1536
 50039c8:	10800004 	addi	r2,r2,0
 50039cc:	10c0062e 	bgeu	r2,r3,50039e8 <sbrk+0x74>
 50039d0:	e0bffb17 	ldw	r2,-20(fp)
 50039d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50039d8:	e0bffa17 	ldw	r2,-24(fp)
 50039dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 50039e0:	00bfffc4 	movi	r2,-1
 50039e4:	00000b06 	br	5003a14 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 50039e8:	d0a00d17 	ldw	r2,-32716(gp)
 50039ec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 50039f0:	d0e00d17 	ldw	r3,-32716(gp)
 50039f4:	e0bfff17 	ldw	r2,-4(fp)
 50039f8:	1885883a 	add	r2,r3,r2
 50039fc:	d0a00d15 	stw	r2,-32716(gp)
 5003a00:	e0bffb17 	ldw	r2,-20(fp)
 5003a04:	e0bffc15 	stw	r2,-16(fp)
 5003a08:	e0bffc17 	ldw	r2,-16(fp)
 5003a0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 5003a10:	e0bffd17 	ldw	r2,-12(fp)
} 
 5003a14:	e037883a 	mov	sp,fp
 5003a18:	df000017 	ldw	fp,0(sp)
 5003a1c:	dec00104 	addi	sp,sp,4
 5003a20:	f800283a 	ret

05003a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003a24:	defffe04 	addi	sp,sp,-8
 5003a28:	dfc00115 	stw	ra,4(sp)
 5003a2c:	df000015 	stw	fp,0(sp)
 5003a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003a34:	d0a00c17 	ldw	r2,-32720(gp)
 5003a38:	10000326 	beq	r2,zero,5003a48 <alt_get_errno+0x24>
 5003a3c:	d0a00c17 	ldw	r2,-32720(gp)
 5003a40:	103ee83a 	callr	r2
 5003a44:	00000106 	br	5003a4c <alt_get_errno+0x28>
 5003a48:	d0a6ba04 	addi	r2,gp,-25880
}
 5003a4c:	e037883a 	mov	sp,fp
 5003a50:	dfc00117 	ldw	ra,4(sp)
 5003a54:	df000017 	ldw	fp,0(sp)
 5003a58:	dec00204 	addi	sp,sp,8
 5003a5c:	f800283a 	ret

05003a60 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 5003a60:	defff904 	addi	sp,sp,-28
 5003a64:	dfc00615 	stw	ra,24(sp)
 5003a68:	df000515 	stw	fp,20(sp)
 5003a6c:	df000504 	addi	fp,sp,20
 5003a70:	e13ffd15 	stw	r4,-12(fp)
 5003a74:	e17ffe15 	stw	r5,-8(fp)
 5003a78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5003a7c:	e0bffd17 	ldw	r2,-12(fp)
 5003a80:	10000616 	blt	r2,zero,5003a9c <write+0x3c>
 5003a84:	e0bffd17 	ldw	r2,-12(fp)
 5003a88:	10c00324 	muli	r3,r2,12
 5003a8c:	00814034 	movhi	r2,1280
 5003a90:	10998c04 	addi	r2,r2,26160
 5003a94:	1885883a 	add	r2,r3,r2
 5003a98:	00000106 	br	5003aa0 <write+0x40>
 5003a9c:	0005883a 	mov	r2,zero
 5003aa0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 5003aa4:	e0bffb17 	ldw	r2,-20(fp)
 5003aa8:	10002126 	beq	r2,zero,5003b30 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 5003aac:	e0bffb17 	ldw	r2,-20(fp)
 5003ab0:	10800217 	ldw	r2,8(r2)
 5003ab4:	108000cc 	andi	r2,r2,3
 5003ab8:	10001826 	beq	r2,zero,5003b1c <write+0xbc>
 5003abc:	e0bffb17 	ldw	r2,-20(fp)
 5003ac0:	10800017 	ldw	r2,0(r2)
 5003ac4:	10800617 	ldw	r2,24(r2)
 5003ac8:	10001426 	beq	r2,zero,5003b1c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 5003acc:	e0bffb17 	ldw	r2,-20(fp)
 5003ad0:	10800017 	ldw	r2,0(r2)
 5003ad4:	10800617 	ldw	r2,24(r2)
 5003ad8:	e0ffff17 	ldw	r3,-4(fp)
 5003adc:	180d883a 	mov	r6,r3
 5003ae0:	e17ffe17 	ldw	r5,-8(fp)
 5003ae4:	e13ffb17 	ldw	r4,-20(fp)
 5003ae8:	103ee83a 	callr	r2
 5003aec:	e0bffc15 	stw	r2,-16(fp)
 5003af0:	e0bffc17 	ldw	r2,-16(fp)
 5003af4:	1000070e 	bge	r2,zero,5003b14 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 5003af8:	5003a240 	call	5003a24 <alt_get_errno>
 5003afc:	1007883a 	mov	r3,r2
 5003b00:	e0bffc17 	ldw	r2,-16(fp)
 5003b04:	0085c83a 	sub	r2,zero,r2
 5003b08:	18800015 	stw	r2,0(r3)
        return -1;
 5003b0c:	00bfffc4 	movi	r2,-1
 5003b10:	00000c06 	br	5003b44 <write+0xe4>
      }
      return rval;
 5003b14:	e0bffc17 	ldw	r2,-16(fp)
 5003b18:	00000a06 	br	5003b44 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 5003b1c:	5003a240 	call	5003a24 <alt_get_errno>
 5003b20:	1007883a 	mov	r3,r2
 5003b24:	00800344 	movi	r2,13
 5003b28:	18800015 	stw	r2,0(r3)
 5003b2c:	00000406 	br	5003b40 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 5003b30:	5003a240 	call	5003a24 <alt_get_errno>
 5003b34:	1007883a 	mov	r3,r2
 5003b38:	00801444 	movi	r2,81
 5003b3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5003b40:	00bfffc4 	movi	r2,-1
}
 5003b44:	e037883a 	mov	sp,fp
 5003b48:	dfc00117 	ldw	ra,4(sp)
 5003b4c:	df000017 	ldw	fp,0(sp)
 5003b50:	dec00204 	addi	sp,sp,8
 5003b54:	f800283a 	ret

05003b58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 5003b58:	defffd04 	addi	sp,sp,-12
 5003b5c:	dfc00215 	stw	ra,8(sp)
 5003b60:	df000115 	stw	fp,4(sp)
 5003b64:	df000104 	addi	fp,sp,4
 5003b68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 5003b6c:	d1600904 	addi	r5,gp,-32732
 5003b70:	e13fff17 	ldw	r4,-4(fp)
 5003b74:	5004c640 	call	5004c64 <alt_dev_llist_insert>
}
 5003b78:	e037883a 	mov	sp,fp
 5003b7c:	dfc00117 	ldw	ra,4(sp)
 5003b80:	df000017 	ldw	fp,0(sp)
 5003b84:	dec00204 	addi	sp,sp,8
 5003b88:	f800283a 	ret

05003b8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003b8c:	defffe04 	addi	sp,sp,-8
 5003b90:	dfc00115 	stw	ra,4(sp)
 5003b94:	df000015 	stw	fp,0(sp)
 5003b98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003b9c:	d0a00c17 	ldw	r2,-32720(gp)
 5003ba0:	10000326 	beq	r2,zero,5003bb0 <alt_get_errno+0x24>
 5003ba4:	d0a00c17 	ldw	r2,-32720(gp)
 5003ba8:	103ee83a 	callr	r2
 5003bac:	00000106 	br	5003bb4 <alt_get_errno+0x28>
 5003bb0:	d0a6ba04 	addi	r2,gp,-25880
}
 5003bb4:	e037883a 	mov	sp,fp
 5003bb8:	dfc00117 	ldw	ra,4(sp)
 5003bbc:	df000017 	ldw	fp,0(sp)
 5003bc0:	dec00204 	addi	sp,sp,8
 5003bc4:	f800283a 	ret

05003bc8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 5003bc8:	defffc04 	addi	sp,sp,-16
 5003bcc:	dfc00315 	stw	ra,12(sp)
 5003bd0:	df000215 	stw	fp,8(sp)
 5003bd4:	df000204 	addi	fp,sp,8
 5003bd8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 5003bdc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 5003be0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 5003be4:	e0bffe17 	ldw	r2,-8(fp)
 5003be8:	1000051e 	bne	r2,zero,5003c00 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 5003bec:	d1600e04 	addi	r5,gp,-32712
 5003bf0:	e13fff17 	ldw	r4,-4(fp)
 5003bf4:	5004c640 	call	5004c64 <alt_dev_llist_insert>
 5003bf8:	e0bffe15 	stw	r2,-8(fp)
 5003bfc:	00000606 	br	5003c18 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 5003c00:	5003b8c0 	call	5003b8c <alt_get_errno>
 5003c04:	1007883a 	mov	r3,r2
 5003c08:	00800304 	movi	r2,12
 5003c0c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 5003c10:	00bffd04 	movi	r2,-12
 5003c14:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 5003c18:	e0bffe17 	ldw	r2,-8(fp)
}
 5003c1c:	e037883a 	mov	sp,fp
 5003c20:	dfc00117 	ldw	ra,4(sp)
 5003c24:	df000017 	ldw	fp,0(sp)
 5003c28:	dec00204 	addi	sp,sp,8
 5003c2c:	f800283a 	ret

05003c30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 5003c30:	defffd04 	addi	sp,sp,-12
 5003c34:	dfc00215 	stw	ra,8(sp)
 5003c38:	df000115 	stw	fp,4(sp)
 5003c3c:	df000104 	addi	fp,sp,4
 5003c40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1, cpu_1);
 5003c44:	50056640 	call	5005664 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 5003c48:	00800044 	movi	r2,1
 5003c4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 5003c50:	0001883a 	nop
 5003c54:	e037883a 	mov	sp,fp
 5003c58:	dfc00117 	ldw	ra,4(sp)
 5003c5c:	df000017 	ldw	fp,0(sp)
 5003c60:	dec00204 	addi	sp,sp,8
 5003c64:	f800283a 	ret

05003c68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 5003c68:	defffe04 	addi	sp,sp,-8
 5003c6c:	dfc00115 	stw	ra,4(sp)
 5003c70:	df000015 	stw	fp,0(sp)
 5003c74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 5003c78:	01c01904 	movi	r7,100
 5003c7c:	01800044 	movi	r6,1
 5003c80:	000b883a 	mov	r5,zero
 5003c84:	01040004 	movi	r4,4096
 5003c88:	5004a800 	call	5004a80 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART1, jtag_uart1);
 5003c8c:	000d883a 	mov	r6,zero
 5003c90:	000b883a 	mov	r5,zero
 5003c94:	01014034 	movhi	r4,1280
 5003c98:	2119f604 	addi	r4,r4,26584
 5003c9c:	5003e380 	call	5003e38 <altera_avalon_jtag_uart_init>
 5003ca0:	01014034 	movhi	r4,1280
 5003ca4:	2119ec04 	addi	r4,r4,26544
 5003ca8:	5003b580 	call	5003b58 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX, mutex);
 5003cac:	01014034 	movhi	r4,1280
 5003cb0:	211e0404 	addi	r4,r4,30736
 5003cb4:	5003bc80 	call	5003bc8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 5003cb8:	0001883a 	nop
}
 5003cbc:	0001883a 	nop
 5003cc0:	e037883a 	mov	sp,fp
 5003cc4:	dfc00117 	ldw	ra,4(sp)
 5003cc8:	df000017 	ldw	fp,0(sp)
 5003ccc:	dec00204 	addi	sp,sp,8
 5003cd0:	f800283a 	ret

05003cd4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 5003cd4:	defffa04 	addi	sp,sp,-24
 5003cd8:	dfc00515 	stw	ra,20(sp)
 5003cdc:	df000415 	stw	fp,16(sp)
 5003ce0:	df000404 	addi	fp,sp,16
 5003ce4:	e13ffd15 	stw	r4,-12(fp)
 5003ce8:	e17ffe15 	stw	r5,-8(fp)
 5003cec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003cf0:	e0bffd17 	ldw	r2,-12(fp)
 5003cf4:	10800017 	ldw	r2,0(r2)
 5003cf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 5003cfc:	e0bffc17 	ldw	r2,-16(fp)
 5003d00:	10c00a04 	addi	r3,r2,40
 5003d04:	e0bffd17 	ldw	r2,-12(fp)
 5003d08:	10800217 	ldw	r2,8(r2)
 5003d0c:	100f883a 	mov	r7,r2
 5003d10:	e1bfff17 	ldw	r6,-4(fp)
 5003d14:	e17ffe17 	ldw	r5,-8(fp)
 5003d18:	1809883a 	mov	r4,r3
 5003d1c:	50042fc0 	call	50042fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 5003d20:	e037883a 	mov	sp,fp
 5003d24:	dfc00117 	ldw	ra,4(sp)
 5003d28:	df000017 	ldw	fp,0(sp)
 5003d2c:	dec00204 	addi	sp,sp,8
 5003d30:	f800283a 	ret

05003d34 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 5003d34:	defffa04 	addi	sp,sp,-24
 5003d38:	dfc00515 	stw	ra,20(sp)
 5003d3c:	df000415 	stw	fp,16(sp)
 5003d40:	df000404 	addi	fp,sp,16
 5003d44:	e13ffd15 	stw	r4,-12(fp)
 5003d48:	e17ffe15 	stw	r5,-8(fp)
 5003d4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003d50:	e0bffd17 	ldw	r2,-12(fp)
 5003d54:	10800017 	ldw	r2,0(r2)
 5003d58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 5003d5c:	e0bffc17 	ldw	r2,-16(fp)
 5003d60:	10c00a04 	addi	r3,r2,40
 5003d64:	e0bffd17 	ldw	r2,-12(fp)
 5003d68:	10800217 	ldw	r2,8(r2)
 5003d6c:	100f883a 	mov	r7,r2
 5003d70:	e1bfff17 	ldw	r6,-4(fp)
 5003d74:	e17ffe17 	ldw	r5,-8(fp)
 5003d78:	1809883a 	mov	r4,r3
 5003d7c:	50045180 	call	5004518 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 5003d80:	e037883a 	mov	sp,fp
 5003d84:	dfc00117 	ldw	ra,4(sp)
 5003d88:	df000017 	ldw	fp,0(sp)
 5003d8c:	dec00204 	addi	sp,sp,8
 5003d90:	f800283a 	ret

05003d94 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 5003d94:	defffc04 	addi	sp,sp,-16
 5003d98:	dfc00315 	stw	ra,12(sp)
 5003d9c:	df000215 	stw	fp,8(sp)
 5003da0:	df000204 	addi	fp,sp,8
 5003da4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003da8:	e0bfff17 	ldw	r2,-4(fp)
 5003dac:	10800017 	ldw	r2,0(r2)
 5003db0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 5003db4:	e0bffe17 	ldw	r2,-8(fp)
 5003db8:	10c00a04 	addi	r3,r2,40
 5003dbc:	e0bfff17 	ldw	r2,-4(fp)
 5003dc0:	10800217 	ldw	r2,8(r2)
 5003dc4:	100b883a 	mov	r5,r2
 5003dc8:	1809883a 	mov	r4,r3
 5003dcc:	50041a40 	call	50041a4 <altera_avalon_jtag_uart_close>
}
 5003dd0:	e037883a 	mov	sp,fp
 5003dd4:	dfc00117 	ldw	ra,4(sp)
 5003dd8:	df000017 	ldw	fp,0(sp)
 5003ddc:	dec00204 	addi	sp,sp,8
 5003de0:	f800283a 	ret

05003de4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 5003de4:	defffa04 	addi	sp,sp,-24
 5003de8:	dfc00515 	stw	ra,20(sp)
 5003dec:	df000415 	stw	fp,16(sp)
 5003df0:	df000404 	addi	fp,sp,16
 5003df4:	e13ffd15 	stw	r4,-12(fp)
 5003df8:	e17ffe15 	stw	r5,-8(fp)
 5003dfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 5003e00:	e0bffd17 	ldw	r2,-12(fp)
 5003e04:	10800017 	ldw	r2,0(r2)
 5003e08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 5003e0c:	e0bffc17 	ldw	r2,-16(fp)
 5003e10:	10800a04 	addi	r2,r2,40
 5003e14:	e1bfff17 	ldw	r6,-4(fp)
 5003e18:	e17ffe17 	ldw	r5,-8(fp)
 5003e1c:	1009883a 	mov	r4,r2
 5003e20:	500420c0 	call	500420c <altera_avalon_jtag_uart_ioctl>
}
 5003e24:	e037883a 	mov	sp,fp
 5003e28:	dfc00117 	ldw	ra,4(sp)
 5003e2c:	df000017 	ldw	fp,0(sp)
 5003e30:	dec00204 	addi	sp,sp,8
 5003e34:	f800283a 	ret

05003e38 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 5003e38:	defffa04 	addi	sp,sp,-24
 5003e3c:	dfc00515 	stw	ra,20(sp)
 5003e40:	df000415 	stw	fp,16(sp)
 5003e44:	df000404 	addi	fp,sp,16
 5003e48:	e13ffd15 	stw	r4,-12(fp)
 5003e4c:	e17ffe15 	stw	r5,-8(fp)
 5003e50:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5003e54:	e0bffd17 	ldw	r2,-12(fp)
 5003e58:	00c00044 	movi	r3,1
 5003e5c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 5003e60:	e0bffd17 	ldw	r2,-12(fp)
 5003e64:	10800017 	ldw	r2,0(r2)
 5003e68:	10800104 	addi	r2,r2,4
 5003e6c:	1007883a 	mov	r3,r2
 5003e70:	e0bffd17 	ldw	r2,-12(fp)
 5003e74:	10800817 	ldw	r2,32(r2)
 5003e78:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 5003e7c:	e0bffe17 	ldw	r2,-8(fp)
 5003e80:	e0ffff17 	ldw	r3,-4(fp)
 5003e84:	d8000015 	stw	zero,0(sp)
 5003e88:	e1fffd17 	ldw	r7,-12(fp)
 5003e8c:	01814034 	movhi	r6,1280
 5003e90:	318fbe04 	addi	r6,r6,16120
 5003e94:	180b883a 	mov	r5,r3
 5003e98:	1009883a 	mov	r4,r2
 5003e9c:	5004e8c0 	call	5004e8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 5003ea0:	e0bffd17 	ldw	r2,-12(fp)
 5003ea4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 5003ea8:	e0bffd17 	ldw	r2,-12(fp)
 5003eac:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5003eb0:	d0e6bf17 	ldw	r3,-25860(gp)
 5003eb4:	e1fffd17 	ldw	r7,-12(fp)
 5003eb8:	01814034 	movhi	r6,1280
 5003ebc:	31904104 	addi	r6,r6,16644
 5003ec0:	180b883a 	mov	r5,r3
 5003ec4:	1009883a 	mov	r4,r2
 5003ec8:	5004afc0 	call	5004afc <alt_alarm_start>
 5003ecc:	1000040e 	bge	r2,zero,5003ee0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 5003ed0:	e0fffd17 	ldw	r3,-12(fp)
 5003ed4:	00a00034 	movhi	r2,32768
 5003ed8:	10bfffc4 	addi	r2,r2,-1
 5003edc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 5003ee0:	0001883a 	nop
 5003ee4:	e037883a 	mov	sp,fp
 5003ee8:	dfc00117 	ldw	ra,4(sp)
 5003eec:	df000017 	ldw	fp,0(sp)
 5003ef0:	dec00204 	addi	sp,sp,8
 5003ef4:	f800283a 	ret

05003ef8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 5003ef8:	defff804 	addi	sp,sp,-32
 5003efc:	df000715 	stw	fp,28(sp)
 5003f00:	df000704 	addi	fp,sp,28
 5003f04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 5003f08:	e0bfff17 	ldw	r2,-4(fp)
 5003f0c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 5003f10:	e0bffb17 	ldw	r2,-20(fp)
 5003f14:	10800017 	ldw	r2,0(r2)
 5003f18:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5003f1c:	e0bffc17 	ldw	r2,-16(fp)
 5003f20:	10800104 	addi	r2,r2,4
 5003f24:	10800037 	ldwio	r2,0(r2)
 5003f28:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 5003f2c:	e0bffd17 	ldw	r2,-12(fp)
 5003f30:	1080c00c 	andi	r2,r2,768
 5003f34:	10006d26 	beq	r2,zero,50040ec <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 5003f38:	e0bffd17 	ldw	r2,-12(fp)
 5003f3c:	1080400c 	andi	r2,r2,256
 5003f40:	10003526 	beq	r2,zero,5004018 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 5003f44:	00800074 	movhi	r2,1
 5003f48:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5003f4c:	e0bffb17 	ldw	r2,-20(fp)
 5003f50:	10800a17 	ldw	r2,40(r2)
 5003f54:	10800044 	addi	r2,r2,1
 5003f58:	1081ffcc 	andi	r2,r2,2047
 5003f5c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 5003f60:	e0bffb17 	ldw	r2,-20(fp)
 5003f64:	10c00b17 	ldw	r3,44(r2)
 5003f68:	e0bffe17 	ldw	r2,-8(fp)
 5003f6c:	18801526 	beq	r3,r2,5003fc4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 5003f70:	e0bffc17 	ldw	r2,-16(fp)
 5003f74:	10800037 	ldwio	r2,0(r2)
 5003f78:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 5003f7c:	e0bff917 	ldw	r2,-28(fp)
 5003f80:	10a0000c 	andi	r2,r2,32768
 5003f84:	10001126 	beq	r2,zero,5003fcc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 5003f88:	e0bffb17 	ldw	r2,-20(fp)
 5003f8c:	10800a17 	ldw	r2,40(r2)
 5003f90:	e0fff917 	ldw	r3,-28(fp)
 5003f94:	1809883a 	mov	r4,r3
 5003f98:	e0fffb17 	ldw	r3,-20(fp)
 5003f9c:	1885883a 	add	r2,r3,r2
 5003fa0:	10800e04 	addi	r2,r2,56
 5003fa4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5003fa8:	e0bffb17 	ldw	r2,-20(fp)
 5003fac:	10800a17 	ldw	r2,40(r2)
 5003fb0:	10800044 	addi	r2,r2,1
 5003fb4:	10c1ffcc 	andi	r3,r2,2047
 5003fb8:	e0bffb17 	ldw	r2,-20(fp)
 5003fbc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 5003fc0:	003fe206 	br	5003f4c <__alt_data_end+0xff003f4c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 5003fc4:	0001883a 	nop
 5003fc8:	00000106 	br	5003fd0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 5003fcc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 5003fd0:	e0bff917 	ldw	r2,-28(fp)
 5003fd4:	10bfffec 	andhi	r2,r2,65535
 5003fd8:	10000f26 	beq	r2,zero,5004018 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5003fdc:	e0bffb17 	ldw	r2,-20(fp)
 5003fe0:	10c00817 	ldw	r3,32(r2)
 5003fe4:	00bfff84 	movi	r2,-2
 5003fe8:	1886703a 	and	r3,r3,r2
 5003fec:	e0bffb17 	ldw	r2,-20(fp)
 5003ff0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 5003ff4:	e0bffc17 	ldw	r2,-16(fp)
 5003ff8:	10800104 	addi	r2,r2,4
 5003ffc:	1007883a 	mov	r3,r2
 5004000:	e0bffb17 	ldw	r2,-20(fp)
 5004004:	10800817 	ldw	r2,32(r2)
 5004008:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 500400c:	e0bffc17 	ldw	r2,-16(fp)
 5004010:	10800104 	addi	r2,r2,4
 5004014:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 5004018:	e0bffd17 	ldw	r2,-12(fp)
 500401c:	1080800c 	andi	r2,r2,512
 5004020:	103fbe26 	beq	r2,zero,5003f1c <__alt_data_end+0xff003f1c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 5004024:	e0bffd17 	ldw	r2,-12(fp)
 5004028:	1004d43a 	srli	r2,r2,16
 500402c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 5004030:	00001406 	br	5004084 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 5004034:	e0bffc17 	ldw	r2,-16(fp)
 5004038:	e0fffb17 	ldw	r3,-20(fp)
 500403c:	18c00d17 	ldw	r3,52(r3)
 5004040:	e13ffb17 	ldw	r4,-20(fp)
 5004044:	20c7883a 	add	r3,r4,r3
 5004048:	18c20e04 	addi	r3,r3,2104
 500404c:	18c00003 	ldbu	r3,0(r3)
 5004050:	18c03fcc 	andi	r3,r3,255
 5004054:	18c0201c 	xori	r3,r3,128
 5004058:	18ffe004 	addi	r3,r3,-128
 500405c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5004060:	e0bffb17 	ldw	r2,-20(fp)
 5004064:	10800d17 	ldw	r2,52(r2)
 5004068:	10800044 	addi	r2,r2,1
 500406c:	10c1ffcc 	andi	r3,r2,2047
 5004070:	e0bffb17 	ldw	r2,-20(fp)
 5004074:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 5004078:	e0bffa17 	ldw	r2,-24(fp)
 500407c:	10bfffc4 	addi	r2,r2,-1
 5004080:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 5004084:	e0bffa17 	ldw	r2,-24(fp)
 5004088:	10000526 	beq	r2,zero,50040a0 <altera_avalon_jtag_uart_irq+0x1a8>
 500408c:	e0bffb17 	ldw	r2,-20(fp)
 5004090:	10c00d17 	ldw	r3,52(r2)
 5004094:	e0bffb17 	ldw	r2,-20(fp)
 5004098:	10800c17 	ldw	r2,48(r2)
 500409c:	18bfe51e 	bne	r3,r2,5004034 <__alt_data_end+0xff004034>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 50040a0:	e0bffa17 	ldw	r2,-24(fp)
 50040a4:	103f9d26 	beq	r2,zero,5003f1c <__alt_data_end+0xff003f1c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 50040a8:	e0bffb17 	ldw	r2,-20(fp)
 50040ac:	10c00817 	ldw	r3,32(r2)
 50040b0:	00bfff44 	movi	r2,-3
 50040b4:	1886703a 	and	r3,r3,r2
 50040b8:	e0bffb17 	ldw	r2,-20(fp)
 50040bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 50040c0:	e0bffb17 	ldw	r2,-20(fp)
 50040c4:	10800017 	ldw	r2,0(r2)
 50040c8:	10800104 	addi	r2,r2,4
 50040cc:	1007883a 	mov	r3,r2
 50040d0:	e0bffb17 	ldw	r2,-20(fp)
 50040d4:	10800817 	ldw	r2,32(r2)
 50040d8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 50040dc:	e0bffc17 	ldw	r2,-16(fp)
 50040e0:	10800104 	addi	r2,r2,4
 50040e4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 50040e8:	003f8c06 	br	5003f1c <__alt_data_end+0xff003f1c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 50040ec:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 50040f0:	0001883a 	nop
 50040f4:	e037883a 	mov	sp,fp
 50040f8:	df000017 	ldw	fp,0(sp)
 50040fc:	dec00104 	addi	sp,sp,4
 5004100:	f800283a 	ret

05004104 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 5004104:	defff804 	addi	sp,sp,-32
 5004108:	df000715 	stw	fp,28(sp)
 500410c:	df000704 	addi	fp,sp,28
 5004110:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 5004114:	e0bffb17 	ldw	r2,-20(fp)
 5004118:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 500411c:	e0bff917 	ldw	r2,-28(fp)
 5004120:	10800017 	ldw	r2,0(r2)
 5004124:	10800104 	addi	r2,r2,4
 5004128:	10800037 	ldwio	r2,0(r2)
 500412c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 5004130:	e0bffa17 	ldw	r2,-24(fp)
 5004134:	1081000c 	andi	r2,r2,1024
 5004138:	10000b26 	beq	r2,zero,5004168 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 500413c:	e0bff917 	ldw	r2,-28(fp)
 5004140:	10800017 	ldw	r2,0(r2)
 5004144:	10800104 	addi	r2,r2,4
 5004148:	1007883a 	mov	r3,r2
 500414c:	e0bff917 	ldw	r2,-28(fp)
 5004150:	10800817 	ldw	r2,32(r2)
 5004154:	10810014 	ori	r2,r2,1024
 5004158:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 500415c:	e0bff917 	ldw	r2,-28(fp)
 5004160:	10000915 	stw	zero,36(r2)
 5004164:	00000a06 	br	5004190 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 5004168:	e0bff917 	ldw	r2,-28(fp)
 500416c:	10c00917 	ldw	r3,36(r2)
 5004170:	00a00034 	movhi	r2,32768
 5004174:	10bfff04 	addi	r2,r2,-4
 5004178:	10c00536 	bltu	r2,r3,5004190 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 500417c:	e0bff917 	ldw	r2,-28(fp)
 5004180:	10800917 	ldw	r2,36(r2)
 5004184:	10c00044 	addi	r3,r2,1
 5004188:	e0bff917 	ldw	r2,-28(fp)
 500418c:	10c00915 	stw	r3,36(r2)
 5004190:	d0a6bf17 	ldw	r2,-25860(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 5004194:	e037883a 	mov	sp,fp
 5004198:	df000017 	ldw	fp,0(sp)
 500419c:	dec00104 	addi	sp,sp,4
 50041a0:	f800283a 	ret

050041a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 50041a4:	defffd04 	addi	sp,sp,-12
 50041a8:	df000215 	stw	fp,8(sp)
 50041ac:	df000204 	addi	fp,sp,8
 50041b0:	e13ffe15 	stw	r4,-8(fp)
 50041b4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 50041b8:	00000506 	br	50041d0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 50041bc:	e0bfff17 	ldw	r2,-4(fp)
 50041c0:	1090000c 	andi	r2,r2,16384
 50041c4:	10000226 	beq	r2,zero,50041d0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 50041c8:	00bffd44 	movi	r2,-11
 50041cc:	00000b06 	br	50041fc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 50041d0:	e0bffe17 	ldw	r2,-8(fp)
 50041d4:	10c00d17 	ldw	r3,52(r2)
 50041d8:	e0bffe17 	ldw	r2,-8(fp)
 50041dc:	10800c17 	ldw	r2,48(r2)
 50041e0:	18800526 	beq	r3,r2,50041f8 <altera_avalon_jtag_uart_close+0x54>
 50041e4:	e0bffe17 	ldw	r2,-8(fp)
 50041e8:	10c00917 	ldw	r3,36(r2)
 50041ec:	e0bffe17 	ldw	r2,-8(fp)
 50041f0:	10800117 	ldw	r2,4(r2)
 50041f4:	18bff136 	bltu	r3,r2,50041bc <__alt_data_end+0xff0041bc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 50041f8:	0005883a 	mov	r2,zero
}
 50041fc:	e037883a 	mov	sp,fp
 5004200:	df000017 	ldw	fp,0(sp)
 5004204:	dec00104 	addi	sp,sp,4
 5004208:	f800283a 	ret

0500420c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 500420c:	defffa04 	addi	sp,sp,-24
 5004210:	df000515 	stw	fp,20(sp)
 5004214:	df000504 	addi	fp,sp,20
 5004218:	e13ffd15 	stw	r4,-12(fp)
 500421c:	e17ffe15 	stw	r5,-8(fp)
 5004220:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 5004224:	00bff9c4 	movi	r2,-25
 5004228:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 500422c:	e0bffe17 	ldw	r2,-8(fp)
 5004230:	10da8060 	cmpeqi	r3,r2,27137
 5004234:	1800031e 	bne	r3,zero,5004244 <altera_avalon_jtag_uart_ioctl+0x38>
 5004238:	109a80a0 	cmpeqi	r2,r2,27138
 500423c:	1000181e 	bne	r2,zero,50042a0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 5004240:	00002906 	br	50042e8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 5004244:	e0bffd17 	ldw	r2,-12(fp)
 5004248:	10c00117 	ldw	r3,4(r2)
 500424c:	00a00034 	movhi	r2,32768
 5004250:	10bfffc4 	addi	r2,r2,-1
 5004254:	18802126 	beq	r3,r2,50042dc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 5004258:	e0bfff17 	ldw	r2,-4(fp)
 500425c:	10800017 	ldw	r2,0(r2)
 5004260:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 5004264:	e0bffc17 	ldw	r2,-16(fp)
 5004268:	10800090 	cmplti	r2,r2,2
 500426c:	1000061e 	bne	r2,zero,5004288 <altera_avalon_jtag_uart_ioctl+0x7c>
 5004270:	e0fffc17 	ldw	r3,-16(fp)
 5004274:	00a00034 	movhi	r2,32768
 5004278:	10bfffc4 	addi	r2,r2,-1
 500427c:	18800226 	beq	r3,r2,5004288 <altera_avalon_jtag_uart_ioctl+0x7c>
 5004280:	e0bffc17 	ldw	r2,-16(fp)
 5004284:	00000206 	br	5004290 <altera_avalon_jtag_uart_ioctl+0x84>
 5004288:	00a00034 	movhi	r2,32768
 500428c:	10bfff84 	addi	r2,r2,-2
 5004290:	e0fffd17 	ldw	r3,-12(fp)
 5004294:	18800115 	stw	r2,4(r3)
      rc = 0;
 5004298:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 500429c:	00000f06 	br	50042dc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 50042a0:	e0bffd17 	ldw	r2,-12(fp)
 50042a4:	10c00117 	ldw	r3,4(r2)
 50042a8:	00a00034 	movhi	r2,32768
 50042ac:	10bfffc4 	addi	r2,r2,-1
 50042b0:	18800c26 	beq	r3,r2,50042e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 50042b4:	e0bffd17 	ldw	r2,-12(fp)
 50042b8:	10c00917 	ldw	r3,36(r2)
 50042bc:	e0bffd17 	ldw	r2,-12(fp)
 50042c0:	10800117 	ldw	r2,4(r2)
 50042c4:	1885803a 	cmpltu	r2,r3,r2
 50042c8:	10c03fcc 	andi	r3,r2,255
 50042cc:	e0bfff17 	ldw	r2,-4(fp)
 50042d0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 50042d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 50042d8:	00000206 	br	50042e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 50042dc:	0001883a 	nop
 50042e0:	00000106 	br	50042e8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 50042e4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 50042e8:	e0bffb17 	ldw	r2,-20(fp)
}
 50042ec:	e037883a 	mov	sp,fp
 50042f0:	df000017 	ldw	fp,0(sp)
 50042f4:	dec00104 	addi	sp,sp,4
 50042f8:	f800283a 	ret

050042fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 50042fc:	defff304 	addi	sp,sp,-52
 5004300:	dfc00c15 	stw	ra,48(sp)
 5004304:	df000b15 	stw	fp,44(sp)
 5004308:	df000b04 	addi	fp,sp,44
 500430c:	e13ffc15 	stw	r4,-16(fp)
 5004310:	e17ffd15 	stw	r5,-12(fp)
 5004314:	e1bffe15 	stw	r6,-8(fp)
 5004318:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 500431c:	e0bffd17 	ldw	r2,-12(fp)
 5004320:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 5004324:	00004706 	br	5004444 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 5004328:	e0bffc17 	ldw	r2,-16(fp)
 500432c:	10800a17 	ldw	r2,40(r2)
 5004330:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 5004334:	e0bffc17 	ldw	r2,-16(fp)
 5004338:	10800b17 	ldw	r2,44(r2)
 500433c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 5004340:	e0fff717 	ldw	r3,-36(fp)
 5004344:	e0bff817 	ldw	r2,-32(fp)
 5004348:	18800536 	bltu	r3,r2,5004360 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 500434c:	e0fff717 	ldw	r3,-36(fp)
 5004350:	e0bff817 	ldw	r2,-32(fp)
 5004354:	1885c83a 	sub	r2,r3,r2
 5004358:	e0bff615 	stw	r2,-40(fp)
 500435c:	00000406 	br	5004370 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 5004360:	00c20004 	movi	r3,2048
 5004364:	e0bff817 	ldw	r2,-32(fp)
 5004368:	1885c83a 	sub	r2,r3,r2
 500436c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 5004370:	e0bff617 	ldw	r2,-40(fp)
 5004374:	10001e26 	beq	r2,zero,50043f0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 5004378:	e0fffe17 	ldw	r3,-8(fp)
 500437c:	e0bff617 	ldw	r2,-40(fp)
 5004380:	1880022e 	bgeu	r3,r2,500438c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 5004384:	e0bffe17 	ldw	r2,-8(fp)
 5004388:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 500438c:	e0bffc17 	ldw	r2,-16(fp)
 5004390:	10c00e04 	addi	r3,r2,56
 5004394:	e0bff817 	ldw	r2,-32(fp)
 5004398:	1885883a 	add	r2,r3,r2
 500439c:	e1bff617 	ldw	r6,-40(fp)
 50043a0:	100b883a 	mov	r5,r2
 50043a4:	e13ff517 	ldw	r4,-44(fp)
 50043a8:	50018440 	call	5001844 <memcpy>
      ptr   += n;
 50043ac:	e0fff517 	ldw	r3,-44(fp)
 50043b0:	e0bff617 	ldw	r2,-40(fp)
 50043b4:	1885883a 	add	r2,r3,r2
 50043b8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 50043bc:	e0fffe17 	ldw	r3,-8(fp)
 50043c0:	e0bff617 	ldw	r2,-40(fp)
 50043c4:	1885c83a 	sub	r2,r3,r2
 50043c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50043cc:	e0fff817 	ldw	r3,-32(fp)
 50043d0:	e0bff617 	ldw	r2,-40(fp)
 50043d4:	1885883a 	add	r2,r3,r2
 50043d8:	10c1ffcc 	andi	r3,r2,2047
 50043dc:	e0bffc17 	ldw	r2,-16(fp)
 50043e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 50043e4:	e0bffe17 	ldw	r2,-8(fp)
 50043e8:	00bfcf16 	blt	zero,r2,5004328 <__alt_data_end+0xff004328>
 50043ec:	00000106 	br	50043f4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 50043f0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 50043f4:	e0fff517 	ldw	r3,-44(fp)
 50043f8:	e0bffd17 	ldw	r2,-12(fp)
 50043fc:	1880141e 	bne	r3,r2,5004450 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 5004400:	e0bfff17 	ldw	r2,-4(fp)
 5004404:	1090000c 	andi	r2,r2,16384
 5004408:	1000131e 	bne	r2,zero,5004458 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 500440c:	0001883a 	nop
 5004410:	e0bffc17 	ldw	r2,-16(fp)
 5004414:	10c00a17 	ldw	r3,40(r2)
 5004418:	e0bff717 	ldw	r2,-36(fp)
 500441c:	1880051e 	bne	r3,r2,5004434 <altera_avalon_jtag_uart_read+0x138>
 5004420:	e0bffc17 	ldw	r2,-16(fp)
 5004424:	10c00917 	ldw	r3,36(r2)
 5004428:	e0bffc17 	ldw	r2,-16(fp)
 500442c:	10800117 	ldw	r2,4(r2)
 5004430:	18bff736 	bltu	r3,r2,5004410 <__alt_data_end+0xff004410>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 5004434:	e0bffc17 	ldw	r2,-16(fp)
 5004438:	10c00a17 	ldw	r3,40(r2)
 500443c:	e0bff717 	ldw	r2,-36(fp)
 5004440:	18800726 	beq	r3,r2,5004460 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 5004444:	e0bffe17 	ldw	r2,-8(fp)
 5004448:	00bfb716 	blt	zero,r2,5004328 <__alt_data_end+0xff004328>
 500444c:	00000506 	br	5004464 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 5004450:	0001883a 	nop
 5004454:	00000306 	br	5004464 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 5004458:	0001883a 	nop
 500445c:	00000106 	br	5004464 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 5004460:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 5004464:	e0fff517 	ldw	r3,-44(fp)
 5004468:	e0bffd17 	ldw	r2,-12(fp)
 500446c:	18801826 	beq	r3,r2,50044d0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004470:	0005303a 	rdctl	r2,status
 5004474:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004478:	e0fffb17 	ldw	r3,-20(fp)
 500447c:	00bfff84 	movi	r2,-2
 5004480:	1884703a 	and	r2,r3,r2
 5004484:	1001703a 	wrctl	status,r2
  
  return context;
 5004488:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 500448c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5004490:	e0bffc17 	ldw	r2,-16(fp)
 5004494:	10800817 	ldw	r2,32(r2)
 5004498:	10c00054 	ori	r3,r2,1
 500449c:	e0bffc17 	ldw	r2,-16(fp)
 50044a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 50044a4:	e0bffc17 	ldw	r2,-16(fp)
 50044a8:	10800017 	ldw	r2,0(r2)
 50044ac:	10800104 	addi	r2,r2,4
 50044b0:	1007883a 	mov	r3,r2
 50044b4:	e0bffc17 	ldw	r2,-16(fp)
 50044b8:	10800817 	ldw	r2,32(r2)
 50044bc:	18800035 	stwio	r2,0(r3)
 50044c0:	e0bffa17 	ldw	r2,-24(fp)
 50044c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50044c8:	e0bff917 	ldw	r2,-28(fp)
 50044cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 50044d0:	e0fff517 	ldw	r3,-44(fp)
 50044d4:	e0bffd17 	ldw	r2,-12(fp)
 50044d8:	18800426 	beq	r3,r2,50044ec <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 50044dc:	e0fff517 	ldw	r3,-44(fp)
 50044e0:	e0bffd17 	ldw	r2,-12(fp)
 50044e4:	1885c83a 	sub	r2,r3,r2
 50044e8:	00000606 	br	5004504 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 50044ec:	e0bfff17 	ldw	r2,-4(fp)
 50044f0:	1090000c 	andi	r2,r2,16384
 50044f4:	10000226 	beq	r2,zero,5004500 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 50044f8:	00bffd44 	movi	r2,-11
 50044fc:	00000106 	br	5004504 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 5004500:	00bffec4 	movi	r2,-5
}
 5004504:	e037883a 	mov	sp,fp
 5004508:	dfc00117 	ldw	ra,4(sp)
 500450c:	df000017 	ldw	fp,0(sp)
 5004510:	dec00204 	addi	sp,sp,8
 5004514:	f800283a 	ret

05004518 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 5004518:	defff304 	addi	sp,sp,-52
 500451c:	dfc00c15 	stw	ra,48(sp)
 5004520:	df000b15 	stw	fp,44(sp)
 5004524:	df000b04 	addi	fp,sp,44
 5004528:	e13ffc15 	stw	r4,-16(fp)
 500452c:	e17ffd15 	stw	r5,-12(fp)
 5004530:	e1bffe15 	stw	r6,-8(fp)
 5004534:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 5004538:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 500453c:	e0bffd17 	ldw	r2,-12(fp)
 5004540:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 5004544:	00003706 	br	5004624 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 5004548:	e0bffc17 	ldw	r2,-16(fp)
 500454c:	10800c17 	ldw	r2,48(r2)
 5004550:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 5004554:	e0bffc17 	ldw	r2,-16(fp)
 5004558:	10800d17 	ldw	r2,52(r2)
 500455c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 5004560:	e0fff917 	ldw	r3,-28(fp)
 5004564:	e0bff517 	ldw	r2,-44(fp)
 5004568:	1880062e 	bgeu	r3,r2,5004584 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 500456c:	e0fff517 	ldw	r3,-44(fp)
 5004570:	e0bff917 	ldw	r2,-28(fp)
 5004574:	1885c83a 	sub	r2,r3,r2
 5004578:	10bfffc4 	addi	r2,r2,-1
 500457c:	e0bff615 	stw	r2,-40(fp)
 5004580:	00000b06 	br	50045b0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 5004584:	e0bff517 	ldw	r2,-44(fp)
 5004588:	10000526 	beq	r2,zero,50045a0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 500458c:	00c20004 	movi	r3,2048
 5004590:	e0bff917 	ldw	r2,-28(fp)
 5004594:	1885c83a 	sub	r2,r3,r2
 5004598:	e0bff615 	stw	r2,-40(fp)
 500459c:	00000406 	br	50045b0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 50045a0:	00c1ffc4 	movi	r3,2047
 50045a4:	e0bff917 	ldw	r2,-28(fp)
 50045a8:	1885c83a 	sub	r2,r3,r2
 50045ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 50045b0:	e0bff617 	ldw	r2,-40(fp)
 50045b4:	10001e26 	beq	r2,zero,5004630 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 50045b8:	e0fffe17 	ldw	r3,-8(fp)
 50045bc:	e0bff617 	ldw	r2,-40(fp)
 50045c0:	1880022e 	bgeu	r3,r2,50045cc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 50045c4:	e0bffe17 	ldw	r2,-8(fp)
 50045c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 50045cc:	e0bffc17 	ldw	r2,-16(fp)
 50045d0:	10c20e04 	addi	r3,r2,2104
 50045d4:	e0bff917 	ldw	r2,-28(fp)
 50045d8:	1885883a 	add	r2,r3,r2
 50045dc:	e1bff617 	ldw	r6,-40(fp)
 50045e0:	e17ffd17 	ldw	r5,-12(fp)
 50045e4:	1009883a 	mov	r4,r2
 50045e8:	50018440 	call	5001844 <memcpy>
      ptr   += n;
 50045ec:	e0fffd17 	ldw	r3,-12(fp)
 50045f0:	e0bff617 	ldw	r2,-40(fp)
 50045f4:	1885883a 	add	r2,r3,r2
 50045f8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 50045fc:	e0fffe17 	ldw	r3,-8(fp)
 5004600:	e0bff617 	ldw	r2,-40(fp)
 5004604:	1885c83a 	sub	r2,r3,r2
 5004608:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 500460c:	e0fff917 	ldw	r3,-28(fp)
 5004610:	e0bff617 	ldw	r2,-40(fp)
 5004614:	1885883a 	add	r2,r3,r2
 5004618:	10c1ffcc 	andi	r3,r2,2047
 500461c:	e0bffc17 	ldw	r2,-16(fp)
 5004620:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 5004624:	e0bffe17 	ldw	r2,-8(fp)
 5004628:	00bfc716 	blt	zero,r2,5004548 <__alt_data_end+0xff004548>
 500462c:	00000106 	br	5004634 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 5004630:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004634:	0005303a 	rdctl	r2,status
 5004638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500463c:	e0fffb17 	ldw	r3,-20(fp)
 5004640:	00bfff84 	movi	r2,-2
 5004644:	1884703a 	and	r2,r3,r2
 5004648:	1001703a 	wrctl	status,r2
  
  return context;
 500464c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 5004650:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5004654:	e0bffc17 	ldw	r2,-16(fp)
 5004658:	10800817 	ldw	r2,32(r2)
 500465c:	10c00094 	ori	r3,r2,2
 5004660:	e0bffc17 	ldw	r2,-16(fp)
 5004664:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5004668:	e0bffc17 	ldw	r2,-16(fp)
 500466c:	10800017 	ldw	r2,0(r2)
 5004670:	10800104 	addi	r2,r2,4
 5004674:	1007883a 	mov	r3,r2
 5004678:	e0bffc17 	ldw	r2,-16(fp)
 500467c:	10800817 	ldw	r2,32(r2)
 5004680:	18800035 	stwio	r2,0(r3)
 5004684:	e0bffa17 	ldw	r2,-24(fp)
 5004688:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 500468c:	e0bff817 	ldw	r2,-32(fp)
 5004690:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 5004694:	e0bffe17 	ldw	r2,-8(fp)
 5004698:	0080100e 	bge	zero,r2,50046dc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 500469c:	e0bfff17 	ldw	r2,-4(fp)
 50046a0:	1090000c 	andi	r2,r2,16384
 50046a4:	1000101e 	bne	r2,zero,50046e8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 50046a8:	0001883a 	nop
 50046ac:	e0bffc17 	ldw	r2,-16(fp)
 50046b0:	10c00d17 	ldw	r3,52(r2)
 50046b4:	e0bff517 	ldw	r2,-44(fp)
 50046b8:	1880051e 	bne	r3,r2,50046d0 <altera_avalon_jtag_uart_write+0x1b8>
 50046bc:	e0bffc17 	ldw	r2,-16(fp)
 50046c0:	10c00917 	ldw	r3,36(r2)
 50046c4:	e0bffc17 	ldw	r2,-16(fp)
 50046c8:	10800117 	ldw	r2,4(r2)
 50046cc:	18bff736 	bltu	r3,r2,50046ac <__alt_data_end+0xff0046ac>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 50046d0:	e0bffc17 	ldw	r2,-16(fp)
 50046d4:	10800917 	ldw	r2,36(r2)
 50046d8:	1000051e 	bne	r2,zero,50046f0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 50046dc:	e0bffe17 	ldw	r2,-8(fp)
 50046e0:	00bfd016 	blt	zero,r2,5004624 <__alt_data_end+0xff004624>
 50046e4:	00000306 	br	50046f4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 50046e8:	0001883a 	nop
 50046ec:	00000106 	br	50046f4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 50046f0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 50046f4:	e0fffd17 	ldw	r3,-12(fp)
 50046f8:	e0bff717 	ldw	r2,-36(fp)
 50046fc:	18800426 	beq	r3,r2,5004710 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 5004700:	e0fffd17 	ldw	r3,-12(fp)
 5004704:	e0bff717 	ldw	r2,-36(fp)
 5004708:	1885c83a 	sub	r2,r3,r2
 500470c:	00000606 	br	5004728 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 5004710:	e0bfff17 	ldw	r2,-4(fp)
 5004714:	1090000c 	andi	r2,r2,16384
 5004718:	10000226 	beq	r2,zero,5004724 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 500471c:	00bffd44 	movi	r2,-11
 5004720:	00000106 	br	5004728 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 5004724:	00bffec4 	movi	r2,-5
}
 5004728:	e037883a 	mov	sp,fp
 500472c:	dfc00117 	ldw	ra,4(sp)
 5004730:	df000017 	ldw	fp,0(sp)
 5004734:	dec00204 	addi	sp,sp,8
 5004738:	f800283a 	ret

0500473c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 500473c:	defffe04 	addi	sp,sp,-8
 5004740:	dfc00115 	stw	ra,4(sp)
 5004744:	df000015 	stw	fp,0(sp)
 5004748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500474c:	d0a00c17 	ldw	r2,-32720(gp)
 5004750:	10000326 	beq	r2,zero,5004760 <alt_get_errno+0x24>
 5004754:	d0a00c17 	ldw	r2,-32720(gp)
 5004758:	103ee83a 	callr	r2
 500475c:	00000106 	br	5004764 <alt_get_errno+0x28>
 5004760:	d0a6ba04 	addi	r2,gp,-25880
}
 5004764:	e037883a 	mov	sp,fp
 5004768:	dfc00117 	ldw	ra,4(sp)
 500476c:	df000017 	ldw	fp,0(sp)
 5004770:	dec00204 	addi	sp,sp,8
 5004774:	f800283a 	ret

05004778 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 5004778:	defff904 	addi	sp,sp,-28
 500477c:	df000615 	stw	fp,24(sp)
 5004780:	df000604 	addi	fp,sp,24
 5004784:	e13ffe15 	stw	r4,-8(fp)
 5004788:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 500478c:	00bfffc4 	movi	r2,-1
 5004790:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 5004794:	0005317a 	rdctl	r2,cpuid
 5004798:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 500479c:	e0bffb17 	ldw	r2,-20(fp)
 50047a0:	1006943a 	slli	r3,r2,16
 50047a4:	e0bfff17 	ldw	r2,-4(fp)
 50047a8:	1884b03a 	or	r2,r3,r2
 50047ac:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 50047b0:	e0bffe17 	ldw	r2,-8(fp)
 50047b4:	10800317 	ldw	r2,12(r2)
 50047b8:	e0fffc17 	ldw	r3,-16(fp)
 50047bc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 50047c0:	e0bffe17 	ldw	r2,-8(fp)
 50047c4:	10800317 	ldw	r2,12(r2)
 50047c8:	10800037 	ldwio	r2,0(r2)
 50047cc:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 50047d0:	e0fffd17 	ldw	r3,-12(fp)
 50047d4:	e0bffc17 	ldw	r2,-16(fp)
 50047d8:	1880011e 	bne	r3,r2,50047e0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 50047dc:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 50047e0:	e0bffa17 	ldw	r2,-24(fp)
}
 50047e4:	e037883a 	mov	sp,fp
 50047e8:	df000017 	ldw	fp,0(sp)
 50047ec:	dec00104 	addi	sp,sp,4
 50047f0:	f800283a 	ret

050047f4 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 50047f4:	defffc04 	addi	sp,sp,-16
 50047f8:	dfc00315 	stw	ra,12(sp)
 50047fc:	df000215 	stw	fp,8(sp)
 5004800:	df000204 	addi	fp,sp,8
 5004804:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 5004808:	d1600e04 	addi	r5,gp,-32712
 500480c:	e13fff17 	ldw	r4,-4(fp)
 5004810:	5004dc80 	call	5004dc8 <alt_find_dev>
 5004814:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 5004818:	e0bffe17 	ldw	r2,-8(fp)
 500481c:	1000041e 	bne	r2,zero,5004830 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 5004820:	500473c0 	call	500473c <alt_get_errno>
 5004824:	1007883a 	mov	r3,r2
 5004828:	008004c4 	movi	r2,19
 500482c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 5004830:	e0bffe17 	ldw	r2,-8(fp)
}
 5004834:	e037883a 	mov	sp,fp
 5004838:	dfc00117 	ldw	ra,4(sp)
 500483c:	df000017 	ldw	fp,0(sp)
 5004840:	dec00204 	addi	sp,sp,8
 5004844:	f800283a 	ret

05004848 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 5004848:	defffe04 	addi	sp,sp,-8
 500484c:	df000115 	stw	fp,4(sp)
 5004850:	df000104 	addi	fp,sp,4
 5004854:	e13fff15 	stw	r4,-4(fp)
  return;
 5004858:	0001883a 	nop
}
 500485c:	e037883a 	mov	sp,fp
 5004860:	df000017 	ldw	fp,0(sp)
 5004864:	dec00104 	addi	sp,sp,4
 5004868:	f800283a 	ret

0500486c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 500486c:	defffc04 	addi	sp,sp,-16
 5004870:	dfc00315 	stw	ra,12(sp)
 5004874:	df000215 	stw	fp,8(sp)
 5004878:	df000204 	addi	fp,sp,8
 500487c:	e13ffe15 	stw	r4,-8(fp)
 5004880:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 5004884:	0001883a 	nop
 5004888:	e17fff17 	ldw	r5,-4(fp)
 500488c:	e13ffe17 	ldw	r4,-8(fp)
 5004890:	50047780 	call	5004778 <alt_mutex_trylock>
 5004894:	103ffc1e 	bne	r2,zero,5004888 <__alt_data_end+0xff004888>
}
 5004898:	0001883a 	nop
 500489c:	e037883a 	mov	sp,fp
 50048a0:	dfc00117 	ldw	ra,4(sp)
 50048a4:	df000017 	ldw	fp,0(sp)
 50048a8:	dec00204 	addi	sp,sp,8
 50048ac:	f800283a 	ret

050048b0 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 50048b0:	defffa04 	addi	sp,sp,-24
 50048b4:	dfc00515 	stw	ra,20(sp)
 50048b8:	df000415 	stw	fp,16(sp)
 50048bc:	df000404 	addi	fp,sp,16
 50048c0:	e13ffd15 	stw	r4,-12(fp)
 50048c4:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 50048c8:	e17ffe17 	ldw	r5,-8(fp)
 50048cc:	e13ffd17 	ldw	r4,-12(fp)
 50048d0:	50047780 	call	5004778 <alt_mutex_trylock>
 50048d4:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 50048d8:	e0bffc17 	ldw	r2,-16(fp)
}
 50048dc:	e037883a 	mov	sp,fp
 50048e0:	dfc00117 	ldw	ra,4(sp)
 50048e4:	df000017 	ldw	fp,0(sp)
 50048e8:	dec00204 	addi	sp,sp,8
 50048ec:	f800283a 	ret

050048f0 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 50048f0:	defffd04 	addi	sp,sp,-12
 50048f4:	df000215 	stw	fp,8(sp)
 50048f8:	df000204 	addi	fp,sp,8
 50048fc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 5004900:	0005317a 	rdctl	r2,cpuid
 5004904:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 5004908:	e0bfff17 	ldw	r2,-4(fp)
 500490c:	10800317 	ldw	r2,12(r2)
 5004910:	10800104 	addi	r2,r2,4
 5004914:	00c00044 	movi	r3,1
 5004918:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 500491c:	e0bfff17 	ldw	r2,-4(fp)
 5004920:	10800317 	ldw	r2,12(r2)
 5004924:	e0fffe17 	ldw	r3,-8(fp)
 5004928:	1806943a 	slli	r3,r3,16
 500492c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 5004930:	0001883a 	nop
 5004934:	e037883a 	mov	sp,fp
 5004938:	df000017 	ldw	fp,0(sp)
 500493c:	dec00104 	addi	sp,sp,4
 5004940:	f800283a 	ret

05004944 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 5004944:	defff904 	addi	sp,sp,-28
 5004948:	df000615 	stw	fp,24(sp)
 500494c:	df000604 	addi	fp,sp,24
 5004950:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 5004954:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 5004958:	0005317a 	rdctl	r2,cpuid
 500495c:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 5004960:	e0bfff17 	ldw	r2,-4(fp)
 5004964:	10800317 	ldw	r2,12(r2)
 5004968:	10800037 	ldwio	r2,0(r2)
 500496c:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 5004970:	e0bffc17 	ldw	r2,-16(fp)
 5004974:	1004d43a 	srli	r2,r2,16
 5004978:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 500497c:	e0fffd17 	ldw	r3,-12(fp)
 5004980:	e0bffb17 	ldw	r2,-20(fp)
 5004984:	1880071e 	bne	r3,r2,50049a4 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 5004988:	e0bffc17 	ldw	r2,-16(fp)
 500498c:	10bfffcc 	andi	r2,r2,65535
 5004990:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 5004994:	e0bffe17 	ldw	r2,-8(fp)
 5004998:	10000226 	beq	r2,zero,50049a4 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 500499c:	00800044 	movi	r2,1
 50049a0:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 50049a4:	e0bffa17 	ldw	r2,-24(fp)
}
 50049a8:	e037883a 	mov	sp,fp
 50049ac:	df000017 	ldw	fp,0(sp)
 50049b0:	dec00104 	addi	sp,sp,4
 50049b4:	f800283a 	ret

050049b8 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 50049b8:	defffc04 	addi	sp,sp,-16
 50049bc:	df000315 	stw	fp,12(sp)
 50049c0:	df000304 	addi	fp,sp,12
 50049c4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 50049c8:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 50049cc:	e0bfff17 	ldw	r2,-4(fp)
 50049d0:	10800317 	ldw	r2,12(r2)
 50049d4:	10800104 	addi	r2,r2,4
 50049d8:	10800037 	ldwio	r2,0(r2)
 50049dc:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 50049e0:	e0bffe17 	ldw	r2,-8(fp)
 50049e4:	1080004c 	andi	r2,r2,1
 50049e8:	10000226 	beq	r2,zero,50049f4 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 50049ec:	00800044 	movi	r2,1
 50049f0:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 50049f4:	e0bffd17 	ldw	r2,-12(fp)
}
 50049f8:	e037883a 	mov	sp,fp
 50049fc:	df000017 	ldw	fp,0(sp)
 5004a00:	dec00104 	addi	sp,sp,4
 5004a04:	f800283a 	ret

05004a08 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 5004a08:	defffa04 	addi	sp,sp,-24
 5004a0c:	dfc00515 	stw	ra,20(sp)
 5004a10:	df000415 	stw	fp,16(sp)
 5004a14:	df000404 	addi	fp,sp,16
 5004a18:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 5004a1c:	0007883a 	mov	r3,zero
 5004a20:	e0bfff17 	ldw	r2,-4(fp)
 5004a24:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 5004a28:	e0bfff17 	ldw	r2,-4(fp)
 5004a2c:	10800104 	addi	r2,r2,4
 5004a30:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004a34:	0005303a 	rdctl	r2,status
 5004a38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004a3c:	e0fffd17 	ldw	r3,-12(fp)
 5004a40:	00bfff84 	movi	r2,-2
 5004a44:	1884703a 	and	r2,r3,r2
 5004a48:	1001703a 	wrctl	status,r2
  
  return context;
 5004a4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 5004a50:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 5004a54:	500555c0 	call	500555c <alt_tick>
 5004a58:	e0bffc17 	ldw	r2,-16(fp)
 5004a5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5004a60:	e0bffe17 	ldw	r2,-8(fp)
 5004a64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 5004a68:	0001883a 	nop
 5004a6c:	e037883a 	mov	sp,fp
 5004a70:	dfc00117 	ldw	ra,4(sp)
 5004a74:	df000017 	ldw	fp,0(sp)
 5004a78:	dec00204 	addi	sp,sp,8
 5004a7c:	f800283a 	ret

05004a80 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 5004a80:	defff804 	addi	sp,sp,-32
 5004a84:	dfc00715 	stw	ra,28(sp)
 5004a88:	df000615 	stw	fp,24(sp)
 5004a8c:	df000604 	addi	fp,sp,24
 5004a90:	e13ffc15 	stw	r4,-16(fp)
 5004a94:	e17ffd15 	stw	r5,-12(fp)
 5004a98:	e1bffe15 	stw	r6,-8(fp)
 5004a9c:	e1ffff15 	stw	r7,-4(fp)
 5004aa0:	e0bfff17 	ldw	r2,-4(fp)
 5004aa4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 5004aa8:	d0a6bf17 	ldw	r2,-25860(gp)
 5004aac:	1000021e 	bne	r2,zero,5004ab8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 5004ab0:	e0bffb17 	ldw	r2,-20(fp)
 5004ab4:	d0a6bf15 	stw	r2,-25860(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 5004ab8:	e0bffc17 	ldw	r2,-16(fp)
 5004abc:	10800104 	addi	r2,r2,4
 5004ac0:	00c001c4 	movi	r3,7
 5004ac4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 5004ac8:	d8000015 	stw	zero,0(sp)
 5004acc:	e1fffc17 	ldw	r7,-16(fp)
 5004ad0:	01814034 	movhi	r6,1280
 5004ad4:	31928204 	addi	r6,r6,18952
 5004ad8:	e17ffe17 	ldw	r5,-8(fp)
 5004adc:	e13ffd17 	ldw	r4,-12(fp)
 5004ae0:	5004e8c0 	call	5004e8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 5004ae4:	0001883a 	nop
 5004ae8:	e037883a 	mov	sp,fp
 5004aec:	dfc00117 	ldw	ra,4(sp)
 5004af0:	df000017 	ldw	fp,0(sp)
 5004af4:	dec00204 	addi	sp,sp,8
 5004af8:	f800283a 	ret

05004afc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 5004afc:	defff504 	addi	sp,sp,-44
 5004b00:	df000a15 	stw	fp,40(sp)
 5004b04:	df000a04 	addi	fp,sp,40
 5004b08:	e13ffc15 	stw	r4,-16(fp)
 5004b0c:	e17ffd15 	stw	r5,-12(fp)
 5004b10:	e1bffe15 	stw	r6,-8(fp)
 5004b14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 5004b18:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5004b1c:	d0a6bf17 	ldw	r2,-25860(gp)
  
  if (alt_ticks_per_second ())
 5004b20:	10003c26 	beq	r2,zero,5004c14 <alt_alarm_start+0x118>
  {
    if (alarm)
 5004b24:	e0bffc17 	ldw	r2,-16(fp)
 5004b28:	10003826 	beq	r2,zero,5004c0c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 5004b2c:	e0bffc17 	ldw	r2,-16(fp)
 5004b30:	e0fffe17 	ldw	r3,-8(fp)
 5004b34:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 5004b38:	e0bffc17 	ldw	r2,-16(fp)
 5004b3c:	e0ffff17 	ldw	r3,-4(fp)
 5004b40:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004b44:	0005303a 	rdctl	r2,status
 5004b48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004b4c:	e0fff917 	ldw	r3,-28(fp)
 5004b50:	00bfff84 	movi	r2,-2
 5004b54:	1884703a 	and	r2,r3,r2
 5004b58:	1001703a 	wrctl	status,r2
  
  return context;
 5004b5c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 5004b60:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 5004b64:	d0a6c017 	ldw	r2,-25856(gp)
      
      current_nticks = alt_nticks();
 5004b68:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 5004b6c:	e0fffd17 	ldw	r3,-12(fp)
 5004b70:	e0bff617 	ldw	r2,-40(fp)
 5004b74:	1885883a 	add	r2,r3,r2
 5004b78:	10c00044 	addi	r3,r2,1
 5004b7c:	e0bffc17 	ldw	r2,-16(fp)
 5004b80:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 5004b84:	e0bffc17 	ldw	r2,-16(fp)
 5004b88:	10c00217 	ldw	r3,8(r2)
 5004b8c:	e0bff617 	ldw	r2,-40(fp)
 5004b90:	1880042e 	bgeu	r3,r2,5004ba4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 5004b94:	e0bffc17 	ldw	r2,-16(fp)
 5004b98:	00c00044 	movi	r3,1
 5004b9c:	10c00405 	stb	r3,16(r2)
 5004ba0:	00000206 	br	5004bac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 5004ba4:	e0bffc17 	ldw	r2,-16(fp)
 5004ba8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 5004bac:	e0bffc17 	ldw	r2,-16(fp)
 5004bb0:	d0e01104 	addi	r3,gp,-32700
 5004bb4:	e0fffa15 	stw	r3,-24(fp)
 5004bb8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 5004bbc:	e0bffb17 	ldw	r2,-20(fp)
 5004bc0:	e0fffa17 	ldw	r3,-24(fp)
 5004bc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 5004bc8:	e0bffa17 	ldw	r2,-24(fp)
 5004bcc:	10c00017 	ldw	r3,0(r2)
 5004bd0:	e0bffb17 	ldw	r2,-20(fp)
 5004bd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 5004bd8:	e0bffa17 	ldw	r2,-24(fp)
 5004bdc:	10800017 	ldw	r2,0(r2)
 5004be0:	e0fffb17 	ldw	r3,-20(fp)
 5004be4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 5004be8:	e0bffa17 	ldw	r2,-24(fp)
 5004bec:	e0fffb17 	ldw	r3,-20(fp)
 5004bf0:	10c00015 	stw	r3,0(r2)
 5004bf4:	e0bff817 	ldw	r2,-32(fp)
 5004bf8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5004bfc:	e0bff717 	ldw	r2,-36(fp)
 5004c00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 5004c04:	0005883a 	mov	r2,zero
 5004c08:	00000306 	br	5004c18 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 5004c0c:	00bffa84 	movi	r2,-22
 5004c10:	00000106 	br	5004c18 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 5004c14:	00bfde84 	movi	r2,-134
  }
}
 5004c18:	e037883a 	mov	sp,fp
 5004c1c:	df000017 	ldw	fp,0(sp)
 5004c20:	dec00104 	addi	sp,sp,4
 5004c24:	f800283a 	ret

05004c28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5004c28:	defffe04 	addi	sp,sp,-8
 5004c2c:	dfc00115 	stw	ra,4(sp)
 5004c30:	df000015 	stw	fp,0(sp)
 5004c34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5004c38:	d0a00c17 	ldw	r2,-32720(gp)
 5004c3c:	10000326 	beq	r2,zero,5004c4c <alt_get_errno+0x24>
 5004c40:	d0a00c17 	ldw	r2,-32720(gp)
 5004c44:	103ee83a 	callr	r2
 5004c48:	00000106 	br	5004c50 <alt_get_errno+0x28>
 5004c4c:	d0a6ba04 	addi	r2,gp,-25880
}
 5004c50:	e037883a 	mov	sp,fp
 5004c54:	dfc00117 	ldw	ra,4(sp)
 5004c58:	df000017 	ldw	fp,0(sp)
 5004c5c:	dec00204 	addi	sp,sp,8
 5004c60:	f800283a 	ret

05004c64 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 5004c64:	defffa04 	addi	sp,sp,-24
 5004c68:	dfc00515 	stw	ra,20(sp)
 5004c6c:	df000415 	stw	fp,16(sp)
 5004c70:	df000404 	addi	fp,sp,16
 5004c74:	e13ffe15 	stw	r4,-8(fp)
 5004c78:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 5004c7c:	e0bffe17 	ldw	r2,-8(fp)
 5004c80:	10000326 	beq	r2,zero,5004c90 <alt_dev_llist_insert+0x2c>
 5004c84:	e0bffe17 	ldw	r2,-8(fp)
 5004c88:	10800217 	ldw	r2,8(r2)
 5004c8c:	1000061e 	bne	r2,zero,5004ca8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 5004c90:	5004c280 	call	5004c28 <alt_get_errno>
 5004c94:	1007883a 	mov	r3,r2
 5004c98:	00800584 	movi	r2,22
 5004c9c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 5004ca0:	00bffa84 	movi	r2,-22
 5004ca4:	00001306 	br	5004cf4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 5004ca8:	e0bffe17 	ldw	r2,-8(fp)
 5004cac:	e0ffff17 	ldw	r3,-4(fp)
 5004cb0:	e0fffc15 	stw	r3,-16(fp)
 5004cb4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 5004cb8:	e0bffd17 	ldw	r2,-12(fp)
 5004cbc:	e0fffc17 	ldw	r3,-16(fp)
 5004cc0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 5004cc4:	e0bffc17 	ldw	r2,-16(fp)
 5004cc8:	10c00017 	ldw	r3,0(r2)
 5004ccc:	e0bffd17 	ldw	r2,-12(fp)
 5004cd0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 5004cd4:	e0bffc17 	ldw	r2,-16(fp)
 5004cd8:	10800017 	ldw	r2,0(r2)
 5004cdc:	e0fffd17 	ldw	r3,-12(fp)
 5004ce0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 5004ce4:	e0bffc17 	ldw	r2,-16(fp)
 5004ce8:	e0fffd17 	ldw	r3,-12(fp)
 5004cec:	10c00015 	stw	r3,0(r2)

  return 0;  
 5004cf0:	0005883a 	mov	r2,zero
}
 5004cf4:	e037883a 	mov	sp,fp
 5004cf8:	dfc00117 	ldw	ra,4(sp)
 5004cfc:	df000017 	ldw	fp,0(sp)
 5004d00:	dec00204 	addi	sp,sp,8
 5004d04:	f800283a 	ret

05004d08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 5004d08:	defffd04 	addi	sp,sp,-12
 5004d0c:	dfc00215 	stw	ra,8(sp)
 5004d10:	df000115 	stw	fp,4(sp)
 5004d14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 5004d18:	00814034 	movhi	r2,1280
 5004d1c:	10973c04 	addi	r2,r2,23792
 5004d20:	e0bfff15 	stw	r2,-4(fp)
 5004d24:	00000606 	br	5004d40 <_do_ctors+0x38>
        (*ctor) (); 
 5004d28:	e0bfff17 	ldw	r2,-4(fp)
 5004d2c:	10800017 	ldw	r2,0(r2)
 5004d30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 5004d34:	e0bfff17 	ldw	r2,-4(fp)
 5004d38:	10bfff04 	addi	r2,r2,-4
 5004d3c:	e0bfff15 	stw	r2,-4(fp)
 5004d40:	e0ffff17 	ldw	r3,-4(fp)
 5004d44:	00814034 	movhi	r2,1280
 5004d48:	10973d04 	addi	r2,r2,23796
 5004d4c:	18bff62e 	bgeu	r3,r2,5004d28 <__alt_data_end+0xff004d28>
        (*ctor) (); 
}
 5004d50:	0001883a 	nop
 5004d54:	e037883a 	mov	sp,fp
 5004d58:	dfc00117 	ldw	ra,4(sp)
 5004d5c:	df000017 	ldw	fp,0(sp)
 5004d60:	dec00204 	addi	sp,sp,8
 5004d64:	f800283a 	ret

05004d68 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 5004d68:	defffd04 	addi	sp,sp,-12
 5004d6c:	dfc00215 	stw	ra,8(sp)
 5004d70:	df000115 	stw	fp,4(sp)
 5004d74:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 5004d78:	00814034 	movhi	r2,1280
 5004d7c:	10973c04 	addi	r2,r2,23792
 5004d80:	e0bfff15 	stw	r2,-4(fp)
 5004d84:	00000606 	br	5004da0 <_do_dtors+0x38>
        (*dtor) (); 
 5004d88:	e0bfff17 	ldw	r2,-4(fp)
 5004d8c:	10800017 	ldw	r2,0(r2)
 5004d90:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 5004d94:	e0bfff17 	ldw	r2,-4(fp)
 5004d98:	10bfff04 	addi	r2,r2,-4
 5004d9c:	e0bfff15 	stw	r2,-4(fp)
 5004da0:	e0ffff17 	ldw	r3,-4(fp)
 5004da4:	00814034 	movhi	r2,1280
 5004da8:	10973d04 	addi	r2,r2,23796
 5004dac:	18bff62e 	bgeu	r3,r2,5004d88 <__alt_data_end+0xff004d88>
        (*dtor) (); 
}
 5004db0:	0001883a 	nop
 5004db4:	e037883a 	mov	sp,fp
 5004db8:	dfc00117 	ldw	ra,4(sp)
 5004dbc:	df000017 	ldw	fp,0(sp)
 5004dc0:	dec00204 	addi	sp,sp,8
 5004dc4:	f800283a 	ret

05004dc8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 5004dc8:	defffa04 	addi	sp,sp,-24
 5004dcc:	dfc00515 	stw	ra,20(sp)
 5004dd0:	df000415 	stw	fp,16(sp)
 5004dd4:	df000404 	addi	fp,sp,16
 5004dd8:	e13ffe15 	stw	r4,-8(fp)
 5004ddc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 5004de0:	e0bfff17 	ldw	r2,-4(fp)
 5004de4:	10800017 	ldw	r2,0(r2)
 5004de8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 5004dec:	e13ffe17 	ldw	r4,-8(fp)
 5004df0:	50004d80 	call	50004d8 <strlen>
 5004df4:	10800044 	addi	r2,r2,1
 5004df8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 5004dfc:	00000d06 	br	5004e34 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 5004e00:	e0bffc17 	ldw	r2,-16(fp)
 5004e04:	10800217 	ldw	r2,8(r2)
 5004e08:	e0fffd17 	ldw	r3,-12(fp)
 5004e0c:	180d883a 	mov	r6,r3
 5004e10:	e17ffe17 	ldw	r5,-8(fp)
 5004e14:	1009883a 	mov	r4,r2
 5004e18:	50059ac0 	call	50059ac <memcmp>
 5004e1c:	1000021e 	bne	r2,zero,5004e28 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 5004e20:	e0bffc17 	ldw	r2,-16(fp)
 5004e24:	00000706 	br	5004e44 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 5004e28:	e0bffc17 	ldw	r2,-16(fp)
 5004e2c:	10800017 	ldw	r2,0(r2)
 5004e30:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 5004e34:	e0fffc17 	ldw	r3,-16(fp)
 5004e38:	e0bfff17 	ldw	r2,-4(fp)
 5004e3c:	18bff01e 	bne	r3,r2,5004e00 <__alt_data_end+0xff004e00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 5004e40:	0005883a 	mov	r2,zero
}
 5004e44:	e037883a 	mov	sp,fp
 5004e48:	dfc00117 	ldw	ra,4(sp)
 5004e4c:	df000017 	ldw	fp,0(sp)
 5004e50:	dec00204 	addi	sp,sp,8
 5004e54:	f800283a 	ret

05004e58 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 5004e58:	defffe04 	addi	sp,sp,-8
 5004e5c:	dfc00115 	stw	ra,4(sp)
 5004e60:	df000015 	stw	fp,0(sp)
 5004e64:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 5004e68:	01440004 	movi	r5,4096
 5004e6c:	0009883a 	mov	r4,zero
 5004e70:	50058340 	call	5005834 <alt_icache_flush>
#endif
}
 5004e74:	0001883a 	nop
 5004e78:	e037883a 	mov	sp,fp
 5004e7c:	dfc00117 	ldw	ra,4(sp)
 5004e80:	df000017 	ldw	fp,0(sp)
 5004e84:	dec00204 	addi	sp,sp,8
 5004e88:	f800283a 	ret

05004e8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 5004e8c:	defff904 	addi	sp,sp,-28
 5004e90:	dfc00615 	stw	ra,24(sp)
 5004e94:	df000515 	stw	fp,20(sp)
 5004e98:	df000504 	addi	fp,sp,20
 5004e9c:	e13ffc15 	stw	r4,-16(fp)
 5004ea0:	e17ffd15 	stw	r5,-12(fp)
 5004ea4:	e1bffe15 	stw	r6,-8(fp)
 5004ea8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 5004eac:	e0800217 	ldw	r2,8(fp)
 5004eb0:	d8800015 	stw	r2,0(sp)
 5004eb4:	e1ffff17 	ldw	r7,-4(fp)
 5004eb8:	e1bffe17 	ldw	r6,-8(fp)
 5004ebc:	e17ffd17 	ldw	r5,-12(fp)
 5004ec0:	e13ffc17 	ldw	r4,-16(fp)
 5004ec4:	500503c0 	call	500503c <alt_iic_isr_register>
}  
 5004ec8:	e037883a 	mov	sp,fp
 5004ecc:	dfc00117 	ldw	ra,4(sp)
 5004ed0:	df000017 	ldw	fp,0(sp)
 5004ed4:	dec00204 	addi	sp,sp,8
 5004ed8:	f800283a 	ret

05004edc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 5004edc:	defff904 	addi	sp,sp,-28
 5004ee0:	df000615 	stw	fp,24(sp)
 5004ee4:	df000604 	addi	fp,sp,24
 5004ee8:	e13ffe15 	stw	r4,-8(fp)
 5004eec:	e17fff15 	stw	r5,-4(fp)
 5004ef0:	e0bfff17 	ldw	r2,-4(fp)
 5004ef4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004ef8:	0005303a 	rdctl	r2,status
 5004efc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004f00:	e0fffb17 	ldw	r3,-20(fp)
 5004f04:	00bfff84 	movi	r2,-2
 5004f08:	1884703a 	and	r2,r3,r2
 5004f0c:	1001703a 	wrctl	status,r2
  
  return context;
 5004f10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5004f14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 5004f18:	00c00044 	movi	r3,1
 5004f1c:	e0bffa17 	ldw	r2,-24(fp)
 5004f20:	1884983a 	sll	r2,r3,r2
 5004f24:	1007883a 	mov	r3,r2
 5004f28:	d0a6be17 	ldw	r2,-25864(gp)
 5004f2c:	1884b03a 	or	r2,r3,r2
 5004f30:	d0a6be15 	stw	r2,-25864(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5004f34:	d0a6be17 	ldw	r2,-25864(gp)
 5004f38:	100170fa 	wrctl	ienable,r2
 5004f3c:	e0bffc17 	ldw	r2,-16(fp)
 5004f40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5004f44:	e0bffd17 	ldw	r2,-12(fp)
 5004f48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5004f4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 5004f50:	0001883a 	nop
}
 5004f54:	e037883a 	mov	sp,fp
 5004f58:	df000017 	ldw	fp,0(sp)
 5004f5c:	dec00104 	addi	sp,sp,4
 5004f60:	f800283a 	ret

05004f64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 5004f64:	defff904 	addi	sp,sp,-28
 5004f68:	df000615 	stw	fp,24(sp)
 5004f6c:	df000604 	addi	fp,sp,24
 5004f70:	e13ffe15 	stw	r4,-8(fp)
 5004f74:	e17fff15 	stw	r5,-4(fp)
 5004f78:	e0bfff17 	ldw	r2,-4(fp)
 5004f7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004f80:	0005303a 	rdctl	r2,status
 5004f84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004f88:	e0fffb17 	ldw	r3,-20(fp)
 5004f8c:	00bfff84 	movi	r2,-2
 5004f90:	1884703a 	and	r2,r3,r2
 5004f94:	1001703a 	wrctl	status,r2
  
  return context;
 5004f98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5004f9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 5004fa0:	00c00044 	movi	r3,1
 5004fa4:	e0bffa17 	ldw	r2,-24(fp)
 5004fa8:	1884983a 	sll	r2,r3,r2
 5004fac:	0084303a 	nor	r2,zero,r2
 5004fb0:	1007883a 	mov	r3,r2
 5004fb4:	d0a6be17 	ldw	r2,-25864(gp)
 5004fb8:	1884703a 	and	r2,r3,r2
 5004fbc:	d0a6be15 	stw	r2,-25864(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5004fc0:	d0a6be17 	ldw	r2,-25864(gp)
 5004fc4:	100170fa 	wrctl	ienable,r2
 5004fc8:	e0bffc17 	ldw	r2,-16(fp)
 5004fcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5004fd0:	e0bffd17 	ldw	r2,-12(fp)
 5004fd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5004fd8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 5004fdc:	0001883a 	nop
}
 5004fe0:	e037883a 	mov	sp,fp
 5004fe4:	df000017 	ldw	fp,0(sp)
 5004fe8:	dec00104 	addi	sp,sp,4
 5004fec:	f800283a 	ret

05004ff0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 5004ff0:	defffc04 	addi	sp,sp,-16
 5004ff4:	df000315 	stw	fp,12(sp)
 5004ff8:	df000304 	addi	fp,sp,12
 5004ffc:	e13ffe15 	stw	r4,-8(fp)
 5005000:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 5005004:	000530fa 	rdctl	r2,ienable
 5005008:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 500500c:	00c00044 	movi	r3,1
 5005010:	e0bfff17 	ldw	r2,-4(fp)
 5005014:	1884983a 	sll	r2,r3,r2
 5005018:	1007883a 	mov	r3,r2
 500501c:	e0bffd17 	ldw	r2,-12(fp)
 5005020:	1884703a 	and	r2,r3,r2
 5005024:	1004c03a 	cmpne	r2,r2,zero
 5005028:	10803fcc 	andi	r2,r2,255
}
 500502c:	e037883a 	mov	sp,fp
 5005030:	df000017 	ldw	fp,0(sp)
 5005034:	dec00104 	addi	sp,sp,4
 5005038:	f800283a 	ret

0500503c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 500503c:	defff504 	addi	sp,sp,-44
 5005040:	dfc00a15 	stw	ra,40(sp)
 5005044:	df000915 	stw	fp,36(sp)
 5005048:	df000904 	addi	fp,sp,36
 500504c:	e13ffc15 	stw	r4,-16(fp)
 5005050:	e17ffd15 	stw	r5,-12(fp)
 5005054:	e1bffe15 	stw	r6,-8(fp)
 5005058:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 500505c:	00bffa84 	movi	r2,-22
 5005060:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 5005064:	e0bffd17 	ldw	r2,-12(fp)
 5005068:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 500506c:	e0bff817 	ldw	r2,-32(fp)
 5005070:	10800808 	cmpgei	r2,r2,32
 5005074:	1000271e 	bne	r2,zero,5005114 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5005078:	0005303a 	rdctl	r2,status
 500507c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5005080:	e0fffb17 	ldw	r3,-20(fp)
 5005084:	00bfff84 	movi	r2,-2
 5005088:	1884703a 	and	r2,r3,r2
 500508c:	1001703a 	wrctl	status,r2
  
  return context;
 5005090:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 5005094:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 5005098:	00814074 	movhi	r2,1281
 500509c:	10a4d404 	addi	r2,r2,-27824
 50050a0:	e0fff817 	ldw	r3,-32(fp)
 50050a4:	180690fa 	slli	r3,r3,3
 50050a8:	10c5883a 	add	r2,r2,r3
 50050ac:	e0fffe17 	ldw	r3,-8(fp)
 50050b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 50050b4:	00814074 	movhi	r2,1281
 50050b8:	10a4d404 	addi	r2,r2,-27824
 50050bc:	e0fff817 	ldw	r3,-32(fp)
 50050c0:	180690fa 	slli	r3,r3,3
 50050c4:	10c5883a 	add	r2,r2,r3
 50050c8:	10800104 	addi	r2,r2,4
 50050cc:	e0ffff17 	ldw	r3,-4(fp)
 50050d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 50050d4:	e0bffe17 	ldw	r2,-8(fp)
 50050d8:	10000526 	beq	r2,zero,50050f0 <alt_iic_isr_register+0xb4>
 50050dc:	e0bff817 	ldw	r2,-32(fp)
 50050e0:	100b883a 	mov	r5,r2
 50050e4:	e13ffc17 	ldw	r4,-16(fp)
 50050e8:	5004edc0 	call	5004edc <alt_ic_irq_enable>
 50050ec:	00000406 	br	5005100 <alt_iic_isr_register+0xc4>
 50050f0:	e0bff817 	ldw	r2,-32(fp)
 50050f4:	100b883a 	mov	r5,r2
 50050f8:	e13ffc17 	ldw	r4,-16(fp)
 50050fc:	5004f640 	call	5004f64 <alt_ic_irq_disable>
 5005100:	e0bff715 	stw	r2,-36(fp)
 5005104:	e0bffa17 	ldw	r2,-24(fp)
 5005108:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 500510c:	e0bff917 	ldw	r2,-28(fp)
 5005110:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 5005114:	e0bff717 	ldw	r2,-36(fp)
}
 5005118:	e037883a 	mov	sp,fp
 500511c:	dfc00117 	ldw	ra,4(sp)
 5005120:	df000017 	ldw	fp,0(sp)
 5005124:	dec00204 	addi	sp,sp,8
 5005128:	f800283a 	ret

0500512c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 500512c:	defff904 	addi	sp,sp,-28
 5005130:	dfc00615 	stw	ra,24(sp)
 5005134:	df000515 	stw	fp,20(sp)
 5005138:	df000504 	addi	fp,sp,20
 500513c:	e13ffc15 	stw	r4,-16(fp)
 5005140:	e17ffd15 	stw	r5,-12(fp)
 5005144:	e1bffe15 	stw	r6,-8(fp)
 5005148:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 500514c:	e1bfff17 	ldw	r6,-4(fp)
 5005150:	e17ffe17 	ldw	r5,-8(fp)
 5005154:	e13ffd17 	ldw	r4,-12(fp)
 5005158:	500536c0 	call	500536c <open>
 500515c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 5005160:	e0bffb17 	ldw	r2,-20(fp)
 5005164:	10001c16 	blt	r2,zero,50051d8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 5005168:	00814034 	movhi	r2,1280
 500516c:	10998c04 	addi	r2,r2,26160
 5005170:	e0fffb17 	ldw	r3,-20(fp)
 5005174:	18c00324 	muli	r3,r3,12
 5005178:	10c5883a 	add	r2,r2,r3
 500517c:	10c00017 	ldw	r3,0(r2)
 5005180:	e0bffc17 	ldw	r2,-16(fp)
 5005184:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 5005188:	00814034 	movhi	r2,1280
 500518c:	10998c04 	addi	r2,r2,26160
 5005190:	e0fffb17 	ldw	r3,-20(fp)
 5005194:	18c00324 	muli	r3,r3,12
 5005198:	10c5883a 	add	r2,r2,r3
 500519c:	10800104 	addi	r2,r2,4
 50051a0:	10c00017 	ldw	r3,0(r2)
 50051a4:	e0bffc17 	ldw	r2,-16(fp)
 50051a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 50051ac:	00814034 	movhi	r2,1280
 50051b0:	10998c04 	addi	r2,r2,26160
 50051b4:	e0fffb17 	ldw	r3,-20(fp)
 50051b8:	18c00324 	muli	r3,r3,12
 50051bc:	10c5883a 	add	r2,r2,r3
 50051c0:	10800204 	addi	r2,r2,8
 50051c4:	10c00017 	ldw	r3,0(r2)
 50051c8:	e0bffc17 	ldw	r2,-16(fp)
 50051cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 50051d0:	e13ffb17 	ldw	r4,-20(fp)
 50051d4:	50039100 	call	5003910 <alt_release_fd>
  }
} 
 50051d8:	0001883a 	nop
 50051dc:	e037883a 	mov	sp,fp
 50051e0:	dfc00117 	ldw	ra,4(sp)
 50051e4:	df000017 	ldw	fp,0(sp)
 50051e8:	dec00204 	addi	sp,sp,8
 50051ec:	f800283a 	ret

050051f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 50051f0:	defffb04 	addi	sp,sp,-20
 50051f4:	dfc00415 	stw	ra,16(sp)
 50051f8:	df000315 	stw	fp,12(sp)
 50051fc:	df000304 	addi	fp,sp,12
 5005200:	e13ffd15 	stw	r4,-12(fp)
 5005204:	e17ffe15 	stw	r5,-8(fp)
 5005208:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 500520c:	01c07fc4 	movi	r7,511
 5005210:	01800044 	movi	r6,1
 5005214:	e17ffd17 	ldw	r5,-12(fp)
 5005218:	01014034 	movhi	r4,1280
 500521c:	21198f04 	addi	r4,r4,26172
 5005220:	500512c0 	call	500512c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 5005224:	01c07fc4 	movi	r7,511
 5005228:	000d883a 	mov	r6,zero
 500522c:	e17ffe17 	ldw	r5,-8(fp)
 5005230:	01014034 	movhi	r4,1280
 5005234:	21198c04 	addi	r4,r4,26160
 5005238:	500512c0 	call	500512c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 500523c:	01c07fc4 	movi	r7,511
 5005240:	01800044 	movi	r6,1
 5005244:	e17fff17 	ldw	r5,-4(fp)
 5005248:	01014034 	movhi	r4,1280
 500524c:	21199204 	addi	r4,r4,26184
 5005250:	500512c0 	call	500512c <alt_open_fd>
}  
 5005254:	0001883a 	nop
 5005258:	e037883a 	mov	sp,fp
 500525c:	dfc00117 	ldw	ra,4(sp)
 5005260:	df000017 	ldw	fp,0(sp)
 5005264:	dec00204 	addi	sp,sp,8
 5005268:	f800283a 	ret

0500526c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 500526c:	defffe04 	addi	sp,sp,-8
 5005270:	dfc00115 	stw	ra,4(sp)
 5005274:	df000015 	stw	fp,0(sp)
 5005278:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500527c:	d0a00c17 	ldw	r2,-32720(gp)
 5005280:	10000326 	beq	r2,zero,5005290 <alt_get_errno+0x24>
 5005284:	d0a00c17 	ldw	r2,-32720(gp)
 5005288:	103ee83a 	callr	r2
 500528c:	00000106 	br	5005294 <alt_get_errno+0x28>
 5005290:	d0a6ba04 	addi	r2,gp,-25880
}
 5005294:	e037883a 	mov	sp,fp
 5005298:	dfc00117 	ldw	ra,4(sp)
 500529c:	df000017 	ldw	fp,0(sp)
 50052a0:	dec00204 	addi	sp,sp,8
 50052a4:	f800283a 	ret

050052a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 50052a8:	defffd04 	addi	sp,sp,-12
 50052ac:	df000215 	stw	fp,8(sp)
 50052b0:	df000204 	addi	fp,sp,8
 50052b4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 50052b8:	e0bfff17 	ldw	r2,-4(fp)
 50052bc:	10800217 	ldw	r2,8(r2)
 50052c0:	10d00034 	orhi	r3,r2,16384
 50052c4:	e0bfff17 	ldw	r2,-4(fp)
 50052c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 50052cc:	e03ffe15 	stw	zero,-8(fp)
 50052d0:	00001d06 	br	5005348 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 50052d4:	00814034 	movhi	r2,1280
 50052d8:	10998c04 	addi	r2,r2,26160
 50052dc:	e0fffe17 	ldw	r3,-8(fp)
 50052e0:	18c00324 	muli	r3,r3,12
 50052e4:	10c5883a 	add	r2,r2,r3
 50052e8:	10c00017 	ldw	r3,0(r2)
 50052ec:	e0bfff17 	ldw	r2,-4(fp)
 50052f0:	10800017 	ldw	r2,0(r2)
 50052f4:	1880111e 	bne	r3,r2,500533c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 50052f8:	00814034 	movhi	r2,1280
 50052fc:	10998c04 	addi	r2,r2,26160
 5005300:	e0fffe17 	ldw	r3,-8(fp)
 5005304:	18c00324 	muli	r3,r3,12
 5005308:	10c5883a 	add	r2,r2,r3
 500530c:	10800204 	addi	r2,r2,8
 5005310:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5005314:	1000090e 	bge	r2,zero,500533c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 5005318:	e0bffe17 	ldw	r2,-8(fp)
 500531c:	10c00324 	muli	r3,r2,12
 5005320:	00814034 	movhi	r2,1280
 5005324:	10998c04 	addi	r2,r2,26160
 5005328:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 500532c:	e0bfff17 	ldw	r2,-4(fp)
 5005330:	18800226 	beq	r3,r2,500533c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 5005334:	00bffcc4 	movi	r2,-13
 5005338:	00000806 	br	500535c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 500533c:	e0bffe17 	ldw	r2,-8(fp)
 5005340:	10800044 	addi	r2,r2,1
 5005344:	e0bffe15 	stw	r2,-8(fp)
 5005348:	d0a00b17 	ldw	r2,-32724(gp)
 500534c:	1007883a 	mov	r3,r2
 5005350:	e0bffe17 	ldw	r2,-8(fp)
 5005354:	18bfdf2e 	bgeu	r3,r2,50052d4 <__alt_data_end+0xff0052d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 5005358:	0005883a 	mov	r2,zero
}
 500535c:	e037883a 	mov	sp,fp
 5005360:	df000017 	ldw	fp,0(sp)
 5005364:	dec00104 	addi	sp,sp,4
 5005368:	f800283a 	ret

0500536c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 500536c:	defff604 	addi	sp,sp,-40
 5005370:	dfc00915 	stw	ra,36(sp)
 5005374:	df000815 	stw	fp,32(sp)
 5005378:	df000804 	addi	fp,sp,32
 500537c:	e13ffd15 	stw	r4,-12(fp)
 5005380:	e17ffe15 	stw	r5,-8(fp)
 5005384:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 5005388:	00bfffc4 	movi	r2,-1
 500538c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 5005390:	00bffb44 	movi	r2,-19
 5005394:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 5005398:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 500539c:	d1600904 	addi	r5,gp,-32732
 50053a0:	e13ffd17 	ldw	r4,-12(fp)
 50053a4:	5004dc80 	call	5004dc8 <alt_find_dev>
 50053a8:	e0bff815 	stw	r2,-32(fp)
 50053ac:	e0bff817 	ldw	r2,-32(fp)
 50053b0:	1000051e 	bne	r2,zero,50053c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 50053b4:	e13ffd17 	ldw	r4,-12(fp)
 50053b8:	50056880 	call	5005688 <alt_find_file>
 50053bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 50053c0:	00800044 	movi	r2,1
 50053c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 50053c8:	e0bff817 	ldw	r2,-32(fp)
 50053cc:	10002926 	beq	r2,zero,5005474 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 50053d0:	e13ff817 	ldw	r4,-32(fp)
 50053d4:	50057900 	call	5005790 <alt_get_fd>
 50053d8:	e0bff915 	stw	r2,-28(fp)
 50053dc:	e0bff917 	ldw	r2,-28(fp)
 50053e0:	1000030e 	bge	r2,zero,50053f0 <open+0x84>
    {
      status = index;
 50053e4:	e0bff917 	ldw	r2,-28(fp)
 50053e8:	e0bffa15 	stw	r2,-24(fp)
 50053ec:	00002306 	br	500547c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 50053f0:	e0bff917 	ldw	r2,-28(fp)
 50053f4:	10c00324 	muli	r3,r2,12
 50053f8:	00814034 	movhi	r2,1280
 50053fc:	10998c04 	addi	r2,r2,26160
 5005400:	1885883a 	add	r2,r3,r2
 5005404:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 5005408:	e0fffe17 	ldw	r3,-8(fp)
 500540c:	00900034 	movhi	r2,16384
 5005410:	10bfffc4 	addi	r2,r2,-1
 5005414:	1886703a 	and	r3,r3,r2
 5005418:	e0bffc17 	ldw	r2,-16(fp)
 500541c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 5005420:	e0bffb17 	ldw	r2,-20(fp)
 5005424:	1000051e 	bne	r2,zero,500543c <open+0xd0>
 5005428:	e13ffc17 	ldw	r4,-16(fp)
 500542c:	50052a80 	call	50052a8 <alt_file_locked>
 5005430:	e0bffa15 	stw	r2,-24(fp)
 5005434:	e0bffa17 	ldw	r2,-24(fp)
 5005438:	10001016 	blt	r2,zero,500547c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 500543c:	e0bff817 	ldw	r2,-32(fp)
 5005440:	10800317 	ldw	r2,12(r2)
 5005444:	10000826 	beq	r2,zero,5005468 <open+0xfc>
 5005448:	e0bff817 	ldw	r2,-32(fp)
 500544c:	10800317 	ldw	r2,12(r2)
 5005450:	e1ffff17 	ldw	r7,-4(fp)
 5005454:	e1bffe17 	ldw	r6,-8(fp)
 5005458:	e17ffd17 	ldw	r5,-12(fp)
 500545c:	e13ffc17 	ldw	r4,-16(fp)
 5005460:	103ee83a 	callr	r2
 5005464:	00000106 	br	500546c <open+0x100>
 5005468:	0005883a 	mov	r2,zero
 500546c:	e0bffa15 	stw	r2,-24(fp)
 5005470:	00000206 	br	500547c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 5005474:	00bffb44 	movi	r2,-19
 5005478:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 500547c:	e0bffa17 	ldw	r2,-24(fp)
 5005480:	1000090e 	bge	r2,zero,50054a8 <open+0x13c>
  {
    alt_release_fd (index);  
 5005484:	e13ff917 	ldw	r4,-28(fp)
 5005488:	50039100 	call	5003910 <alt_release_fd>
    ALT_ERRNO = -status;
 500548c:	500526c0 	call	500526c <alt_get_errno>
 5005490:	1007883a 	mov	r3,r2
 5005494:	e0bffa17 	ldw	r2,-24(fp)
 5005498:	0085c83a 	sub	r2,zero,r2
 500549c:	18800015 	stw	r2,0(r3)
    return -1;
 50054a0:	00bfffc4 	movi	r2,-1
 50054a4:	00000106 	br	50054ac <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 50054a8:	e0bff917 	ldw	r2,-28(fp)
}
 50054ac:	e037883a 	mov	sp,fp
 50054b0:	dfc00117 	ldw	ra,4(sp)
 50054b4:	df000017 	ldw	fp,0(sp)
 50054b8:	dec00204 	addi	sp,sp,8
 50054bc:	f800283a 	ret

050054c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 50054c0:	defffa04 	addi	sp,sp,-24
 50054c4:	df000515 	stw	fp,20(sp)
 50054c8:	df000504 	addi	fp,sp,20
 50054cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50054d0:	0005303a 	rdctl	r2,status
 50054d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50054d8:	e0fffc17 	ldw	r3,-16(fp)
 50054dc:	00bfff84 	movi	r2,-2
 50054e0:	1884703a 	and	r2,r3,r2
 50054e4:	1001703a 	wrctl	status,r2
  
  return context;
 50054e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 50054ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 50054f0:	e0bfff17 	ldw	r2,-4(fp)
 50054f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 50054f8:	e0bffd17 	ldw	r2,-12(fp)
 50054fc:	10800017 	ldw	r2,0(r2)
 5005500:	e0fffd17 	ldw	r3,-12(fp)
 5005504:	18c00117 	ldw	r3,4(r3)
 5005508:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 500550c:	e0bffd17 	ldw	r2,-12(fp)
 5005510:	10800117 	ldw	r2,4(r2)
 5005514:	e0fffd17 	ldw	r3,-12(fp)
 5005518:	18c00017 	ldw	r3,0(r3)
 500551c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 5005520:	e0bffd17 	ldw	r2,-12(fp)
 5005524:	e0fffd17 	ldw	r3,-12(fp)
 5005528:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 500552c:	e0bffd17 	ldw	r2,-12(fp)
 5005530:	e0fffd17 	ldw	r3,-12(fp)
 5005534:	10c00015 	stw	r3,0(r2)
 5005538:	e0bffb17 	ldw	r2,-20(fp)
 500553c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5005540:	e0bffe17 	ldw	r2,-8(fp)
 5005544:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 5005548:	0001883a 	nop
 500554c:	e037883a 	mov	sp,fp
 5005550:	df000017 	ldw	fp,0(sp)
 5005554:	dec00104 	addi	sp,sp,4
 5005558:	f800283a 	ret

0500555c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 500555c:	defffb04 	addi	sp,sp,-20
 5005560:	dfc00415 	stw	ra,16(sp)
 5005564:	df000315 	stw	fp,12(sp)
 5005568:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 500556c:	d0a01117 	ldw	r2,-32700(gp)
 5005570:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 5005574:	d0a6c017 	ldw	r2,-25856(gp)
 5005578:	10800044 	addi	r2,r2,1
 500557c:	d0a6c015 	stw	r2,-25856(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 5005580:	00002e06 	br	500563c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 5005584:	e0bffd17 	ldw	r2,-12(fp)
 5005588:	10800017 	ldw	r2,0(r2)
 500558c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 5005590:	e0bffd17 	ldw	r2,-12(fp)
 5005594:	10800403 	ldbu	r2,16(r2)
 5005598:	10803fcc 	andi	r2,r2,255
 500559c:	10000426 	beq	r2,zero,50055b0 <alt_tick+0x54>
 50055a0:	d0a6c017 	ldw	r2,-25856(gp)
 50055a4:	1000021e 	bne	r2,zero,50055b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 50055a8:	e0bffd17 	ldw	r2,-12(fp)
 50055ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 50055b0:	e0bffd17 	ldw	r2,-12(fp)
 50055b4:	10800217 	ldw	r2,8(r2)
 50055b8:	d0e6c017 	ldw	r3,-25856(gp)
 50055bc:	18801d36 	bltu	r3,r2,5005634 <alt_tick+0xd8>
 50055c0:	e0bffd17 	ldw	r2,-12(fp)
 50055c4:	10800403 	ldbu	r2,16(r2)
 50055c8:	10803fcc 	andi	r2,r2,255
 50055cc:	1000191e 	bne	r2,zero,5005634 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 50055d0:	e0bffd17 	ldw	r2,-12(fp)
 50055d4:	10800317 	ldw	r2,12(r2)
 50055d8:	e0fffd17 	ldw	r3,-12(fp)
 50055dc:	18c00517 	ldw	r3,20(r3)
 50055e0:	1809883a 	mov	r4,r3
 50055e4:	103ee83a 	callr	r2
 50055e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 50055ec:	e0bfff17 	ldw	r2,-4(fp)
 50055f0:	1000031e 	bne	r2,zero,5005600 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 50055f4:	e13ffd17 	ldw	r4,-12(fp)
 50055f8:	50054c00 	call	50054c0 <alt_alarm_stop>
 50055fc:	00000d06 	br	5005634 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 5005600:	e0bffd17 	ldw	r2,-12(fp)
 5005604:	10c00217 	ldw	r3,8(r2)
 5005608:	e0bfff17 	ldw	r2,-4(fp)
 500560c:	1887883a 	add	r3,r3,r2
 5005610:	e0bffd17 	ldw	r2,-12(fp)
 5005614:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 5005618:	e0bffd17 	ldw	r2,-12(fp)
 500561c:	10c00217 	ldw	r3,8(r2)
 5005620:	d0a6c017 	ldw	r2,-25856(gp)
 5005624:	1880032e 	bgeu	r3,r2,5005634 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 5005628:	e0bffd17 	ldw	r2,-12(fp)
 500562c:	00c00044 	movi	r3,1
 5005630:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 5005634:	e0bffe17 	ldw	r2,-8(fp)
 5005638:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 500563c:	e0fffd17 	ldw	r3,-12(fp)
 5005640:	d0a01104 	addi	r2,gp,-32700
 5005644:	18bfcf1e 	bne	r3,r2,5005584 <__alt_data_end+0xff005584>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 5005648:	0001883a 	nop
}
 500564c:	0001883a 	nop
 5005650:	e037883a 	mov	sp,fp
 5005654:	dfc00117 	ldw	ra,4(sp)
 5005658:	df000017 	ldw	fp,0(sp)
 500565c:	dec00204 	addi	sp,sp,8
 5005660:	f800283a 	ret

05005664 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 5005664:	deffff04 	addi	sp,sp,-4
 5005668:	df000015 	stw	fp,0(sp)
 500566c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 5005670:	000170fa 	wrctl	ienable,zero
}
 5005674:	0001883a 	nop
 5005678:	e037883a 	mov	sp,fp
 500567c:	df000017 	ldw	fp,0(sp)
 5005680:	dec00104 	addi	sp,sp,4
 5005684:	f800283a 	ret

05005688 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 5005688:	defffb04 	addi	sp,sp,-20
 500568c:	dfc00415 	stw	ra,16(sp)
 5005690:	df000315 	stw	fp,12(sp)
 5005694:	df000304 	addi	fp,sp,12
 5005698:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 500569c:	d0a00717 	ldw	r2,-32740(gp)
 50056a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 50056a4:	00003106 	br	500576c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 50056a8:	e0bffd17 	ldw	r2,-12(fp)
 50056ac:	10800217 	ldw	r2,8(r2)
 50056b0:	1009883a 	mov	r4,r2
 50056b4:	50004d80 	call	50004d8 <strlen>
 50056b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 50056bc:	e0bffd17 	ldw	r2,-12(fp)
 50056c0:	10c00217 	ldw	r3,8(r2)
 50056c4:	e0bffe17 	ldw	r2,-8(fp)
 50056c8:	10bfffc4 	addi	r2,r2,-1
 50056cc:	1885883a 	add	r2,r3,r2
 50056d0:	10800003 	ldbu	r2,0(r2)
 50056d4:	10803fcc 	andi	r2,r2,255
 50056d8:	1080201c 	xori	r2,r2,128
 50056dc:	10bfe004 	addi	r2,r2,-128
 50056e0:	10800bd8 	cmpnei	r2,r2,47
 50056e4:	1000031e 	bne	r2,zero,50056f4 <alt_find_file+0x6c>
    {
      len -= 1;
 50056e8:	e0bffe17 	ldw	r2,-8(fp)
 50056ec:	10bfffc4 	addi	r2,r2,-1
 50056f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 50056f4:	e0bffe17 	ldw	r2,-8(fp)
 50056f8:	e0ffff17 	ldw	r3,-4(fp)
 50056fc:	1885883a 	add	r2,r3,r2
 5005700:	10800003 	ldbu	r2,0(r2)
 5005704:	10803fcc 	andi	r2,r2,255
 5005708:	1080201c 	xori	r2,r2,128
 500570c:	10bfe004 	addi	r2,r2,-128
 5005710:	10800be0 	cmpeqi	r2,r2,47
 5005714:	1000081e 	bne	r2,zero,5005738 <alt_find_file+0xb0>
 5005718:	e0bffe17 	ldw	r2,-8(fp)
 500571c:	e0ffff17 	ldw	r3,-4(fp)
 5005720:	1885883a 	add	r2,r3,r2
 5005724:	10800003 	ldbu	r2,0(r2)
 5005728:	10803fcc 	andi	r2,r2,255
 500572c:	1080201c 	xori	r2,r2,128
 5005730:	10bfe004 	addi	r2,r2,-128
 5005734:	10000a1e 	bne	r2,zero,5005760 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 5005738:	e0bffd17 	ldw	r2,-12(fp)
 500573c:	10800217 	ldw	r2,8(r2)
 5005740:	e0fffe17 	ldw	r3,-8(fp)
 5005744:	180d883a 	mov	r6,r3
 5005748:	e17fff17 	ldw	r5,-4(fp)
 500574c:	1009883a 	mov	r4,r2
 5005750:	50059ac0 	call	50059ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 5005754:	1000021e 	bne	r2,zero,5005760 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 5005758:	e0bffd17 	ldw	r2,-12(fp)
 500575c:	00000706 	br	500577c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 5005760:	e0bffd17 	ldw	r2,-12(fp)
 5005764:	10800017 	ldw	r2,0(r2)
 5005768:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 500576c:	e0fffd17 	ldw	r3,-12(fp)
 5005770:	d0a00704 	addi	r2,gp,-32740
 5005774:	18bfcc1e 	bne	r3,r2,50056a8 <__alt_data_end+0xff0056a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 5005778:	0005883a 	mov	r2,zero
}
 500577c:	e037883a 	mov	sp,fp
 5005780:	dfc00117 	ldw	ra,4(sp)
 5005784:	df000017 	ldw	fp,0(sp)
 5005788:	dec00204 	addi	sp,sp,8
 500578c:	f800283a 	ret

05005790 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 5005790:	defffc04 	addi	sp,sp,-16
 5005794:	df000315 	stw	fp,12(sp)
 5005798:	df000304 	addi	fp,sp,12
 500579c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 50057a0:	00bffa04 	movi	r2,-24
 50057a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 50057a8:	e03ffd15 	stw	zero,-12(fp)
 50057ac:	00001906 	br	5005814 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 50057b0:	00814034 	movhi	r2,1280
 50057b4:	10998c04 	addi	r2,r2,26160
 50057b8:	e0fffd17 	ldw	r3,-12(fp)
 50057bc:	18c00324 	muli	r3,r3,12
 50057c0:	10c5883a 	add	r2,r2,r3
 50057c4:	10800017 	ldw	r2,0(r2)
 50057c8:	10000f1e 	bne	r2,zero,5005808 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 50057cc:	00814034 	movhi	r2,1280
 50057d0:	10998c04 	addi	r2,r2,26160
 50057d4:	e0fffd17 	ldw	r3,-12(fp)
 50057d8:	18c00324 	muli	r3,r3,12
 50057dc:	10c5883a 	add	r2,r2,r3
 50057e0:	e0ffff17 	ldw	r3,-4(fp)
 50057e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 50057e8:	d0e00b17 	ldw	r3,-32724(gp)
 50057ec:	e0bffd17 	ldw	r2,-12(fp)
 50057f0:	1880020e 	bge	r3,r2,50057fc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 50057f4:	e0bffd17 	ldw	r2,-12(fp)
 50057f8:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 50057fc:	e0bffd17 	ldw	r2,-12(fp)
 5005800:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 5005804:	00000606 	br	5005820 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5005808:	e0bffd17 	ldw	r2,-12(fp)
 500580c:	10800044 	addi	r2,r2,1
 5005810:	e0bffd15 	stw	r2,-12(fp)
 5005814:	e0bffd17 	ldw	r2,-12(fp)
 5005818:	10800810 	cmplti	r2,r2,32
 500581c:	103fe41e 	bne	r2,zero,50057b0 <__alt_data_end+0xff0057b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 5005820:	e0bffe17 	ldw	r2,-8(fp)
}
 5005824:	e037883a 	mov	sp,fp
 5005828:	df000017 	ldw	fp,0(sp)
 500582c:	dec00104 	addi	sp,sp,4
 5005830:	f800283a 	ret

05005834 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 5005834:	defffb04 	addi	sp,sp,-20
 5005838:	df000415 	stw	fp,16(sp)
 500583c:	df000404 	addi	fp,sp,16
 5005840:	e13ffe15 	stw	r4,-8(fp)
 5005844:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 5005848:	e0bfff17 	ldw	r2,-4(fp)
 500584c:	10840070 	cmpltui	r2,r2,4097
 5005850:	1000021e 	bne	r2,zero,500585c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 5005854:	00840004 	movi	r2,4096
 5005858:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 500585c:	e0fffe17 	ldw	r3,-8(fp)
 5005860:	e0bfff17 	ldw	r2,-4(fp)
 5005864:	1885883a 	add	r2,r3,r2
 5005868:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 500586c:	e0bffe17 	ldw	r2,-8(fp)
 5005870:	e0bffc15 	stw	r2,-16(fp)
 5005874:	00000506 	br	500588c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 5005878:	e0bffc17 	ldw	r2,-16(fp)
 500587c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 5005880:	e0bffc17 	ldw	r2,-16(fp)
 5005884:	10800804 	addi	r2,r2,32
 5005888:	e0bffc15 	stw	r2,-16(fp)
 500588c:	e0fffc17 	ldw	r3,-16(fp)
 5005890:	e0bffd17 	ldw	r2,-12(fp)
 5005894:	18bff836 	bltu	r3,r2,5005878 <__alt_data_end+0xff005878>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 5005898:	e0bffe17 	ldw	r2,-8(fp)
 500589c:	108007cc 	andi	r2,r2,31
 50058a0:	10000226 	beq	r2,zero,50058ac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 50058a4:	e0bffc17 	ldw	r2,-16(fp)
 50058a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 50058ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 50058b0:	0001883a 	nop
 50058b4:	e037883a 	mov	sp,fp
 50058b8:	df000017 	ldw	fp,0(sp)
 50058bc:	dec00104 	addi	sp,sp,4
 50058c0:	f800283a 	ret

050058c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 50058c4:	defffe04 	addi	sp,sp,-8
 50058c8:	df000115 	stw	fp,4(sp)
 50058cc:	df000104 	addi	fp,sp,4
 50058d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 50058d4:	e0bfff17 	ldw	r2,-4(fp)
 50058d8:	10bffe84 	addi	r2,r2,-6
 50058dc:	10c00428 	cmpgeui	r3,r2,16
 50058e0:	18001a1e 	bne	r3,zero,500594c <alt_exception_cause_generated_bad_addr+0x88>
 50058e4:	100690ba 	slli	r3,r2,2
 50058e8:	00814034 	movhi	r2,1280
 50058ec:	10963f04 	addi	r2,r2,22780
 50058f0:	1885883a 	add	r2,r3,r2
 50058f4:	10800017 	ldw	r2,0(r2)
 50058f8:	1000683a 	jmp	r2
 50058fc:	0500593c 	xorhi	r20,zero,356
 5005900:	0500593c 	xorhi	r20,zero,356
 5005904:	0500594c 	andi	r20,zero,357
 5005908:	0500594c 	andi	r20,zero,357
 500590c:	0500594c 	andi	r20,zero,357
 5005910:	0500593c 	xorhi	r20,zero,356
 5005914:	05005944 	movi	r20,357
 5005918:	0500594c 	andi	r20,zero,357
 500591c:	0500593c 	xorhi	r20,zero,356
 5005920:	0500593c 	xorhi	r20,zero,356
 5005924:	0500594c 	andi	r20,zero,357
 5005928:	0500593c 	xorhi	r20,zero,356
 500592c:	05005944 	movi	r20,357
 5005930:	0500594c 	andi	r20,zero,357
 5005934:	0500594c 	andi	r20,zero,357
 5005938:	0500593c 	xorhi	r20,zero,356
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 500593c:	00800044 	movi	r2,1
 5005940:	00000306 	br	5005950 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 5005944:	0005883a 	mov	r2,zero
 5005948:	00000106 	br	5005950 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 500594c:	0005883a 	mov	r2,zero
  }
}
 5005950:	e037883a 	mov	sp,fp
 5005954:	df000017 	ldw	fp,0(sp)
 5005958:	dec00104 	addi	sp,sp,4
 500595c:	f800283a 	ret

05005960 <atexit>:
 5005960:	200b883a 	mov	r5,r4
 5005964:	000f883a 	mov	r7,zero
 5005968:	000d883a 	mov	r6,zero
 500596c:	0009883a 	mov	r4,zero
 5005970:	5005a281 	jmpi	5005a28 <__register_exitproc>

05005974 <exit>:
 5005974:	defffe04 	addi	sp,sp,-8
 5005978:	000b883a 	mov	r5,zero
 500597c:	dc000015 	stw	r16,0(sp)
 5005980:	dfc00115 	stw	ra,4(sp)
 5005984:	2021883a 	mov	r16,r4
 5005988:	5005b400 	call	5005b40 <__call_exitprocs>
 500598c:	00814034 	movhi	r2,1280
 5005990:	109e0b04 	addi	r2,r2,30764
 5005994:	11000017 	ldw	r4,0(r2)
 5005998:	20800f17 	ldw	r2,60(r4)
 500599c:	10000126 	beq	r2,zero,50059a4 <exit+0x30>
 50059a0:	103ee83a 	callr	r2
 50059a4:	8009883a 	mov	r4,r16
 50059a8:	5005cc00 	call	5005cc0 <_exit>

050059ac <memcmp>:
 50059ac:	01c000c4 	movi	r7,3
 50059b0:	3980192e 	bgeu	r7,r6,5005a18 <memcmp+0x6c>
 50059b4:	2144b03a 	or	r2,r4,r5
 50059b8:	11c4703a 	and	r2,r2,r7
 50059bc:	10000f26 	beq	r2,zero,50059fc <memcmp+0x50>
 50059c0:	20800003 	ldbu	r2,0(r4)
 50059c4:	28c00003 	ldbu	r3,0(r5)
 50059c8:	10c0151e 	bne	r2,r3,5005a20 <memcmp+0x74>
 50059cc:	31bfff84 	addi	r6,r6,-2
 50059d0:	01ffffc4 	movi	r7,-1
 50059d4:	00000406 	br	50059e8 <memcmp+0x3c>
 50059d8:	20800003 	ldbu	r2,0(r4)
 50059dc:	28c00003 	ldbu	r3,0(r5)
 50059e0:	31bfffc4 	addi	r6,r6,-1
 50059e4:	10c00e1e 	bne	r2,r3,5005a20 <memcmp+0x74>
 50059e8:	21000044 	addi	r4,r4,1
 50059ec:	29400044 	addi	r5,r5,1
 50059f0:	31fff91e 	bne	r6,r7,50059d8 <__alt_data_end+0xff0059d8>
 50059f4:	0005883a 	mov	r2,zero
 50059f8:	f800283a 	ret
 50059fc:	20c00017 	ldw	r3,0(r4)
 5005a00:	28800017 	ldw	r2,0(r5)
 5005a04:	18bfee1e 	bne	r3,r2,50059c0 <__alt_data_end+0xff0059c0>
 5005a08:	31bfff04 	addi	r6,r6,-4
 5005a0c:	21000104 	addi	r4,r4,4
 5005a10:	29400104 	addi	r5,r5,4
 5005a14:	39bff936 	bltu	r7,r6,50059fc <__alt_data_end+0xff0059fc>
 5005a18:	303fe91e 	bne	r6,zero,50059c0 <__alt_data_end+0xff0059c0>
 5005a1c:	003ff506 	br	50059f4 <__alt_data_end+0xff0059f4>
 5005a20:	10c5c83a 	sub	r2,r2,r3
 5005a24:	f800283a 	ret

05005a28 <__register_exitproc>:
 5005a28:	defffa04 	addi	sp,sp,-24
 5005a2c:	dc000315 	stw	r16,12(sp)
 5005a30:	04014034 	movhi	r16,1280
 5005a34:	841e0b04 	addi	r16,r16,30764
 5005a38:	80c00017 	ldw	r3,0(r16)
 5005a3c:	dc400415 	stw	r17,16(sp)
 5005a40:	dfc00515 	stw	ra,20(sp)
 5005a44:	18805217 	ldw	r2,328(r3)
 5005a48:	2023883a 	mov	r17,r4
 5005a4c:	10003726 	beq	r2,zero,5005b2c <__register_exitproc+0x104>
 5005a50:	10c00117 	ldw	r3,4(r2)
 5005a54:	010007c4 	movi	r4,31
 5005a58:	20c00e16 	blt	r4,r3,5005a94 <__register_exitproc+0x6c>
 5005a5c:	1a000044 	addi	r8,r3,1
 5005a60:	8800221e 	bne	r17,zero,5005aec <__register_exitproc+0xc4>
 5005a64:	18c00084 	addi	r3,r3,2
 5005a68:	18c7883a 	add	r3,r3,r3
 5005a6c:	18c7883a 	add	r3,r3,r3
 5005a70:	12000115 	stw	r8,4(r2)
 5005a74:	10c7883a 	add	r3,r2,r3
 5005a78:	19400015 	stw	r5,0(r3)
 5005a7c:	0005883a 	mov	r2,zero
 5005a80:	dfc00517 	ldw	ra,20(sp)
 5005a84:	dc400417 	ldw	r17,16(sp)
 5005a88:	dc000317 	ldw	r16,12(sp)
 5005a8c:	dec00604 	addi	sp,sp,24
 5005a90:	f800283a 	ret
 5005a94:	00800034 	movhi	r2,0
 5005a98:	10800004 	addi	r2,r2,0
 5005a9c:	10002626 	beq	r2,zero,5005b38 <__register_exitproc+0x110>
 5005aa0:	01006404 	movi	r4,400
 5005aa4:	d9400015 	stw	r5,0(sp)
 5005aa8:	d9800115 	stw	r6,4(sp)
 5005aac:	d9c00215 	stw	r7,8(sp)
 5005ab0:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 5005ab4:	d9400017 	ldw	r5,0(sp)
 5005ab8:	d9800117 	ldw	r6,4(sp)
 5005abc:	d9c00217 	ldw	r7,8(sp)
 5005ac0:	10001d26 	beq	r2,zero,5005b38 <__register_exitproc+0x110>
 5005ac4:	81000017 	ldw	r4,0(r16)
 5005ac8:	10000115 	stw	zero,4(r2)
 5005acc:	02000044 	movi	r8,1
 5005ad0:	22405217 	ldw	r9,328(r4)
 5005ad4:	0007883a 	mov	r3,zero
 5005ad8:	12400015 	stw	r9,0(r2)
 5005adc:	20805215 	stw	r2,328(r4)
 5005ae0:	10006215 	stw	zero,392(r2)
 5005ae4:	10006315 	stw	zero,396(r2)
 5005ae8:	883fde26 	beq	r17,zero,5005a64 <__alt_data_end+0xff005a64>
 5005aec:	18c9883a 	add	r4,r3,r3
 5005af0:	2109883a 	add	r4,r4,r4
 5005af4:	1109883a 	add	r4,r2,r4
 5005af8:	21802215 	stw	r6,136(r4)
 5005afc:	01800044 	movi	r6,1
 5005b00:	12406217 	ldw	r9,392(r2)
 5005b04:	30cc983a 	sll	r6,r6,r3
 5005b08:	4992b03a 	or	r9,r9,r6
 5005b0c:	12406215 	stw	r9,392(r2)
 5005b10:	21c04215 	stw	r7,264(r4)
 5005b14:	01000084 	movi	r4,2
 5005b18:	893fd21e 	bne	r17,r4,5005a64 <__alt_data_end+0xff005a64>
 5005b1c:	11006317 	ldw	r4,396(r2)
 5005b20:	218cb03a 	or	r6,r4,r6
 5005b24:	11806315 	stw	r6,396(r2)
 5005b28:	003fce06 	br	5005a64 <__alt_data_end+0xff005a64>
 5005b2c:	18805304 	addi	r2,r3,332
 5005b30:	18805215 	stw	r2,328(r3)
 5005b34:	003fc606 	br	5005a50 <__alt_data_end+0xff005a50>
 5005b38:	00bfffc4 	movi	r2,-1
 5005b3c:	003fd006 	br	5005a80 <__alt_data_end+0xff005a80>

05005b40 <__call_exitprocs>:
 5005b40:	defff504 	addi	sp,sp,-44
 5005b44:	df000915 	stw	fp,36(sp)
 5005b48:	dd400615 	stw	r21,24(sp)
 5005b4c:	dc800315 	stw	r18,12(sp)
 5005b50:	dfc00a15 	stw	ra,40(sp)
 5005b54:	ddc00815 	stw	r23,32(sp)
 5005b58:	dd800715 	stw	r22,28(sp)
 5005b5c:	dd000515 	stw	r20,20(sp)
 5005b60:	dcc00415 	stw	r19,16(sp)
 5005b64:	dc400215 	stw	r17,8(sp)
 5005b68:	dc000115 	stw	r16,4(sp)
 5005b6c:	d9000015 	stw	r4,0(sp)
 5005b70:	2839883a 	mov	fp,r5
 5005b74:	04800044 	movi	r18,1
 5005b78:	057fffc4 	movi	r21,-1
 5005b7c:	00814034 	movhi	r2,1280
 5005b80:	109e0b04 	addi	r2,r2,30764
 5005b84:	12000017 	ldw	r8,0(r2)
 5005b88:	45005217 	ldw	r20,328(r8)
 5005b8c:	44c05204 	addi	r19,r8,328
 5005b90:	a0001c26 	beq	r20,zero,5005c04 <__call_exitprocs+0xc4>
 5005b94:	a0800117 	ldw	r2,4(r20)
 5005b98:	15ffffc4 	addi	r23,r2,-1
 5005b9c:	b8000d16 	blt	r23,zero,5005bd4 <__call_exitprocs+0x94>
 5005ba0:	14000044 	addi	r16,r2,1
 5005ba4:	8421883a 	add	r16,r16,r16
 5005ba8:	8421883a 	add	r16,r16,r16
 5005bac:	84402004 	addi	r17,r16,128
 5005bb0:	a463883a 	add	r17,r20,r17
 5005bb4:	a421883a 	add	r16,r20,r16
 5005bb8:	e0001e26 	beq	fp,zero,5005c34 <__call_exitprocs+0xf4>
 5005bbc:	80804017 	ldw	r2,256(r16)
 5005bc0:	e0801c26 	beq	fp,r2,5005c34 <__call_exitprocs+0xf4>
 5005bc4:	bdffffc4 	addi	r23,r23,-1
 5005bc8:	843fff04 	addi	r16,r16,-4
 5005bcc:	8c7fff04 	addi	r17,r17,-4
 5005bd0:	bd7ff91e 	bne	r23,r21,5005bb8 <__alt_data_end+0xff005bb8>
 5005bd4:	00800034 	movhi	r2,0
 5005bd8:	10800004 	addi	r2,r2,0
 5005bdc:	10000926 	beq	r2,zero,5005c04 <__call_exitprocs+0xc4>
 5005be0:	a0800117 	ldw	r2,4(r20)
 5005be4:	1000301e 	bne	r2,zero,5005ca8 <__call_exitprocs+0x168>
 5005be8:	a0800017 	ldw	r2,0(r20)
 5005bec:	10003226 	beq	r2,zero,5005cb8 <__call_exitprocs+0x178>
 5005bf0:	a009883a 	mov	r4,r20
 5005bf4:	98800015 	stw	r2,0(r19)
 5005bf8:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 5005bfc:	9d000017 	ldw	r20,0(r19)
 5005c00:	a03fe41e 	bne	r20,zero,5005b94 <__alt_data_end+0xff005b94>
 5005c04:	dfc00a17 	ldw	ra,40(sp)
 5005c08:	df000917 	ldw	fp,36(sp)
 5005c0c:	ddc00817 	ldw	r23,32(sp)
 5005c10:	dd800717 	ldw	r22,28(sp)
 5005c14:	dd400617 	ldw	r21,24(sp)
 5005c18:	dd000517 	ldw	r20,20(sp)
 5005c1c:	dcc00417 	ldw	r19,16(sp)
 5005c20:	dc800317 	ldw	r18,12(sp)
 5005c24:	dc400217 	ldw	r17,8(sp)
 5005c28:	dc000117 	ldw	r16,4(sp)
 5005c2c:	dec00b04 	addi	sp,sp,44
 5005c30:	f800283a 	ret
 5005c34:	a0800117 	ldw	r2,4(r20)
 5005c38:	80c00017 	ldw	r3,0(r16)
 5005c3c:	10bfffc4 	addi	r2,r2,-1
 5005c40:	15c01426 	beq	r2,r23,5005c94 <__call_exitprocs+0x154>
 5005c44:	80000015 	stw	zero,0(r16)
 5005c48:	183fde26 	beq	r3,zero,5005bc4 <__alt_data_end+0xff005bc4>
 5005c4c:	95c8983a 	sll	r4,r18,r23
 5005c50:	a0806217 	ldw	r2,392(r20)
 5005c54:	a5800117 	ldw	r22,4(r20)
 5005c58:	2084703a 	and	r2,r4,r2
 5005c5c:	10000b26 	beq	r2,zero,5005c8c <__call_exitprocs+0x14c>
 5005c60:	a0806317 	ldw	r2,396(r20)
 5005c64:	2088703a 	and	r4,r4,r2
 5005c68:	20000c1e 	bne	r4,zero,5005c9c <__call_exitprocs+0x15c>
 5005c6c:	89400017 	ldw	r5,0(r17)
 5005c70:	d9000017 	ldw	r4,0(sp)
 5005c74:	183ee83a 	callr	r3
 5005c78:	a0800117 	ldw	r2,4(r20)
 5005c7c:	15bfbf1e 	bne	r2,r22,5005b7c <__alt_data_end+0xff005b7c>
 5005c80:	98800017 	ldw	r2,0(r19)
 5005c84:	153fcf26 	beq	r2,r20,5005bc4 <__alt_data_end+0xff005bc4>
 5005c88:	003fbc06 	br	5005b7c <__alt_data_end+0xff005b7c>
 5005c8c:	183ee83a 	callr	r3
 5005c90:	003ff906 	br	5005c78 <__alt_data_end+0xff005c78>
 5005c94:	a5c00115 	stw	r23,4(r20)
 5005c98:	003feb06 	br	5005c48 <__alt_data_end+0xff005c48>
 5005c9c:	89000017 	ldw	r4,0(r17)
 5005ca0:	183ee83a 	callr	r3
 5005ca4:	003ff406 	br	5005c78 <__alt_data_end+0xff005c78>
 5005ca8:	a0800017 	ldw	r2,0(r20)
 5005cac:	a027883a 	mov	r19,r20
 5005cb0:	1029883a 	mov	r20,r2
 5005cb4:	003fb606 	br	5005b90 <__alt_data_end+0xff005b90>
 5005cb8:	0005883a 	mov	r2,zero
 5005cbc:	003ffb06 	br	5005cac <__alt_data_end+0xff005cac>

05005cc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 5005cc0:	defffd04 	addi	sp,sp,-12
 5005cc4:	df000215 	stw	fp,8(sp)
 5005cc8:	df000204 	addi	fp,sp,8
 5005ccc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 5005cd0:	0001883a 	nop
 5005cd4:	e0bfff17 	ldw	r2,-4(fp)
 5005cd8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 5005cdc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 5005ce0:	10000226 	beq	r2,zero,5005cec <_exit+0x2c>
    ALT_SIM_FAIL();
 5005ce4:	002af070 	cmpltui	zero,zero,43969
 5005ce8:	00000106 	br	5005cf0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 5005cec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 5005cf0:	003fff06 	br	5005cf0 <__alt_data_end+0xff005cf0>
