
multiprocessorcpu3.elf:     file format elf32-littlenios2
multiprocessorcpu3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x07000244

Program Header:
    LOAD off    0x00001000 vaddr 0x07000000 paddr 0x07000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x07000020 paddr 0x07000020 align 2**12
         filesz 0x0000fe3c memsz 0x0000fe3c flags r-x
    LOAD off    0x00010e5c vaddr 0x0700fe5c paddr 0x0701196c align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x0001347c vaddr 0x0701347c paddr 0x0701347c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  07000000  07000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  07000020  07000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f858  07000244  07000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c0  0700fa9c  0700fa9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  0700fe5c  0701196c  00010e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0701347c  0701347c  0001347c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  070135dc  070135dc  0001296c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001296c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f28  00000000  00000000  00012990  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024d0f  00000000  00000000  000138b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009657  00000000  00000000  000385c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bac3  00000000  00000000  00041c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002308  00000000  00000000  0004d6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003989  00000000  00000000  0004f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b0d  00000000  00000000  00053375  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006ae84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001920  00000000  00000000  0006aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006fb02  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006fb05  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006fb0a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006fb0b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000a  00000000  00000000  0006fb0c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000a  00000000  00000000  0006fb16  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000a  00000000  00000000  0006fb20  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  0006fb2a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000011  00000000  00000000  0006fb2d  2**0
                  CONTENTS, READONLY
 26 .jdi          000112a5  00000000  00000000  0006fb3e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000bc226  00000000  00000000  00080de3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
07000000 l    d  .entry	00000000 .entry
07000020 l    d  .exceptions	00000000 .exceptions
07000244 l    d  .text	00000000 .text
0700fa9c l    d  .rodata	00000000 .rodata
0700fe5c l    d  .rwdata	00000000 .rwdata
0701347c l    d  .bss	00000000 .bss
070135dc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../multiprocessorcpu3_bsp//obj/HAL/src/crt0.o
0700028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 maincpu3.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0700fb9e l     O .rodata	00000010 zeroes.4404
070028dc l     F .text	000000bc __sbprintf
0700fbae l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
07002aec l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0700461c l     F .text	00000008 __fp_unlock
07004630 l     F .text	0000019c __sinit.part.1
070047cc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0700fe5c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
070102a0 l     O .rwdata	00000020 lc_ctype_charset
07010280 l     O .rwdata	00000020 lc_message_charset
070102c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0700fbe0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
07007d30 l     F .text	000000fc __sprint_r.part.0
0700fd14 l     O .rodata	00000010 blanks.4348
0700fd04 l     O .rodata	00000010 zeroes.4349
070092bc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0700cf78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0700d0cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0700d0f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0700d1e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0700d2c4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0700d3b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0700d584 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
07011954 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0700d7d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0700d904 l     F .text	00000034 alt_dev_reg
0700d938 l     F .text	0000003c alt_get_errno
0700d974 l     F .text	00000068 alt_avalon_mutex_reg
070108a8 l     O .rwdata	00001060 jtag_uart3
07011908 l     O .rwdata	00000010 mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0700dca0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0700deac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0700e4e4 l     F .text	0000003c alt_get_errno
0700e520 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0700e7b0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0700e9d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0700eed4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0700f014 l     F .text	0000003c alt_get_errno
0700f050 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
070134b0 g     O .bss	00000004 alt_instruction_exception_handler
07000544 g     F .text	00000018 putchar
0700720c g     F .text	00000074 _mprec_log10
070072f8 g     F .text	0000008c __any_on
070099b0 g     F .text	00000054 _isatty_r
0700fbec g     O .rodata	00000028 __mprec_tinytens
0700d4c0 g     F .text	0000007c alt_main
0700055c g     F .text	000000c0 _puts_r
070134dc g     O .bss	00000100 alt_irq
07009a04 g     F .text	00000060 _lseek_r
0701196c g       *ABS*	00000000 __flash_rwdata_start
0700baa4 g     F .text	00000088 .hidden __eqdf2
070135dc g       *ABS*	00000000 __alt_heap_start
07000500 g     F .text	0000003c printf
07009ac4 g     F .text	0000009c _wcrtomb_r
07007bf0 g     F .text	0000005c __sseek
0700496c g     F .text	00000010 __sinit
07009378 g     F .text	00000140 __swbuf_r
07005434 g     F .text	0000007c _setlocale_r
070047d4 g     F .text	00000068 __sfmoreglue
0700d560 g     F .text	00000024 __malloc_unlock
07006104 g     F .text	0000015c memmove
07004954 g     F .text	00000018 _cleanup
0700e658 g     F .text	00000040 altera_avalon_mutex_trylock
07006388 g     F .text	000000a8 _Balloc
0700bb2c g     F .text	000000dc .hidden __gtdf2
0700f40c g     F .text	00000024 altera_nios2_gen2_irq_init
07000000 g     F .entry	0000001c __reset
0700e6ec g     F .text	00000074 altera_avalon_mutex_is_mine
07000020 g       *ABS*	00000000 __flash_exceptions_start
07009954 g     F .text	0000005c _fstat_r
07013494 g     O .bss	00000004 errno
07007b6c g     F .text	00000008 __seofread
0701349c g     O .bss	00000004 alt_argv
07019918 g       *ABS*	00000000 _gp
07010728 g     O .rwdata	00000180 alt_fd_list
0700053c g     F .text	00000008 _putchar_r
0700eb70 g     F .text	00000090 alt_find_dev
07011918 g     O .rwdata	00000004 A
07005fbc g     F .text	00000148 memcpy
07004624 g     F .text	0000000c _cleanup_r
0700cd90 g     F .text	000000dc .hidden __floatsidf
0700ef98 g     F .text	0000007c alt_io_redirect
0700bc08 g     F .text	000000f4 .hidden __ltdf2
0700fa9c g       *ABS*	00000000 __DTOR_END__
0700061c g     F .text	00000014 puts
0700f66c g     F .text	0000009c alt_exception_cause_generated_bad_addr
07007a50 g     F .text	00000074 __fpclassifyd
07007168 g     F .text	000000a4 __ratio
070092a0 g     F .text	0000001c __vfiprintf_internal
0700e0a4 g     F .text	0000021c altera_avalon_jtag_uart_read
070004d0 g     F .text	00000030 _printf_r
0700a854 g     F .text	00000064 .hidden __udivsi3
0700d220 g     F .text	000000a4 isatty
0700fc3c g     O .rodata	000000c8 __mprec_tens
070054b0 g     F .text	0000000c __locale_charset
0700f5dc g     F .text	00000090 alt_icache_flush
07013490 g     O .bss	00000004 __malloc_top_pad
0701192c g     O .rwdata	00000004 __mb_cur_max
070054e0 g     F .text	0000000c _localeconv_r
07006794 g     F .text	0000003c __i2b
07004df0 g     F .text	000004bc __sfvwrite_r
07007ac4 g     F .text	00000054 _sbrk_r
07009a64 g     F .text	00000060 _read_r
0701194c g     O .rwdata	00000004 alt_max_fd
07009648 g     F .text	000000f0 _fclose_r
070045ec g     F .text	00000030 fflush
0701348c g     O .bss	00000004 __malloc_max_sbrked_mem
0700a910 g     F .text	000008ac .hidden __adddf3
07006f10 g     F .text	0000010c __b2d
0700a224 g     F .text	00000538 .hidden __umoddi3
0700d3ec g     F .text	000000d4 lseek
0700e760 g     F .text	00000050 altera_avalon_mutex_first_lock
07011924 g     O .rwdata	00000004 _global_impure_ptr
070074ec g     F .text	00000564 _realloc_r
070135dc g       *ABS*	00000000 __bss_end
0700ede4 g     F .text	000000f0 alt_iic_isr_register
0700f304 g     F .text	00000108 alt_tick
07009cac g     F .text	00000578 .hidden __udivdi3
070098b0 g     F .text	00000024 _fputwc_r
0700fc14 g     O .rodata	00000028 __mprec_bigtens
07006578 g     F .text	00000104 __s2b
0700ce6c g     F .text	000000a8 .hidden __floatunsidf
07006c50 g     F .text	00000060 __mcmp
0700498c g     F .text	00000018 __fp_lock_all
0700ed98 g     F .text	0000004c alt_ic_irq_enabled
0700f268 g     F .text	0000009c alt_alarm_stop
070134a4 g     O .bss	00000004 alt_irq_active
070000fc g     F .exceptions	000000d4 alt_irq_handler
07010700 g     O .rwdata	00000028 alt_dev_null
0700e59c g     F .text	00000054 altera_avalon_mutex_open
0700d084 g     F .text	00000048 alt_dcache_flush_all
0700667c g     F .text	00000068 __hi0bits
0701191c g     O .rwdata	00000004 B
0700cd10 g     F .text	00000080 .hidden __fixdfsi
0701196c g       *ABS*	00000000 __ram_rwdata_end
07011944 g     O .rwdata	00000008 alt_dev_list
0700d80c g     F .text	000000f8 write
07007384 g     F .text	000000a0 _putc_r
07011958 g     O .rwdata	00000008 alt_mutex_list
0700fe5c g       *ABS*	00000000 __ram_rodata_end
0700d134 g     F .text	000000b0 fstat
0700bc08 g     F .text	000000f4 .hidden __ledf2
070069c8 g     F .text	00000140 __pow5mult
07007e44 g     F .text	0000145c ___vfiprintf_internal_r
07013484 g     O .bss	00000004 __nlocale_changed
0700a8b8 g     F .text	00000058 .hidden __umodsi3
070135dc g       *ABS*	00000000 end
07011920 g     O .rwdata	00000004 C
0700dbe0 g     F .text	000000c0 altera_avalon_jtag_uart_init
070001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0700fa9c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0700e828 g     F .text	0000007c alt_avalon_timer_sc_init
0700cf14 g     F .text	00000064 .hidden __clzsi2
0700e2c0 g     F .text	00000224 altera_avalon_jtag_uart_write
0700497c g     F .text	00000004 __sfp_lock_acquire
07005ed8 g     F .text	000000e4 memchr
070006c8 g     F .text	000021f8 ___vfprintf_internal_r
07004ae0 g     F .text	00000310 _free_r
070054bc g     F .text	00000010 __locale_mb_cur_max
0700f8e8 g     F .text	00000180 __call_exitprocs
07013480 g     O .bss	00000004 __mlocale_changed
07011930 g     O .rwdata	00000004 __malloc_sbrk_base
07000244 g     F .text	0000004c _start
070134a8 g     O .bss	00000004 _alt_tick_rate
07006b08 g     F .text	00000148 __lshift
070134ac g     O .bss	00000004 _alt_nticks
0700d5c0 g     F .text	000000fc read
0700da14 g     F .text	00000068 alt_sys_init
0700f7d0 g     F .text	00000118 __register_exitproc
0700e698 g     F .text	00000054 altera_avalon_mutex_unlock
070067d0 g     F .text	000001f8 __multiply
0700df4c g     F .text	00000068 altera_avalon_jtag_uart_close
0700fe5c g       *ABS*	00000000 __ram_rwdata_start
0700fa9c g       *ABS*	00000000 __ram_rodata_start
070134b4 g     O .bss	00000028 __malloc_current_mallinfo
0700701c g     F .text	0000014c __d2b
0700da7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0700f538 g     F .text	000000a4 alt_get_fd
07009530 g     F .text	00000054 _close_r
0700f754 g     F .text	0000007c memcmp
0700db3c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
070135dc g       *ABS*	00000000 __alt_stack_base
0700db8c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
07002998 g     F .text	00000154 __swsetup_r
0700b1bc g     F .text	000008e8 .hidden __divdf3
0700483c g     F .text	00000118 __sfp
07007280 g     F .text	00000078 __copybits
070102f8 g     O .rwdata	00000408 __malloc_av_
07004988 g     F .text	00000004 __sinit_lock_release
0700bcfc g     F .text	00000718 .hidden __muldf3
07007b18 g     F .text	00000054 __sread
0700f430 g     F .text	00000108 alt_find_file
0700ea0c g     F .text	000000a4 alt_dev_llist_insert
0700d53c g     F .text	00000024 __malloc_lock
0700d720 g     F .text	000000b0 sbrk
07004590 g     F .text	0000005c _fflush_r
07009584 g     F .text	000000c4 _calloc_r
0701347c g       *ABS*	00000000 __bss_start
07006260 g     F .text	00000128 memset
07000458 g     F .text	00000078 main
070134a0 g     O .bss	00000004 alt_envp
07013488 g     O .bss	00000004 __malloc_max_total_mem
0700dadc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
070094b8 g     F .text	00000018 __swbuf
07000290 g     F .text	00000110 matrix_multiply_part
07007c4c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
07009738 g     F .text	00000014 fclose
0700e614 g     F .text	00000044 altera_avalon_mutex_lock
07002cec g     F .text	00001688 _dtoa_r
070056cc g     F .text	0000080c _malloc_r
07009c20 g     F .text	00000030 __ascii_wctomb
07011950 g     O .rwdata	00000004 alt_errno
070052ac g     F .text	000000c4 _fwalk
07007424 g     F .text	000000c8 putc
0700a75c g     F .text	00000084 .hidden __divsi3
070049bc g     F .text	00000124 _malloc_trim_r
0700fa9c g       *ABS*	00000000 __CTOR_END__
07007c54 g     F .text	000000dc strcmp
0700fa9c g       *ABS*	00000000 __flash_rodata_start
0700fa9c g       *ABS*	00000000 __DTOR_LIST__
0700baa4 g     F .text	00000088 .hidden __nedf2
0700d9dc g     F .text	00000038 alt_irq_init
0700d6bc g     F .text	00000064 alt_release_fd
0700fd24 g     O .rodata	00000100 .hidden __clz_tab
0701347c g     O .bss	00000004 _PathLocale
0700f708 g     F .text	00000014 atexit
070094d0 g     F .text	00000060 _write_r
070054ec g     F .text	00000018 setlocale
07011928 g     O .rwdata	00000004 _impure_ptr
07013498 g     O .bss	00000004 alt_argc
07004374 g     F .text	0000021c __sflush_r
0700eb10 g     F .text	00000060 _do_dtors
070054d8 g     F .text	00000008 __locale_cjk_lang
07000020 g       .exceptions	00000000 alt_irq_entry
07006eac g     F .text	00000064 __ulp
070049a4 g     F .text	00000018 __fp_unlock_all
0701193c g     O .rwdata	00000008 alt_fs_list
07000020 g       *ABS*	00000000 __ram_exceptions_start
07005504 g     F .text	0000000c localeconv
0700ec34 g     F .text	00000050 alt_ic_isr_register
0701196c g       *ABS*	00000000 _edata
070135dc g       *ABS*	00000000 _end
0700974c g     F .text	00000164 __fputwc
07000244 g       *ABS*	00000000 __ram_exceptions_end
0700dfb4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0700ed0c g     F .text	0000008c alt_ic_irq_disable
07007b74 g     F .text	0000007c __swrite
07011934 g     O .rwdata	00000004 __malloc_trim_threshold
070054cc g     F .text	0000000c __locale_msgcharset
0700f71c g     F .text	00000038 exit
07005370 g     F .text	000000c4 _fwalk_reent
07006cb0 g     F .text	000001fc __mdiff
0700a7e0 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
07000020 g     F .exceptions	00000000 alt_exception
07004980 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0700fa68 g     F .text	00000034 _exit
0700e8a4 g     F .text	0000012c alt_alarm_start
07005510 g     F .text	000001bc __smakebuf_r
07000630 g     F .text	00000098 strlen
0700f114 g     F .text	00000154 open
0700bb2c g     F .text	000000dc .hidden __gedf2
07011938 g     O .rwdata	00000004 __wctomb
07007e2c g     F .text	00000018 __sprint_r
0700ec00 g     F .text	00000034 alt_icache_flush_all
07011960 g     O .rwdata	00000004 alt_priority_mask
0700ec84 g     F .text	00000088 alt_ic_irq_enable
070028c0 g     F .text	0000001c __vfprintf_internal
0700e5f0 g     F .text	00000024 altera_avalon_mutex_close
07009c50 g     F .text	0000005c _wctomb_r
0700c414 g     F .text	000008fc .hidden __subdf3
070066e4 g     F .text	000000b0 __lo0bits
07011964 g     O .rwdata	00000008 alt_alarm_list
0700eab0 g     F .text	00000060 _do_ctors
07009b60 g     F .text	000000c0 wcrtomb
0700cfb4 g     F .text	000000d0 close
0700d32c g     F .text	00000084 alt_load
070003a0 g     F .text	000000b8 print_matrix
070098d4 g     F .text	00000080 fputwc
07004984 g     F .text	00000004 __sinit_lock_acquire
07006458 g     F .text	00000120 __multadd
07006430 g     F .text	00000028 _Bfree



Disassembly of section .entry:

07000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 7000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 7000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 7000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 700000c:	00bffd16 	blt	zero,r2,7000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 7000010:	0041c034 	movhi	at,1792
    ori r1, r1, %lo(_start)
 7000014:	08409114 	ori	at,at,580
    jmp r1
 7000018:	0800683a 	jmp	at
 700001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

07000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 7000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 7000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 7000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 700002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 7000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 7000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 7000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 700003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 7000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 7000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 7000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 700004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 7000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 7000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 7000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 700005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 7000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 7000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 7000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 700006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 7000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 7000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 7000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 700007c:	10000326 	beq	r2,zero,700008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 7000080:	20000226 	beq	r4,zero,700008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 7000084:	70000fc0 	call	70000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 7000088:	00000706 	br	70000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 700008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 7000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 7000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 7000098:	70001d00 	call	70001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 700009c:	1000021e 	bne	r2,zero,70000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 70000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 70000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 70000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 70000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 70000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 70000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 70000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 70000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 70000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 70000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 70000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 70000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 70000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 70000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 70000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 70000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 70000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 70000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 70000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 70000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 70000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 70000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 70000f8:	ef80083a 	eret

070000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 70000fc:	defff904 	addi	sp,sp,-28
 7000100:	dfc00615 	stw	ra,24(sp)
 7000104:	df000515 	stw	fp,20(sp)
 7000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 700010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 7000110:	0005313a 	rdctl	r2,ipending
 7000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 7000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 700011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 7000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 7000124:	00800044 	movi	r2,1
 7000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 700012c:	e0fffb17 	ldw	r3,-20(fp)
 7000130:	e0bffc17 	ldw	r2,-16(fp)
 7000134:	1884703a 	and	r2,r3,r2
 7000138:	10001426 	beq	r2,zero,700018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 700013c:	0081c074 	movhi	r2,1793
 7000140:	108d3704 	addi	r2,r2,13532
 7000144:	e0fffd17 	ldw	r3,-12(fp)
 7000148:	180690fa 	slli	r3,r3,3
 700014c:	10c5883a 	add	r2,r2,r3
 7000150:	10c00017 	ldw	r3,0(r2)
 7000154:	0081c074 	movhi	r2,1793
 7000158:	108d3704 	addi	r2,r2,13532
 700015c:	e13ffd17 	ldw	r4,-12(fp)
 7000160:	200890fa 	slli	r4,r4,3
 7000164:	1105883a 	add	r2,r2,r4
 7000168:	10800104 	addi	r2,r2,4
 700016c:	10800017 	ldw	r2,0(r2)
 7000170:	1009883a 	mov	r4,r2
 7000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 7000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 700017c:	0005313a 	rdctl	r2,ipending
 7000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 7000184:	e0bfff17 	ldw	r2,-4(fp)
 7000188:	00000706 	br	70001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 700018c:	e0bffc17 	ldw	r2,-16(fp)
 7000190:	1085883a 	add	r2,r2,r2
 7000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 7000198:	e0bffd17 	ldw	r2,-12(fp)
 700019c:	10800044 	addi	r2,r2,1
 70001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 70001a4:	003fe106 	br	700012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 70001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 70001ac:	e0bffb17 	ldw	r2,-20(fp)
 70001b0:	103fdb1e 	bne	r2,zero,7000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 70001b4:	0001883a 	nop
}
 70001b8:	0001883a 	nop
 70001bc:	e037883a 	mov	sp,fp
 70001c0:	dfc00117 	ldw	ra,4(sp)
 70001c4:	df000017 	ldw	fp,0(sp)
 70001c8:	dec00204 	addi	sp,sp,8
 70001cc:	f800283a 	ret

070001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 70001d0:	defffb04 	addi	sp,sp,-20
 70001d4:	dfc00415 	stw	ra,16(sp)
 70001d8:	df000315 	stw	fp,12(sp)
 70001dc:	df000304 	addi	fp,sp,12
 70001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 70001e4:	000531fa 	rdctl	r2,exception
 70001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 70001ec:	e0bffd17 	ldw	r2,-12(fp)
 70001f0:	10801f0c 	andi	r2,r2,124
 70001f4:	1004d0ba 	srli	r2,r2,2
 70001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 70001fc:	0005333a 	rdctl	r2,badaddr
 7000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 7000204:	d0a6e617 	ldw	r2,-25704(gp)
 7000208:	10000726 	beq	r2,zero,7000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 700020c:	d0a6e617 	ldw	r2,-25704(gp)
 7000210:	e0fffd17 	ldw	r3,-12(fp)
 7000214:	e1bffe17 	ldw	r6,-8(fp)
 7000218:	e17fff17 	ldw	r5,-4(fp)
 700021c:	1809883a 	mov	r4,r3
 7000220:	103ee83a 	callr	r2
 7000224:	00000206 	br	7000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 7000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 700022c:	0005883a 	mov	r2,zero
}
 7000230:	e037883a 	mov	sp,fp
 7000234:	dfc00117 	ldw	ra,4(sp)
 7000238:	df000017 	ldw	fp,0(sp)
 700023c:	dec00204 	addi	sp,sp,8
 7000240:	f800283a 	ret

Disassembly of section .text:

07000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 7000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 7000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 700024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 7000250:	00bffd16 	blt	zero,r2,7000248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 7000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 7000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 700025c:	0681c074 	movhi	gp,1793
    ori gp, gp, %lo(_gp)
 7000260:	d6a64614 	ori	gp,gp,39192
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 7000264:	0081c074 	movhi	r2,1793
    ori r2, r2, %lo(__bss_start)
 7000268:	108d1f14 	ori	r2,r2,13436

    movhi r3, %hi(__bss_end)
 700026c:	00c1c074 	movhi	r3,1793
    ori r3, r3, %lo(__bss_end)
 7000270:	18cd7714 	ori	r3,r3,13788

    beq r2, r3, 1f
 7000274:	10c00326 	beq	r2,r3,7000284 <_start+0x40>

0:
    stw zero, (r2)
 7000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 700027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 7000280:	10fffd36 	bltu	r2,r3,7000278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 7000284:	700d32c0 	call	700d32c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 7000288:	700d4c00 	call	700d4c0 <alt_main>

0700028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 700028c:	003fff06 	br	700028c <__alt_data_end+0xff00028c>

07000290 <matrix_multiply_part>:
// Shared memory addresses
volatile int *A = (int *) SDRAM_BASE;
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
 7000290:	defff904 	addi	sp,sp,-28
 7000294:	df000615 	stw	fp,24(sp)
 7000298:	df000604 	addi	fp,sp,24
 700029c:	e13ffe15 	stw	r4,-8(fp)
 70002a0:	e17fff15 	stw	r5,-4(fp)
    for (int i = start_row; i < end_row; i++) {
 70002a4:	e0bffe17 	ldw	r2,-8(fp)
 70002a8:	e0bffa15 	stw	r2,-24(fp)
 70002ac:	00003406 	br	7000380 <matrix_multiply_part+0xf0>
        for (int j = 0; j < N; j++) {
 70002b0:	e03ffb15 	stw	zero,-20(fp)
 70002b4:	00002c06 	br	7000368 <matrix_multiply_part+0xd8>
            int sum = 0;
 70002b8:	e03ffc15 	stw	zero,-16(fp)
            for (int k = 0; k < N; k++) {
 70002bc:	e03ffd15 	stw	zero,-12(fp)
 70002c0:	00001906 	br	7000328 <matrix_multiply_part+0x98>
                sum += A[i * N + k] * B[k * N + j];
 70002c4:	d0e00017 	ldw	r3,-32768(gp)
 70002c8:	e0bffa17 	ldw	r2,-24(fp)
 70002cc:	100890fa 	slli	r4,r2,3
 70002d0:	e0bffd17 	ldw	r2,-12(fp)
 70002d4:	2085883a 	add	r2,r4,r2
 70002d8:	1085883a 	add	r2,r2,r2
 70002dc:	1085883a 	add	r2,r2,r2
 70002e0:	1885883a 	add	r2,r3,r2
 70002e4:	10c00017 	ldw	r3,0(r2)
 70002e8:	d1200117 	ldw	r4,-32764(gp)
 70002ec:	e0bffd17 	ldw	r2,-12(fp)
 70002f0:	100a90fa 	slli	r5,r2,3
 70002f4:	e0bffb17 	ldw	r2,-20(fp)
 70002f8:	2885883a 	add	r2,r5,r2
 70002fc:	1085883a 	add	r2,r2,r2
 7000300:	1085883a 	add	r2,r2,r2
 7000304:	2085883a 	add	r2,r4,r2
 7000308:	10800017 	ldw	r2,0(r2)
 700030c:	1885383a 	mul	r2,r3,r2
 7000310:	e0fffc17 	ldw	r3,-16(fp)
 7000314:	1885883a 	add	r2,r3,r2
 7000318:	e0bffc15 	stw	r2,-16(fp)

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < N; j++) {
            int sum = 0;
            for (int k = 0; k < N; k++) {
 700031c:	e0bffd17 	ldw	r2,-12(fp)
 7000320:	10800044 	addi	r2,r2,1
 7000324:	e0bffd15 	stw	r2,-12(fp)
 7000328:	e0bffd17 	ldw	r2,-12(fp)
 700032c:	10800210 	cmplti	r2,r2,8
 7000330:	103fe41e 	bne	r2,zero,70002c4 <__alt_data_end+0xff0002c4>
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;  // Store result in shared memory
 7000334:	d0e00217 	ldw	r3,-32760(gp)
 7000338:	e0bffa17 	ldw	r2,-24(fp)
 700033c:	100890fa 	slli	r4,r2,3
 7000340:	e0bffb17 	ldw	r2,-20(fp)
 7000344:	2085883a 	add	r2,r4,r2
 7000348:	1085883a 	add	r2,r2,r2
 700034c:	1085883a 	add	r2,r2,r2
 7000350:	1885883a 	add	r2,r3,r2
 7000354:	e0fffc17 	ldw	r3,-16(fp)
 7000358:	10c00015 	stw	r3,0(r2)
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < N; j++) {
 700035c:	e0bffb17 	ldw	r2,-20(fp)
 7000360:	10800044 	addi	r2,r2,1
 7000364:	e0bffb15 	stw	r2,-20(fp)
 7000368:	e0bffb17 	ldw	r2,-20(fp)
 700036c:	10800210 	cmplti	r2,r2,8
 7000370:	103fd11e 	bne	r2,zero,70002b8 <__alt_data_end+0xff0002b8>
volatile int *A = (int *) SDRAM_BASE;
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
 7000374:	e0bffa17 	ldw	r2,-24(fp)
 7000378:	10800044 	addi	r2,r2,1
 700037c:	e0bffa15 	stw	r2,-24(fp)
 7000380:	e0fffa17 	ldw	r3,-24(fp)
 7000384:	e0bfff17 	ldw	r2,-4(fp)
 7000388:	18bfc916 	blt	r3,r2,70002b0 <__alt_data_end+0xff0002b0>
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;  // Store result in shared memory
        }
    }
}
 700038c:	0001883a 	nop
 7000390:	e037883a 	mov	sp,fp
 7000394:	df000017 	ldw	fp,0(sp)
 7000398:	dec00104 	addi	sp,sp,4
 700039c:	f800283a 	ret

070003a0 <print_matrix>:

void print_matrix(int *matrix, int rows, int cols) {
 70003a0:	defff904 	addi	sp,sp,-28
 70003a4:	dfc00615 	stw	ra,24(sp)
 70003a8:	df000515 	stw	fp,20(sp)
 70003ac:	df000504 	addi	fp,sp,20
 70003b0:	e13ffd15 	stw	r4,-12(fp)
 70003b4:	e17ffe15 	stw	r5,-8(fp)
 70003b8:	e1bfff15 	stw	r6,-4(fp)
    for (int i = 0; i < rows; i++) {
 70003bc:	e03ffb15 	stw	zero,-20(fp)
 70003c0:	00001c06 	br	7000434 <print_matrix+0x94>
        for (int j = 0; j < cols; j++) {
 70003c4:	e03ffc15 	stw	zero,-16(fp)
 70003c8:	00001206 	br	7000414 <print_matrix+0x74>
            printf("%d ", matrix[i * cols + j]);
 70003cc:	e0fffb17 	ldw	r3,-20(fp)
 70003d0:	e0bfff17 	ldw	r2,-4(fp)
 70003d4:	1887383a 	mul	r3,r3,r2
 70003d8:	e0bffc17 	ldw	r2,-16(fp)
 70003dc:	1885883a 	add	r2,r3,r2
 70003e0:	1085883a 	add	r2,r2,r2
 70003e4:	1085883a 	add	r2,r2,r2
 70003e8:	1007883a 	mov	r3,r2
 70003ec:	e0bffd17 	ldw	r2,-12(fp)
 70003f0:	10c5883a 	add	r2,r2,r3
 70003f4:	10800017 	ldw	r2,0(r2)
 70003f8:	100b883a 	mov	r5,r2
 70003fc:	0101c074 	movhi	r4,1793
 7000400:	213ea704 	addi	r4,r4,-1380
 7000404:	70005000 	call	7000500 <printf>
    }
}

void print_matrix(int *matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
 7000408:	e0bffc17 	ldw	r2,-16(fp)
 700040c:	10800044 	addi	r2,r2,1
 7000410:	e0bffc15 	stw	r2,-16(fp)
 7000414:	e0fffc17 	ldw	r3,-16(fp)
 7000418:	e0bfff17 	ldw	r2,-4(fp)
 700041c:	18bfeb16 	blt	r3,r2,70003cc <__alt_data_end+0xff0003cc>
            printf("%d ", matrix[i * cols + j]);
        }
        printf("\n");
 7000420:	01000284 	movi	r4,10
 7000424:	70005440 	call	7000544 <putchar>
        }
    }
}

void print_matrix(int *matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
 7000428:	e0bffb17 	ldw	r2,-20(fp)
 700042c:	10800044 	addi	r2,r2,1
 7000430:	e0bffb15 	stw	r2,-20(fp)
 7000434:	e0fffb17 	ldw	r3,-20(fp)
 7000438:	e0bffe17 	ldw	r2,-8(fp)
 700043c:	18bfe116 	blt	r3,r2,70003c4 <__alt_data_end+0xff0003c4>
        for (int j = 0; j < cols; j++) {
            printf("%d ", matrix[i * cols + j]);
        }
        printf("\n");
    }
}
 7000440:	0001883a 	nop
 7000444:	e037883a 	mov	sp,fp
 7000448:	dfc00117 	ldw	ra,4(sp)
 700044c:	df000017 	ldw	fp,0(sp)
 7000450:	dec00204 	addi	sp,sp,8
 7000454:	f800283a 	ret

07000458 <main>:

int main() {
 7000458:	defffe04 	addi	sp,sp,-8
 700045c:	dfc00115 	stw	ra,4(sp)
 7000460:	df000015 	stw	fp,0(sp)
 7000464:	d839883a 	mov	fp,sp
    // Wait for switches SW[0], SW[1], SW[2], and SW[3] to be on
    printf("CPU 3: Waiting for switches SW[0], SW[1], SW[2], and SW[3] to be on...\n");
 7000468:	0101c074 	movhi	r4,1793
 700046c:	213ea804 	addi	r4,r4,-1376
 7000470:	700061c0 	call	700061c <puts>
    while ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x0F) != 0x0F);
 7000474:	0001883a 	nop
 7000478:	00820034 	movhi	r2,2048
 700047c:	10840804 	addi	r2,r2,4128
 7000480:	10800037 	ldwio	r2,0(r2)
 7000484:	108003cc 	andi	r2,r2,15
 7000488:	108003d8 	cmpnei	r2,r2,15
 700048c:	103ffa1e 	bne	r2,zero,7000478 <__alt_data_end+0xff000478>

    printf("CPU 3: Switches are on, starting matrix multiplication.\n");
 7000490:	0101c074 	movhi	r4,1793
 7000494:	213eba04 	addi	r4,r4,-1304
 7000498:	700061c0 	call	700061c <puts>

    // Perform matrix multiplication for the fourth quarter
    matrix_multiply_part(3 * N / 4, N);
 700049c:	01400204 	movi	r5,8
 70004a0:	01000184 	movi	r4,6
 70004a4:	70002900 	call	7000290 <matrix_multiply_part>

    // Flush caches to ensure other CPUs see the updated values
    alt_dcache_flush_all();
 70004a8:	700d0840 	call	700d084 <alt_dcache_flush_all>

    // Print the entire result matrix C
    printf("CPU 3: Matrix multiplication complete. Result Matrix C:\n");
 70004ac:	0101c074 	movhi	r4,1793
 70004b0:	213ec804 	addi	r4,r4,-1248
 70004b4:	700061c0 	call	700061c <puts>
    print_matrix((int *)C, N, N);
 70004b8:	d0a00217 	ldw	r2,-32760(gp)
 70004bc:	01800204 	movi	r6,8
 70004c0:	01400204 	movi	r5,8
 70004c4:	1009883a 	mov	r4,r2
 70004c8:	70003a00 	call	70003a0 <print_matrix>

    while (1);  // Loop forever
 70004cc:	003fff06 	br	70004cc <__alt_data_end+0xff0004cc>

070004d0 <_printf_r>:
 70004d0:	defffd04 	addi	sp,sp,-12
 70004d4:	2805883a 	mov	r2,r5
 70004d8:	dfc00015 	stw	ra,0(sp)
 70004dc:	d9800115 	stw	r6,4(sp)
 70004e0:	d9c00215 	stw	r7,8(sp)
 70004e4:	21400217 	ldw	r5,8(r4)
 70004e8:	d9c00104 	addi	r7,sp,4
 70004ec:	100d883a 	mov	r6,r2
 70004f0:	70006c80 	call	70006c8 <___vfprintf_internal_r>
 70004f4:	dfc00017 	ldw	ra,0(sp)
 70004f8:	dec00304 	addi	sp,sp,12
 70004fc:	f800283a 	ret

07000500 <printf>:
 7000500:	defffc04 	addi	sp,sp,-16
 7000504:	dfc00015 	stw	ra,0(sp)
 7000508:	d9400115 	stw	r5,4(sp)
 700050c:	d9800215 	stw	r6,8(sp)
 7000510:	d9c00315 	stw	r7,12(sp)
 7000514:	0081c074 	movhi	r2,1793
 7000518:	10864a04 	addi	r2,r2,6440
 700051c:	10800017 	ldw	r2,0(r2)
 7000520:	200b883a 	mov	r5,r4
 7000524:	d9800104 	addi	r6,sp,4
 7000528:	11000217 	ldw	r4,8(r2)
 700052c:	70028c00 	call	70028c0 <__vfprintf_internal>
 7000530:	dfc00017 	ldw	ra,0(sp)
 7000534:	dec00404 	addi	sp,sp,16
 7000538:	f800283a 	ret

0700053c <_putchar_r>:
 700053c:	21800217 	ldw	r6,8(r4)
 7000540:	70073841 	jmpi	7007384 <_putc_r>

07000544 <putchar>:
 7000544:	0081c074 	movhi	r2,1793
 7000548:	10864a04 	addi	r2,r2,6440
 700054c:	200b883a 	mov	r5,r4
 7000550:	11000017 	ldw	r4,0(r2)
 7000554:	21800217 	ldw	r6,8(r4)
 7000558:	70073841 	jmpi	7007384 <_putc_r>

0700055c <_puts_r>:
 700055c:	defff604 	addi	sp,sp,-40
 7000560:	dc000715 	stw	r16,28(sp)
 7000564:	2021883a 	mov	r16,r4
 7000568:	2809883a 	mov	r4,r5
 700056c:	dc400815 	stw	r17,32(sp)
 7000570:	dfc00915 	stw	ra,36(sp)
 7000574:	2823883a 	mov	r17,r5
 7000578:	70006300 	call	7000630 <strlen>
 700057c:	10c00044 	addi	r3,r2,1
 7000580:	d8800115 	stw	r2,4(sp)
 7000584:	0081c074 	movhi	r2,1793
 7000588:	10bed604 	addi	r2,r2,-1192
 700058c:	d8800215 	stw	r2,8(sp)
 7000590:	00800044 	movi	r2,1
 7000594:	d8800315 	stw	r2,12(sp)
 7000598:	00800084 	movi	r2,2
 700059c:	dc400015 	stw	r17,0(sp)
 70005a0:	d8c00615 	stw	r3,24(sp)
 70005a4:	dec00415 	stw	sp,16(sp)
 70005a8:	d8800515 	stw	r2,20(sp)
 70005ac:	80000226 	beq	r16,zero,70005b8 <_puts_r+0x5c>
 70005b0:	80800e17 	ldw	r2,56(r16)
 70005b4:	10001426 	beq	r2,zero,7000608 <_puts_r+0xac>
 70005b8:	81400217 	ldw	r5,8(r16)
 70005bc:	2880030b 	ldhu	r2,12(r5)
 70005c0:	10c8000c 	andi	r3,r2,8192
 70005c4:	1800061e 	bne	r3,zero,70005e0 <_puts_r+0x84>
 70005c8:	29001917 	ldw	r4,100(r5)
 70005cc:	00f7ffc4 	movi	r3,-8193
 70005d0:	10880014 	ori	r2,r2,8192
 70005d4:	20c6703a 	and	r3,r4,r3
 70005d8:	2880030d 	sth	r2,12(r5)
 70005dc:	28c01915 	stw	r3,100(r5)
 70005e0:	d9800404 	addi	r6,sp,16
 70005e4:	8009883a 	mov	r4,r16
 70005e8:	7004df00 	call	7004df0 <__sfvwrite_r>
 70005ec:	1000091e 	bne	r2,zero,7000614 <_puts_r+0xb8>
 70005f0:	00800284 	movi	r2,10
 70005f4:	dfc00917 	ldw	ra,36(sp)
 70005f8:	dc400817 	ldw	r17,32(sp)
 70005fc:	dc000717 	ldw	r16,28(sp)
 7000600:	dec00a04 	addi	sp,sp,40
 7000604:	f800283a 	ret
 7000608:	8009883a 	mov	r4,r16
 700060c:	700496c0 	call	700496c <__sinit>
 7000610:	003fe906 	br	70005b8 <__alt_data_end+0xff0005b8>
 7000614:	00bfffc4 	movi	r2,-1
 7000618:	003ff606 	br	70005f4 <__alt_data_end+0xff0005f4>

0700061c <puts>:
 700061c:	0081c074 	movhi	r2,1793
 7000620:	10864a04 	addi	r2,r2,6440
 7000624:	200b883a 	mov	r5,r4
 7000628:	11000017 	ldw	r4,0(r2)
 700062c:	700055c1 	jmpi	700055c <_puts_r>

07000630 <strlen>:
 7000630:	208000cc 	andi	r2,r4,3
 7000634:	10002026 	beq	r2,zero,70006b8 <strlen+0x88>
 7000638:	20800007 	ldb	r2,0(r4)
 700063c:	10002026 	beq	r2,zero,70006c0 <strlen+0x90>
 7000640:	2005883a 	mov	r2,r4
 7000644:	00000206 	br	7000650 <strlen+0x20>
 7000648:	10c00007 	ldb	r3,0(r2)
 700064c:	18001826 	beq	r3,zero,70006b0 <strlen+0x80>
 7000650:	10800044 	addi	r2,r2,1
 7000654:	10c000cc 	andi	r3,r2,3
 7000658:	183ffb1e 	bne	r3,zero,7000648 <__alt_data_end+0xff000648>
 700065c:	10c00017 	ldw	r3,0(r2)
 7000660:	01ffbff4 	movhi	r7,65279
 7000664:	39ffbfc4 	addi	r7,r7,-257
 7000668:	00ca303a 	nor	r5,zero,r3
 700066c:	01a02074 	movhi	r6,32897
 7000670:	19c7883a 	add	r3,r3,r7
 7000674:	31a02004 	addi	r6,r6,-32640
 7000678:	1946703a 	and	r3,r3,r5
 700067c:	1986703a 	and	r3,r3,r6
 7000680:	1800091e 	bne	r3,zero,70006a8 <strlen+0x78>
 7000684:	10800104 	addi	r2,r2,4
 7000688:	10c00017 	ldw	r3,0(r2)
 700068c:	19cb883a 	add	r5,r3,r7
 7000690:	00c6303a 	nor	r3,zero,r3
 7000694:	28c6703a 	and	r3,r5,r3
 7000698:	1986703a 	and	r3,r3,r6
 700069c:	183ff926 	beq	r3,zero,7000684 <__alt_data_end+0xff000684>
 70006a0:	00000106 	br	70006a8 <strlen+0x78>
 70006a4:	10800044 	addi	r2,r2,1
 70006a8:	10c00007 	ldb	r3,0(r2)
 70006ac:	183ffd1e 	bne	r3,zero,70006a4 <__alt_data_end+0xff0006a4>
 70006b0:	1105c83a 	sub	r2,r2,r4
 70006b4:	f800283a 	ret
 70006b8:	2005883a 	mov	r2,r4
 70006bc:	003fe706 	br	700065c <__alt_data_end+0xff00065c>
 70006c0:	0005883a 	mov	r2,zero
 70006c4:	f800283a 	ret

070006c8 <___vfprintf_internal_r>:
 70006c8:	deffb804 	addi	sp,sp,-288
 70006cc:	dfc04715 	stw	ra,284(sp)
 70006d0:	ddc04515 	stw	r23,276(sp)
 70006d4:	dd404315 	stw	r21,268(sp)
 70006d8:	d9002c15 	stw	r4,176(sp)
 70006dc:	282f883a 	mov	r23,r5
 70006e0:	302b883a 	mov	r21,r6
 70006e4:	d9c02d15 	stw	r7,180(sp)
 70006e8:	df004615 	stw	fp,280(sp)
 70006ec:	dd804415 	stw	r22,272(sp)
 70006f0:	dd004215 	stw	r20,264(sp)
 70006f4:	dcc04115 	stw	r19,260(sp)
 70006f8:	dc804015 	stw	r18,256(sp)
 70006fc:	dc403f15 	stw	r17,252(sp)
 7000700:	dc003e15 	stw	r16,248(sp)
 7000704:	70054e00 	call	70054e0 <_localeconv_r>
 7000708:	10800017 	ldw	r2,0(r2)
 700070c:	1009883a 	mov	r4,r2
 7000710:	d8803415 	stw	r2,208(sp)
 7000714:	70006300 	call	7000630 <strlen>
 7000718:	d8803715 	stw	r2,220(sp)
 700071c:	d8802c17 	ldw	r2,176(sp)
 7000720:	10000226 	beq	r2,zero,700072c <___vfprintf_internal_r+0x64>
 7000724:	10800e17 	ldw	r2,56(r2)
 7000728:	1000f926 	beq	r2,zero,7000b10 <___vfprintf_internal_r+0x448>
 700072c:	b880030b 	ldhu	r2,12(r23)
 7000730:	10c8000c 	andi	r3,r2,8192
 7000734:	1800061e 	bne	r3,zero,7000750 <___vfprintf_internal_r+0x88>
 7000738:	b9001917 	ldw	r4,100(r23)
 700073c:	00f7ffc4 	movi	r3,-8193
 7000740:	10880014 	ori	r2,r2,8192
 7000744:	20c6703a 	and	r3,r4,r3
 7000748:	b880030d 	sth	r2,12(r23)
 700074c:	b8c01915 	stw	r3,100(r23)
 7000750:	10c0020c 	andi	r3,r2,8
 7000754:	1800c126 	beq	r3,zero,7000a5c <___vfprintf_internal_r+0x394>
 7000758:	b8c00417 	ldw	r3,16(r23)
 700075c:	1800bf26 	beq	r3,zero,7000a5c <___vfprintf_internal_r+0x394>
 7000760:	1080068c 	andi	r2,r2,26
 7000764:	00c00284 	movi	r3,10
 7000768:	10c0c426 	beq	r2,r3,7000a7c <___vfprintf_internal_r+0x3b4>
 700076c:	d8c00404 	addi	r3,sp,16
 7000770:	0501c074 	movhi	r20,1793
 7000774:	d9001e04 	addi	r4,sp,120
 7000778:	a53ee784 	addi	r20,r20,-1122
 700077c:	d8c01e15 	stw	r3,120(sp)
 7000780:	d8002015 	stw	zero,128(sp)
 7000784:	d8001f15 	stw	zero,124(sp)
 7000788:	d8003315 	stw	zero,204(sp)
 700078c:	d8003615 	stw	zero,216(sp)
 7000790:	d8003815 	stw	zero,224(sp)
 7000794:	1811883a 	mov	r8,r3
 7000798:	d8003915 	stw	zero,228(sp)
 700079c:	d8003a15 	stw	zero,232(sp)
 70007a0:	d8002f15 	stw	zero,188(sp)
 70007a4:	d9002815 	stw	r4,160(sp)
 70007a8:	a8800007 	ldb	r2,0(r21)
 70007ac:	10027b26 	beq	r2,zero,700119c <___vfprintf_internal_r+0xad4>
 70007b0:	00c00944 	movi	r3,37
 70007b4:	a821883a 	mov	r16,r21
 70007b8:	10c0021e 	bne	r2,r3,70007c4 <___vfprintf_internal_r+0xfc>
 70007bc:	00001406 	br	7000810 <___vfprintf_internal_r+0x148>
 70007c0:	10c00326 	beq	r2,r3,70007d0 <___vfprintf_internal_r+0x108>
 70007c4:	84000044 	addi	r16,r16,1
 70007c8:	80800007 	ldb	r2,0(r16)
 70007cc:	103ffc1e 	bne	r2,zero,70007c0 <__alt_data_end+0xff0007c0>
 70007d0:	8563c83a 	sub	r17,r16,r21
 70007d4:	88000e26 	beq	r17,zero,7000810 <___vfprintf_internal_r+0x148>
 70007d8:	d8c02017 	ldw	r3,128(sp)
 70007dc:	d8801f17 	ldw	r2,124(sp)
 70007e0:	45400015 	stw	r21,0(r8)
 70007e4:	1c47883a 	add	r3,r3,r17
 70007e8:	10800044 	addi	r2,r2,1
 70007ec:	d8c02015 	stw	r3,128(sp)
 70007f0:	44400115 	stw	r17,4(r8)
 70007f4:	d8801f15 	stw	r2,124(sp)
 70007f8:	00c001c4 	movi	r3,7
 70007fc:	1880a716 	blt	r3,r2,7000a9c <___vfprintf_internal_r+0x3d4>
 7000800:	42000204 	addi	r8,r8,8
 7000804:	d9402f17 	ldw	r5,188(sp)
 7000808:	2c4b883a 	add	r5,r5,r17
 700080c:	d9402f15 	stw	r5,188(sp)
 7000810:	80800007 	ldb	r2,0(r16)
 7000814:	1000a826 	beq	r2,zero,7000ab8 <___vfprintf_internal_r+0x3f0>
 7000818:	84400047 	ldb	r17,1(r16)
 700081c:	00bfffc4 	movi	r2,-1
 7000820:	85400044 	addi	r21,r16,1
 7000824:	d8002785 	stb	zero,158(sp)
 7000828:	0007883a 	mov	r3,zero
 700082c:	000f883a 	mov	r7,zero
 7000830:	d8802915 	stw	r2,164(sp)
 7000834:	d8003115 	stw	zero,196(sp)
 7000838:	0025883a 	mov	r18,zero
 700083c:	01401604 	movi	r5,88
 7000840:	01800244 	movi	r6,9
 7000844:	02800a84 	movi	r10,42
 7000848:	02401b04 	movi	r9,108
 700084c:	ad400044 	addi	r21,r21,1
 7000850:	88bff804 	addi	r2,r17,-32
 7000854:	28830436 	bltu	r5,r2,7001468 <___vfprintf_internal_r+0xda0>
 7000858:	100490ba 	slli	r2,r2,2
 700085c:	0101c034 	movhi	r4,1792
 7000860:	21021c04 	addi	r4,r4,2160
 7000864:	1105883a 	add	r2,r2,r4
 7000868:	10800017 	ldw	r2,0(r2)
 700086c:	1000683a 	jmp	r2
 7000870:	07001388 	cmpgei	fp,zero,78
 7000874:	07001468 	cmpgeui	fp,zero,81
 7000878:	07001468 	cmpgeui	fp,zero,81
 700087c:	070013a8 	cmpgeui	fp,zero,78
 7000880:	07001468 	cmpgeui	fp,zero,81
 7000884:	07001468 	cmpgeui	fp,zero,81
 7000888:	07001468 	cmpgeui	fp,zero,81
 700088c:	07001468 	cmpgeui	fp,zero,81
 7000890:	07001468 	cmpgeui	fp,zero,81
 7000894:	07001468 	cmpgeui	fp,zero,81
 7000898:	07000b1c 	xori	fp,zero,44
 700089c:	070012c4 	movi	fp,75
 70008a0:	07001468 	cmpgeui	fp,zero,81
 70008a4:	070009e4 	muli	fp,zero,39
 70008a8:	07000b44 	movi	fp,45
 70008ac:	07001468 	cmpgeui	fp,zero,81
 70008b0:	07000b84 	movi	fp,46
 70008b4:	07000b90 	cmplti	fp,zero,46
 70008b8:	07000b90 	cmplti	fp,zero,46
 70008bc:	07000b90 	cmplti	fp,zero,46
 70008c0:	07000b90 	cmplti	fp,zero,46
 70008c4:	07000b90 	cmplti	fp,zero,46
 70008c8:	07000b90 	cmplti	fp,zero,46
 70008cc:	07000b90 	cmplti	fp,zero,46
 70008d0:	07000b90 	cmplti	fp,zero,46
 70008d4:	07000b90 	cmplti	fp,zero,46
 70008d8:	07001468 	cmpgeui	fp,zero,81
 70008dc:	07001468 	cmpgeui	fp,zero,81
 70008e0:	07001468 	cmpgeui	fp,zero,81
 70008e4:	07001468 	cmpgeui	fp,zero,81
 70008e8:	07001468 	cmpgeui	fp,zero,81
 70008ec:	07001468 	cmpgeui	fp,zero,81
 70008f0:	07001468 	cmpgeui	fp,zero,81
 70008f4:	07001468 	cmpgeui	fp,zero,81
 70008f8:	07001468 	cmpgeui	fp,zero,81
 70008fc:	07001468 	cmpgeui	fp,zero,81
 7000900:	07000bc4 	movi	fp,47
 7000904:	07000c80 	call	7000c8 <__alt_mem_sdram-0x38fff38>
 7000908:	07001468 	cmpgeui	fp,zero,81
 700090c:	07000c80 	call	7000c8 <__alt_mem_sdram-0x38fff38>
 7000910:	07001468 	cmpgeui	fp,zero,81
 7000914:	07001468 	cmpgeui	fp,zero,81
 7000918:	07001468 	cmpgeui	fp,zero,81
 700091c:	07001468 	cmpgeui	fp,zero,81
 7000920:	07000d20 	cmpeqi	fp,zero,52
 7000924:	07001468 	cmpgeui	fp,zero,81
 7000928:	07001468 	cmpgeui	fp,zero,81
 700092c:	07000d2c 	andhi	fp,zero,52
 7000930:	07001468 	cmpgeui	fp,zero,81
 7000934:	07001468 	cmpgeui	fp,zero,81
 7000938:	07001468 	cmpgeui	fp,zero,81
 700093c:	07001468 	cmpgeui	fp,zero,81
 7000940:	07001468 	cmpgeui	fp,zero,81
 7000944:	070011a4 	muli	fp,zero,70
 7000948:	07001468 	cmpgeui	fp,zero,81
 700094c:	07001468 	cmpgeui	fp,zero,81
 7000950:	07001204 	movi	fp,72
 7000954:	07001468 	cmpgeui	fp,zero,81
 7000958:	07001468 	cmpgeui	fp,zero,81
 700095c:	07001468 	cmpgeui	fp,zero,81
 7000960:	07001468 	cmpgeui	fp,zero,81
 7000964:	07001468 	cmpgeui	fp,zero,81
 7000968:	07001468 	cmpgeui	fp,zero,81
 700096c:	07001468 	cmpgeui	fp,zero,81
 7000970:	07001468 	cmpgeui	fp,zero,81
 7000974:	07001468 	cmpgeui	fp,zero,81
 7000978:	07001468 	cmpgeui	fp,zero,81
 700097c:	07001414 	movui	fp,80
 7000980:	070013b4 	movhi	fp,78
 7000984:	07000c80 	call	7000c8 <__alt_mem_sdram-0x38fff38>
 7000988:	07000c80 	call	7000c8 <__alt_mem_sdram-0x38fff38>
 700098c:	07000c80 	call	7000c8 <__alt_mem_sdram-0x38fff38>
 7000990:	070013c4 	movi	fp,79
 7000994:	070013b4 	movhi	fp,78
 7000998:	07001468 	cmpgeui	fp,zero,81
 700099c:	07001468 	cmpgeui	fp,zero,81
 70009a0:	070013d0 	cmplti	fp,zero,79
 70009a4:	07001468 	cmpgeui	fp,zero,81
 70009a8:	070013e0 	cmpeqi	fp,zero,79
 70009ac:	070012b4 	movhi	fp,74
 70009b0:	070009f0 	cmpltui	fp,zero,39
 70009b4:	070012d4 	movui	fp,75
 70009b8:	07001468 	cmpgeui	fp,zero,81
 70009bc:	070012e0 	cmpeqi	fp,zero,75
 70009c0:	07001468 	cmpgeui	fp,zero,81
 70009c4:	0700133c 	xorhi	fp,zero,76
 70009c8:	07001468 	cmpgeui	fp,zero,81
 70009cc:	07001468 	cmpgeui	fp,zero,81
 70009d0:	0700134c 	andi	fp,zero,77
 70009d4:	d9003117 	ldw	r4,196(sp)
 70009d8:	d8802d15 	stw	r2,180(sp)
 70009dc:	0109c83a 	sub	r4,zero,r4
 70009e0:	d9003115 	stw	r4,196(sp)
 70009e4:	94800114 	ori	r18,r18,4
 70009e8:	ac400007 	ldb	r17,0(r21)
 70009ec:	003f9706 	br	700084c <__alt_data_end+0xff00084c>
 70009f0:	00800c04 	movi	r2,48
 70009f4:	d9002d17 	ldw	r4,180(sp)
 70009f8:	d9402917 	ldw	r5,164(sp)
 70009fc:	d8802705 	stb	r2,156(sp)
 7000a00:	00801e04 	movi	r2,120
 7000a04:	d8802745 	stb	r2,157(sp)
 7000a08:	d8002785 	stb	zero,158(sp)
 7000a0c:	20c00104 	addi	r3,r4,4
 7000a10:	24c00017 	ldw	r19,0(r4)
 7000a14:	002d883a 	mov	r22,zero
 7000a18:	90800094 	ori	r2,r18,2
 7000a1c:	28029a16 	blt	r5,zero,7001488 <___vfprintf_internal_r+0xdc0>
 7000a20:	00bfdfc4 	movi	r2,-129
 7000a24:	90a4703a 	and	r18,r18,r2
 7000a28:	d8c02d15 	stw	r3,180(sp)
 7000a2c:	94800094 	ori	r18,r18,2
 7000a30:	9802871e 	bne	r19,zero,7001450 <___vfprintf_internal_r+0xd88>
 7000a34:	0081c074 	movhi	r2,1793
 7000a38:	10bee004 	addi	r2,r2,-1152
 7000a3c:	d8803915 	stw	r2,228(sp)
 7000a40:	04401e04 	movi	r17,120
 7000a44:	d8802917 	ldw	r2,164(sp)
 7000a48:	0039883a 	mov	fp,zero
 7000a4c:	1001e926 	beq	r2,zero,70011f4 <___vfprintf_internal_r+0xb2c>
 7000a50:	0027883a 	mov	r19,zero
 7000a54:	002d883a 	mov	r22,zero
 7000a58:	00020506 	br	7001270 <___vfprintf_internal_r+0xba8>
 7000a5c:	d9002c17 	ldw	r4,176(sp)
 7000a60:	b80b883a 	mov	r5,r23
 7000a64:	70029980 	call	7002998 <__swsetup_r>
 7000a68:	1005ac1e 	bne	r2,zero,700211c <___vfprintf_internal_r+0x1a54>
 7000a6c:	b880030b 	ldhu	r2,12(r23)
 7000a70:	00c00284 	movi	r3,10
 7000a74:	1080068c 	andi	r2,r2,26
 7000a78:	10ff3c1e 	bne	r2,r3,700076c <__alt_data_end+0xff00076c>
 7000a7c:	b880038f 	ldh	r2,14(r23)
 7000a80:	103f3a16 	blt	r2,zero,700076c <__alt_data_end+0xff00076c>
 7000a84:	d9c02d17 	ldw	r7,180(sp)
 7000a88:	d9002c17 	ldw	r4,176(sp)
 7000a8c:	a80d883a 	mov	r6,r21
 7000a90:	b80b883a 	mov	r5,r23
 7000a94:	70028dc0 	call	70028dc <__sbprintf>
 7000a98:	00001106 	br	7000ae0 <___vfprintf_internal_r+0x418>
 7000a9c:	d9002c17 	ldw	r4,176(sp)
 7000aa0:	d9801e04 	addi	r6,sp,120
 7000aa4:	b80b883a 	mov	r5,r23
 7000aa8:	7007e2c0 	call	7007e2c <__sprint_r>
 7000aac:	1000081e 	bne	r2,zero,7000ad0 <___vfprintf_internal_r+0x408>
 7000ab0:	da000404 	addi	r8,sp,16
 7000ab4:	003f5306 	br	7000804 <__alt_data_end+0xff000804>
 7000ab8:	d8802017 	ldw	r2,128(sp)
 7000abc:	10000426 	beq	r2,zero,7000ad0 <___vfprintf_internal_r+0x408>
 7000ac0:	d9002c17 	ldw	r4,176(sp)
 7000ac4:	d9801e04 	addi	r6,sp,120
 7000ac8:	b80b883a 	mov	r5,r23
 7000acc:	7007e2c0 	call	7007e2c <__sprint_r>
 7000ad0:	b880030b 	ldhu	r2,12(r23)
 7000ad4:	1080100c 	andi	r2,r2,64
 7000ad8:	1005901e 	bne	r2,zero,700211c <___vfprintf_internal_r+0x1a54>
 7000adc:	d8802f17 	ldw	r2,188(sp)
 7000ae0:	dfc04717 	ldw	ra,284(sp)
 7000ae4:	df004617 	ldw	fp,280(sp)
 7000ae8:	ddc04517 	ldw	r23,276(sp)
 7000aec:	dd804417 	ldw	r22,272(sp)
 7000af0:	dd404317 	ldw	r21,268(sp)
 7000af4:	dd004217 	ldw	r20,264(sp)
 7000af8:	dcc04117 	ldw	r19,260(sp)
 7000afc:	dc804017 	ldw	r18,256(sp)
 7000b00:	dc403f17 	ldw	r17,252(sp)
 7000b04:	dc003e17 	ldw	r16,248(sp)
 7000b08:	dec04804 	addi	sp,sp,288
 7000b0c:	f800283a 	ret
 7000b10:	d9002c17 	ldw	r4,176(sp)
 7000b14:	700496c0 	call	700496c <__sinit>
 7000b18:	003f0406 	br	700072c <__alt_data_end+0xff00072c>
 7000b1c:	d8802d17 	ldw	r2,180(sp)
 7000b20:	d9002d17 	ldw	r4,180(sp)
 7000b24:	10800017 	ldw	r2,0(r2)
 7000b28:	d8803115 	stw	r2,196(sp)
 7000b2c:	20800104 	addi	r2,r4,4
 7000b30:	d9003117 	ldw	r4,196(sp)
 7000b34:	203fa716 	blt	r4,zero,70009d4 <__alt_data_end+0xff0009d4>
 7000b38:	d8802d15 	stw	r2,180(sp)
 7000b3c:	ac400007 	ldb	r17,0(r21)
 7000b40:	003f4206 	br	700084c <__alt_data_end+0xff00084c>
 7000b44:	ac400007 	ldb	r17,0(r21)
 7000b48:	aac00044 	addi	r11,r21,1
 7000b4c:	8a872826 	beq	r17,r10,70027f0 <___vfprintf_internal_r+0x2128>
 7000b50:	88bff404 	addi	r2,r17,-48
 7000b54:	0009883a 	mov	r4,zero
 7000b58:	30867d36 	bltu	r6,r2,7002550 <___vfprintf_internal_r+0x1e88>
 7000b5c:	5c400007 	ldb	r17,0(r11)
 7000b60:	210002a4 	muli	r4,r4,10
 7000b64:	5d400044 	addi	r21,r11,1
 7000b68:	a817883a 	mov	r11,r21
 7000b6c:	2089883a 	add	r4,r4,r2
 7000b70:	88bff404 	addi	r2,r17,-48
 7000b74:	30bff92e 	bgeu	r6,r2,7000b5c <__alt_data_end+0xff000b5c>
 7000b78:	2005c916 	blt	r4,zero,70022a0 <___vfprintf_internal_r+0x1bd8>
 7000b7c:	d9002915 	stw	r4,164(sp)
 7000b80:	003f3306 	br	7000850 <__alt_data_end+0xff000850>
 7000b84:	94802014 	ori	r18,r18,128
 7000b88:	ac400007 	ldb	r17,0(r21)
 7000b8c:	003f2f06 	br	700084c <__alt_data_end+0xff00084c>
 7000b90:	a809883a 	mov	r4,r21
 7000b94:	d8003115 	stw	zero,196(sp)
 7000b98:	88bff404 	addi	r2,r17,-48
 7000b9c:	0017883a 	mov	r11,zero
 7000ba0:	24400007 	ldb	r17,0(r4)
 7000ba4:	5ac002a4 	muli	r11,r11,10
 7000ba8:	ad400044 	addi	r21,r21,1
 7000bac:	a809883a 	mov	r4,r21
 7000bb0:	12d7883a 	add	r11,r2,r11
 7000bb4:	88bff404 	addi	r2,r17,-48
 7000bb8:	30bff92e 	bgeu	r6,r2,7000ba0 <__alt_data_end+0xff000ba0>
 7000bbc:	dac03115 	stw	r11,196(sp)
 7000bc0:	003f2306 	br	7000850 <__alt_data_end+0xff000850>
 7000bc4:	18c03fcc 	andi	r3,r3,255
 7000bc8:	18072b1e 	bne	r3,zero,7002878 <___vfprintf_internal_r+0x21b0>
 7000bcc:	94800414 	ori	r18,r18,16
 7000bd0:	9080080c 	andi	r2,r18,32
 7000bd4:	10037b26 	beq	r2,zero,70019c4 <___vfprintf_internal_r+0x12fc>
 7000bd8:	d9402d17 	ldw	r5,180(sp)
 7000bdc:	28800117 	ldw	r2,4(r5)
 7000be0:	2cc00017 	ldw	r19,0(r5)
 7000be4:	29400204 	addi	r5,r5,8
 7000be8:	d9402d15 	stw	r5,180(sp)
 7000bec:	102d883a 	mov	r22,r2
 7000bf0:	10044b16 	blt	r2,zero,7001d20 <___vfprintf_internal_r+0x1658>
 7000bf4:	d9402917 	ldw	r5,164(sp)
 7000bf8:	df002783 	ldbu	fp,158(sp)
 7000bfc:	2803bc16 	blt	r5,zero,7001af0 <___vfprintf_internal_r+0x1428>
 7000c00:	00ffdfc4 	movi	r3,-129
 7000c04:	9d84b03a 	or	r2,r19,r22
 7000c08:	90e4703a 	and	r18,r18,r3
 7000c0c:	10017726 	beq	r2,zero,70011ec <___vfprintf_internal_r+0xb24>
 7000c10:	b0038326 	beq	r22,zero,7001a20 <___vfprintf_internal_r+0x1358>
 7000c14:	dc402a15 	stw	r17,168(sp)
 7000c18:	dc001e04 	addi	r16,sp,120
 7000c1c:	b023883a 	mov	r17,r22
 7000c20:	402d883a 	mov	r22,r8
 7000c24:	9809883a 	mov	r4,r19
 7000c28:	880b883a 	mov	r5,r17
 7000c2c:	01800284 	movi	r6,10
 7000c30:	000f883a 	mov	r7,zero
 7000c34:	700a2240 	call	700a224 <__umoddi3>
 7000c38:	10800c04 	addi	r2,r2,48
 7000c3c:	843fffc4 	addi	r16,r16,-1
 7000c40:	9809883a 	mov	r4,r19
 7000c44:	880b883a 	mov	r5,r17
 7000c48:	80800005 	stb	r2,0(r16)
 7000c4c:	01800284 	movi	r6,10
 7000c50:	000f883a 	mov	r7,zero
 7000c54:	7009cac0 	call	7009cac <__udivdi3>
 7000c58:	1027883a 	mov	r19,r2
 7000c5c:	10c4b03a 	or	r2,r2,r3
 7000c60:	1823883a 	mov	r17,r3
 7000c64:	103fef1e 	bne	r2,zero,7000c24 <__alt_data_end+0xff000c24>
 7000c68:	d8c02817 	ldw	r3,160(sp)
 7000c6c:	dc402a17 	ldw	r17,168(sp)
 7000c70:	b011883a 	mov	r8,r22
 7000c74:	1c07c83a 	sub	r3,r3,r16
 7000c78:	d8c02e15 	stw	r3,184(sp)
 7000c7c:	00005906 	br	7000de4 <___vfprintf_internal_r+0x71c>
 7000c80:	18c03fcc 	andi	r3,r3,255
 7000c84:	1806fa1e 	bne	r3,zero,7002870 <___vfprintf_internal_r+0x21a8>
 7000c88:	9080020c 	andi	r2,r18,8
 7000c8c:	10048a26 	beq	r2,zero,7001eb8 <___vfprintf_internal_r+0x17f0>
 7000c90:	d8c02d17 	ldw	r3,180(sp)
 7000c94:	d9002d17 	ldw	r4,180(sp)
 7000c98:	d9402d17 	ldw	r5,180(sp)
 7000c9c:	18c00017 	ldw	r3,0(r3)
 7000ca0:	21000117 	ldw	r4,4(r4)
 7000ca4:	29400204 	addi	r5,r5,8
 7000ca8:	d8c03615 	stw	r3,216(sp)
 7000cac:	d9003815 	stw	r4,224(sp)
 7000cb0:	d9402d15 	stw	r5,180(sp)
 7000cb4:	d9003617 	ldw	r4,216(sp)
 7000cb8:	d9403817 	ldw	r5,224(sp)
 7000cbc:	da003d15 	stw	r8,244(sp)
 7000cc0:	04000044 	movi	r16,1
 7000cc4:	7007a500 	call	7007a50 <__fpclassifyd>
 7000cc8:	da003d17 	ldw	r8,244(sp)
 7000ccc:	14041f1e 	bne	r2,r16,7001d4c <___vfprintf_internal_r+0x1684>
 7000cd0:	d9003617 	ldw	r4,216(sp)
 7000cd4:	d9403817 	ldw	r5,224(sp)
 7000cd8:	000d883a 	mov	r6,zero
 7000cdc:	000f883a 	mov	r7,zero
 7000ce0:	700bc080 	call	700bc08 <__ledf2>
 7000ce4:	da003d17 	ldw	r8,244(sp)
 7000ce8:	1005be16 	blt	r2,zero,70023e4 <___vfprintf_internal_r+0x1d1c>
 7000cec:	df002783 	ldbu	fp,158(sp)
 7000cf0:	008011c4 	movi	r2,71
 7000cf4:	1445330e 	bge	r2,r17,70021c4 <___vfprintf_internal_r+0x1afc>
 7000cf8:	0401c074 	movhi	r16,1793
 7000cfc:	843ed804 	addi	r16,r16,-1184
 7000d00:	00c000c4 	movi	r3,3
 7000d04:	00bfdfc4 	movi	r2,-129
 7000d08:	d8c02a15 	stw	r3,168(sp)
 7000d0c:	90a4703a 	and	r18,r18,r2
 7000d10:	d8c02e15 	stw	r3,184(sp)
 7000d14:	d8002915 	stw	zero,164(sp)
 7000d18:	d8003215 	stw	zero,200(sp)
 7000d1c:	00003706 	br	7000dfc <___vfprintf_internal_r+0x734>
 7000d20:	94800214 	ori	r18,r18,8
 7000d24:	ac400007 	ldb	r17,0(r21)
 7000d28:	003ec806 	br	700084c <__alt_data_end+0xff00084c>
 7000d2c:	18c03fcc 	andi	r3,r3,255
 7000d30:	1806db1e 	bne	r3,zero,70028a0 <___vfprintf_internal_r+0x21d8>
 7000d34:	94800414 	ori	r18,r18,16
 7000d38:	9080080c 	andi	r2,r18,32
 7000d3c:	1002d826 	beq	r2,zero,70018a0 <___vfprintf_internal_r+0x11d8>
 7000d40:	d9402d17 	ldw	r5,180(sp)
 7000d44:	d8c02917 	ldw	r3,164(sp)
 7000d48:	d8002785 	stb	zero,158(sp)
 7000d4c:	28800204 	addi	r2,r5,8
 7000d50:	2cc00017 	ldw	r19,0(r5)
 7000d54:	2d800117 	ldw	r22,4(r5)
 7000d58:	18048f16 	blt	r3,zero,7001f98 <___vfprintf_internal_r+0x18d0>
 7000d5c:	013fdfc4 	movi	r4,-129
 7000d60:	9d86b03a 	or	r3,r19,r22
 7000d64:	d8802d15 	stw	r2,180(sp)
 7000d68:	9124703a 	and	r18,r18,r4
 7000d6c:	1802d91e 	bne	r3,zero,70018d4 <___vfprintf_internal_r+0x120c>
 7000d70:	d8c02917 	ldw	r3,164(sp)
 7000d74:	0039883a 	mov	fp,zero
 7000d78:	1805c326 	beq	r3,zero,7002488 <___vfprintf_internal_r+0x1dc0>
 7000d7c:	0027883a 	mov	r19,zero
 7000d80:	002d883a 	mov	r22,zero
 7000d84:	dc001e04 	addi	r16,sp,120
 7000d88:	9806d0fa 	srli	r3,r19,3
 7000d8c:	b008977a 	slli	r4,r22,29
 7000d90:	b02cd0fa 	srli	r22,r22,3
 7000d94:	9cc001cc 	andi	r19,r19,7
 7000d98:	98800c04 	addi	r2,r19,48
 7000d9c:	843fffc4 	addi	r16,r16,-1
 7000da0:	20e6b03a 	or	r19,r4,r3
 7000da4:	80800005 	stb	r2,0(r16)
 7000da8:	9d86b03a 	or	r3,r19,r22
 7000dac:	183ff61e 	bne	r3,zero,7000d88 <__alt_data_end+0xff000d88>
 7000db0:	90c0004c 	andi	r3,r18,1
 7000db4:	18013b26 	beq	r3,zero,70012a4 <___vfprintf_internal_r+0xbdc>
 7000db8:	10803fcc 	andi	r2,r2,255
 7000dbc:	1080201c 	xori	r2,r2,128
 7000dc0:	10bfe004 	addi	r2,r2,-128
 7000dc4:	00c00c04 	movi	r3,48
 7000dc8:	10c13626 	beq	r2,r3,70012a4 <___vfprintf_internal_r+0xbdc>
 7000dcc:	80ffffc5 	stb	r3,-1(r16)
 7000dd0:	d8c02817 	ldw	r3,160(sp)
 7000dd4:	80bfffc4 	addi	r2,r16,-1
 7000dd8:	1021883a 	mov	r16,r2
 7000ddc:	1887c83a 	sub	r3,r3,r2
 7000de0:	d8c02e15 	stw	r3,184(sp)
 7000de4:	d8802e17 	ldw	r2,184(sp)
 7000de8:	d9002917 	ldw	r4,164(sp)
 7000dec:	1100010e 	bge	r2,r4,7000df4 <___vfprintf_internal_r+0x72c>
 7000df0:	2005883a 	mov	r2,r4
 7000df4:	d8802a15 	stw	r2,168(sp)
 7000df8:	d8003215 	stw	zero,200(sp)
 7000dfc:	e7003fcc 	andi	fp,fp,255
 7000e00:	e700201c 	xori	fp,fp,128
 7000e04:	e73fe004 	addi	fp,fp,-128
 7000e08:	e0000326 	beq	fp,zero,7000e18 <___vfprintf_internal_r+0x750>
 7000e0c:	d8c02a17 	ldw	r3,168(sp)
 7000e10:	18c00044 	addi	r3,r3,1
 7000e14:	d8c02a15 	stw	r3,168(sp)
 7000e18:	90c0008c 	andi	r3,r18,2
 7000e1c:	d8c02b15 	stw	r3,172(sp)
 7000e20:	18000326 	beq	r3,zero,7000e30 <___vfprintf_internal_r+0x768>
 7000e24:	d8c02a17 	ldw	r3,168(sp)
 7000e28:	18c00084 	addi	r3,r3,2
 7000e2c:	d8c02a15 	stw	r3,168(sp)
 7000e30:	90c0210c 	andi	r3,r18,132
 7000e34:	d8c03015 	stw	r3,192(sp)
 7000e38:	1801a31e 	bne	r3,zero,70014c8 <___vfprintf_internal_r+0xe00>
 7000e3c:	d9003117 	ldw	r4,196(sp)
 7000e40:	d8c02a17 	ldw	r3,168(sp)
 7000e44:	20e7c83a 	sub	r19,r4,r3
 7000e48:	04c19f0e 	bge	zero,r19,70014c8 <___vfprintf_internal_r+0xe00>
 7000e4c:	02400404 	movi	r9,16
 7000e50:	d8c02017 	ldw	r3,128(sp)
 7000e54:	d8801f17 	ldw	r2,124(sp)
 7000e58:	4cc50d0e 	bge	r9,r19,7002290 <___vfprintf_internal_r+0x1bc8>
 7000e5c:	0141c074 	movhi	r5,1793
 7000e60:	297eeb84 	addi	r5,r5,-1106
 7000e64:	dc403b15 	stw	r17,236(sp)
 7000e68:	d9403515 	stw	r5,212(sp)
 7000e6c:	9823883a 	mov	r17,r19
 7000e70:	482d883a 	mov	r22,r9
 7000e74:	9027883a 	mov	r19,r18
 7000e78:	070001c4 	movi	fp,7
 7000e7c:	8025883a 	mov	r18,r16
 7000e80:	dc002c17 	ldw	r16,176(sp)
 7000e84:	00000306 	br	7000e94 <___vfprintf_internal_r+0x7cc>
 7000e88:	8c7ffc04 	addi	r17,r17,-16
 7000e8c:	42000204 	addi	r8,r8,8
 7000e90:	b440130e 	bge	r22,r17,7000ee0 <___vfprintf_internal_r+0x818>
 7000e94:	0101c074 	movhi	r4,1793
 7000e98:	18c00404 	addi	r3,r3,16
 7000e9c:	10800044 	addi	r2,r2,1
 7000ea0:	213eeb84 	addi	r4,r4,-1106
 7000ea4:	41000015 	stw	r4,0(r8)
 7000ea8:	45800115 	stw	r22,4(r8)
 7000eac:	d8c02015 	stw	r3,128(sp)
 7000eb0:	d8801f15 	stw	r2,124(sp)
 7000eb4:	e0bff40e 	bge	fp,r2,7000e88 <__alt_data_end+0xff000e88>
 7000eb8:	d9801e04 	addi	r6,sp,120
 7000ebc:	b80b883a 	mov	r5,r23
 7000ec0:	8009883a 	mov	r4,r16
 7000ec4:	7007e2c0 	call	7007e2c <__sprint_r>
 7000ec8:	103f011e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7000ecc:	8c7ffc04 	addi	r17,r17,-16
 7000ed0:	d8c02017 	ldw	r3,128(sp)
 7000ed4:	d8801f17 	ldw	r2,124(sp)
 7000ed8:	da000404 	addi	r8,sp,16
 7000edc:	b47fed16 	blt	r22,r17,7000e94 <__alt_data_end+0xff000e94>
 7000ee0:	9021883a 	mov	r16,r18
 7000ee4:	9825883a 	mov	r18,r19
 7000ee8:	8827883a 	mov	r19,r17
 7000eec:	dc403b17 	ldw	r17,236(sp)
 7000ef0:	d9403517 	ldw	r5,212(sp)
 7000ef4:	98c7883a 	add	r3,r19,r3
 7000ef8:	10800044 	addi	r2,r2,1
 7000efc:	41400015 	stw	r5,0(r8)
 7000f00:	44c00115 	stw	r19,4(r8)
 7000f04:	d8c02015 	stw	r3,128(sp)
 7000f08:	d8801f15 	stw	r2,124(sp)
 7000f0c:	010001c4 	movi	r4,7
 7000f10:	2082a316 	blt	r4,r2,70019a0 <___vfprintf_internal_r+0x12d8>
 7000f14:	df002787 	ldb	fp,158(sp)
 7000f18:	42000204 	addi	r8,r8,8
 7000f1c:	e0000c26 	beq	fp,zero,7000f50 <___vfprintf_internal_r+0x888>
 7000f20:	d8801f17 	ldw	r2,124(sp)
 7000f24:	d9002784 	addi	r4,sp,158
 7000f28:	18c00044 	addi	r3,r3,1
 7000f2c:	10800044 	addi	r2,r2,1
 7000f30:	41000015 	stw	r4,0(r8)
 7000f34:	01000044 	movi	r4,1
 7000f38:	41000115 	stw	r4,4(r8)
 7000f3c:	d8c02015 	stw	r3,128(sp)
 7000f40:	d8801f15 	stw	r2,124(sp)
 7000f44:	010001c4 	movi	r4,7
 7000f48:	20823c16 	blt	r4,r2,700183c <___vfprintf_internal_r+0x1174>
 7000f4c:	42000204 	addi	r8,r8,8
 7000f50:	d8802b17 	ldw	r2,172(sp)
 7000f54:	10000c26 	beq	r2,zero,7000f88 <___vfprintf_internal_r+0x8c0>
 7000f58:	d8801f17 	ldw	r2,124(sp)
 7000f5c:	d9002704 	addi	r4,sp,156
 7000f60:	18c00084 	addi	r3,r3,2
 7000f64:	10800044 	addi	r2,r2,1
 7000f68:	41000015 	stw	r4,0(r8)
 7000f6c:	01000084 	movi	r4,2
 7000f70:	41000115 	stw	r4,4(r8)
 7000f74:	d8c02015 	stw	r3,128(sp)
 7000f78:	d8801f15 	stw	r2,124(sp)
 7000f7c:	010001c4 	movi	r4,7
 7000f80:	20823616 	blt	r4,r2,700185c <___vfprintf_internal_r+0x1194>
 7000f84:	42000204 	addi	r8,r8,8
 7000f88:	d9003017 	ldw	r4,192(sp)
 7000f8c:	00802004 	movi	r2,128
 7000f90:	20819926 	beq	r4,r2,70015f8 <___vfprintf_internal_r+0xf30>
 7000f94:	d9402917 	ldw	r5,164(sp)
 7000f98:	d8802e17 	ldw	r2,184(sp)
 7000f9c:	28adc83a 	sub	r22,r5,r2
 7000fa0:	0580310e 	bge	zero,r22,7001068 <___vfprintf_internal_r+0x9a0>
 7000fa4:	07000404 	movi	fp,16
 7000fa8:	d8801f17 	ldw	r2,124(sp)
 7000fac:	e584140e 	bge	fp,r22,7002000 <___vfprintf_internal_r+0x1938>
 7000fb0:	0141c074 	movhi	r5,1793
 7000fb4:	297ee784 	addi	r5,r5,-1122
 7000fb8:	dc402915 	stw	r17,164(sp)
 7000fbc:	d9402b15 	stw	r5,172(sp)
 7000fc0:	b023883a 	mov	r17,r22
 7000fc4:	04c001c4 	movi	r19,7
 7000fc8:	a82d883a 	mov	r22,r21
 7000fcc:	902b883a 	mov	r21,r18
 7000fd0:	8025883a 	mov	r18,r16
 7000fd4:	dc002c17 	ldw	r16,176(sp)
 7000fd8:	00000306 	br	7000fe8 <___vfprintf_internal_r+0x920>
 7000fdc:	8c7ffc04 	addi	r17,r17,-16
 7000fe0:	42000204 	addi	r8,r8,8
 7000fe4:	e440110e 	bge	fp,r17,700102c <___vfprintf_internal_r+0x964>
 7000fe8:	18c00404 	addi	r3,r3,16
 7000fec:	10800044 	addi	r2,r2,1
 7000ff0:	45000015 	stw	r20,0(r8)
 7000ff4:	47000115 	stw	fp,4(r8)
 7000ff8:	d8c02015 	stw	r3,128(sp)
 7000ffc:	d8801f15 	stw	r2,124(sp)
 7001000:	98bff60e 	bge	r19,r2,7000fdc <__alt_data_end+0xff000fdc>
 7001004:	d9801e04 	addi	r6,sp,120
 7001008:	b80b883a 	mov	r5,r23
 700100c:	8009883a 	mov	r4,r16
 7001010:	7007e2c0 	call	7007e2c <__sprint_r>
 7001014:	103eae1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001018:	8c7ffc04 	addi	r17,r17,-16
 700101c:	d8c02017 	ldw	r3,128(sp)
 7001020:	d8801f17 	ldw	r2,124(sp)
 7001024:	da000404 	addi	r8,sp,16
 7001028:	e47fef16 	blt	fp,r17,7000fe8 <__alt_data_end+0xff000fe8>
 700102c:	9021883a 	mov	r16,r18
 7001030:	a825883a 	mov	r18,r21
 7001034:	b02b883a 	mov	r21,r22
 7001038:	882d883a 	mov	r22,r17
 700103c:	dc402917 	ldw	r17,164(sp)
 7001040:	d9002b17 	ldw	r4,172(sp)
 7001044:	1d87883a 	add	r3,r3,r22
 7001048:	10800044 	addi	r2,r2,1
 700104c:	41000015 	stw	r4,0(r8)
 7001050:	45800115 	stw	r22,4(r8)
 7001054:	d8c02015 	stw	r3,128(sp)
 7001058:	d8801f15 	stw	r2,124(sp)
 700105c:	010001c4 	movi	r4,7
 7001060:	2081ee16 	blt	r4,r2,700181c <___vfprintf_internal_r+0x1154>
 7001064:	42000204 	addi	r8,r8,8
 7001068:	9080400c 	andi	r2,r18,256
 700106c:	1001181e 	bne	r2,zero,70014d0 <___vfprintf_internal_r+0xe08>
 7001070:	d9402e17 	ldw	r5,184(sp)
 7001074:	d8801f17 	ldw	r2,124(sp)
 7001078:	44000015 	stw	r16,0(r8)
 700107c:	1947883a 	add	r3,r3,r5
 7001080:	10800044 	addi	r2,r2,1
 7001084:	41400115 	stw	r5,4(r8)
 7001088:	d8c02015 	stw	r3,128(sp)
 700108c:	d8801f15 	stw	r2,124(sp)
 7001090:	010001c4 	movi	r4,7
 7001094:	2081d316 	blt	r4,r2,70017e4 <___vfprintf_internal_r+0x111c>
 7001098:	42000204 	addi	r8,r8,8
 700109c:	9480010c 	andi	r18,r18,4
 70010a0:	90003226 	beq	r18,zero,700116c <___vfprintf_internal_r+0xaa4>
 70010a4:	d9403117 	ldw	r5,196(sp)
 70010a8:	d8802a17 	ldw	r2,168(sp)
 70010ac:	28a1c83a 	sub	r16,r5,r2
 70010b0:	04002e0e 	bge	zero,r16,700116c <___vfprintf_internal_r+0xaa4>
 70010b4:	04400404 	movi	r17,16
 70010b8:	d8801f17 	ldw	r2,124(sp)
 70010bc:	8c04a20e 	bge	r17,r16,7002348 <___vfprintf_internal_r+0x1c80>
 70010c0:	0141c074 	movhi	r5,1793
 70010c4:	297eeb84 	addi	r5,r5,-1106
 70010c8:	d9403515 	stw	r5,212(sp)
 70010cc:	048001c4 	movi	r18,7
 70010d0:	dcc02c17 	ldw	r19,176(sp)
 70010d4:	00000306 	br	70010e4 <___vfprintf_internal_r+0xa1c>
 70010d8:	843ffc04 	addi	r16,r16,-16
 70010dc:	42000204 	addi	r8,r8,8
 70010e0:	8c00130e 	bge	r17,r16,7001130 <___vfprintf_internal_r+0xa68>
 70010e4:	0101c074 	movhi	r4,1793
 70010e8:	18c00404 	addi	r3,r3,16
 70010ec:	10800044 	addi	r2,r2,1
 70010f0:	213eeb84 	addi	r4,r4,-1106
 70010f4:	41000015 	stw	r4,0(r8)
 70010f8:	44400115 	stw	r17,4(r8)
 70010fc:	d8c02015 	stw	r3,128(sp)
 7001100:	d8801f15 	stw	r2,124(sp)
 7001104:	90bff40e 	bge	r18,r2,70010d8 <__alt_data_end+0xff0010d8>
 7001108:	d9801e04 	addi	r6,sp,120
 700110c:	b80b883a 	mov	r5,r23
 7001110:	9809883a 	mov	r4,r19
 7001114:	7007e2c0 	call	7007e2c <__sprint_r>
 7001118:	103e6d1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 700111c:	843ffc04 	addi	r16,r16,-16
 7001120:	d8c02017 	ldw	r3,128(sp)
 7001124:	d8801f17 	ldw	r2,124(sp)
 7001128:	da000404 	addi	r8,sp,16
 700112c:	8c3fed16 	blt	r17,r16,70010e4 <__alt_data_end+0xff0010e4>
 7001130:	d9403517 	ldw	r5,212(sp)
 7001134:	1c07883a 	add	r3,r3,r16
 7001138:	10800044 	addi	r2,r2,1
 700113c:	41400015 	stw	r5,0(r8)
 7001140:	44000115 	stw	r16,4(r8)
 7001144:	d8c02015 	stw	r3,128(sp)
 7001148:	d8801f15 	stw	r2,124(sp)
 700114c:	010001c4 	movi	r4,7
 7001150:	2080060e 	bge	r4,r2,700116c <___vfprintf_internal_r+0xaa4>
 7001154:	d9002c17 	ldw	r4,176(sp)
 7001158:	d9801e04 	addi	r6,sp,120
 700115c:	b80b883a 	mov	r5,r23
 7001160:	7007e2c0 	call	7007e2c <__sprint_r>
 7001164:	103e5a1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001168:	d8c02017 	ldw	r3,128(sp)
 700116c:	d8803117 	ldw	r2,196(sp)
 7001170:	d9002a17 	ldw	r4,168(sp)
 7001174:	1100010e 	bge	r2,r4,700117c <___vfprintf_internal_r+0xab4>
 7001178:	2005883a 	mov	r2,r4
 700117c:	d9402f17 	ldw	r5,188(sp)
 7001180:	288b883a 	add	r5,r5,r2
 7001184:	d9402f15 	stw	r5,188(sp)
 7001188:	18019e1e 	bne	r3,zero,7001804 <___vfprintf_internal_r+0x113c>
 700118c:	a8800007 	ldb	r2,0(r21)
 7001190:	d8001f15 	stw	zero,124(sp)
 7001194:	da000404 	addi	r8,sp,16
 7001198:	103d851e 	bne	r2,zero,70007b0 <__alt_data_end+0xff0007b0>
 700119c:	a821883a 	mov	r16,r21
 70011a0:	003d9b06 	br	7000810 <__alt_data_end+0xff000810>
 70011a4:	18c03fcc 	andi	r3,r3,255
 70011a8:	1805c11e 	bne	r3,zero,70028b0 <___vfprintf_internal_r+0x21e8>
 70011ac:	94800414 	ori	r18,r18,16
 70011b0:	9080080c 	andi	r2,r18,32
 70011b4:	10020c26 	beq	r2,zero,70019e8 <___vfprintf_internal_r+0x1320>
 70011b8:	d8802d17 	ldw	r2,180(sp)
 70011bc:	d9002917 	ldw	r4,164(sp)
 70011c0:	d8002785 	stb	zero,158(sp)
 70011c4:	10c00204 	addi	r3,r2,8
 70011c8:	14c00017 	ldw	r19,0(r2)
 70011cc:	15800117 	ldw	r22,4(r2)
 70011d0:	20040f16 	blt	r4,zero,7002210 <___vfprintf_internal_r+0x1b48>
 70011d4:	013fdfc4 	movi	r4,-129
 70011d8:	9d84b03a 	or	r2,r19,r22
 70011dc:	d8c02d15 	stw	r3,180(sp)
 70011e0:	9124703a 	and	r18,r18,r4
 70011e4:	0039883a 	mov	fp,zero
 70011e8:	103e891e 	bne	r2,zero,7000c10 <__alt_data_end+0xff000c10>
 70011ec:	d9002917 	ldw	r4,164(sp)
 70011f0:	2002c11e 	bne	r4,zero,7001cf8 <___vfprintf_internal_r+0x1630>
 70011f4:	d8002915 	stw	zero,164(sp)
 70011f8:	d8002e15 	stw	zero,184(sp)
 70011fc:	dc001e04 	addi	r16,sp,120
 7001200:	003ef806 	br	7000de4 <__alt_data_end+0xff000de4>
 7001204:	18c03fcc 	andi	r3,r3,255
 7001208:	18059d1e 	bne	r3,zero,7002880 <___vfprintf_internal_r+0x21b8>
 700120c:	0141c074 	movhi	r5,1793
 7001210:	297edb04 	addi	r5,r5,-1172
 7001214:	d9403915 	stw	r5,228(sp)
 7001218:	9080080c 	andi	r2,r18,32
 700121c:	10005226 	beq	r2,zero,7001368 <___vfprintf_internal_r+0xca0>
 7001220:	d8802d17 	ldw	r2,180(sp)
 7001224:	14c00017 	ldw	r19,0(r2)
 7001228:	15800117 	ldw	r22,4(r2)
 700122c:	10800204 	addi	r2,r2,8
 7001230:	d8802d15 	stw	r2,180(sp)
 7001234:	9080004c 	andi	r2,r18,1
 7001238:	10019026 	beq	r2,zero,700187c <___vfprintf_internal_r+0x11b4>
 700123c:	9d84b03a 	or	r2,r19,r22
 7001240:	10036926 	beq	r2,zero,7001fe8 <___vfprintf_internal_r+0x1920>
 7001244:	d8c02917 	ldw	r3,164(sp)
 7001248:	00800c04 	movi	r2,48
 700124c:	d8802705 	stb	r2,156(sp)
 7001250:	dc402745 	stb	r17,157(sp)
 7001254:	d8002785 	stb	zero,158(sp)
 7001258:	90800094 	ori	r2,r18,2
 700125c:	18045d16 	blt	r3,zero,70023d4 <___vfprintf_internal_r+0x1d0c>
 7001260:	00bfdfc4 	movi	r2,-129
 7001264:	90a4703a 	and	r18,r18,r2
 7001268:	94800094 	ori	r18,r18,2
 700126c:	0039883a 	mov	fp,zero
 7001270:	d9003917 	ldw	r4,228(sp)
 7001274:	dc001e04 	addi	r16,sp,120
 7001278:	988003cc 	andi	r2,r19,15
 700127c:	b006973a 	slli	r3,r22,28
 7001280:	2085883a 	add	r2,r4,r2
 7001284:	9826d13a 	srli	r19,r19,4
 7001288:	10800003 	ldbu	r2,0(r2)
 700128c:	b02cd13a 	srli	r22,r22,4
 7001290:	843fffc4 	addi	r16,r16,-1
 7001294:	1ce6b03a 	or	r19,r3,r19
 7001298:	80800005 	stb	r2,0(r16)
 700129c:	9d84b03a 	or	r2,r19,r22
 70012a0:	103ff51e 	bne	r2,zero,7001278 <__alt_data_end+0xff001278>
 70012a4:	d8c02817 	ldw	r3,160(sp)
 70012a8:	1c07c83a 	sub	r3,r3,r16
 70012ac:	d8c02e15 	stw	r3,184(sp)
 70012b0:	003ecc06 	br	7000de4 <__alt_data_end+0xff000de4>
 70012b4:	18c03fcc 	andi	r3,r3,255
 70012b8:	183e9f26 	beq	r3,zero,7000d38 <__alt_data_end+0xff000d38>
 70012bc:	d9c02785 	stb	r7,158(sp)
 70012c0:	003e9d06 	br	7000d38 <__alt_data_end+0xff000d38>
 70012c4:	00c00044 	movi	r3,1
 70012c8:	01c00ac4 	movi	r7,43
 70012cc:	ac400007 	ldb	r17,0(r21)
 70012d0:	003d5e06 	br	700084c <__alt_data_end+0xff00084c>
 70012d4:	94800814 	ori	r18,r18,32
 70012d8:	ac400007 	ldb	r17,0(r21)
 70012dc:	003d5b06 	br	700084c <__alt_data_end+0xff00084c>
 70012e0:	d8c02d17 	ldw	r3,180(sp)
 70012e4:	d8002785 	stb	zero,158(sp)
 70012e8:	1c000017 	ldw	r16,0(r3)
 70012ec:	1cc00104 	addi	r19,r3,4
 70012f0:	80041926 	beq	r16,zero,7002358 <___vfprintf_internal_r+0x1c90>
 70012f4:	d9002917 	ldw	r4,164(sp)
 70012f8:	2003d016 	blt	r4,zero,700223c <___vfprintf_internal_r+0x1b74>
 70012fc:	200d883a 	mov	r6,r4
 7001300:	000b883a 	mov	r5,zero
 7001304:	8009883a 	mov	r4,r16
 7001308:	da003d15 	stw	r8,244(sp)
 700130c:	7005ed80 	call	7005ed8 <memchr>
 7001310:	da003d17 	ldw	r8,244(sp)
 7001314:	10045426 	beq	r2,zero,7002468 <___vfprintf_internal_r+0x1da0>
 7001318:	1405c83a 	sub	r2,r2,r16
 700131c:	d8802e15 	stw	r2,184(sp)
 7001320:	1003cc16 	blt	r2,zero,7002254 <___vfprintf_internal_r+0x1b8c>
 7001324:	df002783 	ldbu	fp,158(sp)
 7001328:	d8802a15 	stw	r2,168(sp)
 700132c:	dcc02d15 	stw	r19,180(sp)
 7001330:	d8002915 	stw	zero,164(sp)
 7001334:	d8003215 	stw	zero,200(sp)
 7001338:	003eb006 	br	7000dfc <__alt_data_end+0xff000dfc>
 700133c:	18c03fcc 	andi	r3,r3,255
 7001340:	183f9b26 	beq	r3,zero,70011b0 <__alt_data_end+0xff0011b0>
 7001344:	d9c02785 	stb	r7,158(sp)
 7001348:	003f9906 	br	70011b0 <__alt_data_end+0xff0011b0>
 700134c:	18c03fcc 	andi	r3,r3,255
 7001350:	1805551e 	bne	r3,zero,70028a8 <___vfprintf_internal_r+0x21e0>
 7001354:	0141c074 	movhi	r5,1793
 7001358:	297ee004 	addi	r5,r5,-1152
 700135c:	d9403915 	stw	r5,228(sp)
 7001360:	9080080c 	andi	r2,r18,32
 7001364:	103fae1e 	bne	r2,zero,7001220 <__alt_data_end+0xff001220>
 7001368:	9080040c 	andi	r2,r18,16
 700136c:	1002de26 	beq	r2,zero,7001ee8 <___vfprintf_internal_r+0x1820>
 7001370:	d8c02d17 	ldw	r3,180(sp)
 7001374:	002d883a 	mov	r22,zero
 7001378:	1cc00017 	ldw	r19,0(r3)
 700137c:	18c00104 	addi	r3,r3,4
 7001380:	d8c02d15 	stw	r3,180(sp)
 7001384:	003fab06 	br	7001234 <__alt_data_end+0xff001234>
 7001388:	38803fcc 	andi	r2,r7,255
 700138c:	1080201c 	xori	r2,r2,128
 7001390:	10bfe004 	addi	r2,r2,-128
 7001394:	1002d21e 	bne	r2,zero,7001ee0 <___vfprintf_internal_r+0x1818>
 7001398:	00c00044 	movi	r3,1
 700139c:	01c00804 	movi	r7,32
 70013a0:	ac400007 	ldb	r17,0(r21)
 70013a4:	003d2906 	br	700084c <__alt_data_end+0xff00084c>
 70013a8:	94800054 	ori	r18,r18,1
 70013ac:	ac400007 	ldb	r17,0(r21)
 70013b0:	003d2606 	br	700084c <__alt_data_end+0xff00084c>
 70013b4:	18c03fcc 	andi	r3,r3,255
 70013b8:	183e0526 	beq	r3,zero,7000bd0 <__alt_data_end+0xff000bd0>
 70013bc:	d9c02785 	stb	r7,158(sp)
 70013c0:	003e0306 	br	7000bd0 <__alt_data_end+0xff000bd0>
 70013c4:	94801014 	ori	r18,r18,64
 70013c8:	ac400007 	ldb	r17,0(r21)
 70013cc:	003d1f06 	br	700084c <__alt_data_end+0xff00084c>
 70013d0:	ac400007 	ldb	r17,0(r21)
 70013d4:	8a438726 	beq	r17,r9,70021f4 <___vfprintf_internal_r+0x1b2c>
 70013d8:	94800414 	ori	r18,r18,16
 70013dc:	003d1b06 	br	700084c <__alt_data_end+0xff00084c>
 70013e0:	18c03fcc 	andi	r3,r3,255
 70013e4:	1805341e 	bne	r3,zero,70028b8 <___vfprintf_internal_r+0x21f0>
 70013e8:	9080080c 	andi	r2,r18,32
 70013ec:	1002cd26 	beq	r2,zero,7001f24 <___vfprintf_internal_r+0x185c>
 70013f0:	d9402d17 	ldw	r5,180(sp)
 70013f4:	d9002f17 	ldw	r4,188(sp)
 70013f8:	28800017 	ldw	r2,0(r5)
 70013fc:	2007d7fa 	srai	r3,r4,31
 7001400:	29400104 	addi	r5,r5,4
 7001404:	d9402d15 	stw	r5,180(sp)
 7001408:	11000015 	stw	r4,0(r2)
 700140c:	10c00115 	stw	r3,4(r2)
 7001410:	003ce506 	br	70007a8 <__alt_data_end+0xff0007a8>
 7001414:	d8c02d17 	ldw	r3,180(sp)
 7001418:	d9002d17 	ldw	r4,180(sp)
 700141c:	d8002785 	stb	zero,158(sp)
 7001420:	18800017 	ldw	r2,0(r3)
 7001424:	21000104 	addi	r4,r4,4
 7001428:	00c00044 	movi	r3,1
 700142c:	d8c02a15 	stw	r3,168(sp)
 7001430:	d8801405 	stb	r2,80(sp)
 7001434:	d9002d15 	stw	r4,180(sp)
 7001438:	d8c02e15 	stw	r3,184(sp)
 700143c:	d8002915 	stw	zero,164(sp)
 7001440:	d8003215 	stw	zero,200(sp)
 7001444:	dc001404 	addi	r16,sp,80
 7001448:	0039883a 	mov	fp,zero
 700144c:	003e7206 	br	7000e18 <__alt_data_end+0xff000e18>
 7001450:	0101c074 	movhi	r4,1793
 7001454:	213ee004 	addi	r4,r4,-1152
 7001458:	0039883a 	mov	fp,zero
 700145c:	d9003915 	stw	r4,228(sp)
 7001460:	04401e04 	movi	r17,120
 7001464:	003f8206 	br	7001270 <__alt_data_end+0xff001270>
 7001468:	18c03fcc 	andi	r3,r3,255
 700146c:	1805061e 	bne	r3,zero,7002888 <___vfprintf_internal_r+0x21c0>
 7001470:	883d9126 	beq	r17,zero,7000ab8 <__alt_data_end+0xff000ab8>
 7001474:	00c00044 	movi	r3,1
 7001478:	d8c02a15 	stw	r3,168(sp)
 700147c:	dc401405 	stb	r17,80(sp)
 7001480:	d8002785 	stb	zero,158(sp)
 7001484:	003fec06 	br	7001438 <__alt_data_end+0xff001438>
 7001488:	0141c074 	movhi	r5,1793
 700148c:	297ee004 	addi	r5,r5,-1152
 7001490:	d9403915 	stw	r5,228(sp)
 7001494:	d8c02d15 	stw	r3,180(sp)
 7001498:	1025883a 	mov	r18,r2
 700149c:	04401e04 	movi	r17,120
 70014a0:	9d84b03a 	or	r2,r19,r22
 70014a4:	1000fc1e 	bne	r2,zero,7001898 <___vfprintf_internal_r+0x11d0>
 70014a8:	0039883a 	mov	fp,zero
 70014ac:	00800084 	movi	r2,2
 70014b0:	10803fcc 	andi	r2,r2,255
 70014b4:	00c00044 	movi	r3,1
 70014b8:	10c20f26 	beq	r2,r3,7001cf8 <___vfprintf_internal_r+0x1630>
 70014bc:	00c00084 	movi	r3,2
 70014c0:	10fd6326 	beq	r2,r3,7000a50 <__alt_data_end+0xff000a50>
 70014c4:	003e2d06 	br	7000d7c <__alt_data_end+0xff000d7c>
 70014c8:	d8c02017 	ldw	r3,128(sp)
 70014cc:	003e9306 	br	7000f1c <__alt_data_end+0xff000f1c>
 70014d0:	00801944 	movi	r2,101
 70014d4:	14407e0e 	bge	r2,r17,70016d0 <___vfprintf_internal_r+0x1008>
 70014d8:	d9003617 	ldw	r4,216(sp)
 70014dc:	d9403817 	ldw	r5,224(sp)
 70014e0:	000d883a 	mov	r6,zero
 70014e4:	000f883a 	mov	r7,zero
 70014e8:	d8c03c15 	stw	r3,240(sp)
 70014ec:	da003d15 	stw	r8,244(sp)
 70014f0:	700baa40 	call	700baa4 <__eqdf2>
 70014f4:	d8c03c17 	ldw	r3,240(sp)
 70014f8:	da003d17 	ldw	r8,244(sp)
 70014fc:	1000f71e 	bne	r2,zero,70018dc <___vfprintf_internal_r+0x1214>
 7001500:	d8801f17 	ldw	r2,124(sp)
 7001504:	0101c074 	movhi	r4,1793
 7001508:	213ee704 	addi	r4,r4,-1124
 700150c:	18c00044 	addi	r3,r3,1
 7001510:	10800044 	addi	r2,r2,1
 7001514:	41000015 	stw	r4,0(r8)
 7001518:	01000044 	movi	r4,1
 700151c:	41000115 	stw	r4,4(r8)
 7001520:	d8c02015 	stw	r3,128(sp)
 7001524:	d8801f15 	stw	r2,124(sp)
 7001528:	010001c4 	movi	r4,7
 700152c:	2082b816 	blt	r4,r2,7002010 <___vfprintf_internal_r+0x1948>
 7001530:	42000204 	addi	r8,r8,8
 7001534:	d8802617 	ldw	r2,152(sp)
 7001538:	d9403317 	ldw	r5,204(sp)
 700153c:	11400216 	blt	r2,r5,7001548 <___vfprintf_internal_r+0xe80>
 7001540:	9080004c 	andi	r2,r18,1
 7001544:	103ed526 	beq	r2,zero,700109c <__alt_data_end+0xff00109c>
 7001548:	d8803717 	ldw	r2,220(sp)
 700154c:	d9003417 	ldw	r4,208(sp)
 7001550:	d9403717 	ldw	r5,220(sp)
 7001554:	1887883a 	add	r3,r3,r2
 7001558:	d8801f17 	ldw	r2,124(sp)
 700155c:	41000015 	stw	r4,0(r8)
 7001560:	41400115 	stw	r5,4(r8)
 7001564:	10800044 	addi	r2,r2,1
 7001568:	d8c02015 	stw	r3,128(sp)
 700156c:	d8801f15 	stw	r2,124(sp)
 7001570:	010001c4 	movi	r4,7
 7001574:	20832916 	blt	r4,r2,700221c <___vfprintf_internal_r+0x1b54>
 7001578:	42000204 	addi	r8,r8,8
 700157c:	d8803317 	ldw	r2,204(sp)
 7001580:	143fffc4 	addi	r16,r2,-1
 7001584:	043ec50e 	bge	zero,r16,700109c <__alt_data_end+0xff00109c>
 7001588:	04400404 	movi	r17,16
 700158c:	d8801f17 	ldw	r2,124(sp)
 7001590:	8c00880e 	bge	r17,r16,70017b4 <___vfprintf_internal_r+0x10ec>
 7001594:	0141c074 	movhi	r5,1793
 7001598:	297ee784 	addi	r5,r5,-1122
 700159c:	d9402b15 	stw	r5,172(sp)
 70015a0:	058001c4 	movi	r22,7
 70015a4:	dcc02c17 	ldw	r19,176(sp)
 70015a8:	00000306 	br	70015b8 <___vfprintf_internal_r+0xef0>
 70015ac:	42000204 	addi	r8,r8,8
 70015b0:	843ffc04 	addi	r16,r16,-16
 70015b4:	8c00820e 	bge	r17,r16,70017c0 <___vfprintf_internal_r+0x10f8>
 70015b8:	18c00404 	addi	r3,r3,16
 70015bc:	10800044 	addi	r2,r2,1
 70015c0:	45000015 	stw	r20,0(r8)
 70015c4:	44400115 	stw	r17,4(r8)
 70015c8:	d8c02015 	stw	r3,128(sp)
 70015cc:	d8801f15 	stw	r2,124(sp)
 70015d0:	b0bff60e 	bge	r22,r2,70015ac <__alt_data_end+0xff0015ac>
 70015d4:	d9801e04 	addi	r6,sp,120
 70015d8:	b80b883a 	mov	r5,r23
 70015dc:	9809883a 	mov	r4,r19
 70015e0:	7007e2c0 	call	7007e2c <__sprint_r>
 70015e4:	103d3a1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 70015e8:	d8c02017 	ldw	r3,128(sp)
 70015ec:	d8801f17 	ldw	r2,124(sp)
 70015f0:	da000404 	addi	r8,sp,16
 70015f4:	003fee06 	br	70015b0 <__alt_data_end+0xff0015b0>
 70015f8:	d9403117 	ldw	r5,196(sp)
 70015fc:	d8802a17 	ldw	r2,168(sp)
 7001600:	28adc83a 	sub	r22,r5,r2
 7001604:	05be630e 	bge	zero,r22,7000f94 <__alt_data_end+0xff000f94>
 7001608:	07000404 	movi	fp,16
 700160c:	d8801f17 	ldw	r2,124(sp)
 7001610:	e5838f0e 	bge	fp,r22,7002450 <___vfprintf_internal_r+0x1d88>
 7001614:	0141c074 	movhi	r5,1793
 7001618:	297ee784 	addi	r5,r5,-1122
 700161c:	dc403015 	stw	r17,192(sp)
 7001620:	d9402b15 	stw	r5,172(sp)
 7001624:	b023883a 	mov	r17,r22
 7001628:	04c001c4 	movi	r19,7
 700162c:	a82d883a 	mov	r22,r21
 7001630:	902b883a 	mov	r21,r18
 7001634:	8025883a 	mov	r18,r16
 7001638:	dc002c17 	ldw	r16,176(sp)
 700163c:	00000306 	br	700164c <___vfprintf_internal_r+0xf84>
 7001640:	8c7ffc04 	addi	r17,r17,-16
 7001644:	42000204 	addi	r8,r8,8
 7001648:	e440110e 	bge	fp,r17,7001690 <___vfprintf_internal_r+0xfc8>
 700164c:	18c00404 	addi	r3,r3,16
 7001650:	10800044 	addi	r2,r2,1
 7001654:	45000015 	stw	r20,0(r8)
 7001658:	47000115 	stw	fp,4(r8)
 700165c:	d8c02015 	stw	r3,128(sp)
 7001660:	d8801f15 	stw	r2,124(sp)
 7001664:	98bff60e 	bge	r19,r2,7001640 <__alt_data_end+0xff001640>
 7001668:	d9801e04 	addi	r6,sp,120
 700166c:	b80b883a 	mov	r5,r23
 7001670:	8009883a 	mov	r4,r16
 7001674:	7007e2c0 	call	7007e2c <__sprint_r>
 7001678:	103d151e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 700167c:	8c7ffc04 	addi	r17,r17,-16
 7001680:	d8c02017 	ldw	r3,128(sp)
 7001684:	d8801f17 	ldw	r2,124(sp)
 7001688:	da000404 	addi	r8,sp,16
 700168c:	e47fef16 	blt	fp,r17,700164c <__alt_data_end+0xff00164c>
 7001690:	9021883a 	mov	r16,r18
 7001694:	a825883a 	mov	r18,r21
 7001698:	b02b883a 	mov	r21,r22
 700169c:	882d883a 	mov	r22,r17
 70016a0:	dc403017 	ldw	r17,192(sp)
 70016a4:	d9002b17 	ldw	r4,172(sp)
 70016a8:	1d87883a 	add	r3,r3,r22
 70016ac:	10800044 	addi	r2,r2,1
 70016b0:	41000015 	stw	r4,0(r8)
 70016b4:	45800115 	stw	r22,4(r8)
 70016b8:	d8c02015 	stw	r3,128(sp)
 70016bc:	d8801f15 	stw	r2,124(sp)
 70016c0:	010001c4 	movi	r4,7
 70016c4:	20818e16 	blt	r4,r2,7001d00 <___vfprintf_internal_r+0x1638>
 70016c8:	42000204 	addi	r8,r8,8
 70016cc:	003e3106 	br	7000f94 <__alt_data_end+0xff000f94>
 70016d0:	d9403317 	ldw	r5,204(sp)
 70016d4:	00800044 	movi	r2,1
 70016d8:	18c00044 	addi	r3,r3,1
 70016dc:	1141530e 	bge	r2,r5,7001c2c <___vfprintf_internal_r+0x1564>
 70016e0:	dc401f17 	ldw	r17,124(sp)
 70016e4:	00800044 	movi	r2,1
 70016e8:	40800115 	stw	r2,4(r8)
 70016ec:	8c400044 	addi	r17,r17,1
 70016f0:	44000015 	stw	r16,0(r8)
 70016f4:	d8c02015 	stw	r3,128(sp)
 70016f8:	dc401f15 	stw	r17,124(sp)
 70016fc:	008001c4 	movi	r2,7
 7001700:	14416b16 	blt	r2,r17,7001cb0 <___vfprintf_internal_r+0x15e8>
 7001704:	42000204 	addi	r8,r8,8
 7001708:	d8803717 	ldw	r2,220(sp)
 700170c:	d9003417 	ldw	r4,208(sp)
 7001710:	8c400044 	addi	r17,r17,1
 7001714:	10c7883a 	add	r3,r2,r3
 7001718:	40800115 	stw	r2,4(r8)
 700171c:	41000015 	stw	r4,0(r8)
 7001720:	d8c02015 	stw	r3,128(sp)
 7001724:	dc401f15 	stw	r17,124(sp)
 7001728:	008001c4 	movi	r2,7
 700172c:	14416916 	blt	r2,r17,7001cd4 <___vfprintf_internal_r+0x160c>
 7001730:	45800204 	addi	r22,r8,8
 7001734:	d9003617 	ldw	r4,216(sp)
 7001738:	d9403817 	ldw	r5,224(sp)
 700173c:	000d883a 	mov	r6,zero
 7001740:	000f883a 	mov	r7,zero
 7001744:	d8c03c15 	stw	r3,240(sp)
 7001748:	700baa40 	call	700baa4 <__eqdf2>
 700174c:	d8c03c17 	ldw	r3,240(sp)
 7001750:	1000bc26 	beq	r2,zero,7001a44 <___vfprintf_internal_r+0x137c>
 7001754:	d9403317 	ldw	r5,204(sp)
 7001758:	84000044 	addi	r16,r16,1
 700175c:	8c400044 	addi	r17,r17,1
 7001760:	28bfffc4 	addi	r2,r5,-1
 7001764:	1887883a 	add	r3,r3,r2
 7001768:	b0800115 	stw	r2,4(r22)
 700176c:	b4000015 	stw	r16,0(r22)
 7001770:	d8c02015 	stw	r3,128(sp)
 7001774:	dc401f15 	stw	r17,124(sp)
 7001778:	008001c4 	movi	r2,7
 700177c:	14414316 	blt	r2,r17,7001c8c <___vfprintf_internal_r+0x15c4>
 7001780:	b5800204 	addi	r22,r22,8
 7001784:	d9003a17 	ldw	r4,232(sp)
 7001788:	df0022c4 	addi	fp,sp,139
 700178c:	8c400044 	addi	r17,r17,1
 7001790:	20c7883a 	add	r3,r4,r3
 7001794:	b7000015 	stw	fp,0(r22)
 7001798:	b1000115 	stw	r4,4(r22)
 700179c:	d8c02015 	stw	r3,128(sp)
 70017a0:	dc401f15 	stw	r17,124(sp)
 70017a4:	008001c4 	movi	r2,7
 70017a8:	14400e16 	blt	r2,r17,70017e4 <___vfprintf_internal_r+0x111c>
 70017ac:	b2000204 	addi	r8,r22,8
 70017b0:	003e3a06 	br	700109c <__alt_data_end+0xff00109c>
 70017b4:	0101c074 	movhi	r4,1793
 70017b8:	213ee784 	addi	r4,r4,-1122
 70017bc:	d9002b15 	stw	r4,172(sp)
 70017c0:	d9002b17 	ldw	r4,172(sp)
 70017c4:	1c07883a 	add	r3,r3,r16
 70017c8:	44000115 	stw	r16,4(r8)
 70017cc:	41000015 	stw	r4,0(r8)
 70017d0:	10800044 	addi	r2,r2,1
 70017d4:	d8c02015 	stw	r3,128(sp)
 70017d8:	d8801f15 	stw	r2,124(sp)
 70017dc:	010001c4 	movi	r4,7
 70017e0:	20be2d0e 	bge	r4,r2,7001098 <__alt_data_end+0xff001098>
 70017e4:	d9002c17 	ldw	r4,176(sp)
 70017e8:	d9801e04 	addi	r6,sp,120
 70017ec:	b80b883a 	mov	r5,r23
 70017f0:	7007e2c0 	call	7007e2c <__sprint_r>
 70017f4:	103cb61e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 70017f8:	d8c02017 	ldw	r3,128(sp)
 70017fc:	da000404 	addi	r8,sp,16
 7001800:	003e2606 	br	700109c <__alt_data_end+0xff00109c>
 7001804:	d9002c17 	ldw	r4,176(sp)
 7001808:	d9801e04 	addi	r6,sp,120
 700180c:	b80b883a 	mov	r5,r23
 7001810:	7007e2c0 	call	7007e2c <__sprint_r>
 7001814:	103e5d26 	beq	r2,zero,700118c <__alt_data_end+0xff00118c>
 7001818:	003cad06 	br	7000ad0 <__alt_data_end+0xff000ad0>
 700181c:	d9002c17 	ldw	r4,176(sp)
 7001820:	d9801e04 	addi	r6,sp,120
 7001824:	b80b883a 	mov	r5,r23
 7001828:	7007e2c0 	call	7007e2c <__sprint_r>
 700182c:	103ca81e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001830:	d8c02017 	ldw	r3,128(sp)
 7001834:	da000404 	addi	r8,sp,16
 7001838:	003e0b06 	br	7001068 <__alt_data_end+0xff001068>
 700183c:	d9002c17 	ldw	r4,176(sp)
 7001840:	d9801e04 	addi	r6,sp,120
 7001844:	b80b883a 	mov	r5,r23
 7001848:	7007e2c0 	call	7007e2c <__sprint_r>
 700184c:	103ca01e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001850:	d8c02017 	ldw	r3,128(sp)
 7001854:	da000404 	addi	r8,sp,16
 7001858:	003dbd06 	br	7000f50 <__alt_data_end+0xff000f50>
 700185c:	d9002c17 	ldw	r4,176(sp)
 7001860:	d9801e04 	addi	r6,sp,120
 7001864:	b80b883a 	mov	r5,r23
 7001868:	7007e2c0 	call	7007e2c <__sprint_r>
 700186c:	103c981e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001870:	d8c02017 	ldw	r3,128(sp)
 7001874:	da000404 	addi	r8,sp,16
 7001878:	003dc306 	br	7000f88 <__alt_data_end+0xff000f88>
 700187c:	d8802917 	ldw	r2,164(sp)
 7001880:	d8002785 	stb	zero,158(sp)
 7001884:	103f0616 	blt	r2,zero,70014a0 <__alt_data_end+0xff0014a0>
 7001888:	00ffdfc4 	movi	r3,-129
 700188c:	9d84b03a 	or	r2,r19,r22
 7001890:	90e4703a 	and	r18,r18,r3
 7001894:	103c6b26 	beq	r2,zero,7000a44 <__alt_data_end+0xff000a44>
 7001898:	0039883a 	mov	fp,zero
 700189c:	003e7406 	br	7001270 <__alt_data_end+0xff001270>
 70018a0:	9080040c 	andi	r2,r18,16
 70018a4:	1001b326 	beq	r2,zero,7001f74 <___vfprintf_internal_r+0x18ac>
 70018a8:	d9002d17 	ldw	r4,180(sp)
 70018ac:	d9402917 	ldw	r5,164(sp)
 70018b0:	d8002785 	stb	zero,158(sp)
 70018b4:	20800104 	addi	r2,r4,4
 70018b8:	24c00017 	ldw	r19,0(r4)
 70018bc:	002d883a 	mov	r22,zero
 70018c0:	2801b516 	blt	r5,zero,7001f98 <___vfprintf_internal_r+0x18d0>
 70018c4:	00ffdfc4 	movi	r3,-129
 70018c8:	d8802d15 	stw	r2,180(sp)
 70018cc:	90e4703a 	and	r18,r18,r3
 70018d0:	983d2726 	beq	r19,zero,7000d70 <__alt_data_end+0xff000d70>
 70018d4:	0039883a 	mov	fp,zero
 70018d8:	003d2a06 	br	7000d84 <__alt_data_end+0xff000d84>
 70018dc:	dc402617 	ldw	r17,152(sp)
 70018e0:	0441d30e 	bge	zero,r17,7002030 <___vfprintf_internal_r+0x1968>
 70018e4:	dc403217 	ldw	r17,200(sp)
 70018e8:	d8803317 	ldw	r2,204(sp)
 70018ec:	1440010e 	bge	r2,r17,70018f4 <___vfprintf_internal_r+0x122c>
 70018f0:	1023883a 	mov	r17,r2
 70018f4:	04400a0e 	bge	zero,r17,7001920 <___vfprintf_internal_r+0x1258>
 70018f8:	d8801f17 	ldw	r2,124(sp)
 70018fc:	1c47883a 	add	r3,r3,r17
 7001900:	44000015 	stw	r16,0(r8)
 7001904:	10800044 	addi	r2,r2,1
 7001908:	44400115 	stw	r17,4(r8)
 700190c:	d8c02015 	stw	r3,128(sp)
 7001910:	d8801f15 	stw	r2,124(sp)
 7001914:	010001c4 	movi	r4,7
 7001918:	20826516 	blt	r4,r2,70022b0 <___vfprintf_internal_r+0x1be8>
 700191c:	42000204 	addi	r8,r8,8
 7001920:	88026116 	blt	r17,zero,70022a8 <___vfprintf_internal_r+0x1be0>
 7001924:	d9003217 	ldw	r4,200(sp)
 7001928:	2463c83a 	sub	r17,r4,r17
 700192c:	04407b0e 	bge	zero,r17,7001b1c <___vfprintf_internal_r+0x1454>
 7001930:	05800404 	movi	r22,16
 7001934:	d8801f17 	ldw	r2,124(sp)
 7001938:	b4419d0e 	bge	r22,r17,7001fb0 <___vfprintf_internal_r+0x18e8>
 700193c:	0101c074 	movhi	r4,1793
 7001940:	213ee784 	addi	r4,r4,-1122
 7001944:	d9002b15 	stw	r4,172(sp)
 7001948:	070001c4 	movi	fp,7
 700194c:	dcc02c17 	ldw	r19,176(sp)
 7001950:	00000306 	br	7001960 <___vfprintf_internal_r+0x1298>
 7001954:	42000204 	addi	r8,r8,8
 7001958:	8c7ffc04 	addi	r17,r17,-16
 700195c:	b441970e 	bge	r22,r17,7001fbc <___vfprintf_internal_r+0x18f4>
 7001960:	18c00404 	addi	r3,r3,16
 7001964:	10800044 	addi	r2,r2,1
 7001968:	45000015 	stw	r20,0(r8)
 700196c:	45800115 	stw	r22,4(r8)
 7001970:	d8c02015 	stw	r3,128(sp)
 7001974:	d8801f15 	stw	r2,124(sp)
 7001978:	e0bff60e 	bge	fp,r2,7001954 <__alt_data_end+0xff001954>
 700197c:	d9801e04 	addi	r6,sp,120
 7001980:	b80b883a 	mov	r5,r23
 7001984:	9809883a 	mov	r4,r19
 7001988:	7007e2c0 	call	7007e2c <__sprint_r>
 700198c:	103c501e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001990:	d8c02017 	ldw	r3,128(sp)
 7001994:	d8801f17 	ldw	r2,124(sp)
 7001998:	da000404 	addi	r8,sp,16
 700199c:	003fee06 	br	7001958 <__alt_data_end+0xff001958>
 70019a0:	d9002c17 	ldw	r4,176(sp)
 70019a4:	d9801e04 	addi	r6,sp,120
 70019a8:	b80b883a 	mov	r5,r23
 70019ac:	7007e2c0 	call	7007e2c <__sprint_r>
 70019b0:	103c471e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 70019b4:	d8c02017 	ldw	r3,128(sp)
 70019b8:	df002787 	ldb	fp,158(sp)
 70019bc:	da000404 	addi	r8,sp,16
 70019c0:	003d5606 	br	7000f1c <__alt_data_end+0xff000f1c>
 70019c4:	9080040c 	andi	r2,r18,16
 70019c8:	10016126 	beq	r2,zero,7001f50 <___vfprintf_internal_r+0x1888>
 70019cc:	d8802d17 	ldw	r2,180(sp)
 70019d0:	14c00017 	ldw	r19,0(r2)
 70019d4:	10800104 	addi	r2,r2,4
 70019d8:	d8802d15 	stw	r2,180(sp)
 70019dc:	982dd7fa 	srai	r22,r19,31
 70019e0:	b005883a 	mov	r2,r22
 70019e4:	003c8206 	br	7000bf0 <__alt_data_end+0xff000bf0>
 70019e8:	9080040c 	andi	r2,r18,16
 70019ec:	10003526 	beq	r2,zero,7001ac4 <___vfprintf_internal_r+0x13fc>
 70019f0:	d9402d17 	ldw	r5,180(sp)
 70019f4:	d8c02917 	ldw	r3,164(sp)
 70019f8:	d8002785 	stb	zero,158(sp)
 70019fc:	28800104 	addi	r2,r5,4
 7001a00:	2cc00017 	ldw	r19,0(r5)
 7001a04:	002d883a 	mov	r22,zero
 7001a08:	18003716 	blt	r3,zero,7001ae8 <___vfprintf_internal_r+0x1420>
 7001a0c:	00ffdfc4 	movi	r3,-129
 7001a10:	d8802d15 	stw	r2,180(sp)
 7001a14:	90e4703a 	and	r18,r18,r3
 7001a18:	0039883a 	mov	fp,zero
 7001a1c:	983df326 	beq	r19,zero,70011ec <__alt_data_end+0xff0011ec>
 7001a20:	00800244 	movi	r2,9
 7001a24:	14fc7b36 	bltu	r2,r19,7000c14 <__alt_data_end+0xff000c14>
 7001a28:	d8c02817 	ldw	r3,160(sp)
 7001a2c:	dc001dc4 	addi	r16,sp,119
 7001a30:	9cc00c04 	addi	r19,r19,48
 7001a34:	1c07c83a 	sub	r3,r3,r16
 7001a38:	dcc01dc5 	stb	r19,119(sp)
 7001a3c:	d8c02e15 	stw	r3,184(sp)
 7001a40:	003ce806 	br	7000de4 <__alt_data_end+0xff000de4>
 7001a44:	d8803317 	ldw	r2,204(sp)
 7001a48:	143fffc4 	addi	r16,r2,-1
 7001a4c:	043f4d0e 	bge	zero,r16,7001784 <__alt_data_end+0xff001784>
 7001a50:	07000404 	movi	fp,16
 7001a54:	e400810e 	bge	fp,r16,7001c5c <___vfprintf_internal_r+0x1594>
 7001a58:	0141c074 	movhi	r5,1793
 7001a5c:	297ee784 	addi	r5,r5,-1122
 7001a60:	d9402b15 	stw	r5,172(sp)
 7001a64:	01c001c4 	movi	r7,7
 7001a68:	dcc02c17 	ldw	r19,176(sp)
 7001a6c:	00000306 	br	7001a7c <___vfprintf_internal_r+0x13b4>
 7001a70:	b5800204 	addi	r22,r22,8
 7001a74:	843ffc04 	addi	r16,r16,-16
 7001a78:	e4007b0e 	bge	fp,r16,7001c68 <___vfprintf_internal_r+0x15a0>
 7001a7c:	18c00404 	addi	r3,r3,16
 7001a80:	8c400044 	addi	r17,r17,1
 7001a84:	b5000015 	stw	r20,0(r22)
 7001a88:	b7000115 	stw	fp,4(r22)
 7001a8c:	d8c02015 	stw	r3,128(sp)
 7001a90:	dc401f15 	stw	r17,124(sp)
 7001a94:	3c7ff60e 	bge	r7,r17,7001a70 <__alt_data_end+0xff001a70>
 7001a98:	d9801e04 	addi	r6,sp,120
 7001a9c:	b80b883a 	mov	r5,r23
 7001aa0:	9809883a 	mov	r4,r19
 7001aa4:	d9c03c15 	stw	r7,240(sp)
 7001aa8:	7007e2c0 	call	7007e2c <__sprint_r>
 7001aac:	d9c03c17 	ldw	r7,240(sp)
 7001ab0:	103c071e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001ab4:	d8c02017 	ldw	r3,128(sp)
 7001ab8:	dc401f17 	ldw	r17,124(sp)
 7001abc:	dd800404 	addi	r22,sp,16
 7001ac0:	003fec06 	br	7001a74 <__alt_data_end+0xff001a74>
 7001ac4:	9080100c 	andi	r2,r18,64
 7001ac8:	d8002785 	stb	zero,158(sp)
 7001acc:	10010e26 	beq	r2,zero,7001f08 <___vfprintf_internal_r+0x1840>
 7001ad0:	d9002d17 	ldw	r4,180(sp)
 7001ad4:	d9402917 	ldw	r5,164(sp)
 7001ad8:	002d883a 	mov	r22,zero
 7001adc:	20800104 	addi	r2,r4,4
 7001ae0:	24c0000b 	ldhu	r19,0(r4)
 7001ae4:	283fc90e 	bge	r5,zero,7001a0c <__alt_data_end+0xff001a0c>
 7001ae8:	d8802d15 	stw	r2,180(sp)
 7001aec:	0039883a 	mov	fp,zero
 7001af0:	9d84b03a 	or	r2,r19,r22
 7001af4:	103c461e 	bne	r2,zero,7000c10 <__alt_data_end+0xff000c10>
 7001af8:	00800044 	movi	r2,1
 7001afc:	003e6c06 	br	70014b0 <__alt_data_end+0xff0014b0>
 7001b00:	d9002c17 	ldw	r4,176(sp)
 7001b04:	d9801e04 	addi	r6,sp,120
 7001b08:	b80b883a 	mov	r5,r23
 7001b0c:	7007e2c0 	call	7007e2c <__sprint_r>
 7001b10:	103bef1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001b14:	d8c02017 	ldw	r3,128(sp)
 7001b18:	da000404 	addi	r8,sp,16
 7001b1c:	d9003217 	ldw	r4,200(sp)
 7001b20:	d8802617 	ldw	r2,152(sp)
 7001b24:	d9403317 	ldw	r5,204(sp)
 7001b28:	8123883a 	add	r17,r16,r4
 7001b2c:	11400216 	blt	r2,r5,7001b38 <___vfprintf_internal_r+0x1470>
 7001b30:	9100004c 	andi	r4,r18,1
 7001b34:	20000d26 	beq	r4,zero,7001b6c <___vfprintf_internal_r+0x14a4>
 7001b38:	d9003717 	ldw	r4,220(sp)
 7001b3c:	d9403417 	ldw	r5,208(sp)
 7001b40:	1907883a 	add	r3,r3,r4
 7001b44:	d9001f17 	ldw	r4,124(sp)
 7001b48:	41400015 	stw	r5,0(r8)
 7001b4c:	d9403717 	ldw	r5,220(sp)
 7001b50:	21000044 	addi	r4,r4,1
 7001b54:	d8c02015 	stw	r3,128(sp)
 7001b58:	41400115 	stw	r5,4(r8)
 7001b5c:	d9001f15 	stw	r4,124(sp)
 7001b60:	014001c4 	movi	r5,7
 7001b64:	2901e816 	blt	r5,r4,7002308 <___vfprintf_internal_r+0x1c40>
 7001b68:	42000204 	addi	r8,r8,8
 7001b6c:	d9003317 	ldw	r4,204(sp)
 7001b70:	8121883a 	add	r16,r16,r4
 7001b74:	2085c83a 	sub	r2,r4,r2
 7001b78:	8461c83a 	sub	r16,r16,r17
 7001b7c:	1400010e 	bge	r2,r16,7001b84 <___vfprintf_internal_r+0x14bc>
 7001b80:	1021883a 	mov	r16,r2
 7001b84:	04000a0e 	bge	zero,r16,7001bb0 <___vfprintf_internal_r+0x14e8>
 7001b88:	d9001f17 	ldw	r4,124(sp)
 7001b8c:	1c07883a 	add	r3,r3,r16
 7001b90:	44400015 	stw	r17,0(r8)
 7001b94:	21000044 	addi	r4,r4,1
 7001b98:	44000115 	stw	r16,4(r8)
 7001b9c:	d8c02015 	stw	r3,128(sp)
 7001ba0:	d9001f15 	stw	r4,124(sp)
 7001ba4:	014001c4 	movi	r5,7
 7001ba8:	2901fb16 	blt	r5,r4,7002398 <___vfprintf_internal_r+0x1cd0>
 7001bac:	42000204 	addi	r8,r8,8
 7001bb0:	8001f716 	blt	r16,zero,7002390 <___vfprintf_internal_r+0x1cc8>
 7001bb4:	1421c83a 	sub	r16,r2,r16
 7001bb8:	043d380e 	bge	zero,r16,700109c <__alt_data_end+0xff00109c>
 7001bbc:	04400404 	movi	r17,16
 7001bc0:	d8801f17 	ldw	r2,124(sp)
 7001bc4:	8c3efb0e 	bge	r17,r16,70017b4 <__alt_data_end+0xff0017b4>
 7001bc8:	0141c074 	movhi	r5,1793
 7001bcc:	297ee784 	addi	r5,r5,-1122
 7001bd0:	d9402b15 	stw	r5,172(sp)
 7001bd4:	058001c4 	movi	r22,7
 7001bd8:	dcc02c17 	ldw	r19,176(sp)
 7001bdc:	00000306 	br	7001bec <___vfprintf_internal_r+0x1524>
 7001be0:	42000204 	addi	r8,r8,8
 7001be4:	843ffc04 	addi	r16,r16,-16
 7001be8:	8c3ef50e 	bge	r17,r16,70017c0 <__alt_data_end+0xff0017c0>
 7001bec:	18c00404 	addi	r3,r3,16
 7001bf0:	10800044 	addi	r2,r2,1
 7001bf4:	45000015 	stw	r20,0(r8)
 7001bf8:	44400115 	stw	r17,4(r8)
 7001bfc:	d8c02015 	stw	r3,128(sp)
 7001c00:	d8801f15 	stw	r2,124(sp)
 7001c04:	b0bff60e 	bge	r22,r2,7001be0 <__alt_data_end+0xff001be0>
 7001c08:	d9801e04 	addi	r6,sp,120
 7001c0c:	b80b883a 	mov	r5,r23
 7001c10:	9809883a 	mov	r4,r19
 7001c14:	7007e2c0 	call	7007e2c <__sprint_r>
 7001c18:	103bad1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001c1c:	d8c02017 	ldw	r3,128(sp)
 7001c20:	d8801f17 	ldw	r2,124(sp)
 7001c24:	da000404 	addi	r8,sp,16
 7001c28:	003fee06 	br	7001be4 <__alt_data_end+0xff001be4>
 7001c2c:	9088703a 	and	r4,r18,r2
 7001c30:	203eab1e 	bne	r4,zero,70016e0 <__alt_data_end+0xff0016e0>
 7001c34:	dc401f17 	ldw	r17,124(sp)
 7001c38:	40800115 	stw	r2,4(r8)
 7001c3c:	44000015 	stw	r16,0(r8)
 7001c40:	8c400044 	addi	r17,r17,1
 7001c44:	d8c02015 	stw	r3,128(sp)
 7001c48:	dc401f15 	stw	r17,124(sp)
 7001c4c:	008001c4 	movi	r2,7
 7001c50:	14400e16 	blt	r2,r17,7001c8c <___vfprintf_internal_r+0x15c4>
 7001c54:	45800204 	addi	r22,r8,8
 7001c58:	003eca06 	br	7001784 <__alt_data_end+0xff001784>
 7001c5c:	0101c074 	movhi	r4,1793
 7001c60:	213ee784 	addi	r4,r4,-1122
 7001c64:	d9002b15 	stw	r4,172(sp)
 7001c68:	d8802b17 	ldw	r2,172(sp)
 7001c6c:	1c07883a 	add	r3,r3,r16
 7001c70:	8c400044 	addi	r17,r17,1
 7001c74:	b0800015 	stw	r2,0(r22)
 7001c78:	b4000115 	stw	r16,4(r22)
 7001c7c:	d8c02015 	stw	r3,128(sp)
 7001c80:	dc401f15 	stw	r17,124(sp)
 7001c84:	008001c4 	movi	r2,7
 7001c88:	147ebd0e 	bge	r2,r17,7001780 <__alt_data_end+0xff001780>
 7001c8c:	d9002c17 	ldw	r4,176(sp)
 7001c90:	d9801e04 	addi	r6,sp,120
 7001c94:	b80b883a 	mov	r5,r23
 7001c98:	7007e2c0 	call	7007e2c <__sprint_r>
 7001c9c:	103b8c1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001ca0:	d8c02017 	ldw	r3,128(sp)
 7001ca4:	dc401f17 	ldw	r17,124(sp)
 7001ca8:	dd800404 	addi	r22,sp,16
 7001cac:	003eb506 	br	7001784 <__alt_data_end+0xff001784>
 7001cb0:	d9002c17 	ldw	r4,176(sp)
 7001cb4:	d9801e04 	addi	r6,sp,120
 7001cb8:	b80b883a 	mov	r5,r23
 7001cbc:	7007e2c0 	call	7007e2c <__sprint_r>
 7001cc0:	103b831e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001cc4:	d8c02017 	ldw	r3,128(sp)
 7001cc8:	dc401f17 	ldw	r17,124(sp)
 7001ccc:	da000404 	addi	r8,sp,16
 7001cd0:	003e8d06 	br	7001708 <__alt_data_end+0xff001708>
 7001cd4:	d9002c17 	ldw	r4,176(sp)
 7001cd8:	d9801e04 	addi	r6,sp,120
 7001cdc:	b80b883a 	mov	r5,r23
 7001ce0:	7007e2c0 	call	7007e2c <__sprint_r>
 7001ce4:	103b7a1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001ce8:	d8c02017 	ldw	r3,128(sp)
 7001cec:	dc401f17 	ldw	r17,124(sp)
 7001cf0:	dd800404 	addi	r22,sp,16
 7001cf4:	003e8f06 	br	7001734 <__alt_data_end+0xff001734>
 7001cf8:	0027883a 	mov	r19,zero
 7001cfc:	003f4a06 	br	7001a28 <__alt_data_end+0xff001a28>
 7001d00:	d9002c17 	ldw	r4,176(sp)
 7001d04:	d9801e04 	addi	r6,sp,120
 7001d08:	b80b883a 	mov	r5,r23
 7001d0c:	7007e2c0 	call	7007e2c <__sprint_r>
 7001d10:	103b6f1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7001d14:	d8c02017 	ldw	r3,128(sp)
 7001d18:	da000404 	addi	r8,sp,16
 7001d1c:	003c9d06 	br	7000f94 <__alt_data_end+0xff000f94>
 7001d20:	04e7c83a 	sub	r19,zero,r19
 7001d24:	9804c03a 	cmpne	r2,r19,zero
 7001d28:	05adc83a 	sub	r22,zero,r22
 7001d2c:	b0adc83a 	sub	r22,r22,r2
 7001d30:	d8802917 	ldw	r2,164(sp)
 7001d34:	07000b44 	movi	fp,45
 7001d38:	df002785 	stb	fp,158(sp)
 7001d3c:	10017b16 	blt	r2,zero,700232c <___vfprintf_internal_r+0x1c64>
 7001d40:	00bfdfc4 	movi	r2,-129
 7001d44:	90a4703a 	and	r18,r18,r2
 7001d48:	003bb106 	br	7000c10 <__alt_data_end+0xff000c10>
 7001d4c:	d9003617 	ldw	r4,216(sp)
 7001d50:	d9403817 	ldw	r5,224(sp)
 7001d54:	da003d15 	stw	r8,244(sp)
 7001d58:	7007a500 	call	7007a50 <__fpclassifyd>
 7001d5c:	da003d17 	ldw	r8,244(sp)
 7001d60:	1000f026 	beq	r2,zero,7002124 <___vfprintf_internal_r+0x1a5c>
 7001d64:	d9002917 	ldw	r4,164(sp)
 7001d68:	05bff7c4 	movi	r22,-33
 7001d6c:	00bfffc4 	movi	r2,-1
 7001d70:	8dac703a 	and	r22,r17,r22
 7001d74:	20820026 	beq	r4,r2,7002578 <___vfprintf_internal_r+0x1eb0>
 7001d78:	008011c4 	movi	r2,71
 7001d7c:	b081f726 	beq	r22,r2,700255c <___vfprintf_internal_r+0x1e94>
 7001d80:	d9003817 	ldw	r4,224(sp)
 7001d84:	90c04014 	ori	r3,r18,256
 7001d88:	d8c02b15 	stw	r3,172(sp)
 7001d8c:	20021516 	blt	r4,zero,70025e4 <___vfprintf_internal_r+0x1f1c>
 7001d90:	dcc03817 	ldw	r19,224(sp)
 7001d94:	d8002a05 	stb	zero,168(sp)
 7001d98:	00801984 	movi	r2,102
 7001d9c:	8881f926 	beq	r17,r2,7002584 <___vfprintf_internal_r+0x1ebc>
 7001da0:	00801184 	movi	r2,70
 7001da4:	88821c26 	beq	r17,r2,7002618 <___vfprintf_internal_r+0x1f50>
 7001da8:	00801144 	movi	r2,69
 7001dac:	b081ef26 	beq	r22,r2,700256c <___vfprintf_internal_r+0x1ea4>
 7001db0:	d8c02917 	ldw	r3,164(sp)
 7001db4:	d8802104 	addi	r2,sp,132
 7001db8:	d8800315 	stw	r2,12(sp)
 7001dbc:	d9403617 	ldw	r5,216(sp)
 7001dc0:	d8802504 	addi	r2,sp,148
 7001dc4:	d9002c17 	ldw	r4,176(sp)
 7001dc8:	d8800215 	stw	r2,8(sp)
 7001dcc:	d8802604 	addi	r2,sp,152
 7001dd0:	d8c00015 	stw	r3,0(sp)
 7001dd4:	d8800115 	stw	r2,4(sp)
 7001dd8:	01c00084 	movi	r7,2
 7001ddc:	980d883a 	mov	r6,r19
 7001de0:	d8c03c15 	stw	r3,240(sp)
 7001de4:	da003d15 	stw	r8,244(sp)
 7001de8:	7002cec0 	call	7002cec <_dtoa_r>
 7001dec:	1021883a 	mov	r16,r2
 7001df0:	008019c4 	movi	r2,103
 7001df4:	d8c03c17 	ldw	r3,240(sp)
 7001df8:	da003d17 	ldw	r8,244(sp)
 7001dfc:	88817126 	beq	r17,r2,70023c4 <___vfprintf_internal_r+0x1cfc>
 7001e00:	008011c4 	movi	r2,71
 7001e04:	88829226 	beq	r17,r2,7002850 <___vfprintf_internal_r+0x2188>
 7001e08:	80f9883a 	add	fp,r16,r3
 7001e0c:	d9003617 	ldw	r4,216(sp)
 7001e10:	000d883a 	mov	r6,zero
 7001e14:	000f883a 	mov	r7,zero
 7001e18:	980b883a 	mov	r5,r19
 7001e1c:	da003d15 	stw	r8,244(sp)
 7001e20:	700baa40 	call	700baa4 <__eqdf2>
 7001e24:	da003d17 	ldw	r8,244(sp)
 7001e28:	10018d26 	beq	r2,zero,7002460 <___vfprintf_internal_r+0x1d98>
 7001e2c:	d8802117 	ldw	r2,132(sp)
 7001e30:	1700062e 	bgeu	r2,fp,7001e4c <___vfprintf_internal_r+0x1784>
 7001e34:	01000c04 	movi	r4,48
 7001e38:	10c00044 	addi	r3,r2,1
 7001e3c:	d8c02115 	stw	r3,132(sp)
 7001e40:	11000005 	stb	r4,0(r2)
 7001e44:	d8802117 	ldw	r2,132(sp)
 7001e48:	173ffb36 	bltu	r2,fp,7001e38 <__alt_data_end+0xff001e38>
 7001e4c:	1405c83a 	sub	r2,r2,r16
 7001e50:	d8803315 	stw	r2,204(sp)
 7001e54:	008011c4 	movi	r2,71
 7001e58:	b0817626 	beq	r22,r2,7002434 <___vfprintf_internal_r+0x1d6c>
 7001e5c:	00801944 	movi	r2,101
 7001e60:	1442810e 	bge	r2,r17,7002868 <___vfprintf_internal_r+0x21a0>
 7001e64:	d8c02617 	ldw	r3,152(sp)
 7001e68:	00801984 	movi	r2,102
 7001e6c:	d8c03215 	stw	r3,200(sp)
 7001e70:	8881fe26 	beq	r17,r2,700266c <___vfprintf_internal_r+0x1fa4>
 7001e74:	d8c03217 	ldw	r3,200(sp)
 7001e78:	d9003317 	ldw	r4,204(sp)
 7001e7c:	1901dd16 	blt	r3,r4,70025f4 <___vfprintf_internal_r+0x1f2c>
 7001e80:	9480004c 	andi	r18,r18,1
 7001e84:	90022b1e 	bne	r18,zero,7002734 <___vfprintf_internal_r+0x206c>
 7001e88:	1805883a 	mov	r2,r3
 7001e8c:	18028016 	blt	r3,zero,7002890 <___vfprintf_internal_r+0x21c8>
 7001e90:	d8c03217 	ldw	r3,200(sp)
 7001e94:	044019c4 	movi	r17,103
 7001e98:	d8c02e15 	stw	r3,184(sp)
 7001e9c:	df002a07 	ldb	fp,168(sp)
 7001ea0:	e001531e 	bne	fp,zero,70023f0 <___vfprintf_internal_r+0x1d28>
 7001ea4:	df002783 	ldbu	fp,158(sp)
 7001ea8:	d8802a15 	stw	r2,168(sp)
 7001eac:	dc802b17 	ldw	r18,172(sp)
 7001eb0:	d8002915 	stw	zero,164(sp)
 7001eb4:	003bd106 	br	7000dfc <__alt_data_end+0xff000dfc>
 7001eb8:	d8802d17 	ldw	r2,180(sp)
 7001ebc:	d8c02d17 	ldw	r3,180(sp)
 7001ec0:	d9002d17 	ldw	r4,180(sp)
 7001ec4:	10800017 	ldw	r2,0(r2)
 7001ec8:	18c00117 	ldw	r3,4(r3)
 7001ecc:	21000204 	addi	r4,r4,8
 7001ed0:	d8803615 	stw	r2,216(sp)
 7001ed4:	d8c03815 	stw	r3,224(sp)
 7001ed8:	d9002d15 	stw	r4,180(sp)
 7001edc:	003b7506 	br	7000cb4 <__alt_data_end+0xff000cb4>
 7001ee0:	ac400007 	ldb	r17,0(r21)
 7001ee4:	003a5906 	br	700084c <__alt_data_end+0xff00084c>
 7001ee8:	9080100c 	andi	r2,r18,64
 7001eec:	1000a826 	beq	r2,zero,7002190 <___vfprintf_internal_r+0x1ac8>
 7001ef0:	d9002d17 	ldw	r4,180(sp)
 7001ef4:	002d883a 	mov	r22,zero
 7001ef8:	24c0000b 	ldhu	r19,0(r4)
 7001efc:	21000104 	addi	r4,r4,4
 7001f00:	d9002d15 	stw	r4,180(sp)
 7001f04:	003ccb06 	br	7001234 <__alt_data_end+0xff001234>
 7001f08:	d8c02d17 	ldw	r3,180(sp)
 7001f0c:	d9002917 	ldw	r4,164(sp)
 7001f10:	002d883a 	mov	r22,zero
 7001f14:	18800104 	addi	r2,r3,4
 7001f18:	1cc00017 	ldw	r19,0(r3)
 7001f1c:	203ebb0e 	bge	r4,zero,7001a0c <__alt_data_end+0xff001a0c>
 7001f20:	003ef106 	br	7001ae8 <__alt_data_end+0xff001ae8>
 7001f24:	9080040c 	andi	r2,r18,16
 7001f28:	1000921e 	bne	r2,zero,7002174 <___vfprintf_internal_r+0x1aac>
 7001f2c:	9480100c 	andi	r18,r18,64
 7001f30:	90013926 	beq	r18,zero,7002418 <___vfprintf_internal_r+0x1d50>
 7001f34:	d9002d17 	ldw	r4,180(sp)
 7001f38:	d9402f17 	ldw	r5,188(sp)
 7001f3c:	20800017 	ldw	r2,0(r4)
 7001f40:	21000104 	addi	r4,r4,4
 7001f44:	d9002d15 	stw	r4,180(sp)
 7001f48:	1140000d 	sth	r5,0(r2)
 7001f4c:	003a1606 	br	70007a8 <__alt_data_end+0xff0007a8>
 7001f50:	9080100c 	andi	r2,r18,64
 7001f54:	10008026 	beq	r2,zero,7002158 <___vfprintf_internal_r+0x1a90>
 7001f58:	d8c02d17 	ldw	r3,180(sp)
 7001f5c:	1cc0000f 	ldh	r19,0(r3)
 7001f60:	18c00104 	addi	r3,r3,4
 7001f64:	d8c02d15 	stw	r3,180(sp)
 7001f68:	982dd7fa 	srai	r22,r19,31
 7001f6c:	b005883a 	mov	r2,r22
 7001f70:	003b1f06 	br	7000bf0 <__alt_data_end+0xff000bf0>
 7001f74:	9080100c 	andi	r2,r18,64
 7001f78:	d8002785 	stb	zero,158(sp)
 7001f7c:	10008a1e 	bne	r2,zero,70021a8 <___vfprintf_internal_r+0x1ae0>
 7001f80:	d9402d17 	ldw	r5,180(sp)
 7001f84:	d8c02917 	ldw	r3,164(sp)
 7001f88:	002d883a 	mov	r22,zero
 7001f8c:	28800104 	addi	r2,r5,4
 7001f90:	2cc00017 	ldw	r19,0(r5)
 7001f94:	183e4b0e 	bge	r3,zero,70018c4 <__alt_data_end+0xff0018c4>
 7001f98:	9d86b03a 	or	r3,r19,r22
 7001f9c:	d8802d15 	stw	r2,180(sp)
 7001fa0:	183e4c1e 	bne	r3,zero,70018d4 <__alt_data_end+0xff0018d4>
 7001fa4:	0039883a 	mov	fp,zero
 7001fa8:	0005883a 	mov	r2,zero
 7001fac:	003d4006 	br	70014b0 <__alt_data_end+0xff0014b0>
 7001fb0:	0141c074 	movhi	r5,1793
 7001fb4:	297ee784 	addi	r5,r5,-1122
 7001fb8:	d9402b15 	stw	r5,172(sp)
 7001fbc:	d9402b17 	ldw	r5,172(sp)
 7001fc0:	1c47883a 	add	r3,r3,r17
 7001fc4:	10800044 	addi	r2,r2,1
 7001fc8:	41400015 	stw	r5,0(r8)
 7001fcc:	44400115 	stw	r17,4(r8)
 7001fd0:	d8c02015 	stw	r3,128(sp)
 7001fd4:	d8801f15 	stw	r2,124(sp)
 7001fd8:	010001c4 	movi	r4,7
 7001fdc:	20bec816 	blt	r4,r2,7001b00 <__alt_data_end+0xff001b00>
 7001fe0:	42000204 	addi	r8,r8,8
 7001fe4:	003ecd06 	br	7001b1c <__alt_data_end+0xff001b1c>
 7001fe8:	d9002917 	ldw	r4,164(sp)
 7001fec:	d8002785 	stb	zero,158(sp)
 7001ff0:	203d2d16 	blt	r4,zero,70014a8 <__alt_data_end+0xff0014a8>
 7001ff4:	00bfdfc4 	movi	r2,-129
 7001ff8:	90a4703a 	and	r18,r18,r2
 7001ffc:	003a9106 	br	7000a44 <__alt_data_end+0xff000a44>
 7002000:	0101c074 	movhi	r4,1793
 7002004:	213ee784 	addi	r4,r4,-1122
 7002008:	d9002b15 	stw	r4,172(sp)
 700200c:	003c0c06 	br	7001040 <__alt_data_end+0xff001040>
 7002010:	d9002c17 	ldw	r4,176(sp)
 7002014:	d9801e04 	addi	r6,sp,120
 7002018:	b80b883a 	mov	r5,r23
 700201c:	7007e2c0 	call	7007e2c <__sprint_r>
 7002020:	103aab1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7002024:	d8c02017 	ldw	r3,128(sp)
 7002028:	da000404 	addi	r8,sp,16
 700202c:	003d4106 	br	7001534 <__alt_data_end+0xff001534>
 7002030:	d8801f17 	ldw	r2,124(sp)
 7002034:	0141c074 	movhi	r5,1793
 7002038:	01000044 	movi	r4,1
 700203c:	18c00044 	addi	r3,r3,1
 7002040:	10800044 	addi	r2,r2,1
 7002044:	297ee704 	addi	r5,r5,-1124
 7002048:	41000115 	stw	r4,4(r8)
 700204c:	41400015 	stw	r5,0(r8)
 7002050:	d8c02015 	stw	r3,128(sp)
 7002054:	d8801f15 	stw	r2,124(sp)
 7002058:	010001c4 	movi	r4,7
 700205c:	20805c16 	blt	r4,r2,70021d0 <___vfprintf_internal_r+0x1b08>
 7002060:	42000204 	addi	r8,r8,8
 7002064:	8800041e 	bne	r17,zero,7002078 <___vfprintf_internal_r+0x19b0>
 7002068:	d8803317 	ldw	r2,204(sp)
 700206c:	1000021e 	bne	r2,zero,7002078 <___vfprintf_internal_r+0x19b0>
 7002070:	9080004c 	andi	r2,r18,1
 7002074:	103c0926 	beq	r2,zero,700109c <__alt_data_end+0xff00109c>
 7002078:	d9003717 	ldw	r4,220(sp)
 700207c:	d8801f17 	ldw	r2,124(sp)
 7002080:	d9403417 	ldw	r5,208(sp)
 7002084:	20c7883a 	add	r3,r4,r3
 7002088:	10800044 	addi	r2,r2,1
 700208c:	41000115 	stw	r4,4(r8)
 7002090:	41400015 	stw	r5,0(r8)
 7002094:	d8c02015 	stw	r3,128(sp)
 7002098:	d8801f15 	stw	r2,124(sp)
 700209c:	010001c4 	movi	r4,7
 70020a0:	20812116 	blt	r4,r2,7002528 <___vfprintf_internal_r+0x1e60>
 70020a4:	42000204 	addi	r8,r8,8
 70020a8:	0463c83a 	sub	r17,zero,r17
 70020ac:	0440730e 	bge	zero,r17,700227c <___vfprintf_internal_r+0x1bb4>
 70020b0:	05800404 	movi	r22,16
 70020b4:	b440860e 	bge	r22,r17,70022d0 <___vfprintf_internal_r+0x1c08>
 70020b8:	0141c074 	movhi	r5,1793
 70020bc:	297ee784 	addi	r5,r5,-1122
 70020c0:	d9402b15 	stw	r5,172(sp)
 70020c4:	070001c4 	movi	fp,7
 70020c8:	dcc02c17 	ldw	r19,176(sp)
 70020cc:	00000306 	br	70020dc <___vfprintf_internal_r+0x1a14>
 70020d0:	42000204 	addi	r8,r8,8
 70020d4:	8c7ffc04 	addi	r17,r17,-16
 70020d8:	b440800e 	bge	r22,r17,70022dc <___vfprintf_internal_r+0x1c14>
 70020dc:	18c00404 	addi	r3,r3,16
 70020e0:	10800044 	addi	r2,r2,1
 70020e4:	45000015 	stw	r20,0(r8)
 70020e8:	45800115 	stw	r22,4(r8)
 70020ec:	d8c02015 	stw	r3,128(sp)
 70020f0:	d8801f15 	stw	r2,124(sp)
 70020f4:	e0bff60e 	bge	fp,r2,70020d0 <__alt_data_end+0xff0020d0>
 70020f8:	d9801e04 	addi	r6,sp,120
 70020fc:	b80b883a 	mov	r5,r23
 7002100:	9809883a 	mov	r4,r19
 7002104:	7007e2c0 	call	7007e2c <__sprint_r>
 7002108:	103a711e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 700210c:	d8c02017 	ldw	r3,128(sp)
 7002110:	d8801f17 	ldw	r2,124(sp)
 7002114:	da000404 	addi	r8,sp,16
 7002118:	003fee06 	br	70020d4 <__alt_data_end+0xff0020d4>
 700211c:	00bfffc4 	movi	r2,-1
 7002120:	003a6f06 	br	7000ae0 <__alt_data_end+0xff000ae0>
 7002124:	008011c4 	movi	r2,71
 7002128:	1440b816 	blt	r2,r17,700240c <___vfprintf_internal_r+0x1d44>
 700212c:	0401c074 	movhi	r16,1793
 7002130:	843ed904 	addi	r16,r16,-1180
 7002134:	00c000c4 	movi	r3,3
 7002138:	00bfdfc4 	movi	r2,-129
 700213c:	d8c02a15 	stw	r3,168(sp)
 7002140:	90a4703a 	and	r18,r18,r2
 7002144:	df002783 	ldbu	fp,158(sp)
 7002148:	d8c02e15 	stw	r3,184(sp)
 700214c:	d8002915 	stw	zero,164(sp)
 7002150:	d8003215 	stw	zero,200(sp)
 7002154:	003b2906 	br	7000dfc <__alt_data_end+0xff000dfc>
 7002158:	d9002d17 	ldw	r4,180(sp)
 700215c:	24c00017 	ldw	r19,0(r4)
 7002160:	21000104 	addi	r4,r4,4
 7002164:	d9002d15 	stw	r4,180(sp)
 7002168:	982dd7fa 	srai	r22,r19,31
 700216c:	b005883a 	mov	r2,r22
 7002170:	003a9f06 	br	7000bf0 <__alt_data_end+0xff000bf0>
 7002174:	d9402d17 	ldw	r5,180(sp)
 7002178:	d8c02f17 	ldw	r3,188(sp)
 700217c:	28800017 	ldw	r2,0(r5)
 7002180:	29400104 	addi	r5,r5,4
 7002184:	d9402d15 	stw	r5,180(sp)
 7002188:	10c00015 	stw	r3,0(r2)
 700218c:	00398606 	br	70007a8 <__alt_data_end+0xff0007a8>
 7002190:	d9402d17 	ldw	r5,180(sp)
 7002194:	002d883a 	mov	r22,zero
 7002198:	2cc00017 	ldw	r19,0(r5)
 700219c:	29400104 	addi	r5,r5,4
 70021a0:	d9402d15 	stw	r5,180(sp)
 70021a4:	003c2306 	br	7001234 <__alt_data_end+0xff001234>
 70021a8:	d8c02d17 	ldw	r3,180(sp)
 70021ac:	d9002917 	ldw	r4,164(sp)
 70021b0:	002d883a 	mov	r22,zero
 70021b4:	18800104 	addi	r2,r3,4
 70021b8:	1cc0000b 	ldhu	r19,0(r3)
 70021bc:	203dc10e 	bge	r4,zero,70018c4 <__alt_data_end+0xff0018c4>
 70021c0:	003f7506 	br	7001f98 <__alt_data_end+0xff001f98>
 70021c4:	0401c074 	movhi	r16,1793
 70021c8:	843ed704 	addi	r16,r16,-1188
 70021cc:	003acc06 	br	7000d00 <__alt_data_end+0xff000d00>
 70021d0:	d9002c17 	ldw	r4,176(sp)
 70021d4:	d9801e04 	addi	r6,sp,120
 70021d8:	b80b883a 	mov	r5,r23
 70021dc:	7007e2c0 	call	7007e2c <__sprint_r>
 70021e0:	103a3b1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 70021e4:	dc402617 	ldw	r17,152(sp)
 70021e8:	d8c02017 	ldw	r3,128(sp)
 70021ec:	da000404 	addi	r8,sp,16
 70021f0:	003f9c06 	br	7002064 <__alt_data_end+0xff002064>
 70021f4:	ac400043 	ldbu	r17,1(r21)
 70021f8:	94800814 	ori	r18,r18,32
 70021fc:	ad400044 	addi	r21,r21,1
 7002200:	8c403fcc 	andi	r17,r17,255
 7002204:	8c40201c 	xori	r17,r17,128
 7002208:	8c7fe004 	addi	r17,r17,-128
 700220c:	00398f06 	br	700084c <__alt_data_end+0xff00084c>
 7002210:	d8c02d15 	stw	r3,180(sp)
 7002214:	0039883a 	mov	fp,zero
 7002218:	003e3506 	br	7001af0 <__alt_data_end+0xff001af0>
 700221c:	d9002c17 	ldw	r4,176(sp)
 7002220:	d9801e04 	addi	r6,sp,120
 7002224:	b80b883a 	mov	r5,r23
 7002228:	7007e2c0 	call	7007e2c <__sprint_r>
 700222c:	103a281e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7002230:	d8c02017 	ldw	r3,128(sp)
 7002234:	da000404 	addi	r8,sp,16
 7002238:	003cd006 	br	700157c <__alt_data_end+0xff00157c>
 700223c:	8009883a 	mov	r4,r16
 7002240:	da003d15 	stw	r8,244(sp)
 7002244:	70006300 	call	7000630 <strlen>
 7002248:	d8802e15 	stw	r2,184(sp)
 700224c:	da003d17 	ldw	r8,244(sp)
 7002250:	103c340e 	bge	r2,zero,7001324 <__alt_data_end+0xff001324>
 7002254:	0005883a 	mov	r2,zero
 7002258:	003c3206 	br	7001324 <__alt_data_end+0xff001324>
 700225c:	d9002c17 	ldw	r4,176(sp)
 7002260:	d9801e04 	addi	r6,sp,120
 7002264:	b80b883a 	mov	r5,r23
 7002268:	7007e2c0 	call	7007e2c <__sprint_r>
 700226c:	103a181e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 7002270:	d8c02017 	ldw	r3,128(sp)
 7002274:	d8801f17 	ldw	r2,124(sp)
 7002278:	da000404 	addi	r8,sp,16
 700227c:	d9403317 	ldw	r5,204(sp)
 7002280:	10800044 	addi	r2,r2,1
 7002284:	44000015 	stw	r16,0(r8)
 7002288:	28c7883a 	add	r3,r5,r3
 700228c:	003b7d06 	br	7001084 <__alt_data_end+0xff001084>
 7002290:	0101c074 	movhi	r4,1793
 7002294:	213eeb84 	addi	r4,r4,-1106
 7002298:	d9003515 	stw	r4,212(sp)
 700229c:	003b1406 	br	7000ef0 <__alt_data_end+0xff000ef0>
 70022a0:	013fffc4 	movi	r4,-1
 70022a4:	003a3506 	br	7000b7c <__alt_data_end+0xff000b7c>
 70022a8:	0023883a 	mov	r17,zero
 70022ac:	003d9d06 	br	7001924 <__alt_data_end+0xff001924>
 70022b0:	d9002c17 	ldw	r4,176(sp)
 70022b4:	d9801e04 	addi	r6,sp,120
 70022b8:	b80b883a 	mov	r5,r23
 70022bc:	7007e2c0 	call	7007e2c <__sprint_r>
 70022c0:	103a031e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 70022c4:	d8c02017 	ldw	r3,128(sp)
 70022c8:	da000404 	addi	r8,sp,16
 70022cc:	003d9406 	br	7001920 <__alt_data_end+0xff001920>
 70022d0:	0101c074 	movhi	r4,1793
 70022d4:	213ee784 	addi	r4,r4,-1122
 70022d8:	d9002b15 	stw	r4,172(sp)
 70022dc:	d9002b17 	ldw	r4,172(sp)
 70022e0:	1c47883a 	add	r3,r3,r17
 70022e4:	10800044 	addi	r2,r2,1
 70022e8:	41000015 	stw	r4,0(r8)
 70022ec:	44400115 	stw	r17,4(r8)
 70022f0:	d8c02015 	stw	r3,128(sp)
 70022f4:	d8801f15 	stw	r2,124(sp)
 70022f8:	010001c4 	movi	r4,7
 70022fc:	20bfd716 	blt	r4,r2,700225c <__alt_data_end+0xff00225c>
 7002300:	42000204 	addi	r8,r8,8
 7002304:	003fdd06 	br	700227c <__alt_data_end+0xff00227c>
 7002308:	d9002c17 	ldw	r4,176(sp)
 700230c:	d9801e04 	addi	r6,sp,120
 7002310:	b80b883a 	mov	r5,r23
 7002314:	7007e2c0 	call	7007e2c <__sprint_r>
 7002318:	1039ed1e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 700231c:	d8802617 	ldw	r2,152(sp)
 7002320:	d8c02017 	ldw	r3,128(sp)
 7002324:	da000404 	addi	r8,sp,16
 7002328:	003e1006 	br	7001b6c <__alt_data_end+0xff001b6c>
 700232c:	00800044 	movi	r2,1
 7002330:	10803fcc 	andi	r2,r2,255
 7002334:	00c00044 	movi	r3,1
 7002338:	10fa3526 	beq	r2,r3,7000c10 <__alt_data_end+0xff000c10>
 700233c:	00c00084 	movi	r3,2
 7002340:	10fbcb26 	beq	r2,r3,7001270 <__alt_data_end+0xff001270>
 7002344:	003a8f06 	br	7000d84 <__alt_data_end+0xff000d84>
 7002348:	0101c074 	movhi	r4,1793
 700234c:	213eeb84 	addi	r4,r4,-1106
 7002350:	d9003515 	stw	r4,212(sp)
 7002354:	003b7606 	br	7001130 <__alt_data_end+0xff001130>
 7002358:	d8802917 	ldw	r2,164(sp)
 700235c:	00c00184 	movi	r3,6
 7002360:	1880012e 	bgeu	r3,r2,7002368 <___vfprintf_internal_r+0x1ca0>
 7002364:	1805883a 	mov	r2,r3
 7002368:	d8802e15 	stw	r2,184(sp)
 700236c:	1000ef16 	blt	r2,zero,700272c <___vfprintf_internal_r+0x2064>
 7002370:	0401c074 	movhi	r16,1793
 7002374:	d8802a15 	stw	r2,168(sp)
 7002378:	dcc02d15 	stw	r19,180(sp)
 700237c:	d8002915 	stw	zero,164(sp)
 7002380:	d8003215 	stw	zero,200(sp)
 7002384:	843ee504 	addi	r16,r16,-1132
 7002388:	0039883a 	mov	fp,zero
 700238c:	003aa206 	br	7000e18 <__alt_data_end+0xff000e18>
 7002390:	0021883a 	mov	r16,zero
 7002394:	003e0706 	br	7001bb4 <__alt_data_end+0xff001bb4>
 7002398:	d9002c17 	ldw	r4,176(sp)
 700239c:	d9801e04 	addi	r6,sp,120
 70023a0:	b80b883a 	mov	r5,r23
 70023a4:	7007e2c0 	call	7007e2c <__sprint_r>
 70023a8:	1039c91e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 70023ac:	d8802617 	ldw	r2,152(sp)
 70023b0:	d9403317 	ldw	r5,204(sp)
 70023b4:	d8c02017 	ldw	r3,128(sp)
 70023b8:	da000404 	addi	r8,sp,16
 70023bc:	2885c83a 	sub	r2,r5,r2
 70023c0:	003dfb06 	br	7001bb0 <__alt_data_end+0xff001bb0>
 70023c4:	9080004c 	andi	r2,r18,1
 70023c8:	103e8f1e 	bne	r2,zero,7001e08 <__alt_data_end+0xff001e08>
 70023cc:	d8802117 	ldw	r2,132(sp)
 70023d0:	003e9e06 	br	7001e4c <__alt_data_end+0xff001e4c>
 70023d4:	1025883a 	mov	r18,r2
 70023d8:	0039883a 	mov	fp,zero
 70023dc:	00800084 	movi	r2,2
 70023e0:	003fd306 	br	7002330 <__alt_data_end+0xff002330>
 70023e4:	07000b44 	movi	fp,45
 70023e8:	df002785 	stb	fp,158(sp)
 70023ec:	003a4006 	br	7000cf0 <__alt_data_end+0xff000cf0>
 70023f0:	00c00b44 	movi	r3,45
 70023f4:	d8c02785 	stb	r3,158(sp)
 70023f8:	d8802a15 	stw	r2,168(sp)
 70023fc:	dc802b17 	ldw	r18,172(sp)
 7002400:	d8002915 	stw	zero,164(sp)
 7002404:	07000b44 	movi	fp,45
 7002408:	003a8006 	br	7000e0c <__alt_data_end+0xff000e0c>
 700240c:	0401c074 	movhi	r16,1793
 7002410:	843eda04 	addi	r16,r16,-1176
 7002414:	003f4706 	br	7002134 <__alt_data_end+0xff002134>
 7002418:	d8c02d17 	ldw	r3,180(sp)
 700241c:	d9002f17 	ldw	r4,188(sp)
 7002420:	18800017 	ldw	r2,0(r3)
 7002424:	18c00104 	addi	r3,r3,4
 7002428:	d8c02d15 	stw	r3,180(sp)
 700242c:	11000015 	stw	r4,0(r2)
 7002430:	0038dd06 	br	70007a8 <__alt_data_end+0xff0007a8>
 7002434:	dd802617 	ldw	r22,152(sp)
 7002438:	00bfff44 	movi	r2,-3
 700243c:	b0801c16 	blt	r22,r2,70024b0 <___vfprintf_internal_r+0x1de8>
 7002440:	d9402917 	ldw	r5,164(sp)
 7002444:	2d801a16 	blt	r5,r22,70024b0 <___vfprintf_internal_r+0x1de8>
 7002448:	dd803215 	stw	r22,200(sp)
 700244c:	003e8906 	br	7001e74 <__alt_data_end+0xff001e74>
 7002450:	0101c074 	movhi	r4,1793
 7002454:	213ee784 	addi	r4,r4,-1122
 7002458:	d9002b15 	stw	r4,172(sp)
 700245c:	003c9106 	br	70016a4 <__alt_data_end+0xff0016a4>
 7002460:	e005883a 	mov	r2,fp
 7002464:	003e7906 	br	7001e4c <__alt_data_end+0xff001e4c>
 7002468:	d9402917 	ldw	r5,164(sp)
 700246c:	df002783 	ldbu	fp,158(sp)
 7002470:	dcc02d15 	stw	r19,180(sp)
 7002474:	d9402a15 	stw	r5,168(sp)
 7002478:	d9402e15 	stw	r5,184(sp)
 700247c:	d8002915 	stw	zero,164(sp)
 7002480:	d8003215 	stw	zero,200(sp)
 7002484:	003a5d06 	br	7000dfc <__alt_data_end+0xff000dfc>
 7002488:	9080004c 	andi	r2,r18,1
 700248c:	0039883a 	mov	fp,zero
 7002490:	10000426 	beq	r2,zero,70024a4 <___vfprintf_internal_r+0x1ddc>
 7002494:	00800c04 	movi	r2,48
 7002498:	dc001dc4 	addi	r16,sp,119
 700249c:	d8801dc5 	stb	r2,119(sp)
 70024a0:	003b8006 	br	70012a4 <__alt_data_end+0xff0012a4>
 70024a4:	d8002e15 	stw	zero,184(sp)
 70024a8:	dc001e04 	addi	r16,sp,120
 70024ac:	003a4d06 	br	7000de4 <__alt_data_end+0xff000de4>
 70024b0:	8c7fff84 	addi	r17,r17,-2
 70024b4:	b5bfffc4 	addi	r22,r22,-1
 70024b8:	dd802615 	stw	r22,152(sp)
 70024bc:	dc4022c5 	stb	r17,139(sp)
 70024c0:	b000bf16 	blt	r22,zero,70027c0 <___vfprintf_internal_r+0x20f8>
 70024c4:	00800ac4 	movi	r2,43
 70024c8:	d8802305 	stb	r2,140(sp)
 70024cc:	00800244 	movi	r2,9
 70024d0:	15807016 	blt	r2,r22,7002694 <___vfprintf_internal_r+0x1fcc>
 70024d4:	00800c04 	movi	r2,48
 70024d8:	b5800c04 	addi	r22,r22,48
 70024dc:	d8802345 	stb	r2,141(sp)
 70024e0:	dd802385 	stb	r22,142(sp)
 70024e4:	d88023c4 	addi	r2,sp,143
 70024e8:	df0022c4 	addi	fp,sp,139
 70024ec:	d8c03317 	ldw	r3,204(sp)
 70024f0:	1739c83a 	sub	fp,r2,fp
 70024f4:	d9003317 	ldw	r4,204(sp)
 70024f8:	e0c7883a 	add	r3,fp,r3
 70024fc:	df003a15 	stw	fp,232(sp)
 7002500:	d8c02e15 	stw	r3,184(sp)
 7002504:	00800044 	movi	r2,1
 7002508:	1100b30e 	bge	r2,r4,70027d8 <___vfprintf_internal_r+0x2110>
 700250c:	d8c02e17 	ldw	r3,184(sp)
 7002510:	18c00044 	addi	r3,r3,1
 7002514:	d8c02e15 	stw	r3,184(sp)
 7002518:	1805883a 	mov	r2,r3
 700251c:	1800ac16 	blt	r3,zero,70027d0 <___vfprintf_internal_r+0x2108>
 7002520:	d8003215 	stw	zero,200(sp)
 7002524:	003e5d06 	br	7001e9c <__alt_data_end+0xff001e9c>
 7002528:	d9002c17 	ldw	r4,176(sp)
 700252c:	d9801e04 	addi	r6,sp,120
 7002530:	b80b883a 	mov	r5,r23
 7002534:	7007e2c0 	call	7007e2c <__sprint_r>
 7002538:	1039651e 	bne	r2,zero,7000ad0 <__alt_data_end+0xff000ad0>
 700253c:	dc402617 	ldw	r17,152(sp)
 7002540:	d8c02017 	ldw	r3,128(sp)
 7002544:	d8801f17 	ldw	r2,124(sp)
 7002548:	da000404 	addi	r8,sp,16
 700254c:	003ed606 	br	70020a8 <__alt_data_end+0xff0020a8>
 7002550:	582b883a 	mov	r21,r11
 7002554:	d8002915 	stw	zero,164(sp)
 7002558:	0038bd06 	br	7000850 <__alt_data_end+0xff000850>
 700255c:	d8802917 	ldw	r2,164(sp)
 7002560:	103e071e 	bne	r2,zero,7001d80 <__alt_data_end+0xff001d80>
 7002564:	dc002915 	stw	r16,164(sp)
 7002568:	003e0506 	br	7001d80 <__alt_data_end+0xff001d80>
 700256c:	d9002917 	ldw	r4,164(sp)
 7002570:	20c00044 	addi	r3,r4,1
 7002574:	003e0f06 	br	7001db4 <__alt_data_end+0xff001db4>
 7002578:	01400184 	movi	r5,6
 700257c:	d9402915 	stw	r5,164(sp)
 7002580:	003dff06 	br	7001d80 <__alt_data_end+0xff001d80>
 7002584:	d8802104 	addi	r2,sp,132
 7002588:	d8800315 	stw	r2,12(sp)
 700258c:	d8802504 	addi	r2,sp,148
 7002590:	d8800215 	stw	r2,8(sp)
 7002594:	d8802604 	addi	r2,sp,152
 7002598:	d8800115 	stw	r2,4(sp)
 700259c:	d8802917 	ldw	r2,164(sp)
 70025a0:	d9403617 	ldw	r5,216(sp)
 70025a4:	d9002c17 	ldw	r4,176(sp)
 70025a8:	d8800015 	stw	r2,0(sp)
 70025ac:	01c000c4 	movi	r7,3
 70025b0:	980d883a 	mov	r6,r19
 70025b4:	da003d15 	stw	r8,244(sp)
 70025b8:	7002cec0 	call	7002cec <_dtoa_r>
 70025bc:	d8c02917 	ldw	r3,164(sp)
 70025c0:	da003d17 	ldw	r8,244(sp)
 70025c4:	1021883a 	mov	r16,r2
 70025c8:	10f9883a 	add	fp,r2,r3
 70025cc:	81000007 	ldb	r4,0(r16)
 70025d0:	00800c04 	movi	r2,48
 70025d4:	20805e26 	beq	r4,r2,7002750 <___vfprintf_internal_r+0x2088>
 70025d8:	d8c02617 	ldw	r3,152(sp)
 70025dc:	e0f9883a 	add	fp,fp,r3
 70025e0:	003e0a06 	br	7001e0c <__alt_data_end+0xff001e0c>
 70025e4:	00c00b44 	movi	r3,45
 70025e8:	24e0003c 	xorhi	r19,r4,32768
 70025ec:	d8c02a05 	stb	r3,168(sp)
 70025f0:	003de906 	br	7001d98 <__alt_data_end+0xff001d98>
 70025f4:	d8c03217 	ldw	r3,200(sp)
 70025f8:	00c07a0e 	bge	zero,r3,70027e4 <___vfprintf_internal_r+0x211c>
 70025fc:	00800044 	movi	r2,1
 7002600:	d9003317 	ldw	r4,204(sp)
 7002604:	1105883a 	add	r2,r2,r4
 7002608:	d8802e15 	stw	r2,184(sp)
 700260c:	10004e16 	blt	r2,zero,7002748 <___vfprintf_internal_r+0x2080>
 7002610:	044019c4 	movi	r17,103
 7002614:	003e2106 	br	7001e9c <__alt_data_end+0xff001e9c>
 7002618:	d9002917 	ldw	r4,164(sp)
 700261c:	d8802104 	addi	r2,sp,132
 7002620:	d8800315 	stw	r2,12(sp)
 7002624:	d9000015 	stw	r4,0(sp)
 7002628:	d8802504 	addi	r2,sp,148
 700262c:	d9403617 	ldw	r5,216(sp)
 7002630:	d9002c17 	ldw	r4,176(sp)
 7002634:	d8800215 	stw	r2,8(sp)
 7002638:	d8802604 	addi	r2,sp,152
 700263c:	d8800115 	stw	r2,4(sp)
 7002640:	01c000c4 	movi	r7,3
 7002644:	980d883a 	mov	r6,r19
 7002648:	da003d15 	stw	r8,244(sp)
 700264c:	7002cec0 	call	7002cec <_dtoa_r>
 7002650:	d8c02917 	ldw	r3,164(sp)
 7002654:	da003d17 	ldw	r8,244(sp)
 7002658:	1021883a 	mov	r16,r2
 700265c:	00801184 	movi	r2,70
 7002660:	80f9883a 	add	fp,r16,r3
 7002664:	88bfd926 	beq	r17,r2,70025cc <__alt_data_end+0xff0025cc>
 7002668:	003de806 	br	7001e0c <__alt_data_end+0xff001e0c>
 700266c:	d9002917 	ldw	r4,164(sp)
 7002670:	00c04d0e 	bge	zero,r3,70027a8 <___vfprintf_internal_r+0x20e0>
 7002674:	2000441e 	bne	r4,zero,7002788 <___vfprintf_internal_r+0x20c0>
 7002678:	9480004c 	andi	r18,r18,1
 700267c:	9000421e 	bne	r18,zero,7002788 <___vfprintf_internal_r+0x20c0>
 7002680:	1805883a 	mov	r2,r3
 7002684:	18007016 	blt	r3,zero,7002848 <___vfprintf_internal_r+0x2180>
 7002688:	d8c03217 	ldw	r3,200(sp)
 700268c:	d8c02e15 	stw	r3,184(sp)
 7002690:	003e0206 	br	7001e9c <__alt_data_end+0xff001e9c>
 7002694:	df0022c4 	addi	fp,sp,139
 7002698:	dc002915 	stw	r16,164(sp)
 700269c:	4027883a 	mov	r19,r8
 70026a0:	e021883a 	mov	r16,fp
 70026a4:	b009883a 	mov	r4,r22
 70026a8:	01400284 	movi	r5,10
 70026ac:	700a7e00 	call	700a7e0 <__modsi3>
 70026b0:	10800c04 	addi	r2,r2,48
 70026b4:	843fffc4 	addi	r16,r16,-1
 70026b8:	b009883a 	mov	r4,r22
 70026bc:	01400284 	movi	r5,10
 70026c0:	80800005 	stb	r2,0(r16)
 70026c4:	700a75c0 	call	700a75c <__divsi3>
 70026c8:	102d883a 	mov	r22,r2
 70026cc:	00800244 	movi	r2,9
 70026d0:	15bff416 	blt	r2,r22,70026a4 <__alt_data_end+0xff0026a4>
 70026d4:	9811883a 	mov	r8,r19
 70026d8:	b0800c04 	addi	r2,r22,48
 70026dc:	8027883a 	mov	r19,r16
 70026e0:	997fffc4 	addi	r5,r19,-1
 70026e4:	98bfffc5 	stb	r2,-1(r19)
 70026e8:	dc002917 	ldw	r16,164(sp)
 70026ec:	2f006a2e 	bgeu	r5,fp,7002898 <___vfprintf_internal_r+0x21d0>
 70026f0:	d9c02384 	addi	r7,sp,142
 70026f4:	3ccfc83a 	sub	r7,r7,r19
 70026f8:	d9002344 	addi	r4,sp,141
 70026fc:	e1cf883a 	add	r7,fp,r7
 7002700:	00000106 	br	7002708 <___vfprintf_internal_r+0x2040>
 7002704:	28800003 	ldbu	r2,0(r5)
 7002708:	20800005 	stb	r2,0(r4)
 700270c:	21000044 	addi	r4,r4,1
 7002710:	29400044 	addi	r5,r5,1
 7002714:	393ffb1e 	bne	r7,r4,7002704 <__alt_data_end+0xff002704>
 7002718:	d8802304 	addi	r2,sp,140
 700271c:	14c5c83a 	sub	r2,r2,r19
 7002720:	d8c02344 	addi	r3,sp,141
 7002724:	1885883a 	add	r2,r3,r2
 7002728:	003f7006 	br	70024ec <__alt_data_end+0xff0024ec>
 700272c:	0005883a 	mov	r2,zero
 7002730:	003f0f06 	br	7002370 <__alt_data_end+0xff002370>
 7002734:	d8c03217 	ldw	r3,200(sp)
 7002738:	18c00044 	addi	r3,r3,1
 700273c:	d8c02e15 	stw	r3,184(sp)
 7002740:	1805883a 	mov	r2,r3
 7002744:	183fb20e 	bge	r3,zero,7002610 <__alt_data_end+0xff002610>
 7002748:	0005883a 	mov	r2,zero
 700274c:	003fb006 	br	7002610 <__alt_data_end+0xff002610>
 7002750:	d9003617 	ldw	r4,216(sp)
 7002754:	000d883a 	mov	r6,zero
 7002758:	000f883a 	mov	r7,zero
 700275c:	980b883a 	mov	r5,r19
 7002760:	d8c03c15 	stw	r3,240(sp)
 7002764:	da003d15 	stw	r8,244(sp)
 7002768:	700baa40 	call	700baa4 <__eqdf2>
 700276c:	d8c03c17 	ldw	r3,240(sp)
 7002770:	da003d17 	ldw	r8,244(sp)
 7002774:	103f9826 	beq	r2,zero,70025d8 <__alt_data_end+0xff0025d8>
 7002778:	00800044 	movi	r2,1
 700277c:	10c7c83a 	sub	r3,r2,r3
 7002780:	d8c02615 	stw	r3,152(sp)
 7002784:	003f9506 	br	70025dc <__alt_data_end+0xff0025dc>
 7002788:	d9002917 	ldw	r4,164(sp)
 700278c:	d8c03217 	ldw	r3,200(sp)
 7002790:	20800044 	addi	r2,r4,1
 7002794:	1885883a 	add	r2,r3,r2
 7002798:	d8802e15 	stw	r2,184(sp)
 700279c:	103dbf0e 	bge	r2,zero,7001e9c <__alt_data_end+0xff001e9c>
 70027a0:	0005883a 	mov	r2,zero
 70027a4:	003dbd06 	br	7001e9c <__alt_data_end+0xff001e9c>
 70027a8:	2000211e 	bne	r4,zero,7002830 <___vfprintf_internal_r+0x2168>
 70027ac:	9480004c 	andi	r18,r18,1
 70027b0:	90001f1e 	bne	r18,zero,7002830 <___vfprintf_internal_r+0x2168>
 70027b4:	00800044 	movi	r2,1
 70027b8:	d8802e15 	stw	r2,184(sp)
 70027bc:	003db706 	br	7001e9c <__alt_data_end+0xff001e9c>
 70027c0:	00800b44 	movi	r2,45
 70027c4:	05adc83a 	sub	r22,zero,r22
 70027c8:	d8802305 	stb	r2,140(sp)
 70027cc:	003f3f06 	br	70024cc <__alt_data_end+0xff0024cc>
 70027d0:	0005883a 	mov	r2,zero
 70027d4:	003f5206 	br	7002520 <__alt_data_end+0xff002520>
 70027d8:	90a4703a 	and	r18,r18,r2
 70027dc:	903f4e26 	beq	r18,zero,7002518 <__alt_data_end+0xff002518>
 70027e0:	003f4a06 	br	700250c <__alt_data_end+0xff00250c>
 70027e4:	00800084 	movi	r2,2
 70027e8:	10c5c83a 	sub	r2,r2,r3
 70027ec:	003f8406 	br	7002600 <__alt_data_end+0xff002600>
 70027f0:	d8802d17 	ldw	r2,180(sp)
 70027f4:	d9002d17 	ldw	r4,180(sp)
 70027f8:	ac400043 	ldbu	r17,1(r21)
 70027fc:	10800017 	ldw	r2,0(r2)
 7002800:	582b883a 	mov	r21,r11
 7002804:	d8802915 	stw	r2,164(sp)
 7002808:	20800104 	addi	r2,r4,4
 700280c:	d9002917 	ldw	r4,164(sp)
 7002810:	d8802d15 	stw	r2,180(sp)
 7002814:	203e7a0e 	bge	r4,zero,7002200 <__alt_data_end+0xff002200>
 7002818:	8c403fcc 	andi	r17,r17,255
 700281c:	00bfffc4 	movi	r2,-1
 7002820:	8c40201c 	xori	r17,r17,128
 7002824:	d8802915 	stw	r2,164(sp)
 7002828:	8c7fe004 	addi	r17,r17,-128
 700282c:	00380706 	br	700084c <__alt_data_end+0xff00084c>
 7002830:	d8c02917 	ldw	r3,164(sp)
 7002834:	18c00084 	addi	r3,r3,2
 7002838:	d8c02e15 	stw	r3,184(sp)
 700283c:	1805883a 	mov	r2,r3
 7002840:	183d960e 	bge	r3,zero,7001e9c <__alt_data_end+0xff001e9c>
 7002844:	003fd606 	br	70027a0 <__alt_data_end+0xff0027a0>
 7002848:	0005883a 	mov	r2,zero
 700284c:	003f8e06 	br	7002688 <__alt_data_end+0xff002688>
 7002850:	9080004c 	andi	r2,r18,1
 7002854:	103f811e 	bne	r2,zero,700265c <__alt_data_end+0xff00265c>
 7002858:	d8802117 	ldw	r2,132(sp)
 700285c:	1405c83a 	sub	r2,r2,r16
 7002860:	d8803315 	stw	r2,204(sp)
 7002864:	b47ef326 	beq	r22,r17,7002434 <__alt_data_end+0xff002434>
 7002868:	dd802617 	ldw	r22,152(sp)
 700286c:	003f1106 	br	70024b4 <__alt_data_end+0xff0024b4>
 7002870:	d9c02785 	stb	r7,158(sp)
 7002874:	00390406 	br	7000c88 <__alt_data_end+0xff000c88>
 7002878:	d9c02785 	stb	r7,158(sp)
 700287c:	0038d306 	br	7000bcc <__alt_data_end+0xff000bcc>
 7002880:	d9c02785 	stb	r7,158(sp)
 7002884:	003a6106 	br	700120c <__alt_data_end+0xff00120c>
 7002888:	d9c02785 	stb	r7,158(sp)
 700288c:	003af806 	br	7001470 <__alt_data_end+0xff001470>
 7002890:	0005883a 	mov	r2,zero
 7002894:	003d7e06 	br	7001e90 <__alt_data_end+0xff001e90>
 7002898:	d8802344 	addi	r2,sp,141
 700289c:	003f1306 	br	70024ec <__alt_data_end+0xff0024ec>
 70028a0:	d9c02785 	stb	r7,158(sp)
 70028a4:	00392306 	br	7000d34 <__alt_data_end+0xff000d34>
 70028a8:	d9c02785 	stb	r7,158(sp)
 70028ac:	003aa906 	br	7001354 <__alt_data_end+0xff001354>
 70028b0:	d9c02785 	stb	r7,158(sp)
 70028b4:	003a3d06 	br	70011ac <__alt_data_end+0xff0011ac>
 70028b8:	d9c02785 	stb	r7,158(sp)
 70028bc:	003aca06 	br	70013e8 <__alt_data_end+0xff0013e8>

070028c0 <__vfprintf_internal>:
 70028c0:	0081c074 	movhi	r2,1793
 70028c4:	10864a04 	addi	r2,r2,6440
 70028c8:	300f883a 	mov	r7,r6
 70028cc:	280d883a 	mov	r6,r5
 70028d0:	200b883a 	mov	r5,r4
 70028d4:	11000017 	ldw	r4,0(r2)
 70028d8:	70006c81 	jmpi	70006c8 <___vfprintf_internal_r>

070028dc <__sbprintf>:
 70028dc:	2880030b 	ldhu	r2,12(r5)
 70028e0:	2ac01917 	ldw	r11,100(r5)
 70028e4:	2a80038b 	ldhu	r10,14(r5)
 70028e8:	2a400717 	ldw	r9,28(r5)
 70028ec:	2a000917 	ldw	r8,36(r5)
 70028f0:	defee204 	addi	sp,sp,-1144
 70028f4:	00c10004 	movi	r3,1024
 70028f8:	dc011a15 	stw	r16,1128(sp)
 70028fc:	10bfff4c 	andi	r2,r2,65533
 7002900:	2821883a 	mov	r16,r5
 7002904:	d8cb883a 	add	r5,sp,r3
 7002908:	dc811c15 	stw	r18,1136(sp)
 700290c:	dc411b15 	stw	r17,1132(sp)
 7002910:	dfc11d15 	stw	ra,1140(sp)
 7002914:	2025883a 	mov	r18,r4
 7002918:	d881030d 	sth	r2,1036(sp)
 700291c:	dac11915 	stw	r11,1124(sp)
 7002920:	da81038d 	sth	r10,1038(sp)
 7002924:	da410715 	stw	r9,1052(sp)
 7002928:	da010915 	stw	r8,1060(sp)
 700292c:	dec10015 	stw	sp,1024(sp)
 7002930:	dec10415 	stw	sp,1040(sp)
 7002934:	d8c10215 	stw	r3,1032(sp)
 7002938:	d8c10515 	stw	r3,1044(sp)
 700293c:	d8010615 	stw	zero,1048(sp)
 7002940:	70006c80 	call	70006c8 <___vfprintf_internal_r>
 7002944:	1023883a 	mov	r17,r2
 7002948:	10000416 	blt	r2,zero,700295c <__sbprintf+0x80>
 700294c:	d9410004 	addi	r5,sp,1024
 7002950:	9009883a 	mov	r4,r18
 7002954:	70045900 	call	7004590 <_fflush_r>
 7002958:	10000d1e 	bne	r2,zero,7002990 <__sbprintf+0xb4>
 700295c:	d881030b 	ldhu	r2,1036(sp)
 7002960:	1080100c 	andi	r2,r2,64
 7002964:	10000326 	beq	r2,zero,7002974 <__sbprintf+0x98>
 7002968:	8080030b 	ldhu	r2,12(r16)
 700296c:	10801014 	ori	r2,r2,64
 7002970:	8080030d 	sth	r2,12(r16)
 7002974:	8805883a 	mov	r2,r17
 7002978:	dfc11d17 	ldw	ra,1140(sp)
 700297c:	dc811c17 	ldw	r18,1136(sp)
 7002980:	dc411b17 	ldw	r17,1132(sp)
 7002984:	dc011a17 	ldw	r16,1128(sp)
 7002988:	dec11e04 	addi	sp,sp,1144
 700298c:	f800283a 	ret
 7002990:	047fffc4 	movi	r17,-1
 7002994:	003ff106 	br	700295c <__alt_data_end+0xff00295c>

07002998 <__swsetup_r>:
 7002998:	0081c074 	movhi	r2,1793
 700299c:	defffd04 	addi	sp,sp,-12
 70029a0:	10864a04 	addi	r2,r2,6440
 70029a4:	dc400115 	stw	r17,4(sp)
 70029a8:	2023883a 	mov	r17,r4
 70029ac:	11000017 	ldw	r4,0(r2)
 70029b0:	dc000015 	stw	r16,0(sp)
 70029b4:	dfc00215 	stw	ra,8(sp)
 70029b8:	2821883a 	mov	r16,r5
 70029bc:	20000226 	beq	r4,zero,70029c8 <__swsetup_r+0x30>
 70029c0:	20800e17 	ldw	r2,56(r4)
 70029c4:	10003126 	beq	r2,zero,7002a8c <__swsetup_r+0xf4>
 70029c8:	8080030b 	ldhu	r2,12(r16)
 70029cc:	10c0020c 	andi	r3,r2,8
 70029d0:	1009883a 	mov	r4,r2
 70029d4:	18000f26 	beq	r3,zero,7002a14 <__swsetup_r+0x7c>
 70029d8:	80c00417 	ldw	r3,16(r16)
 70029dc:	18001526 	beq	r3,zero,7002a34 <__swsetup_r+0x9c>
 70029e0:	1100004c 	andi	r4,r2,1
 70029e4:	20001c1e 	bne	r4,zero,7002a58 <__swsetup_r+0xc0>
 70029e8:	1080008c 	andi	r2,r2,2
 70029ec:	1000291e 	bne	r2,zero,7002a94 <__swsetup_r+0xfc>
 70029f0:	80800517 	ldw	r2,20(r16)
 70029f4:	80800215 	stw	r2,8(r16)
 70029f8:	18001c26 	beq	r3,zero,7002a6c <__swsetup_r+0xd4>
 70029fc:	0005883a 	mov	r2,zero
 7002a00:	dfc00217 	ldw	ra,8(sp)
 7002a04:	dc400117 	ldw	r17,4(sp)
 7002a08:	dc000017 	ldw	r16,0(sp)
 7002a0c:	dec00304 	addi	sp,sp,12
 7002a10:	f800283a 	ret
 7002a14:	2080040c 	andi	r2,r4,16
 7002a18:	10002e26 	beq	r2,zero,7002ad4 <__swsetup_r+0x13c>
 7002a1c:	2080010c 	andi	r2,r4,4
 7002a20:	10001e1e 	bne	r2,zero,7002a9c <__swsetup_r+0x104>
 7002a24:	80c00417 	ldw	r3,16(r16)
 7002a28:	20800214 	ori	r2,r4,8
 7002a2c:	8080030d 	sth	r2,12(r16)
 7002a30:	183feb1e 	bne	r3,zero,70029e0 <__alt_data_end+0xff0029e0>
 7002a34:	1100a00c 	andi	r4,r2,640
 7002a38:	01408004 	movi	r5,512
 7002a3c:	217fe826 	beq	r4,r5,70029e0 <__alt_data_end+0xff0029e0>
 7002a40:	800b883a 	mov	r5,r16
 7002a44:	8809883a 	mov	r4,r17
 7002a48:	70055100 	call	7005510 <__smakebuf_r>
 7002a4c:	8080030b 	ldhu	r2,12(r16)
 7002a50:	80c00417 	ldw	r3,16(r16)
 7002a54:	003fe206 	br	70029e0 <__alt_data_end+0xff0029e0>
 7002a58:	80800517 	ldw	r2,20(r16)
 7002a5c:	80000215 	stw	zero,8(r16)
 7002a60:	0085c83a 	sub	r2,zero,r2
 7002a64:	80800615 	stw	r2,24(r16)
 7002a68:	183fe41e 	bne	r3,zero,70029fc <__alt_data_end+0xff0029fc>
 7002a6c:	80c0030b 	ldhu	r3,12(r16)
 7002a70:	0005883a 	mov	r2,zero
 7002a74:	1900200c 	andi	r4,r3,128
 7002a78:	203fe126 	beq	r4,zero,7002a00 <__alt_data_end+0xff002a00>
 7002a7c:	18c01014 	ori	r3,r3,64
 7002a80:	80c0030d 	sth	r3,12(r16)
 7002a84:	00bfffc4 	movi	r2,-1
 7002a88:	003fdd06 	br	7002a00 <__alt_data_end+0xff002a00>
 7002a8c:	700496c0 	call	700496c <__sinit>
 7002a90:	003fcd06 	br	70029c8 <__alt_data_end+0xff0029c8>
 7002a94:	0005883a 	mov	r2,zero
 7002a98:	003fd606 	br	70029f4 <__alt_data_end+0xff0029f4>
 7002a9c:	81400c17 	ldw	r5,48(r16)
 7002aa0:	28000626 	beq	r5,zero,7002abc <__swsetup_r+0x124>
 7002aa4:	80801004 	addi	r2,r16,64
 7002aa8:	28800326 	beq	r5,r2,7002ab8 <__swsetup_r+0x120>
 7002aac:	8809883a 	mov	r4,r17
 7002ab0:	7004ae00 	call	7004ae0 <_free_r>
 7002ab4:	8100030b 	ldhu	r4,12(r16)
 7002ab8:	80000c15 	stw	zero,48(r16)
 7002abc:	80c00417 	ldw	r3,16(r16)
 7002ac0:	00bff6c4 	movi	r2,-37
 7002ac4:	1108703a 	and	r4,r2,r4
 7002ac8:	80000115 	stw	zero,4(r16)
 7002acc:	80c00015 	stw	r3,0(r16)
 7002ad0:	003fd506 	br	7002a28 <__alt_data_end+0xff002a28>
 7002ad4:	00800244 	movi	r2,9
 7002ad8:	88800015 	stw	r2,0(r17)
 7002adc:	20801014 	ori	r2,r4,64
 7002ae0:	8080030d 	sth	r2,12(r16)
 7002ae4:	00bfffc4 	movi	r2,-1
 7002ae8:	003fc506 	br	7002a00 <__alt_data_end+0xff002a00>

07002aec <quorem>:
 7002aec:	defff704 	addi	sp,sp,-36
 7002af0:	dc800215 	stw	r18,8(sp)
 7002af4:	20800417 	ldw	r2,16(r4)
 7002af8:	2c800417 	ldw	r18,16(r5)
 7002afc:	dfc00815 	stw	ra,32(sp)
 7002b00:	ddc00715 	stw	r23,28(sp)
 7002b04:	dd800615 	stw	r22,24(sp)
 7002b08:	dd400515 	stw	r21,20(sp)
 7002b0c:	dd000415 	stw	r20,16(sp)
 7002b10:	dcc00315 	stw	r19,12(sp)
 7002b14:	dc400115 	stw	r17,4(sp)
 7002b18:	dc000015 	stw	r16,0(sp)
 7002b1c:	14807116 	blt	r2,r18,7002ce4 <quorem+0x1f8>
 7002b20:	94bfffc4 	addi	r18,r18,-1
 7002b24:	94ad883a 	add	r22,r18,r18
 7002b28:	b5ad883a 	add	r22,r22,r22
 7002b2c:	2c400504 	addi	r17,r5,20
 7002b30:	8da9883a 	add	r20,r17,r22
 7002b34:	25400504 	addi	r21,r4,20
 7002b38:	282f883a 	mov	r23,r5
 7002b3c:	adad883a 	add	r22,r21,r22
 7002b40:	a1400017 	ldw	r5,0(r20)
 7002b44:	2021883a 	mov	r16,r4
 7002b48:	b1000017 	ldw	r4,0(r22)
 7002b4c:	29400044 	addi	r5,r5,1
 7002b50:	700a8540 	call	700a854 <__udivsi3>
 7002b54:	1027883a 	mov	r19,r2
 7002b58:	10002c26 	beq	r2,zero,7002c0c <quorem+0x120>
 7002b5c:	a813883a 	mov	r9,r21
 7002b60:	880b883a 	mov	r5,r17
 7002b64:	0009883a 	mov	r4,zero
 7002b68:	000d883a 	mov	r6,zero
 7002b6c:	2a000017 	ldw	r8,0(r5)
 7002b70:	49c00017 	ldw	r7,0(r9)
 7002b74:	29400104 	addi	r5,r5,4
 7002b78:	40bfffcc 	andi	r2,r8,65535
 7002b7c:	14c5383a 	mul	r2,r2,r19
 7002b80:	4010d43a 	srli	r8,r8,16
 7002b84:	38ffffcc 	andi	r3,r7,65535
 7002b88:	1105883a 	add	r2,r2,r4
 7002b8c:	1008d43a 	srli	r4,r2,16
 7002b90:	44d1383a 	mul	r8,r8,r19
 7002b94:	198d883a 	add	r6,r3,r6
 7002b98:	10ffffcc 	andi	r3,r2,65535
 7002b9c:	30c7c83a 	sub	r3,r6,r3
 7002ba0:	380ed43a 	srli	r7,r7,16
 7002ba4:	4105883a 	add	r2,r8,r4
 7002ba8:	180dd43a 	srai	r6,r3,16
 7002bac:	113fffcc 	andi	r4,r2,65535
 7002bb0:	390fc83a 	sub	r7,r7,r4
 7002bb4:	398d883a 	add	r6,r7,r6
 7002bb8:	300e943a 	slli	r7,r6,16
 7002bbc:	18ffffcc 	andi	r3,r3,65535
 7002bc0:	1008d43a 	srli	r4,r2,16
 7002bc4:	38ceb03a 	or	r7,r7,r3
 7002bc8:	49c00015 	stw	r7,0(r9)
 7002bcc:	300dd43a 	srai	r6,r6,16
 7002bd0:	4a400104 	addi	r9,r9,4
 7002bd4:	a17fe52e 	bgeu	r20,r5,7002b6c <__alt_data_end+0xff002b6c>
 7002bd8:	b0800017 	ldw	r2,0(r22)
 7002bdc:	10000b1e 	bne	r2,zero,7002c0c <quorem+0x120>
 7002be0:	b0bfff04 	addi	r2,r22,-4
 7002be4:	a880082e 	bgeu	r21,r2,7002c08 <quorem+0x11c>
 7002be8:	b0ffff17 	ldw	r3,-4(r22)
 7002bec:	18000326 	beq	r3,zero,7002bfc <quorem+0x110>
 7002bf0:	00000506 	br	7002c08 <quorem+0x11c>
 7002bf4:	10c00017 	ldw	r3,0(r2)
 7002bf8:	1800031e 	bne	r3,zero,7002c08 <quorem+0x11c>
 7002bfc:	10bfff04 	addi	r2,r2,-4
 7002c00:	94bfffc4 	addi	r18,r18,-1
 7002c04:	a8bffb36 	bltu	r21,r2,7002bf4 <__alt_data_end+0xff002bf4>
 7002c08:	84800415 	stw	r18,16(r16)
 7002c0c:	b80b883a 	mov	r5,r23
 7002c10:	8009883a 	mov	r4,r16
 7002c14:	7006c500 	call	7006c50 <__mcmp>
 7002c18:	10002616 	blt	r2,zero,7002cb4 <quorem+0x1c8>
 7002c1c:	9cc00044 	addi	r19,r19,1
 7002c20:	a805883a 	mov	r2,r21
 7002c24:	000b883a 	mov	r5,zero
 7002c28:	11000017 	ldw	r4,0(r2)
 7002c2c:	89800017 	ldw	r6,0(r17)
 7002c30:	10800104 	addi	r2,r2,4
 7002c34:	20ffffcc 	andi	r3,r4,65535
 7002c38:	194b883a 	add	r5,r3,r5
 7002c3c:	30ffffcc 	andi	r3,r6,65535
 7002c40:	28c7c83a 	sub	r3,r5,r3
 7002c44:	300cd43a 	srli	r6,r6,16
 7002c48:	2008d43a 	srli	r4,r4,16
 7002c4c:	180bd43a 	srai	r5,r3,16
 7002c50:	18ffffcc 	andi	r3,r3,65535
 7002c54:	2189c83a 	sub	r4,r4,r6
 7002c58:	2149883a 	add	r4,r4,r5
 7002c5c:	200c943a 	slli	r6,r4,16
 7002c60:	8c400104 	addi	r17,r17,4
 7002c64:	200bd43a 	srai	r5,r4,16
 7002c68:	30c6b03a 	or	r3,r6,r3
 7002c6c:	10ffff15 	stw	r3,-4(r2)
 7002c70:	a47fed2e 	bgeu	r20,r17,7002c28 <__alt_data_end+0xff002c28>
 7002c74:	9485883a 	add	r2,r18,r18
 7002c78:	1085883a 	add	r2,r2,r2
 7002c7c:	a887883a 	add	r3,r21,r2
 7002c80:	18800017 	ldw	r2,0(r3)
 7002c84:	10000b1e 	bne	r2,zero,7002cb4 <quorem+0x1c8>
 7002c88:	18bfff04 	addi	r2,r3,-4
 7002c8c:	a880082e 	bgeu	r21,r2,7002cb0 <quorem+0x1c4>
 7002c90:	18ffff17 	ldw	r3,-4(r3)
 7002c94:	18000326 	beq	r3,zero,7002ca4 <quorem+0x1b8>
 7002c98:	00000506 	br	7002cb0 <quorem+0x1c4>
 7002c9c:	10c00017 	ldw	r3,0(r2)
 7002ca0:	1800031e 	bne	r3,zero,7002cb0 <quorem+0x1c4>
 7002ca4:	10bfff04 	addi	r2,r2,-4
 7002ca8:	94bfffc4 	addi	r18,r18,-1
 7002cac:	a8bffb36 	bltu	r21,r2,7002c9c <__alt_data_end+0xff002c9c>
 7002cb0:	84800415 	stw	r18,16(r16)
 7002cb4:	9805883a 	mov	r2,r19
 7002cb8:	dfc00817 	ldw	ra,32(sp)
 7002cbc:	ddc00717 	ldw	r23,28(sp)
 7002cc0:	dd800617 	ldw	r22,24(sp)
 7002cc4:	dd400517 	ldw	r21,20(sp)
 7002cc8:	dd000417 	ldw	r20,16(sp)
 7002ccc:	dcc00317 	ldw	r19,12(sp)
 7002cd0:	dc800217 	ldw	r18,8(sp)
 7002cd4:	dc400117 	ldw	r17,4(sp)
 7002cd8:	dc000017 	ldw	r16,0(sp)
 7002cdc:	dec00904 	addi	sp,sp,36
 7002ce0:	f800283a 	ret
 7002ce4:	0005883a 	mov	r2,zero
 7002ce8:	003ff306 	br	7002cb8 <__alt_data_end+0xff002cb8>

07002cec <_dtoa_r>:
 7002cec:	20801017 	ldw	r2,64(r4)
 7002cf0:	deffde04 	addi	sp,sp,-136
 7002cf4:	df002015 	stw	fp,128(sp)
 7002cf8:	dcc01b15 	stw	r19,108(sp)
 7002cfc:	dc801a15 	stw	r18,104(sp)
 7002d00:	dc401915 	stw	r17,100(sp)
 7002d04:	dc001815 	stw	r16,96(sp)
 7002d08:	dfc02115 	stw	ra,132(sp)
 7002d0c:	ddc01f15 	stw	r23,124(sp)
 7002d10:	dd801e15 	stw	r22,120(sp)
 7002d14:	dd401d15 	stw	r21,116(sp)
 7002d18:	dd001c15 	stw	r20,112(sp)
 7002d1c:	d9c00315 	stw	r7,12(sp)
 7002d20:	2039883a 	mov	fp,r4
 7002d24:	3023883a 	mov	r17,r6
 7002d28:	2825883a 	mov	r18,r5
 7002d2c:	dc002417 	ldw	r16,144(sp)
 7002d30:	3027883a 	mov	r19,r6
 7002d34:	10000826 	beq	r2,zero,7002d58 <_dtoa_r+0x6c>
 7002d38:	21801117 	ldw	r6,68(r4)
 7002d3c:	00c00044 	movi	r3,1
 7002d40:	100b883a 	mov	r5,r2
 7002d44:	1986983a 	sll	r3,r3,r6
 7002d48:	11800115 	stw	r6,4(r2)
 7002d4c:	10c00215 	stw	r3,8(r2)
 7002d50:	70064300 	call	7006430 <_Bfree>
 7002d54:	e0001015 	stw	zero,64(fp)
 7002d58:	88002e16 	blt	r17,zero,7002e14 <_dtoa_r+0x128>
 7002d5c:	80000015 	stw	zero,0(r16)
 7002d60:	889ffc2c 	andhi	r2,r17,32752
 7002d64:	00dffc34 	movhi	r3,32752
 7002d68:	10c01c26 	beq	r2,r3,7002ddc <_dtoa_r+0xf0>
 7002d6c:	000d883a 	mov	r6,zero
 7002d70:	000f883a 	mov	r7,zero
 7002d74:	9009883a 	mov	r4,r18
 7002d78:	980b883a 	mov	r5,r19
 7002d7c:	700baa40 	call	700baa4 <__eqdf2>
 7002d80:	10002b1e 	bne	r2,zero,7002e30 <_dtoa_r+0x144>
 7002d84:	d9c02317 	ldw	r7,140(sp)
 7002d88:	00800044 	movi	r2,1
 7002d8c:	38800015 	stw	r2,0(r7)
 7002d90:	d8802517 	ldw	r2,148(sp)
 7002d94:	10019e26 	beq	r2,zero,7003410 <_dtoa_r+0x724>
 7002d98:	d8c02517 	ldw	r3,148(sp)
 7002d9c:	0081c074 	movhi	r2,1793
 7002da0:	10bee744 	addi	r2,r2,-1123
 7002da4:	18800015 	stw	r2,0(r3)
 7002da8:	10bfffc4 	addi	r2,r2,-1
 7002dac:	dfc02117 	ldw	ra,132(sp)
 7002db0:	df002017 	ldw	fp,128(sp)
 7002db4:	ddc01f17 	ldw	r23,124(sp)
 7002db8:	dd801e17 	ldw	r22,120(sp)
 7002dbc:	dd401d17 	ldw	r21,116(sp)
 7002dc0:	dd001c17 	ldw	r20,112(sp)
 7002dc4:	dcc01b17 	ldw	r19,108(sp)
 7002dc8:	dc801a17 	ldw	r18,104(sp)
 7002dcc:	dc401917 	ldw	r17,100(sp)
 7002dd0:	dc001817 	ldw	r16,96(sp)
 7002dd4:	dec02204 	addi	sp,sp,136
 7002dd8:	f800283a 	ret
 7002ddc:	d8c02317 	ldw	r3,140(sp)
 7002de0:	0089c3c4 	movi	r2,9999
 7002de4:	18800015 	stw	r2,0(r3)
 7002de8:	90017726 	beq	r18,zero,70033c8 <_dtoa_r+0x6dc>
 7002dec:	0081c074 	movhi	r2,1793
 7002df0:	10bef304 	addi	r2,r2,-1076
 7002df4:	d9002517 	ldw	r4,148(sp)
 7002df8:	203fec26 	beq	r4,zero,7002dac <__alt_data_end+0xff002dac>
 7002dfc:	10c000c7 	ldb	r3,3(r2)
 7002e00:	1801781e 	bne	r3,zero,70033e4 <_dtoa_r+0x6f8>
 7002e04:	10c000c4 	addi	r3,r2,3
 7002e08:	d9802517 	ldw	r6,148(sp)
 7002e0c:	30c00015 	stw	r3,0(r6)
 7002e10:	003fe606 	br	7002dac <__alt_data_end+0xff002dac>
 7002e14:	04e00034 	movhi	r19,32768
 7002e18:	9cffffc4 	addi	r19,r19,-1
 7002e1c:	00800044 	movi	r2,1
 7002e20:	8ce6703a 	and	r19,r17,r19
 7002e24:	80800015 	stw	r2,0(r16)
 7002e28:	9823883a 	mov	r17,r19
 7002e2c:	003fcc06 	br	7002d60 <__alt_data_end+0xff002d60>
 7002e30:	d8800204 	addi	r2,sp,8
 7002e34:	d8800015 	stw	r2,0(sp)
 7002e38:	d9c00104 	addi	r7,sp,4
 7002e3c:	900b883a 	mov	r5,r18
 7002e40:	980d883a 	mov	r6,r19
 7002e44:	e009883a 	mov	r4,fp
 7002e48:	8820d53a 	srli	r16,r17,20
 7002e4c:	700701c0 	call	700701c <__d2b>
 7002e50:	d8800915 	stw	r2,36(sp)
 7002e54:	8001651e 	bne	r16,zero,70033ec <_dtoa_r+0x700>
 7002e58:	dd800217 	ldw	r22,8(sp)
 7002e5c:	dc000117 	ldw	r16,4(sp)
 7002e60:	00800804 	movi	r2,32
 7002e64:	b421883a 	add	r16,r22,r16
 7002e68:	80c10c84 	addi	r3,r16,1074
 7002e6c:	10c2d10e 	bge	r2,r3,70039b4 <_dtoa_r+0xcc8>
 7002e70:	00801004 	movi	r2,64
 7002e74:	81010484 	addi	r4,r16,1042
 7002e78:	10c7c83a 	sub	r3,r2,r3
 7002e7c:	9108d83a 	srl	r4,r18,r4
 7002e80:	88e2983a 	sll	r17,r17,r3
 7002e84:	2448b03a 	or	r4,r4,r17
 7002e88:	700ce6c0 	call	700ce6c <__floatunsidf>
 7002e8c:	017f8434 	movhi	r5,65040
 7002e90:	01800044 	movi	r6,1
 7002e94:	1009883a 	mov	r4,r2
 7002e98:	194b883a 	add	r5,r3,r5
 7002e9c:	843fffc4 	addi	r16,r16,-1
 7002ea0:	d9801115 	stw	r6,68(sp)
 7002ea4:	000d883a 	mov	r6,zero
 7002ea8:	01cffe34 	movhi	r7,16376
 7002eac:	700c4140 	call	700c414 <__subdf3>
 7002eb0:	0198dbf4 	movhi	r6,25455
 7002eb4:	01cff4f4 	movhi	r7,16339
 7002eb8:	3190d844 	addi	r6,r6,17249
 7002ebc:	39e1e9c4 	addi	r7,r7,-30809
 7002ec0:	1009883a 	mov	r4,r2
 7002ec4:	180b883a 	mov	r5,r3
 7002ec8:	700bcfc0 	call	700bcfc <__muldf3>
 7002ecc:	01a2d874 	movhi	r6,35681
 7002ed0:	01cff1f4 	movhi	r7,16327
 7002ed4:	31b22cc4 	addi	r6,r6,-14157
 7002ed8:	39e28a04 	addi	r7,r7,-30168
 7002edc:	180b883a 	mov	r5,r3
 7002ee0:	1009883a 	mov	r4,r2
 7002ee4:	700a9100 	call	700a910 <__adddf3>
 7002ee8:	8009883a 	mov	r4,r16
 7002eec:	1029883a 	mov	r20,r2
 7002ef0:	1823883a 	mov	r17,r3
 7002ef4:	700cd900 	call	700cd90 <__floatsidf>
 7002ef8:	019427f4 	movhi	r6,20639
 7002efc:	01cff4f4 	movhi	r7,16339
 7002f00:	319e7ec4 	addi	r6,r6,31227
 7002f04:	39d104c4 	addi	r7,r7,17427
 7002f08:	1009883a 	mov	r4,r2
 7002f0c:	180b883a 	mov	r5,r3
 7002f10:	700bcfc0 	call	700bcfc <__muldf3>
 7002f14:	100d883a 	mov	r6,r2
 7002f18:	180f883a 	mov	r7,r3
 7002f1c:	a009883a 	mov	r4,r20
 7002f20:	880b883a 	mov	r5,r17
 7002f24:	700a9100 	call	700a910 <__adddf3>
 7002f28:	1009883a 	mov	r4,r2
 7002f2c:	180b883a 	mov	r5,r3
 7002f30:	1029883a 	mov	r20,r2
 7002f34:	1823883a 	mov	r17,r3
 7002f38:	700cd100 	call	700cd10 <__fixdfsi>
 7002f3c:	000d883a 	mov	r6,zero
 7002f40:	000f883a 	mov	r7,zero
 7002f44:	a009883a 	mov	r4,r20
 7002f48:	880b883a 	mov	r5,r17
 7002f4c:	d8800515 	stw	r2,20(sp)
 7002f50:	700bc080 	call	700bc08 <__ledf2>
 7002f54:	10028716 	blt	r2,zero,7003974 <_dtoa_r+0xc88>
 7002f58:	d8c00517 	ldw	r3,20(sp)
 7002f5c:	00800584 	movi	r2,22
 7002f60:	10c27536 	bltu	r2,r3,7003938 <_dtoa_r+0xc4c>
 7002f64:	180490fa 	slli	r2,r3,3
 7002f68:	00c1c074 	movhi	r3,1793
 7002f6c:	18ff0f04 	addi	r3,r3,-964
 7002f70:	1885883a 	add	r2,r3,r2
 7002f74:	11000017 	ldw	r4,0(r2)
 7002f78:	11400117 	ldw	r5,4(r2)
 7002f7c:	900d883a 	mov	r6,r18
 7002f80:	980f883a 	mov	r7,r19
 7002f84:	700bb2c0 	call	700bb2c <__gedf2>
 7002f88:	00828d0e 	bge	zero,r2,70039c0 <_dtoa_r+0xcd4>
 7002f8c:	d9000517 	ldw	r4,20(sp)
 7002f90:	d8000e15 	stw	zero,56(sp)
 7002f94:	213fffc4 	addi	r4,r4,-1
 7002f98:	d9000515 	stw	r4,20(sp)
 7002f9c:	b42dc83a 	sub	r22,r22,r16
 7002fa0:	b5bfffc4 	addi	r22,r22,-1
 7002fa4:	b0026f16 	blt	r22,zero,7003964 <_dtoa_r+0xc78>
 7002fa8:	d8000815 	stw	zero,32(sp)
 7002fac:	d9c00517 	ldw	r7,20(sp)
 7002fb0:	38026416 	blt	r7,zero,7003944 <_dtoa_r+0xc58>
 7002fb4:	b1ed883a 	add	r22,r22,r7
 7002fb8:	d9c00d15 	stw	r7,52(sp)
 7002fbc:	d8000a15 	stw	zero,40(sp)
 7002fc0:	d9800317 	ldw	r6,12(sp)
 7002fc4:	00800244 	movi	r2,9
 7002fc8:	11811436 	bltu	r2,r6,700341c <_dtoa_r+0x730>
 7002fcc:	00800144 	movi	r2,5
 7002fd0:	1184e10e 	bge	r2,r6,7004358 <_dtoa_r+0x166c>
 7002fd4:	31bfff04 	addi	r6,r6,-4
 7002fd8:	d9800315 	stw	r6,12(sp)
 7002fdc:	0023883a 	mov	r17,zero
 7002fe0:	d9800317 	ldw	r6,12(sp)
 7002fe4:	008000c4 	movi	r2,3
 7002fe8:	30836726 	beq	r6,r2,7003d88 <_dtoa_r+0x109c>
 7002fec:	1183410e 	bge	r2,r6,7003cf4 <_dtoa_r+0x1008>
 7002ff0:	d9c00317 	ldw	r7,12(sp)
 7002ff4:	00800104 	movi	r2,4
 7002ff8:	38827c26 	beq	r7,r2,70039ec <_dtoa_r+0xd00>
 7002ffc:	00800144 	movi	r2,5
 7003000:	3884c41e 	bne	r7,r2,7004314 <_dtoa_r+0x1628>
 7003004:	00800044 	movi	r2,1
 7003008:	d8800b15 	stw	r2,44(sp)
 700300c:	d8c00517 	ldw	r3,20(sp)
 7003010:	d9002217 	ldw	r4,136(sp)
 7003014:	1907883a 	add	r3,r3,r4
 7003018:	19800044 	addi	r6,r3,1
 700301c:	d8c00c15 	stw	r3,48(sp)
 7003020:	d9800615 	stw	r6,24(sp)
 7003024:	0183a40e 	bge	zero,r6,7003eb8 <_dtoa_r+0x11cc>
 7003028:	d9800617 	ldw	r6,24(sp)
 700302c:	3021883a 	mov	r16,r6
 7003030:	e0001115 	stw	zero,68(fp)
 7003034:	008005c4 	movi	r2,23
 7003038:	1184c92e 	bgeu	r2,r6,7004360 <_dtoa_r+0x1674>
 700303c:	00c00044 	movi	r3,1
 7003040:	00800104 	movi	r2,4
 7003044:	1085883a 	add	r2,r2,r2
 7003048:	11000504 	addi	r4,r2,20
 700304c:	180b883a 	mov	r5,r3
 7003050:	18c00044 	addi	r3,r3,1
 7003054:	313ffb2e 	bgeu	r6,r4,7003044 <__alt_data_end+0xff003044>
 7003058:	e1401115 	stw	r5,68(fp)
 700305c:	e009883a 	mov	r4,fp
 7003060:	70063880 	call	7006388 <_Balloc>
 7003064:	d8800715 	stw	r2,28(sp)
 7003068:	e0801015 	stw	r2,64(fp)
 700306c:	00800384 	movi	r2,14
 7003070:	1400f736 	bltu	r2,r16,7003450 <_dtoa_r+0x764>
 7003074:	8800f626 	beq	r17,zero,7003450 <_dtoa_r+0x764>
 7003078:	d9c00517 	ldw	r7,20(sp)
 700307c:	01c39a0e 	bge	zero,r7,7003ee8 <_dtoa_r+0x11fc>
 7003080:	388003cc 	andi	r2,r7,15
 7003084:	100490fa 	slli	r2,r2,3
 7003088:	382bd13a 	srai	r21,r7,4
 700308c:	00c1c074 	movhi	r3,1793
 7003090:	18ff0f04 	addi	r3,r3,-964
 7003094:	1885883a 	add	r2,r3,r2
 7003098:	a8c0040c 	andi	r3,r21,16
 700309c:	12400017 	ldw	r9,0(r2)
 70030a0:	12000117 	ldw	r8,4(r2)
 70030a4:	18037926 	beq	r3,zero,7003e8c <_dtoa_r+0x11a0>
 70030a8:	0081c074 	movhi	r2,1793
 70030ac:	10bf0504 	addi	r2,r2,-1004
 70030b0:	11800817 	ldw	r6,32(r2)
 70030b4:	11c00917 	ldw	r7,36(r2)
 70030b8:	9009883a 	mov	r4,r18
 70030bc:	980b883a 	mov	r5,r19
 70030c0:	da001715 	stw	r8,92(sp)
 70030c4:	da401615 	stw	r9,88(sp)
 70030c8:	700b1bc0 	call	700b1bc <__divdf3>
 70030cc:	da001717 	ldw	r8,92(sp)
 70030d0:	da401617 	ldw	r9,88(sp)
 70030d4:	ad4003cc 	andi	r21,r21,15
 70030d8:	040000c4 	movi	r16,3
 70030dc:	1023883a 	mov	r17,r2
 70030e0:	1829883a 	mov	r20,r3
 70030e4:	a8001126 	beq	r21,zero,700312c <_dtoa_r+0x440>
 70030e8:	05c1c074 	movhi	r23,1793
 70030ec:	bdff0504 	addi	r23,r23,-1004
 70030f0:	4805883a 	mov	r2,r9
 70030f4:	4007883a 	mov	r3,r8
 70030f8:	a980004c 	andi	r6,r21,1
 70030fc:	1009883a 	mov	r4,r2
 7003100:	a82bd07a 	srai	r21,r21,1
 7003104:	180b883a 	mov	r5,r3
 7003108:	30000426 	beq	r6,zero,700311c <_dtoa_r+0x430>
 700310c:	b9800017 	ldw	r6,0(r23)
 7003110:	b9c00117 	ldw	r7,4(r23)
 7003114:	84000044 	addi	r16,r16,1
 7003118:	700bcfc0 	call	700bcfc <__muldf3>
 700311c:	bdc00204 	addi	r23,r23,8
 7003120:	a83ff51e 	bne	r21,zero,70030f8 <__alt_data_end+0xff0030f8>
 7003124:	1013883a 	mov	r9,r2
 7003128:	1811883a 	mov	r8,r3
 700312c:	480d883a 	mov	r6,r9
 7003130:	400f883a 	mov	r7,r8
 7003134:	8809883a 	mov	r4,r17
 7003138:	a00b883a 	mov	r5,r20
 700313c:	700b1bc0 	call	700b1bc <__divdf3>
 7003140:	d8800f15 	stw	r2,60(sp)
 7003144:	d8c01015 	stw	r3,64(sp)
 7003148:	d8c00e17 	ldw	r3,56(sp)
 700314c:	18000626 	beq	r3,zero,7003168 <_dtoa_r+0x47c>
 7003150:	d9000f17 	ldw	r4,60(sp)
 7003154:	d9401017 	ldw	r5,64(sp)
 7003158:	000d883a 	mov	r6,zero
 700315c:	01cffc34 	movhi	r7,16368
 7003160:	700bc080 	call	700bc08 <__ledf2>
 7003164:	10040b16 	blt	r2,zero,7004194 <_dtoa_r+0x14a8>
 7003168:	8009883a 	mov	r4,r16
 700316c:	700cd900 	call	700cd90 <__floatsidf>
 7003170:	d9800f17 	ldw	r6,60(sp)
 7003174:	d9c01017 	ldw	r7,64(sp)
 7003178:	1009883a 	mov	r4,r2
 700317c:	180b883a 	mov	r5,r3
 7003180:	700bcfc0 	call	700bcfc <__muldf3>
 7003184:	000d883a 	mov	r6,zero
 7003188:	01d00734 	movhi	r7,16412
 700318c:	1009883a 	mov	r4,r2
 7003190:	180b883a 	mov	r5,r3
 7003194:	700a9100 	call	700a910 <__adddf3>
 7003198:	1021883a 	mov	r16,r2
 700319c:	d8800617 	ldw	r2,24(sp)
 70031a0:	047f3034 	movhi	r17,64704
 70031a4:	1c63883a 	add	r17,r3,r17
 70031a8:	10031826 	beq	r2,zero,7003e0c <_dtoa_r+0x1120>
 70031ac:	d8c00517 	ldw	r3,20(sp)
 70031b0:	db000617 	ldw	r12,24(sp)
 70031b4:	d8c01315 	stw	r3,76(sp)
 70031b8:	d9000b17 	ldw	r4,44(sp)
 70031bc:	20038f26 	beq	r4,zero,7003ffc <_dtoa_r+0x1310>
 70031c0:	60bfffc4 	addi	r2,r12,-1
 70031c4:	100490fa 	slli	r2,r2,3
 70031c8:	00c1c074 	movhi	r3,1793
 70031cc:	18ff0f04 	addi	r3,r3,-964
 70031d0:	1885883a 	add	r2,r3,r2
 70031d4:	11800017 	ldw	r6,0(r2)
 70031d8:	11c00117 	ldw	r7,4(r2)
 70031dc:	d8800717 	ldw	r2,28(sp)
 70031e0:	0009883a 	mov	r4,zero
 70031e4:	014ff834 	movhi	r5,16352
 70031e8:	db001615 	stw	r12,88(sp)
 70031ec:	15c00044 	addi	r23,r2,1
 70031f0:	700b1bc0 	call	700b1bc <__divdf3>
 70031f4:	800d883a 	mov	r6,r16
 70031f8:	880f883a 	mov	r7,r17
 70031fc:	1009883a 	mov	r4,r2
 7003200:	180b883a 	mov	r5,r3
 7003204:	700c4140 	call	700c414 <__subdf3>
 7003208:	d9401017 	ldw	r5,64(sp)
 700320c:	d9000f17 	ldw	r4,60(sp)
 7003210:	102b883a 	mov	r21,r2
 7003214:	d8c01215 	stw	r3,72(sp)
 7003218:	700cd100 	call	700cd10 <__fixdfsi>
 700321c:	1009883a 	mov	r4,r2
 7003220:	1029883a 	mov	r20,r2
 7003224:	700cd900 	call	700cd90 <__floatsidf>
 7003228:	d9000f17 	ldw	r4,60(sp)
 700322c:	d9401017 	ldw	r5,64(sp)
 7003230:	100d883a 	mov	r6,r2
 7003234:	180f883a 	mov	r7,r3
 7003238:	700c4140 	call	700c414 <__subdf3>
 700323c:	1823883a 	mov	r17,r3
 7003240:	d8c00717 	ldw	r3,28(sp)
 7003244:	d9401217 	ldw	r5,72(sp)
 7003248:	a2000c04 	addi	r8,r20,48
 700324c:	1021883a 	mov	r16,r2
 7003250:	1a000005 	stb	r8,0(r3)
 7003254:	800d883a 	mov	r6,r16
 7003258:	880f883a 	mov	r7,r17
 700325c:	a809883a 	mov	r4,r21
 7003260:	4029883a 	mov	r20,r8
 7003264:	700bb2c0 	call	700bb2c <__gedf2>
 7003268:	00841d16 	blt	zero,r2,70042e0 <_dtoa_r+0x15f4>
 700326c:	800d883a 	mov	r6,r16
 7003270:	880f883a 	mov	r7,r17
 7003274:	0009883a 	mov	r4,zero
 7003278:	014ffc34 	movhi	r5,16368
 700327c:	700c4140 	call	700c414 <__subdf3>
 7003280:	d9401217 	ldw	r5,72(sp)
 7003284:	100d883a 	mov	r6,r2
 7003288:	180f883a 	mov	r7,r3
 700328c:	a809883a 	mov	r4,r21
 7003290:	700bb2c0 	call	700bb2c <__gedf2>
 7003294:	db001617 	ldw	r12,88(sp)
 7003298:	00840e16 	blt	zero,r2,70042d4 <_dtoa_r+0x15e8>
 700329c:	00800044 	movi	r2,1
 70032a0:	13006b0e 	bge	r2,r12,7003450 <_dtoa_r+0x764>
 70032a4:	d9000717 	ldw	r4,28(sp)
 70032a8:	dd800f15 	stw	r22,60(sp)
 70032ac:	dcc01015 	stw	r19,64(sp)
 70032b0:	2319883a 	add	r12,r4,r12
 70032b4:	dcc01217 	ldw	r19,72(sp)
 70032b8:	602d883a 	mov	r22,r12
 70032bc:	dc801215 	stw	r18,72(sp)
 70032c0:	b825883a 	mov	r18,r23
 70032c4:	00000906 	br	70032ec <_dtoa_r+0x600>
 70032c8:	700c4140 	call	700c414 <__subdf3>
 70032cc:	a80d883a 	mov	r6,r21
 70032d0:	980f883a 	mov	r7,r19
 70032d4:	1009883a 	mov	r4,r2
 70032d8:	180b883a 	mov	r5,r3
 70032dc:	700bc080 	call	700bc08 <__ledf2>
 70032e0:	1003e816 	blt	r2,zero,7004284 <_dtoa_r+0x1598>
 70032e4:	b825883a 	mov	r18,r23
 70032e8:	bd83e926 	beq	r23,r22,7004290 <_dtoa_r+0x15a4>
 70032ec:	a809883a 	mov	r4,r21
 70032f0:	980b883a 	mov	r5,r19
 70032f4:	000d883a 	mov	r6,zero
 70032f8:	01d00934 	movhi	r7,16420
 70032fc:	700bcfc0 	call	700bcfc <__muldf3>
 7003300:	000d883a 	mov	r6,zero
 7003304:	01d00934 	movhi	r7,16420
 7003308:	8009883a 	mov	r4,r16
 700330c:	880b883a 	mov	r5,r17
 7003310:	102b883a 	mov	r21,r2
 7003314:	1827883a 	mov	r19,r3
 7003318:	700bcfc0 	call	700bcfc <__muldf3>
 700331c:	180b883a 	mov	r5,r3
 7003320:	1009883a 	mov	r4,r2
 7003324:	1821883a 	mov	r16,r3
 7003328:	1023883a 	mov	r17,r2
 700332c:	700cd100 	call	700cd10 <__fixdfsi>
 7003330:	1009883a 	mov	r4,r2
 7003334:	1029883a 	mov	r20,r2
 7003338:	700cd900 	call	700cd90 <__floatsidf>
 700333c:	8809883a 	mov	r4,r17
 7003340:	800b883a 	mov	r5,r16
 7003344:	100d883a 	mov	r6,r2
 7003348:	180f883a 	mov	r7,r3
 700334c:	700c4140 	call	700c414 <__subdf3>
 7003350:	a5000c04 	addi	r20,r20,48
 7003354:	a80d883a 	mov	r6,r21
 7003358:	980f883a 	mov	r7,r19
 700335c:	1009883a 	mov	r4,r2
 7003360:	180b883a 	mov	r5,r3
 7003364:	95000005 	stb	r20,0(r18)
 7003368:	1021883a 	mov	r16,r2
 700336c:	1823883a 	mov	r17,r3
 7003370:	700bc080 	call	700bc08 <__ledf2>
 7003374:	bdc00044 	addi	r23,r23,1
 7003378:	800d883a 	mov	r6,r16
 700337c:	880f883a 	mov	r7,r17
 7003380:	0009883a 	mov	r4,zero
 7003384:	014ffc34 	movhi	r5,16368
 7003388:	103fcf0e 	bge	r2,zero,70032c8 <__alt_data_end+0xff0032c8>
 700338c:	d8c01317 	ldw	r3,76(sp)
 7003390:	d8c00515 	stw	r3,20(sp)
 7003394:	d9400917 	ldw	r5,36(sp)
 7003398:	e009883a 	mov	r4,fp
 700339c:	70064300 	call	7006430 <_Bfree>
 70033a0:	d9000517 	ldw	r4,20(sp)
 70033a4:	d9802317 	ldw	r6,140(sp)
 70033a8:	d9c02517 	ldw	r7,148(sp)
 70033ac:	b8000005 	stb	zero,0(r23)
 70033b0:	20800044 	addi	r2,r4,1
 70033b4:	30800015 	stw	r2,0(r6)
 70033b8:	3802aa26 	beq	r7,zero,7003e64 <_dtoa_r+0x1178>
 70033bc:	3dc00015 	stw	r23,0(r7)
 70033c0:	d8800717 	ldw	r2,28(sp)
 70033c4:	003e7906 	br	7002dac <__alt_data_end+0xff002dac>
 70033c8:	00800434 	movhi	r2,16
 70033cc:	10bfffc4 	addi	r2,r2,-1
 70033d0:	88a2703a 	and	r17,r17,r2
 70033d4:	883e851e 	bne	r17,zero,7002dec <__alt_data_end+0xff002dec>
 70033d8:	0081c074 	movhi	r2,1793
 70033dc:	10bef004 	addi	r2,r2,-1088
 70033e0:	003e8406 	br	7002df4 <__alt_data_end+0xff002df4>
 70033e4:	10c00204 	addi	r3,r2,8
 70033e8:	003e8706 	br	7002e08 <__alt_data_end+0xff002e08>
 70033ec:	01400434 	movhi	r5,16
 70033f0:	297fffc4 	addi	r5,r5,-1
 70033f4:	994a703a 	and	r5,r19,r5
 70033f8:	9009883a 	mov	r4,r18
 70033fc:	843f0044 	addi	r16,r16,-1023
 7003400:	294ffc34 	orhi	r5,r5,16368
 7003404:	dd800217 	ldw	r22,8(sp)
 7003408:	d8001115 	stw	zero,68(sp)
 700340c:	003ea506 	br	7002ea4 <__alt_data_end+0xff002ea4>
 7003410:	0081c074 	movhi	r2,1793
 7003414:	10bee704 	addi	r2,r2,-1124
 7003418:	003e6406 	br	7002dac <__alt_data_end+0xff002dac>
 700341c:	e0001115 	stw	zero,68(fp)
 7003420:	000b883a 	mov	r5,zero
 7003424:	e009883a 	mov	r4,fp
 7003428:	70063880 	call	7006388 <_Balloc>
 700342c:	01bfffc4 	movi	r6,-1
 7003430:	01c00044 	movi	r7,1
 7003434:	d8800715 	stw	r2,28(sp)
 7003438:	d9800c15 	stw	r6,48(sp)
 700343c:	e0801015 	stw	r2,64(fp)
 7003440:	d8000315 	stw	zero,12(sp)
 7003444:	d9c00b15 	stw	r7,44(sp)
 7003448:	d9800615 	stw	r6,24(sp)
 700344c:	d8002215 	stw	zero,136(sp)
 7003450:	d8800117 	ldw	r2,4(sp)
 7003454:	10008916 	blt	r2,zero,700367c <_dtoa_r+0x990>
 7003458:	d9000517 	ldw	r4,20(sp)
 700345c:	00c00384 	movi	r3,14
 7003460:	19008616 	blt	r3,r4,700367c <_dtoa_r+0x990>
 7003464:	200490fa 	slli	r2,r4,3
 7003468:	00c1c074 	movhi	r3,1793
 700346c:	d9802217 	ldw	r6,136(sp)
 7003470:	18ff0f04 	addi	r3,r3,-964
 7003474:	1885883a 	add	r2,r3,r2
 7003478:	14000017 	ldw	r16,0(r2)
 700347c:	14400117 	ldw	r17,4(r2)
 7003480:	30016316 	blt	r6,zero,7003a10 <_dtoa_r+0xd24>
 7003484:	800d883a 	mov	r6,r16
 7003488:	880f883a 	mov	r7,r17
 700348c:	9009883a 	mov	r4,r18
 7003490:	980b883a 	mov	r5,r19
 7003494:	700b1bc0 	call	700b1bc <__divdf3>
 7003498:	180b883a 	mov	r5,r3
 700349c:	1009883a 	mov	r4,r2
 70034a0:	700cd100 	call	700cd10 <__fixdfsi>
 70034a4:	1009883a 	mov	r4,r2
 70034a8:	102b883a 	mov	r21,r2
 70034ac:	700cd900 	call	700cd90 <__floatsidf>
 70034b0:	800d883a 	mov	r6,r16
 70034b4:	880f883a 	mov	r7,r17
 70034b8:	1009883a 	mov	r4,r2
 70034bc:	180b883a 	mov	r5,r3
 70034c0:	700bcfc0 	call	700bcfc <__muldf3>
 70034c4:	100d883a 	mov	r6,r2
 70034c8:	180f883a 	mov	r7,r3
 70034cc:	9009883a 	mov	r4,r18
 70034d0:	980b883a 	mov	r5,r19
 70034d4:	700c4140 	call	700c414 <__subdf3>
 70034d8:	d9c00717 	ldw	r7,28(sp)
 70034dc:	1009883a 	mov	r4,r2
 70034e0:	a8800c04 	addi	r2,r21,48
 70034e4:	38800005 	stb	r2,0(r7)
 70034e8:	3dc00044 	addi	r23,r7,1
 70034ec:	d9c00617 	ldw	r7,24(sp)
 70034f0:	01800044 	movi	r6,1
 70034f4:	180b883a 	mov	r5,r3
 70034f8:	2005883a 	mov	r2,r4
 70034fc:	39803826 	beq	r7,r6,70035e0 <_dtoa_r+0x8f4>
 7003500:	000d883a 	mov	r6,zero
 7003504:	01d00934 	movhi	r7,16420
 7003508:	700bcfc0 	call	700bcfc <__muldf3>
 700350c:	000d883a 	mov	r6,zero
 7003510:	000f883a 	mov	r7,zero
 7003514:	1009883a 	mov	r4,r2
 7003518:	180b883a 	mov	r5,r3
 700351c:	1025883a 	mov	r18,r2
 7003520:	1827883a 	mov	r19,r3
 7003524:	700baa40 	call	700baa4 <__eqdf2>
 7003528:	103f9a26 	beq	r2,zero,7003394 <__alt_data_end+0xff003394>
 700352c:	d9c00617 	ldw	r7,24(sp)
 7003530:	d8c00717 	ldw	r3,28(sp)
 7003534:	b829883a 	mov	r20,r23
 7003538:	38bfffc4 	addi	r2,r7,-1
 700353c:	18ad883a 	add	r22,r3,r2
 7003540:	00000a06 	br	700356c <_dtoa_r+0x880>
 7003544:	700bcfc0 	call	700bcfc <__muldf3>
 7003548:	000d883a 	mov	r6,zero
 700354c:	000f883a 	mov	r7,zero
 7003550:	1009883a 	mov	r4,r2
 7003554:	180b883a 	mov	r5,r3
 7003558:	1025883a 	mov	r18,r2
 700355c:	1827883a 	mov	r19,r3
 7003560:	b829883a 	mov	r20,r23
 7003564:	700baa40 	call	700baa4 <__eqdf2>
 7003568:	103f8a26 	beq	r2,zero,7003394 <__alt_data_end+0xff003394>
 700356c:	800d883a 	mov	r6,r16
 7003570:	880f883a 	mov	r7,r17
 7003574:	9009883a 	mov	r4,r18
 7003578:	980b883a 	mov	r5,r19
 700357c:	700b1bc0 	call	700b1bc <__divdf3>
 7003580:	180b883a 	mov	r5,r3
 7003584:	1009883a 	mov	r4,r2
 7003588:	700cd100 	call	700cd10 <__fixdfsi>
 700358c:	1009883a 	mov	r4,r2
 7003590:	102b883a 	mov	r21,r2
 7003594:	700cd900 	call	700cd90 <__floatsidf>
 7003598:	800d883a 	mov	r6,r16
 700359c:	880f883a 	mov	r7,r17
 70035a0:	1009883a 	mov	r4,r2
 70035a4:	180b883a 	mov	r5,r3
 70035a8:	700bcfc0 	call	700bcfc <__muldf3>
 70035ac:	100d883a 	mov	r6,r2
 70035b0:	180f883a 	mov	r7,r3
 70035b4:	9009883a 	mov	r4,r18
 70035b8:	980b883a 	mov	r5,r19
 70035bc:	700c4140 	call	700c414 <__subdf3>
 70035c0:	aa000c04 	addi	r8,r21,48
 70035c4:	a2000005 	stb	r8,0(r20)
 70035c8:	000d883a 	mov	r6,zero
 70035cc:	01d00934 	movhi	r7,16420
 70035d0:	1009883a 	mov	r4,r2
 70035d4:	180b883a 	mov	r5,r3
 70035d8:	a5c00044 	addi	r23,r20,1
 70035dc:	b53fd91e 	bne	r22,r20,7003544 <__alt_data_end+0xff003544>
 70035e0:	100d883a 	mov	r6,r2
 70035e4:	180f883a 	mov	r7,r3
 70035e8:	1009883a 	mov	r4,r2
 70035ec:	180b883a 	mov	r5,r3
 70035f0:	700a9100 	call	700a910 <__adddf3>
 70035f4:	100d883a 	mov	r6,r2
 70035f8:	180f883a 	mov	r7,r3
 70035fc:	8009883a 	mov	r4,r16
 7003600:	880b883a 	mov	r5,r17
 7003604:	1027883a 	mov	r19,r2
 7003608:	1825883a 	mov	r18,r3
 700360c:	700bc080 	call	700bc08 <__ledf2>
 7003610:	10000816 	blt	r2,zero,7003634 <_dtoa_r+0x948>
 7003614:	980d883a 	mov	r6,r19
 7003618:	900f883a 	mov	r7,r18
 700361c:	8009883a 	mov	r4,r16
 7003620:	880b883a 	mov	r5,r17
 7003624:	700baa40 	call	700baa4 <__eqdf2>
 7003628:	103f5a1e 	bne	r2,zero,7003394 <__alt_data_end+0xff003394>
 700362c:	ad40004c 	andi	r21,r21,1
 7003630:	a83f5826 	beq	r21,zero,7003394 <__alt_data_end+0xff003394>
 7003634:	bd3fffc3 	ldbu	r20,-1(r23)
 7003638:	b8bfffc4 	addi	r2,r23,-1
 700363c:	1007883a 	mov	r3,r2
 7003640:	01400e44 	movi	r5,57
 7003644:	d9800717 	ldw	r6,28(sp)
 7003648:	00000506 	br	7003660 <_dtoa_r+0x974>
 700364c:	18ffffc4 	addi	r3,r3,-1
 7003650:	11824726 	beq	r2,r6,7003f70 <_dtoa_r+0x1284>
 7003654:	1d000003 	ldbu	r20,0(r3)
 7003658:	102f883a 	mov	r23,r2
 700365c:	10bfffc4 	addi	r2,r2,-1
 7003660:	a1003fcc 	andi	r4,r20,255
 7003664:	2100201c 	xori	r4,r4,128
 7003668:	213fe004 	addi	r4,r4,-128
 700366c:	217ff726 	beq	r4,r5,700364c <__alt_data_end+0xff00364c>
 7003670:	a2000044 	addi	r8,r20,1
 7003674:	12000005 	stb	r8,0(r2)
 7003678:	003f4606 	br	7003394 <__alt_data_end+0xff003394>
 700367c:	d9000b17 	ldw	r4,44(sp)
 7003680:	2000c826 	beq	r4,zero,70039a4 <_dtoa_r+0xcb8>
 7003684:	d9800317 	ldw	r6,12(sp)
 7003688:	00c00044 	movi	r3,1
 700368c:	1980f90e 	bge	r3,r6,7003a74 <_dtoa_r+0xd88>
 7003690:	d8800617 	ldw	r2,24(sp)
 7003694:	d8c00a17 	ldw	r3,40(sp)
 7003698:	157fffc4 	addi	r21,r2,-1
 700369c:	1d41f316 	blt	r3,r21,7003e6c <_dtoa_r+0x1180>
 70036a0:	1d6bc83a 	sub	r21,r3,r21
 70036a4:	d9c00617 	ldw	r7,24(sp)
 70036a8:	3802aa16 	blt	r7,zero,7004154 <_dtoa_r+0x1468>
 70036ac:	dd000817 	ldw	r20,32(sp)
 70036b0:	d8800617 	ldw	r2,24(sp)
 70036b4:	d8c00817 	ldw	r3,32(sp)
 70036b8:	01400044 	movi	r5,1
 70036bc:	e009883a 	mov	r4,fp
 70036c0:	1887883a 	add	r3,r3,r2
 70036c4:	d8c00815 	stw	r3,32(sp)
 70036c8:	b0ad883a 	add	r22,r22,r2
 70036cc:	70067940 	call	7006794 <__i2b>
 70036d0:	1023883a 	mov	r17,r2
 70036d4:	a0000826 	beq	r20,zero,70036f8 <_dtoa_r+0xa0c>
 70036d8:	0580070e 	bge	zero,r22,70036f8 <_dtoa_r+0xa0c>
 70036dc:	a005883a 	mov	r2,r20
 70036e0:	b500b916 	blt	r22,r20,70039c8 <_dtoa_r+0xcdc>
 70036e4:	d9000817 	ldw	r4,32(sp)
 70036e8:	a0a9c83a 	sub	r20,r20,r2
 70036ec:	b0adc83a 	sub	r22,r22,r2
 70036f0:	2089c83a 	sub	r4,r4,r2
 70036f4:	d9000815 	stw	r4,32(sp)
 70036f8:	d9800a17 	ldw	r6,40(sp)
 70036fc:	0181810e 	bge	zero,r6,7003d04 <_dtoa_r+0x1018>
 7003700:	d9c00b17 	ldw	r7,44(sp)
 7003704:	3800b326 	beq	r7,zero,70039d4 <_dtoa_r+0xce8>
 7003708:	a800b226 	beq	r21,zero,70039d4 <_dtoa_r+0xce8>
 700370c:	880b883a 	mov	r5,r17
 7003710:	a80d883a 	mov	r6,r21
 7003714:	e009883a 	mov	r4,fp
 7003718:	70069c80 	call	70069c8 <__pow5mult>
 700371c:	d9800917 	ldw	r6,36(sp)
 7003720:	100b883a 	mov	r5,r2
 7003724:	e009883a 	mov	r4,fp
 7003728:	1023883a 	mov	r17,r2
 700372c:	70067d00 	call	70067d0 <__multiply>
 7003730:	1021883a 	mov	r16,r2
 7003734:	d8800a17 	ldw	r2,40(sp)
 7003738:	d9400917 	ldw	r5,36(sp)
 700373c:	e009883a 	mov	r4,fp
 7003740:	1545c83a 	sub	r2,r2,r21
 7003744:	d8800a15 	stw	r2,40(sp)
 7003748:	70064300 	call	7006430 <_Bfree>
 700374c:	d8c00a17 	ldw	r3,40(sp)
 7003750:	18009f1e 	bne	r3,zero,70039d0 <_dtoa_r+0xce4>
 7003754:	05c00044 	movi	r23,1
 7003758:	e009883a 	mov	r4,fp
 700375c:	b80b883a 	mov	r5,r23
 7003760:	70067940 	call	7006794 <__i2b>
 7003764:	d9000d17 	ldw	r4,52(sp)
 7003768:	102b883a 	mov	r21,r2
 700376c:	2000ce26 	beq	r4,zero,7003aa8 <_dtoa_r+0xdbc>
 7003770:	200d883a 	mov	r6,r4
 7003774:	100b883a 	mov	r5,r2
 7003778:	e009883a 	mov	r4,fp
 700377c:	70069c80 	call	70069c8 <__pow5mult>
 7003780:	d9800317 	ldw	r6,12(sp)
 7003784:	102b883a 	mov	r21,r2
 7003788:	b981810e 	bge	r23,r6,7003d90 <_dtoa_r+0x10a4>
 700378c:	0027883a 	mov	r19,zero
 7003790:	a8800417 	ldw	r2,16(r21)
 7003794:	05c00804 	movi	r23,32
 7003798:	10800104 	addi	r2,r2,4
 700379c:	1085883a 	add	r2,r2,r2
 70037a0:	1085883a 	add	r2,r2,r2
 70037a4:	a885883a 	add	r2,r21,r2
 70037a8:	11000017 	ldw	r4,0(r2)
 70037ac:	700667c0 	call	700667c <__hi0bits>
 70037b0:	b885c83a 	sub	r2,r23,r2
 70037b4:	1585883a 	add	r2,r2,r22
 70037b8:	108007cc 	andi	r2,r2,31
 70037bc:	1000b326 	beq	r2,zero,7003a8c <_dtoa_r+0xda0>
 70037c0:	00c00804 	movi	r3,32
 70037c4:	1887c83a 	sub	r3,r3,r2
 70037c8:	01000104 	movi	r4,4
 70037cc:	20c2cd0e 	bge	r4,r3,7004304 <_dtoa_r+0x1618>
 70037d0:	00c00704 	movi	r3,28
 70037d4:	1885c83a 	sub	r2,r3,r2
 70037d8:	d8c00817 	ldw	r3,32(sp)
 70037dc:	a0a9883a 	add	r20,r20,r2
 70037e0:	b0ad883a 	add	r22,r22,r2
 70037e4:	1887883a 	add	r3,r3,r2
 70037e8:	d8c00815 	stw	r3,32(sp)
 70037ec:	d9800817 	ldw	r6,32(sp)
 70037f0:	0180040e 	bge	zero,r6,7003804 <_dtoa_r+0xb18>
 70037f4:	800b883a 	mov	r5,r16
 70037f8:	e009883a 	mov	r4,fp
 70037fc:	7006b080 	call	7006b08 <__lshift>
 7003800:	1021883a 	mov	r16,r2
 7003804:	0580050e 	bge	zero,r22,700381c <_dtoa_r+0xb30>
 7003808:	a80b883a 	mov	r5,r21
 700380c:	b00d883a 	mov	r6,r22
 7003810:	e009883a 	mov	r4,fp
 7003814:	7006b080 	call	7006b08 <__lshift>
 7003818:	102b883a 	mov	r21,r2
 700381c:	d9c00e17 	ldw	r7,56(sp)
 7003820:	3801211e 	bne	r7,zero,7003ca8 <_dtoa_r+0xfbc>
 7003824:	d9800617 	ldw	r6,24(sp)
 7003828:	0181380e 	bge	zero,r6,7003d0c <_dtoa_r+0x1020>
 700382c:	d8c00b17 	ldw	r3,44(sp)
 7003830:	1800ab1e 	bne	r3,zero,7003ae0 <_dtoa_r+0xdf4>
 7003834:	dc800717 	ldw	r18,28(sp)
 7003838:	dcc00617 	ldw	r19,24(sp)
 700383c:	9029883a 	mov	r20,r18
 7003840:	00000206 	br	700384c <_dtoa_r+0xb60>
 7003844:	70064580 	call	7006458 <__multadd>
 7003848:	1021883a 	mov	r16,r2
 700384c:	a80b883a 	mov	r5,r21
 7003850:	8009883a 	mov	r4,r16
 7003854:	7002aec0 	call	7002aec <quorem>
 7003858:	10800c04 	addi	r2,r2,48
 700385c:	90800005 	stb	r2,0(r18)
 7003860:	94800044 	addi	r18,r18,1
 7003864:	9507c83a 	sub	r3,r18,r20
 7003868:	000f883a 	mov	r7,zero
 700386c:	01800284 	movi	r6,10
 7003870:	800b883a 	mov	r5,r16
 7003874:	e009883a 	mov	r4,fp
 7003878:	1cfff216 	blt	r3,r19,7003844 <__alt_data_end+0xff003844>
 700387c:	1011883a 	mov	r8,r2
 7003880:	d8800617 	ldw	r2,24(sp)
 7003884:	0082370e 	bge	zero,r2,7004164 <_dtoa_r+0x1478>
 7003888:	d9000717 	ldw	r4,28(sp)
 700388c:	0025883a 	mov	r18,zero
 7003890:	20af883a 	add	r23,r4,r2
 7003894:	01800044 	movi	r6,1
 7003898:	800b883a 	mov	r5,r16
 700389c:	e009883a 	mov	r4,fp
 70038a0:	da001715 	stw	r8,92(sp)
 70038a4:	7006b080 	call	7006b08 <__lshift>
 70038a8:	a80b883a 	mov	r5,r21
 70038ac:	1009883a 	mov	r4,r2
 70038b0:	d8800915 	stw	r2,36(sp)
 70038b4:	7006c500 	call	7006c50 <__mcmp>
 70038b8:	da001717 	ldw	r8,92(sp)
 70038bc:	0081800e 	bge	zero,r2,7003ec0 <_dtoa_r+0x11d4>
 70038c0:	b93fffc3 	ldbu	r4,-1(r23)
 70038c4:	b8bfffc4 	addi	r2,r23,-1
 70038c8:	1007883a 	mov	r3,r2
 70038cc:	01800e44 	movi	r6,57
 70038d0:	d9c00717 	ldw	r7,28(sp)
 70038d4:	00000506 	br	70038ec <_dtoa_r+0xc00>
 70038d8:	18ffffc4 	addi	r3,r3,-1
 70038dc:	11c12326 	beq	r2,r7,7003d6c <_dtoa_r+0x1080>
 70038e0:	19000003 	ldbu	r4,0(r3)
 70038e4:	102f883a 	mov	r23,r2
 70038e8:	10bfffc4 	addi	r2,r2,-1
 70038ec:	21403fcc 	andi	r5,r4,255
 70038f0:	2940201c 	xori	r5,r5,128
 70038f4:	297fe004 	addi	r5,r5,-128
 70038f8:	29bff726 	beq	r5,r6,70038d8 <__alt_data_end+0xff0038d8>
 70038fc:	21000044 	addi	r4,r4,1
 7003900:	11000005 	stb	r4,0(r2)
 7003904:	a80b883a 	mov	r5,r21
 7003908:	e009883a 	mov	r4,fp
 700390c:	70064300 	call	7006430 <_Bfree>
 7003910:	883ea026 	beq	r17,zero,7003394 <__alt_data_end+0xff003394>
 7003914:	90000426 	beq	r18,zero,7003928 <_dtoa_r+0xc3c>
 7003918:	94400326 	beq	r18,r17,7003928 <_dtoa_r+0xc3c>
 700391c:	900b883a 	mov	r5,r18
 7003920:	e009883a 	mov	r4,fp
 7003924:	70064300 	call	7006430 <_Bfree>
 7003928:	880b883a 	mov	r5,r17
 700392c:	e009883a 	mov	r4,fp
 7003930:	70064300 	call	7006430 <_Bfree>
 7003934:	003e9706 	br	7003394 <__alt_data_end+0xff003394>
 7003938:	01800044 	movi	r6,1
 700393c:	d9800e15 	stw	r6,56(sp)
 7003940:	003d9606 	br	7002f9c <__alt_data_end+0xff002f9c>
 7003944:	d8800817 	ldw	r2,32(sp)
 7003948:	d8c00517 	ldw	r3,20(sp)
 700394c:	d8000d15 	stw	zero,52(sp)
 7003950:	10c5c83a 	sub	r2,r2,r3
 7003954:	00c9c83a 	sub	r4,zero,r3
 7003958:	d8800815 	stw	r2,32(sp)
 700395c:	d9000a15 	stw	r4,40(sp)
 7003960:	003d9706 	br	7002fc0 <__alt_data_end+0xff002fc0>
 7003964:	05adc83a 	sub	r22,zero,r22
 7003968:	dd800815 	stw	r22,32(sp)
 700396c:	002d883a 	mov	r22,zero
 7003970:	003d8e06 	br	7002fac <__alt_data_end+0xff002fac>
 7003974:	d9000517 	ldw	r4,20(sp)
 7003978:	700cd900 	call	700cd90 <__floatsidf>
 700397c:	100d883a 	mov	r6,r2
 7003980:	180f883a 	mov	r7,r3
 7003984:	a009883a 	mov	r4,r20
 7003988:	880b883a 	mov	r5,r17
 700398c:	700baa40 	call	700baa4 <__eqdf2>
 7003990:	103d7126 	beq	r2,zero,7002f58 <__alt_data_end+0xff002f58>
 7003994:	d9c00517 	ldw	r7,20(sp)
 7003998:	39ffffc4 	addi	r7,r7,-1
 700399c:	d9c00515 	stw	r7,20(sp)
 70039a0:	003d6d06 	br	7002f58 <__alt_data_end+0xff002f58>
 70039a4:	dd400a17 	ldw	r21,40(sp)
 70039a8:	dd000817 	ldw	r20,32(sp)
 70039ac:	0023883a 	mov	r17,zero
 70039b0:	003f4806 	br	70036d4 <__alt_data_end+0xff0036d4>
 70039b4:	10e3c83a 	sub	r17,r2,r3
 70039b8:	9448983a 	sll	r4,r18,r17
 70039bc:	003d3206 	br	7002e88 <__alt_data_end+0xff002e88>
 70039c0:	d8000e15 	stw	zero,56(sp)
 70039c4:	003d7506 	br	7002f9c <__alt_data_end+0xff002f9c>
 70039c8:	b005883a 	mov	r2,r22
 70039cc:	003f4506 	br	70036e4 <__alt_data_end+0xff0036e4>
 70039d0:	dc000915 	stw	r16,36(sp)
 70039d4:	d9800a17 	ldw	r6,40(sp)
 70039d8:	d9400917 	ldw	r5,36(sp)
 70039dc:	e009883a 	mov	r4,fp
 70039e0:	70069c80 	call	70069c8 <__pow5mult>
 70039e4:	1021883a 	mov	r16,r2
 70039e8:	003f5a06 	br	7003754 <__alt_data_end+0xff003754>
 70039ec:	01c00044 	movi	r7,1
 70039f0:	d9c00b15 	stw	r7,44(sp)
 70039f4:	d8802217 	ldw	r2,136(sp)
 70039f8:	0081280e 	bge	zero,r2,7003e9c <_dtoa_r+0x11b0>
 70039fc:	100d883a 	mov	r6,r2
 7003a00:	1021883a 	mov	r16,r2
 7003a04:	d8800c15 	stw	r2,48(sp)
 7003a08:	d8800615 	stw	r2,24(sp)
 7003a0c:	003d8806 	br	7003030 <__alt_data_end+0xff003030>
 7003a10:	d8800617 	ldw	r2,24(sp)
 7003a14:	00be9b16 	blt	zero,r2,7003484 <__alt_data_end+0xff003484>
 7003a18:	10010f1e 	bne	r2,zero,7003e58 <_dtoa_r+0x116c>
 7003a1c:	880b883a 	mov	r5,r17
 7003a20:	000d883a 	mov	r6,zero
 7003a24:	01d00534 	movhi	r7,16404
 7003a28:	8009883a 	mov	r4,r16
 7003a2c:	700bcfc0 	call	700bcfc <__muldf3>
 7003a30:	900d883a 	mov	r6,r18
 7003a34:	980f883a 	mov	r7,r19
 7003a38:	1009883a 	mov	r4,r2
 7003a3c:	180b883a 	mov	r5,r3
 7003a40:	700bb2c0 	call	700bb2c <__gedf2>
 7003a44:	002b883a 	mov	r21,zero
 7003a48:	0023883a 	mov	r17,zero
 7003a4c:	1000bf16 	blt	r2,zero,7003d4c <_dtoa_r+0x1060>
 7003a50:	d9802217 	ldw	r6,136(sp)
 7003a54:	ddc00717 	ldw	r23,28(sp)
 7003a58:	018c303a 	nor	r6,zero,r6
 7003a5c:	d9800515 	stw	r6,20(sp)
 7003a60:	a80b883a 	mov	r5,r21
 7003a64:	e009883a 	mov	r4,fp
 7003a68:	70064300 	call	7006430 <_Bfree>
 7003a6c:	883e4926 	beq	r17,zero,7003394 <__alt_data_end+0xff003394>
 7003a70:	003fad06 	br	7003928 <__alt_data_end+0xff003928>
 7003a74:	d9c01117 	ldw	r7,68(sp)
 7003a78:	3801bc26 	beq	r7,zero,700416c <_dtoa_r+0x1480>
 7003a7c:	10810cc4 	addi	r2,r2,1075
 7003a80:	dd400a17 	ldw	r21,40(sp)
 7003a84:	dd000817 	ldw	r20,32(sp)
 7003a88:	003f0a06 	br	70036b4 <__alt_data_end+0xff0036b4>
 7003a8c:	00800704 	movi	r2,28
 7003a90:	d9000817 	ldw	r4,32(sp)
 7003a94:	a0a9883a 	add	r20,r20,r2
 7003a98:	b0ad883a 	add	r22,r22,r2
 7003a9c:	2089883a 	add	r4,r4,r2
 7003aa0:	d9000815 	stw	r4,32(sp)
 7003aa4:	003f5106 	br	70037ec <__alt_data_end+0xff0037ec>
 7003aa8:	d8c00317 	ldw	r3,12(sp)
 7003aac:	b8c1fc0e 	bge	r23,r3,70042a0 <_dtoa_r+0x15b4>
 7003ab0:	0027883a 	mov	r19,zero
 7003ab4:	b805883a 	mov	r2,r23
 7003ab8:	003f3e06 	br	70037b4 <__alt_data_end+0xff0037b4>
 7003abc:	880b883a 	mov	r5,r17
 7003ac0:	e009883a 	mov	r4,fp
 7003ac4:	000f883a 	mov	r7,zero
 7003ac8:	01800284 	movi	r6,10
 7003acc:	70064580 	call	7006458 <__multadd>
 7003ad0:	d9000c17 	ldw	r4,48(sp)
 7003ad4:	1023883a 	mov	r17,r2
 7003ad8:	0102040e 	bge	zero,r4,70042ec <_dtoa_r+0x1600>
 7003adc:	d9000615 	stw	r4,24(sp)
 7003ae0:	0500050e 	bge	zero,r20,7003af8 <_dtoa_r+0xe0c>
 7003ae4:	880b883a 	mov	r5,r17
 7003ae8:	a00d883a 	mov	r6,r20
 7003aec:	e009883a 	mov	r4,fp
 7003af0:	7006b080 	call	7006b08 <__lshift>
 7003af4:	1023883a 	mov	r17,r2
 7003af8:	9801241e 	bne	r19,zero,7003f8c <_dtoa_r+0x12a0>
 7003afc:	8829883a 	mov	r20,r17
 7003b00:	d9000617 	ldw	r4,24(sp)
 7003b04:	dcc00717 	ldw	r19,28(sp)
 7003b08:	9480004c 	andi	r18,r18,1
 7003b0c:	20bfffc4 	addi	r2,r4,-1
 7003b10:	9885883a 	add	r2,r19,r2
 7003b14:	d8800415 	stw	r2,16(sp)
 7003b18:	dc800615 	stw	r18,24(sp)
 7003b1c:	a80b883a 	mov	r5,r21
 7003b20:	8009883a 	mov	r4,r16
 7003b24:	7002aec0 	call	7002aec <quorem>
 7003b28:	880b883a 	mov	r5,r17
 7003b2c:	8009883a 	mov	r4,r16
 7003b30:	102f883a 	mov	r23,r2
 7003b34:	7006c500 	call	7006c50 <__mcmp>
 7003b38:	a80b883a 	mov	r5,r21
 7003b3c:	a00d883a 	mov	r6,r20
 7003b40:	e009883a 	mov	r4,fp
 7003b44:	102d883a 	mov	r22,r2
 7003b48:	7006cb00 	call	7006cb0 <__mdiff>
 7003b4c:	1007883a 	mov	r3,r2
 7003b50:	10800317 	ldw	r2,12(r2)
 7003b54:	bc800c04 	addi	r18,r23,48
 7003b58:	180b883a 	mov	r5,r3
 7003b5c:	10004e1e 	bne	r2,zero,7003c98 <_dtoa_r+0xfac>
 7003b60:	8009883a 	mov	r4,r16
 7003b64:	d8c01615 	stw	r3,88(sp)
 7003b68:	7006c500 	call	7006c50 <__mcmp>
 7003b6c:	d8c01617 	ldw	r3,88(sp)
 7003b70:	e009883a 	mov	r4,fp
 7003b74:	d8801615 	stw	r2,88(sp)
 7003b78:	180b883a 	mov	r5,r3
 7003b7c:	70064300 	call	7006430 <_Bfree>
 7003b80:	d8801617 	ldw	r2,88(sp)
 7003b84:	1000041e 	bne	r2,zero,7003b98 <_dtoa_r+0xeac>
 7003b88:	d9800317 	ldw	r6,12(sp)
 7003b8c:	3000021e 	bne	r6,zero,7003b98 <_dtoa_r+0xeac>
 7003b90:	d8c00617 	ldw	r3,24(sp)
 7003b94:	18003726 	beq	r3,zero,7003c74 <_dtoa_r+0xf88>
 7003b98:	b0002016 	blt	r22,zero,7003c1c <_dtoa_r+0xf30>
 7003b9c:	b000041e 	bne	r22,zero,7003bb0 <_dtoa_r+0xec4>
 7003ba0:	d9000317 	ldw	r4,12(sp)
 7003ba4:	2000021e 	bne	r4,zero,7003bb0 <_dtoa_r+0xec4>
 7003ba8:	d8c00617 	ldw	r3,24(sp)
 7003bac:	18001b26 	beq	r3,zero,7003c1c <_dtoa_r+0xf30>
 7003bb0:	00810716 	blt	zero,r2,7003fd0 <_dtoa_r+0x12e4>
 7003bb4:	d8c00417 	ldw	r3,16(sp)
 7003bb8:	9d800044 	addi	r22,r19,1
 7003bbc:	9c800005 	stb	r18,0(r19)
 7003bc0:	b02f883a 	mov	r23,r22
 7003bc4:	98c10626 	beq	r19,r3,7003fe0 <_dtoa_r+0x12f4>
 7003bc8:	800b883a 	mov	r5,r16
 7003bcc:	000f883a 	mov	r7,zero
 7003bd0:	01800284 	movi	r6,10
 7003bd4:	e009883a 	mov	r4,fp
 7003bd8:	70064580 	call	7006458 <__multadd>
 7003bdc:	1021883a 	mov	r16,r2
 7003be0:	000f883a 	mov	r7,zero
 7003be4:	01800284 	movi	r6,10
 7003be8:	880b883a 	mov	r5,r17
 7003bec:	e009883a 	mov	r4,fp
 7003bf0:	8d002526 	beq	r17,r20,7003c88 <_dtoa_r+0xf9c>
 7003bf4:	70064580 	call	7006458 <__multadd>
 7003bf8:	a00b883a 	mov	r5,r20
 7003bfc:	000f883a 	mov	r7,zero
 7003c00:	01800284 	movi	r6,10
 7003c04:	e009883a 	mov	r4,fp
 7003c08:	1023883a 	mov	r17,r2
 7003c0c:	70064580 	call	7006458 <__multadd>
 7003c10:	1029883a 	mov	r20,r2
 7003c14:	b027883a 	mov	r19,r22
 7003c18:	003fc006 	br	7003b1c <__alt_data_end+0xff003b1c>
 7003c1c:	9011883a 	mov	r8,r18
 7003c20:	00800e0e 	bge	zero,r2,7003c5c <_dtoa_r+0xf70>
 7003c24:	800b883a 	mov	r5,r16
 7003c28:	01800044 	movi	r6,1
 7003c2c:	e009883a 	mov	r4,fp
 7003c30:	da001715 	stw	r8,92(sp)
 7003c34:	7006b080 	call	7006b08 <__lshift>
 7003c38:	a80b883a 	mov	r5,r21
 7003c3c:	1009883a 	mov	r4,r2
 7003c40:	1021883a 	mov	r16,r2
 7003c44:	7006c500 	call	7006c50 <__mcmp>
 7003c48:	da001717 	ldw	r8,92(sp)
 7003c4c:	0081960e 	bge	zero,r2,70042a8 <_dtoa_r+0x15bc>
 7003c50:	00800e44 	movi	r2,57
 7003c54:	40817026 	beq	r8,r2,7004218 <_dtoa_r+0x152c>
 7003c58:	ba000c44 	addi	r8,r23,49
 7003c5c:	8825883a 	mov	r18,r17
 7003c60:	9dc00044 	addi	r23,r19,1
 7003c64:	9a000005 	stb	r8,0(r19)
 7003c68:	a023883a 	mov	r17,r20
 7003c6c:	dc000915 	stw	r16,36(sp)
 7003c70:	003f2406 	br	7003904 <__alt_data_end+0xff003904>
 7003c74:	00800e44 	movi	r2,57
 7003c78:	9011883a 	mov	r8,r18
 7003c7c:	90816626 	beq	r18,r2,7004218 <_dtoa_r+0x152c>
 7003c80:	05bff516 	blt	zero,r22,7003c58 <__alt_data_end+0xff003c58>
 7003c84:	003ff506 	br	7003c5c <__alt_data_end+0xff003c5c>
 7003c88:	70064580 	call	7006458 <__multadd>
 7003c8c:	1023883a 	mov	r17,r2
 7003c90:	1029883a 	mov	r20,r2
 7003c94:	003fdf06 	br	7003c14 <__alt_data_end+0xff003c14>
 7003c98:	e009883a 	mov	r4,fp
 7003c9c:	70064300 	call	7006430 <_Bfree>
 7003ca0:	00800044 	movi	r2,1
 7003ca4:	003fbc06 	br	7003b98 <__alt_data_end+0xff003b98>
 7003ca8:	a80b883a 	mov	r5,r21
 7003cac:	8009883a 	mov	r4,r16
 7003cb0:	7006c500 	call	7006c50 <__mcmp>
 7003cb4:	103edb0e 	bge	r2,zero,7003824 <__alt_data_end+0xff003824>
 7003cb8:	800b883a 	mov	r5,r16
 7003cbc:	000f883a 	mov	r7,zero
 7003cc0:	01800284 	movi	r6,10
 7003cc4:	e009883a 	mov	r4,fp
 7003cc8:	70064580 	call	7006458 <__multadd>
 7003ccc:	1021883a 	mov	r16,r2
 7003cd0:	d8800517 	ldw	r2,20(sp)
 7003cd4:	d8c00b17 	ldw	r3,44(sp)
 7003cd8:	10bfffc4 	addi	r2,r2,-1
 7003cdc:	d8800515 	stw	r2,20(sp)
 7003ce0:	183f761e 	bne	r3,zero,7003abc <__alt_data_end+0xff003abc>
 7003ce4:	d9000c17 	ldw	r4,48(sp)
 7003ce8:	0101730e 	bge	zero,r4,70042b8 <_dtoa_r+0x15cc>
 7003cec:	d9000615 	stw	r4,24(sp)
 7003cf0:	003ed006 	br	7003834 <__alt_data_end+0xff003834>
 7003cf4:	00800084 	movi	r2,2
 7003cf8:	3081861e 	bne	r6,r2,7004314 <_dtoa_r+0x1628>
 7003cfc:	d8000b15 	stw	zero,44(sp)
 7003d00:	003f3c06 	br	70039f4 <__alt_data_end+0xff0039f4>
 7003d04:	dc000917 	ldw	r16,36(sp)
 7003d08:	003e9206 	br	7003754 <__alt_data_end+0xff003754>
 7003d0c:	d9c00317 	ldw	r7,12(sp)
 7003d10:	00800084 	movi	r2,2
 7003d14:	11fec50e 	bge	r2,r7,700382c <__alt_data_end+0xff00382c>
 7003d18:	d9000617 	ldw	r4,24(sp)
 7003d1c:	20013c1e 	bne	r4,zero,7004210 <_dtoa_r+0x1524>
 7003d20:	a80b883a 	mov	r5,r21
 7003d24:	000f883a 	mov	r7,zero
 7003d28:	01800144 	movi	r6,5
 7003d2c:	e009883a 	mov	r4,fp
 7003d30:	70064580 	call	7006458 <__multadd>
 7003d34:	100b883a 	mov	r5,r2
 7003d38:	8009883a 	mov	r4,r16
 7003d3c:	102b883a 	mov	r21,r2
 7003d40:	7006c500 	call	7006c50 <__mcmp>
 7003d44:	dc000915 	stw	r16,36(sp)
 7003d48:	00bf410e 	bge	zero,r2,7003a50 <__alt_data_end+0xff003a50>
 7003d4c:	d9c00717 	ldw	r7,28(sp)
 7003d50:	00800c44 	movi	r2,49
 7003d54:	38800005 	stb	r2,0(r7)
 7003d58:	d8800517 	ldw	r2,20(sp)
 7003d5c:	3dc00044 	addi	r23,r7,1
 7003d60:	10800044 	addi	r2,r2,1
 7003d64:	d8800515 	stw	r2,20(sp)
 7003d68:	003f3d06 	br	7003a60 <__alt_data_end+0xff003a60>
 7003d6c:	d9800517 	ldw	r6,20(sp)
 7003d70:	d9c00717 	ldw	r7,28(sp)
 7003d74:	00800c44 	movi	r2,49
 7003d78:	31800044 	addi	r6,r6,1
 7003d7c:	d9800515 	stw	r6,20(sp)
 7003d80:	38800005 	stb	r2,0(r7)
 7003d84:	003edf06 	br	7003904 <__alt_data_end+0xff003904>
 7003d88:	d8000b15 	stw	zero,44(sp)
 7003d8c:	003c9f06 	br	700300c <__alt_data_end+0xff00300c>
 7003d90:	903e7e1e 	bne	r18,zero,700378c <__alt_data_end+0xff00378c>
 7003d94:	00800434 	movhi	r2,16
 7003d98:	10bfffc4 	addi	r2,r2,-1
 7003d9c:	9884703a 	and	r2,r19,r2
 7003da0:	1000ea1e 	bne	r2,zero,700414c <_dtoa_r+0x1460>
 7003da4:	9cdffc2c 	andhi	r19,r19,32752
 7003da8:	9800e826 	beq	r19,zero,700414c <_dtoa_r+0x1460>
 7003dac:	d9c00817 	ldw	r7,32(sp)
 7003db0:	b5800044 	addi	r22,r22,1
 7003db4:	04c00044 	movi	r19,1
 7003db8:	39c00044 	addi	r7,r7,1
 7003dbc:	d9c00815 	stw	r7,32(sp)
 7003dc0:	d8800d17 	ldw	r2,52(sp)
 7003dc4:	103e721e 	bne	r2,zero,7003790 <__alt_data_end+0xff003790>
 7003dc8:	00800044 	movi	r2,1
 7003dcc:	003e7906 	br	70037b4 <__alt_data_end+0xff0037b4>
 7003dd0:	8009883a 	mov	r4,r16
 7003dd4:	700cd900 	call	700cd90 <__floatsidf>
 7003dd8:	d9800f17 	ldw	r6,60(sp)
 7003ddc:	d9c01017 	ldw	r7,64(sp)
 7003de0:	1009883a 	mov	r4,r2
 7003de4:	180b883a 	mov	r5,r3
 7003de8:	700bcfc0 	call	700bcfc <__muldf3>
 7003dec:	000d883a 	mov	r6,zero
 7003df0:	01d00734 	movhi	r7,16412
 7003df4:	1009883a 	mov	r4,r2
 7003df8:	180b883a 	mov	r5,r3
 7003dfc:	700a9100 	call	700a910 <__adddf3>
 7003e00:	047f3034 	movhi	r17,64704
 7003e04:	1021883a 	mov	r16,r2
 7003e08:	1c63883a 	add	r17,r3,r17
 7003e0c:	d9000f17 	ldw	r4,60(sp)
 7003e10:	d9401017 	ldw	r5,64(sp)
 7003e14:	000d883a 	mov	r6,zero
 7003e18:	01d00534 	movhi	r7,16404
 7003e1c:	700c4140 	call	700c414 <__subdf3>
 7003e20:	800d883a 	mov	r6,r16
 7003e24:	880f883a 	mov	r7,r17
 7003e28:	1009883a 	mov	r4,r2
 7003e2c:	180b883a 	mov	r5,r3
 7003e30:	102b883a 	mov	r21,r2
 7003e34:	1829883a 	mov	r20,r3
 7003e38:	700bb2c0 	call	700bb2c <__gedf2>
 7003e3c:	00806c16 	blt	zero,r2,7003ff0 <_dtoa_r+0x1304>
 7003e40:	89e0003c 	xorhi	r7,r17,32768
 7003e44:	800d883a 	mov	r6,r16
 7003e48:	a809883a 	mov	r4,r21
 7003e4c:	a00b883a 	mov	r5,r20
 7003e50:	700bc080 	call	700bc08 <__ledf2>
 7003e54:	103d7e0e 	bge	r2,zero,7003450 <__alt_data_end+0xff003450>
 7003e58:	002b883a 	mov	r21,zero
 7003e5c:	0023883a 	mov	r17,zero
 7003e60:	003efb06 	br	7003a50 <__alt_data_end+0xff003a50>
 7003e64:	d8800717 	ldw	r2,28(sp)
 7003e68:	003bd006 	br	7002dac <__alt_data_end+0xff002dac>
 7003e6c:	d9000a17 	ldw	r4,40(sp)
 7003e70:	d9800d17 	ldw	r6,52(sp)
 7003e74:	dd400a15 	stw	r21,40(sp)
 7003e78:	a905c83a 	sub	r2,r21,r4
 7003e7c:	308d883a 	add	r6,r6,r2
 7003e80:	d9800d15 	stw	r6,52(sp)
 7003e84:	002b883a 	mov	r21,zero
 7003e88:	003e0606 	br	70036a4 <__alt_data_end+0xff0036a4>
 7003e8c:	9023883a 	mov	r17,r18
 7003e90:	9829883a 	mov	r20,r19
 7003e94:	04000084 	movi	r16,2
 7003e98:	003c9206 	br	70030e4 <__alt_data_end+0xff0030e4>
 7003e9c:	04000044 	movi	r16,1
 7003ea0:	dc000c15 	stw	r16,48(sp)
 7003ea4:	dc000615 	stw	r16,24(sp)
 7003ea8:	dc002215 	stw	r16,136(sp)
 7003eac:	e0001115 	stw	zero,68(fp)
 7003eb0:	000b883a 	mov	r5,zero
 7003eb4:	003c6906 	br	700305c <__alt_data_end+0xff00305c>
 7003eb8:	3021883a 	mov	r16,r6
 7003ebc:	003ffb06 	br	7003eac <__alt_data_end+0xff003eac>
 7003ec0:	1000021e 	bne	r2,zero,7003ecc <_dtoa_r+0x11e0>
 7003ec4:	4200004c 	andi	r8,r8,1
 7003ec8:	403e7d1e 	bne	r8,zero,70038c0 <__alt_data_end+0xff0038c0>
 7003ecc:	01000c04 	movi	r4,48
 7003ed0:	00000106 	br	7003ed8 <_dtoa_r+0x11ec>
 7003ed4:	102f883a 	mov	r23,r2
 7003ed8:	b8bfffc4 	addi	r2,r23,-1
 7003edc:	10c00007 	ldb	r3,0(r2)
 7003ee0:	193ffc26 	beq	r3,r4,7003ed4 <__alt_data_end+0xff003ed4>
 7003ee4:	003e8706 	br	7003904 <__alt_data_end+0xff003904>
 7003ee8:	d8800517 	ldw	r2,20(sp)
 7003eec:	00a3c83a 	sub	r17,zero,r2
 7003ef0:	8800a426 	beq	r17,zero,7004184 <_dtoa_r+0x1498>
 7003ef4:	888003cc 	andi	r2,r17,15
 7003ef8:	100490fa 	slli	r2,r2,3
 7003efc:	00c1c074 	movhi	r3,1793
 7003f00:	18ff0f04 	addi	r3,r3,-964
 7003f04:	1885883a 	add	r2,r3,r2
 7003f08:	11800017 	ldw	r6,0(r2)
 7003f0c:	11c00117 	ldw	r7,4(r2)
 7003f10:	9009883a 	mov	r4,r18
 7003f14:	980b883a 	mov	r5,r19
 7003f18:	8823d13a 	srai	r17,r17,4
 7003f1c:	700bcfc0 	call	700bcfc <__muldf3>
 7003f20:	d8800f15 	stw	r2,60(sp)
 7003f24:	d8c01015 	stw	r3,64(sp)
 7003f28:	8800e826 	beq	r17,zero,70042cc <_dtoa_r+0x15e0>
 7003f2c:	0501c074 	movhi	r20,1793
 7003f30:	a53f0504 	addi	r20,r20,-1004
 7003f34:	04000084 	movi	r16,2
 7003f38:	8980004c 	andi	r6,r17,1
 7003f3c:	1009883a 	mov	r4,r2
 7003f40:	8823d07a 	srai	r17,r17,1
 7003f44:	180b883a 	mov	r5,r3
 7003f48:	30000426 	beq	r6,zero,7003f5c <_dtoa_r+0x1270>
 7003f4c:	a1800017 	ldw	r6,0(r20)
 7003f50:	a1c00117 	ldw	r7,4(r20)
 7003f54:	84000044 	addi	r16,r16,1
 7003f58:	700bcfc0 	call	700bcfc <__muldf3>
 7003f5c:	a5000204 	addi	r20,r20,8
 7003f60:	883ff51e 	bne	r17,zero,7003f38 <__alt_data_end+0xff003f38>
 7003f64:	d8800f15 	stw	r2,60(sp)
 7003f68:	d8c01015 	stw	r3,64(sp)
 7003f6c:	003c7606 	br	7003148 <__alt_data_end+0xff003148>
 7003f70:	00c00c04 	movi	r3,48
 7003f74:	10c00005 	stb	r3,0(r2)
 7003f78:	d8c00517 	ldw	r3,20(sp)
 7003f7c:	bd3fffc3 	ldbu	r20,-1(r23)
 7003f80:	18c00044 	addi	r3,r3,1
 7003f84:	d8c00515 	stw	r3,20(sp)
 7003f88:	003db906 	br	7003670 <__alt_data_end+0xff003670>
 7003f8c:	89400117 	ldw	r5,4(r17)
 7003f90:	e009883a 	mov	r4,fp
 7003f94:	70063880 	call	7006388 <_Balloc>
 7003f98:	89800417 	ldw	r6,16(r17)
 7003f9c:	89400304 	addi	r5,r17,12
 7003fa0:	11000304 	addi	r4,r2,12
 7003fa4:	31800084 	addi	r6,r6,2
 7003fa8:	318d883a 	add	r6,r6,r6
 7003fac:	318d883a 	add	r6,r6,r6
 7003fb0:	1027883a 	mov	r19,r2
 7003fb4:	7005fbc0 	call	7005fbc <memcpy>
 7003fb8:	01800044 	movi	r6,1
 7003fbc:	980b883a 	mov	r5,r19
 7003fc0:	e009883a 	mov	r4,fp
 7003fc4:	7006b080 	call	7006b08 <__lshift>
 7003fc8:	1029883a 	mov	r20,r2
 7003fcc:	003ecc06 	br	7003b00 <__alt_data_end+0xff003b00>
 7003fd0:	00800e44 	movi	r2,57
 7003fd4:	90809026 	beq	r18,r2,7004218 <_dtoa_r+0x152c>
 7003fd8:	92000044 	addi	r8,r18,1
 7003fdc:	003f1f06 	br	7003c5c <__alt_data_end+0xff003c5c>
 7003fe0:	9011883a 	mov	r8,r18
 7003fe4:	8825883a 	mov	r18,r17
 7003fe8:	a023883a 	mov	r17,r20
 7003fec:	003e2906 	br	7003894 <__alt_data_end+0xff003894>
 7003ff0:	002b883a 	mov	r21,zero
 7003ff4:	0023883a 	mov	r17,zero
 7003ff8:	003f5406 	br	7003d4c <__alt_data_end+0xff003d4c>
 7003ffc:	61bfffc4 	addi	r6,r12,-1
 7004000:	300490fa 	slli	r2,r6,3
 7004004:	00c1c074 	movhi	r3,1793
 7004008:	18ff0f04 	addi	r3,r3,-964
 700400c:	1885883a 	add	r2,r3,r2
 7004010:	11000017 	ldw	r4,0(r2)
 7004014:	11400117 	ldw	r5,4(r2)
 7004018:	d8800717 	ldw	r2,28(sp)
 700401c:	880f883a 	mov	r7,r17
 7004020:	d9801215 	stw	r6,72(sp)
 7004024:	800d883a 	mov	r6,r16
 7004028:	db001615 	stw	r12,88(sp)
 700402c:	15c00044 	addi	r23,r2,1
 7004030:	700bcfc0 	call	700bcfc <__muldf3>
 7004034:	d9401017 	ldw	r5,64(sp)
 7004038:	d9000f17 	ldw	r4,60(sp)
 700403c:	d8c01515 	stw	r3,84(sp)
 7004040:	d8801415 	stw	r2,80(sp)
 7004044:	700cd100 	call	700cd10 <__fixdfsi>
 7004048:	1009883a 	mov	r4,r2
 700404c:	1021883a 	mov	r16,r2
 7004050:	700cd900 	call	700cd90 <__floatsidf>
 7004054:	d9000f17 	ldw	r4,60(sp)
 7004058:	d9401017 	ldw	r5,64(sp)
 700405c:	100d883a 	mov	r6,r2
 7004060:	180f883a 	mov	r7,r3
 7004064:	700c4140 	call	700c414 <__subdf3>
 7004068:	1829883a 	mov	r20,r3
 700406c:	d8c00717 	ldw	r3,28(sp)
 7004070:	84000c04 	addi	r16,r16,48
 7004074:	1023883a 	mov	r17,r2
 7004078:	1c000005 	stb	r16,0(r3)
 700407c:	db001617 	ldw	r12,88(sp)
 7004080:	00800044 	movi	r2,1
 7004084:	60802226 	beq	r12,r2,7004110 <_dtoa_r+0x1424>
 7004088:	d9c00717 	ldw	r7,28(sp)
 700408c:	8805883a 	mov	r2,r17
 7004090:	b82b883a 	mov	r21,r23
 7004094:	3b19883a 	add	r12,r7,r12
 7004098:	6023883a 	mov	r17,r12
 700409c:	a007883a 	mov	r3,r20
 70040a0:	dc800f15 	stw	r18,60(sp)
 70040a4:	000d883a 	mov	r6,zero
 70040a8:	01d00934 	movhi	r7,16420
 70040ac:	1009883a 	mov	r4,r2
 70040b0:	180b883a 	mov	r5,r3
 70040b4:	700bcfc0 	call	700bcfc <__muldf3>
 70040b8:	180b883a 	mov	r5,r3
 70040bc:	1009883a 	mov	r4,r2
 70040c0:	1829883a 	mov	r20,r3
 70040c4:	1025883a 	mov	r18,r2
 70040c8:	700cd100 	call	700cd10 <__fixdfsi>
 70040cc:	1009883a 	mov	r4,r2
 70040d0:	1021883a 	mov	r16,r2
 70040d4:	700cd900 	call	700cd90 <__floatsidf>
 70040d8:	100d883a 	mov	r6,r2
 70040dc:	180f883a 	mov	r7,r3
 70040e0:	9009883a 	mov	r4,r18
 70040e4:	a00b883a 	mov	r5,r20
 70040e8:	84000c04 	addi	r16,r16,48
 70040ec:	700c4140 	call	700c414 <__subdf3>
 70040f0:	ad400044 	addi	r21,r21,1
 70040f4:	ac3fffc5 	stb	r16,-1(r21)
 70040f8:	ac7fea1e 	bne	r21,r17,70040a4 <__alt_data_end+0xff0040a4>
 70040fc:	1023883a 	mov	r17,r2
 7004100:	d8801217 	ldw	r2,72(sp)
 7004104:	dc800f17 	ldw	r18,60(sp)
 7004108:	1829883a 	mov	r20,r3
 700410c:	b8af883a 	add	r23,r23,r2
 7004110:	d9001417 	ldw	r4,80(sp)
 7004114:	d9401517 	ldw	r5,84(sp)
 7004118:	000d883a 	mov	r6,zero
 700411c:	01cff834 	movhi	r7,16352
 7004120:	700a9100 	call	700a910 <__adddf3>
 7004124:	880d883a 	mov	r6,r17
 7004128:	a00f883a 	mov	r7,r20
 700412c:	1009883a 	mov	r4,r2
 7004130:	180b883a 	mov	r5,r3
 7004134:	700bc080 	call	700bc08 <__ledf2>
 7004138:	10003e0e 	bge	r2,zero,7004234 <_dtoa_r+0x1548>
 700413c:	d9001317 	ldw	r4,76(sp)
 7004140:	bd3fffc3 	ldbu	r20,-1(r23)
 7004144:	d9000515 	stw	r4,20(sp)
 7004148:	003d3b06 	br	7003638 <__alt_data_end+0xff003638>
 700414c:	0027883a 	mov	r19,zero
 7004150:	003f1b06 	br	7003dc0 <__alt_data_end+0xff003dc0>
 7004154:	d8800817 	ldw	r2,32(sp)
 7004158:	11e9c83a 	sub	r20,r2,r7
 700415c:	0005883a 	mov	r2,zero
 7004160:	003d5406 	br	70036b4 <__alt_data_end+0xff0036b4>
 7004164:	00800044 	movi	r2,1
 7004168:	003dc706 	br	7003888 <__alt_data_end+0xff003888>
 700416c:	d8c00217 	ldw	r3,8(sp)
 7004170:	00800d84 	movi	r2,54
 7004174:	dd400a17 	ldw	r21,40(sp)
 7004178:	10c5c83a 	sub	r2,r2,r3
 700417c:	dd000817 	ldw	r20,32(sp)
 7004180:	003d4c06 	br	70036b4 <__alt_data_end+0xff0036b4>
 7004184:	dc800f15 	stw	r18,60(sp)
 7004188:	dcc01015 	stw	r19,64(sp)
 700418c:	04000084 	movi	r16,2
 7004190:	003bed06 	br	7003148 <__alt_data_end+0xff003148>
 7004194:	d9000617 	ldw	r4,24(sp)
 7004198:	203f0d26 	beq	r4,zero,7003dd0 <__alt_data_end+0xff003dd0>
 700419c:	d9800c17 	ldw	r6,48(sp)
 70041a0:	01bcab0e 	bge	zero,r6,7003450 <__alt_data_end+0xff003450>
 70041a4:	d9401017 	ldw	r5,64(sp)
 70041a8:	d9000f17 	ldw	r4,60(sp)
 70041ac:	000d883a 	mov	r6,zero
 70041b0:	01d00934 	movhi	r7,16420
 70041b4:	700bcfc0 	call	700bcfc <__muldf3>
 70041b8:	81000044 	addi	r4,r16,1
 70041bc:	d8800f15 	stw	r2,60(sp)
 70041c0:	d8c01015 	stw	r3,64(sp)
 70041c4:	700cd900 	call	700cd90 <__floatsidf>
 70041c8:	d9800f17 	ldw	r6,60(sp)
 70041cc:	d9c01017 	ldw	r7,64(sp)
 70041d0:	1009883a 	mov	r4,r2
 70041d4:	180b883a 	mov	r5,r3
 70041d8:	700bcfc0 	call	700bcfc <__muldf3>
 70041dc:	01d00734 	movhi	r7,16412
 70041e0:	000d883a 	mov	r6,zero
 70041e4:	1009883a 	mov	r4,r2
 70041e8:	180b883a 	mov	r5,r3
 70041ec:	700a9100 	call	700a910 <__adddf3>
 70041f0:	d9c00517 	ldw	r7,20(sp)
 70041f4:	047f3034 	movhi	r17,64704
 70041f8:	1021883a 	mov	r16,r2
 70041fc:	39ffffc4 	addi	r7,r7,-1
 7004200:	d9c01315 	stw	r7,76(sp)
 7004204:	1c63883a 	add	r17,r3,r17
 7004208:	db000c17 	ldw	r12,48(sp)
 700420c:	003bea06 	br	70031b8 <__alt_data_end+0xff0031b8>
 7004210:	dc000915 	stw	r16,36(sp)
 7004214:	003e0e06 	br	7003a50 <__alt_data_end+0xff003a50>
 7004218:	01000e44 	movi	r4,57
 700421c:	8825883a 	mov	r18,r17
 7004220:	9dc00044 	addi	r23,r19,1
 7004224:	99000005 	stb	r4,0(r19)
 7004228:	a023883a 	mov	r17,r20
 700422c:	dc000915 	stw	r16,36(sp)
 7004230:	003da406 	br	70038c4 <__alt_data_end+0xff0038c4>
 7004234:	d9801417 	ldw	r6,80(sp)
 7004238:	d9c01517 	ldw	r7,84(sp)
 700423c:	0009883a 	mov	r4,zero
 7004240:	014ff834 	movhi	r5,16352
 7004244:	700c4140 	call	700c414 <__subdf3>
 7004248:	880d883a 	mov	r6,r17
 700424c:	a00f883a 	mov	r7,r20
 7004250:	1009883a 	mov	r4,r2
 7004254:	180b883a 	mov	r5,r3
 7004258:	700bb2c0 	call	700bb2c <__gedf2>
 700425c:	00bc7c0e 	bge	zero,r2,7003450 <__alt_data_end+0xff003450>
 7004260:	01000c04 	movi	r4,48
 7004264:	00000106 	br	700426c <_dtoa_r+0x1580>
 7004268:	102f883a 	mov	r23,r2
 700426c:	b8bfffc4 	addi	r2,r23,-1
 7004270:	10c00007 	ldb	r3,0(r2)
 7004274:	193ffc26 	beq	r3,r4,7004268 <__alt_data_end+0xff004268>
 7004278:	d9801317 	ldw	r6,76(sp)
 700427c:	d9800515 	stw	r6,20(sp)
 7004280:	003c4406 	br	7003394 <__alt_data_end+0xff003394>
 7004284:	d9801317 	ldw	r6,76(sp)
 7004288:	d9800515 	stw	r6,20(sp)
 700428c:	003cea06 	br	7003638 <__alt_data_end+0xff003638>
 7004290:	dd800f17 	ldw	r22,60(sp)
 7004294:	dcc01017 	ldw	r19,64(sp)
 7004298:	dc801217 	ldw	r18,72(sp)
 700429c:	003c6c06 	br	7003450 <__alt_data_end+0xff003450>
 70042a0:	903e031e 	bne	r18,zero,7003ab0 <__alt_data_end+0xff003ab0>
 70042a4:	003ebb06 	br	7003d94 <__alt_data_end+0xff003d94>
 70042a8:	103e6c1e 	bne	r2,zero,7003c5c <__alt_data_end+0xff003c5c>
 70042ac:	4080004c 	andi	r2,r8,1
 70042b0:	103e6a26 	beq	r2,zero,7003c5c <__alt_data_end+0xff003c5c>
 70042b4:	003e6606 	br	7003c50 <__alt_data_end+0xff003c50>
 70042b8:	d8c00317 	ldw	r3,12(sp)
 70042bc:	00800084 	movi	r2,2
 70042c0:	10c02916 	blt	r2,r3,7004368 <_dtoa_r+0x167c>
 70042c4:	d9000c17 	ldw	r4,48(sp)
 70042c8:	003e8806 	br	7003cec <__alt_data_end+0xff003cec>
 70042cc:	04000084 	movi	r16,2
 70042d0:	003b9d06 	br	7003148 <__alt_data_end+0xff003148>
 70042d4:	d9001317 	ldw	r4,76(sp)
 70042d8:	d9000515 	stw	r4,20(sp)
 70042dc:	003cd606 	br	7003638 <__alt_data_end+0xff003638>
 70042e0:	d8801317 	ldw	r2,76(sp)
 70042e4:	d8800515 	stw	r2,20(sp)
 70042e8:	003c2a06 	br	7003394 <__alt_data_end+0xff003394>
 70042ec:	d9800317 	ldw	r6,12(sp)
 70042f0:	00800084 	movi	r2,2
 70042f4:	11801516 	blt	r2,r6,700434c <_dtoa_r+0x1660>
 70042f8:	d9c00c17 	ldw	r7,48(sp)
 70042fc:	d9c00615 	stw	r7,24(sp)
 7004300:	003df706 	br	7003ae0 <__alt_data_end+0xff003ae0>
 7004304:	193d3926 	beq	r3,r4,70037ec <__alt_data_end+0xff0037ec>
 7004308:	00c00f04 	movi	r3,60
 700430c:	1885c83a 	sub	r2,r3,r2
 7004310:	003ddf06 	br	7003a90 <__alt_data_end+0xff003a90>
 7004314:	e009883a 	mov	r4,fp
 7004318:	e0001115 	stw	zero,68(fp)
 700431c:	000b883a 	mov	r5,zero
 7004320:	70063880 	call	7006388 <_Balloc>
 7004324:	d8800715 	stw	r2,28(sp)
 7004328:	d8c00717 	ldw	r3,28(sp)
 700432c:	00bfffc4 	movi	r2,-1
 7004330:	01000044 	movi	r4,1
 7004334:	d8800c15 	stw	r2,48(sp)
 7004338:	e0c01015 	stw	r3,64(fp)
 700433c:	d9000b15 	stw	r4,44(sp)
 7004340:	d8800615 	stw	r2,24(sp)
 7004344:	d8002215 	stw	zero,136(sp)
 7004348:	003c4106 	br	7003450 <__alt_data_end+0xff003450>
 700434c:	d8c00c17 	ldw	r3,48(sp)
 7004350:	d8c00615 	stw	r3,24(sp)
 7004354:	003e7006 	br	7003d18 <__alt_data_end+0xff003d18>
 7004358:	04400044 	movi	r17,1
 700435c:	003b2006 	br	7002fe0 <__alt_data_end+0xff002fe0>
 7004360:	000b883a 	mov	r5,zero
 7004364:	003b3d06 	br	700305c <__alt_data_end+0xff00305c>
 7004368:	d8800c17 	ldw	r2,48(sp)
 700436c:	d8800615 	stw	r2,24(sp)
 7004370:	003e6906 	br	7003d18 <__alt_data_end+0xff003d18>

07004374 <__sflush_r>:
 7004374:	2880030b 	ldhu	r2,12(r5)
 7004378:	defffb04 	addi	sp,sp,-20
 700437c:	dcc00315 	stw	r19,12(sp)
 7004380:	dc400115 	stw	r17,4(sp)
 7004384:	dfc00415 	stw	ra,16(sp)
 7004388:	dc800215 	stw	r18,8(sp)
 700438c:	dc000015 	stw	r16,0(sp)
 7004390:	10c0020c 	andi	r3,r2,8
 7004394:	2823883a 	mov	r17,r5
 7004398:	2027883a 	mov	r19,r4
 700439c:	1800311e 	bne	r3,zero,7004464 <__sflush_r+0xf0>
 70043a0:	28c00117 	ldw	r3,4(r5)
 70043a4:	10820014 	ori	r2,r2,2048
 70043a8:	2880030d 	sth	r2,12(r5)
 70043ac:	00c04b0e 	bge	zero,r3,70044dc <__sflush_r+0x168>
 70043b0:	8a000a17 	ldw	r8,40(r17)
 70043b4:	40002326 	beq	r8,zero,7004444 <__sflush_r+0xd0>
 70043b8:	9c000017 	ldw	r16,0(r19)
 70043bc:	10c4000c 	andi	r3,r2,4096
 70043c0:	98000015 	stw	zero,0(r19)
 70043c4:	18004826 	beq	r3,zero,70044e8 <__sflush_r+0x174>
 70043c8:	89801417 	ldw	r6,80(r17)
 70043cc:	10c0010c 	andi	r3,r2,4
 70043d0:	18000626 	beq	r3,zero,70043ec <__sflush_r+0x78>
 70043d4:	88c00117 	ldw	r3,4(r17)
 70043d8:	88800c17 	ldw	r2,48(r17)
 70043dc:	30cdc83a 	sub	r6,r6,r3
 70043e0:	10000226 	beq	r2,zero,70043ec <__sflush_r+0x78>
 70043e4:	88800f17 	ldw	r2,60(r17)
 70043e8:	308dc83a 	sub	r6,r6,r2
 70043ec:	89400717 	ldw	r5,28(r17)
 70043f0:	000f883a 	mov	r7,zero
 70043f4:	9809883a 	mov	r4,r19
 70043f8:	403ee83a 	callr	r8
 70043fc:	00ffffc4 	movi	r3,-1
 7004400:	10c04426 	beq	r2,r3,7004514 <__sflush_r+0x1a0>
 7004404:	88c0030b 	ldhu	r3,12(r17)
 7004408:	89000417 	ldw	r4,16(r17)
 700440c:	88000115 	stw	zero,4(r17)
 7004410:	197dffcc 	andi	r5,r3,63487
 7004414:	8940030d 	sth	r5,12(r17)
 7004418:	89000015 	stw	r4,0(r17)
 700441c:	18c4000c 	andi	r3,r3,4096
 7004420:	18002c1e 	bne	r3,zero,70044d4 <__sflush_r+0x160>
 7004424:	89400c17 	ldw	r5,48(r17)
 7004428:	9c000015 	stw	r16,0(r19)
 700442c:	28000526 	beq	r5,zero,7004444 <__sflush_r+0xd0>
 7004430:	88801004 	addi	r2,r17,64
 7004434:	28800226 	beq	r5,r2,7004440 <__sflush_r+0xcc>
 7004438:	9809883a 	mov	r4,r19
 700443c:	7004ae00 	call	7004ae0 <_free_r>
 7004440:	88000c15 	stw	zero,48(r17)
 7004444:	0005883a 	mov	r2,zero
 7004448:	dfc00417 	ldw	ra,16(sp)
 700444c:	dcc00317 	ldw	r19,12(sp)
 7004450:	dc800217 	ldw	r18,8(sp)
 7004454:	dc400117 	ldw	r17,4(sp)
 7004458:	dc000017 	ldw	r16,0(sp)
 700445c:	dec00504 	addi	sp,sp,20
 7004460:	f800283a 	ret
 7004464:	2c800417 	ldw	r18,16(r5)
 7004468:	903ff626 	beq	r18,zero,7004444 <__alt_data_end+0xff004444>
 700446c:	2c000017 	ldw	r16,0(r5)
 7004470:	108000cc 	andi	r2,r2,3
 7004474:	2c800015 	stw	r18,0(r5)
 7004478:	84a1c83a 	sub	r16,r16,r18
 700447c:	1000131e 	bne	r2,zero,70044cc <__sflush_r+0x158>
 7004480:	28800517 	ldw	r2,20(r5)
 7004484:	88800215 	stw	r2,8(r17)
 7004488:	04000316 	blt	zero,r16,7004498 <__sflush_r+0x124>
 700448c:	003fed06 	br	7004444 <__alt_data_end+0xff004444>
 7004490:	90a5883a 	add	r18,r18,r2
 7004494:	043feb0e 	bge	zero,r16,7004444 <__alt_data_end+0xff004444>
 7004498:	88800917 	ldw	r2,36(r17)
 700449c:	89400717 	ldw	r5,28(r17)
 70044a0:	800f883a 	mov	r7,r16
 70044a4:	900d883a 	mov	r6,r18
 70044a8:	9809883a 	mov	r4,r19
 70044ac:	103ee83a 	callr	r2
 70044b0:	80a1c83a 	sub	r16,r16,r2
 70044b4:	00bff616 	blt	zero,r2,7004490 <__alt_data_end+0xff004490>
 70044b8:	88c0030b 	ldhu	r3,12(r17)
 70044bc:	00bfffc4 	movi	r2,-1
 70044c0:	18c01014 	ori	r3,r3,64
 70044c4:	88c0030d 	sth	r3,12(r17)
 70044c8:	003fdf06 	br	7004448 <__alt_data_end+0xff004448>
 70044cc:	0005883a 	mov	r2,zero
 70044d0:	003fec06 	br	7004484 <__alt_data_end+0xff004484>
 70044d4:	88801415 	stw	r2,80(r17)
 70044d8:	003fd206 	br	7004424 <__alt_data_end+0xff004424>
 70044dc:	28c00f17 	ldw	r3,60(r5)
 70044e0:	00ffb316 	blt	zero,r3,70043b0 <__alt_data_end+0xff0043b0>
 70044e4:	003fd706 	br	7004444 <__alt_data_end+0xff004444>
 70044e8:	89400717 	ldw	r5,28(r17)
 70044ec:	000d883a 	mov	r6,zero
 70044f0:	01c00044 	movi	r7,1
 70044f4:	9809883a 	mov	r4,r19
 70044f8:	403ee83a 	callr	r8
 70044fc:	100d883a 	mov	r6,r2
 7004500:	00bfffc4 	movi	r2,-1
 7004504:	30801426 	beq	r6,r2,7004558 <__sflush_r+0x1e4>
 7004508:	8880030b 	ldhu	r2,12(r17)
 700450c:	8a000a17 	ldw	r8,40(r17)
 7004510:	003fae06 	br	70043cc <__alt_data_end+0xff0043cc>
 7004514:	98c00017 	ldw	r3,0(r19)
 7004518:	183fba26 	beq	r3,zero,7004404 <__alt_data_end+0xff004404>
 700451c:	01000744 	movi	r4,29
 7004520:	19000626 	beq	r3,r4,700453c <__sflush_r+0x1c8>
 7004524:	01000584 	movi	r4,22
 7004528:	19000426 	beq	r3,r4,700453c <__sflush_r+0x1c8>
 700452c:	88c0030b 	ldhu	r3,12(r17)
 7004530:	18c01014 	ori	r3,r3,64
 7004534:	88c0030d 	sth	r3,12(r17)
 7004538:	003fc306 	br	7004448 <__alt_data_end+0xff004448>
 700453c:	8880030b 	ldhu	r2,12(r17)
 7004540:	88c00417 	ldw	r3,16(r17)
 7004544:	88000115 	stw	zero,4(r17)
 7004548:	10bdffcc 	andi	r2,r2,63487
 700454c:	8880030d 	sth	r2,12(r17)
 7004550:	88c00015 	stw	r3,0(r17)
 7004554:	003fb306 	br	7004424 <__alt_data_end+0xff004424>
 7004558:	98800017 	ldw	r2,0(r19)
 700455c:	103fea26 	beq	r2,zero,7004508 <__alt_data_end+0xff004508>
 7004560:	00c00744 	movi	r3,29
 7004564:	10c00226 	beq	r2,r3,7004570 <__sflush_r+0x1fc>
 7004568:	00c00584 	movi	r3,22
 700456c:	10c0031e 	bne	r2,r3,700457c <__sflush_r+0x208>
 7004570:	9c000015 	stw	r16,0(r19)
 7004574:	0005883a 	mov	r2,zero
 7004578:	003fb306 	br	7004448 <__alt_data_end+0xff004448>
 700457c:	88c0030b 	ldhu	r3,12(r17)
 7004580:	3005883a 	mov	r2,r6
 7004584:	18c01014 	ori	r3,r3,64
 7004588:	88c0030d 	sth	r3,12(r17)
 700458c:	003fae06 	br	7004448 <__alt_data_end+0xff004448>

07004590 <_fflush_r>:
 7004590:	defffd04 	addi	sp,sp,-12
 7004594:	dc000115 	stw	r16,4(sp)
 7004598:	dfc00215 	stw	ra,8(sp)
 700459c:	2021883a 	mov	r16,r4
 70045a0:	20000226 	beq	r4,zero,70045ac <_fflush_r+0x1c>
 70045a4:	20800e17 	ldw	r2,56(r4)
 70045a8:	10000c26 	beq	r2,zero,70045dc <_fflush_r+0x4c>
 70045ac:	2880030f 	ldh	r2,12(r5)
 70045b0:	1000051e 	bne	r2,zero,70045c8 <_fflush_r+0x38>
 70045b4:	0005883a 	mov	r2,zero
 70045b8:	dfc00217 	ldw	ra,8(sp)
 70045bc:	dc000117 	ldw	r16,4(sp)
 70045c0:	dec00304 	addi	sp,sp,12
 70045c4:	f800283a 	ret
 70045c8:	8009883a 	mov	r4,r16
 70045cc:	dfc00217 	ldw	ra,8(sp)
 70045d0:	dc000117 	ldw	r16,4(sp)
 70045d4:	dec00304 	addi	sp,sp,12
 70045d8:	70043741 	jmpi	7004374 <__sflush_r>
 70045dc:	d9400015 	stw	r5,0(sp)
 70045e0:	700496c0 	call	700496c <__sinit>
 70045e4:	d9400017 	ldw	r5,0(sp)
 70045e8:	003ff006 	br	70045ac <__alt_data_end+0xff0045ac>

070045ec <fflush>:
 70045ec:	20000526 	beq	r4,zero,7004604 <fflush+0x18>
 70045f0:	0081c074 	movhi	r2,1793
 70045f4:	10864a04 	addi	r2,r2,6440
 70045f8:	200b883a 	mov	r5,r4
 70045fc:	11000017 	ldw	r4,0(r2)
 7004600:	70045901 	jmpi	7004590 <_fflush_r>
 7004604:	0081c074 	movhi	r2,1793
 7004608:	10864904 	addi	r2,r2,6436
 700460c:	11000017 	ldw	r4,0(r2)
 7004610:	0141c034 	movhi	r5,1792
 7004614:	29516404 	addi	r5,r5,17808
 7004618:	70053701 	jmpi	7005370 <_fwalk_reent>

0700461c <__fp_unlock>:
 700461c:	0005883a 	mov	r2,zero
 7004620:	f800283a 	ret

07004624 <_cleanup_r>:
 7004624:	0141c074 	movhi	r5,1793
 7004628:	29659204 	addi	r5,r5,-27064
 700462c:	70053701 	jmpi	7005370 <_fwalk_reent>

07004630 <__sinit.part.1>:
 7004630:	defff704 	addi	sp,sp,-36
 7004634:	00c1c034 	movhi	r3,1792
 7004638:	dfc00815 	stw	ra,32(sp)
 700463c:	ddc00715 	stw	r23,28(sp)
 7004640:	dd800615 	stw	r22,24(sp)
 7004644:	dd400515 	stw	r21,20(sp)
 7004648:	dd000415 	stw	r20,16(sp)
 700464c:	dcc00315 	stw	r19,12(sp)
 7004650:	dc800215 	stw	r18,8(sp)
 7004654:	dc400115 	stw	r17,4(sp)
 7004658:	dc000015 	stw	r16,0(sp)
 700465c:	18d18904 	addi	r3,r3,17956
 7004660:	24000117 	ldw	r16,4(r4)
 7004664:	20c00f15 	stw	r3,60(r4)
 7004668:	2080bb04 	addi	r2,r4,748
 700466c:	00c000c4 	movi	r3,3
 7004670:	20c0b915 	stw	r3,740(r4)
 7004674:	2080ba15 	stw	r2,744(r4)
 7004678:	2000b815 	stw	zero,736(r4)
 700467c:	05c00204 	movi	r23,8
 7004680:	00800104 	movi	r2,4
 7004684:	2025883a 	mov	r18,r4
 7004688:	b80d883a 	mov	r6,r23
 700468c:	81001704 	addi	r4,r16,92
 7004690:	000b883a 	mov	r5,zero
 7004694:	80000015 	stw	zero,0(r16)
 7004698:	80000115 	stw	zero,4(r16)
 700469c:	80000215 	stw	zero,8(r16)
 70046a0:	8080030d 	sth	r2,12(r16)
 70046a4:	80001915 	stw	zero,100(r16)
 70046a8:	8000038d 	sth	zero,14(r16)
 70046ac:	80000415 	stw	zero,16(r16)
 70046b0:	80000515 	stw	zero,20(r16)
 70046b4:	80000615 	stw	zero,24(r16)
 70046b8:	70062600 	call	7006260 <memset>
 70046bc:	0581c034 	movhi	r22,1792
 70046c0:	94400217 	ldw	r17,8(r18)
 70046c4:	0541c034 	movhi	r21,1792
 70046c8:	0501c034 	movhi	r20,1792
 70046cc:	04c1c034 	movhi	r19,1792
 70046d0:	b59ec604 	addi	r22,r22,31512
 70046d4:	ad5edd04 	addi	r21,r21,31604
 70046d8:	a51efc04 	addi	r20,r20,31728
 70046dc:	9cdf1304 	addi	r19,r19,31820
 70046e0:	85800815 	stw	r22,32(r16)
 70046e4:	85400915 	stw	r21,36(r16)
 70046e8:	85000a15 	stw	r20,40(r16)
 70046ec:	84c00b15 	stw	r19,44(r16)
 70046f0:	84000715 	stw	r16,28(r16)
 70046f4:	00800284 	movi	r2,10
 70046f8:	8880030d 	sth	r2,12(r17)
 70046fc:	00800044 	movi	r2,1
 7004700:	b80d883a 	mov	r6,r23
 7004704:	89001704 	addi	r4,r17,92
 7004708:	000b883a 	mov	r5,zero
 700470c:	88000015 	stw	zero,0(r17)
 7004710:	88000115 	stw	zero,4(r17)
 7004714:	88000215 	stw	zero,8(r17)
 7004718:	88001915 	stw	zero,100(r17)
 700471c:	8880038d 	sth	r2,14(r17)
 7004720:	88000415 	stw	zero,16(r17)
 7004724:	88000515 	stw	zero,20(r17)
 7004728:	88000615 	stw	zero,24(r17)
 700472c:	70062600 	call	7006260 <memset>
 7004730:	94000317 	ldw	r16,12(r18)
 7004734:	00800484 	movi	r2,18
 7004738:	8c400715 	stw	r17,28(r17)
 700473c:	8d800815 	stw	r22,32(r17)
 7004740:	8d400915 	stw	r21,36(r17)
 7004744:	8d000a15 	stw	r20,40(r17)
 7004748:	8cc00b15 	stw	r19,44(r17)
 700474c:	8080030d 	sth	r2,12(r16)
 7004750:	00800084 	movi	r2,2
 7004754:	80000015 	stw	zero,0(r16)
 7004758:	80000115 	stw	zero,4(r16)
 700475c:	80000215 	stw	zero,8(r16)
 7004760:	80001915 	stw	zero,100(r16)
 7004764:	8080038d 	sth	r2,14(r16)
 7004768:	80000415 	stw	zero,16(r16)
 700476c:	80000515 	stw	zero,20(r16)
 7004770:	80000615 	stw	zero,24(r16)
 7004774:	b80d883a 	mov	r6,r23
 7004778:	000b883a 	mov	r5,zero
 700477c:	81001704 	addi	r4,r16,92
 7004780:	70062600 	call	7006260 <memset>
 7004784:	00800044 	movi	r2,1
 7004788:	84000715 	stw	r16,28(r16)
 700478c:	85800815 	stw	r22,32(r16)
 7004790:	85400915 	stw	r21,36(r16)
 7004794:	85000a15 	stw	r20,40(r16)
 7004798:	84c00b15 	stw	r19,44(r16)
 700479c:	90800e15 	stw	r2,56(r18)
 70047a0:	dfc00817 	ldw	ra,32(sp)
 70047a4:	ddc00717 	ldw	r23,28(sp)
 70047a8:	dd800617 	ldw	r22,24(sp)
 70047ac:	dd400517 	ldw	r21,20(sp)
 70047b0:	dd000417 	ldw	r20,16(sp)
 70047b4:	dcc00317 	ldw	r19,12(sp)
 70047b8:	dc800217 	ldw	r18,8(sp)
 70047bc:	dc400117 	ldw	r17,4(sp)
 70047c0:	dc000017 	ldw	r16,0(sp)
 70047c4:	dec00904 	addi	sp,sp,36
 70047c8:	f800283a 	ret

070047cc <__fp_lock>:
 70047cc:	0005883a 	mov	r2,zero
 70047d0:	f800283a 	ret

070047d4 <__sfmoreglue>:
 70047d4:	defffc04 	addi	sp,sp,-16
 70047d8:	dc400115 	stw	r17,4(sp)
 70047dc:	2c7fffc4 	addi	r17,r5,-1
 70047e0:	8c401a24 	muli	r17,r17,104
 70047e4:	dc800215 	stw	r18,8(sp)
 70047e8:	2825883a 	mov	r18,r5
 70047ec:	89401d04 	addi	r5,r17,116
 70047f0:	dc000015 	stw	r16,0(sp)
 70047f4:	dfc00315 	stw	ra,12(sp)
 70047f8:	70056cc0 	call	70056cc <_malloc_r>
 70047fc:	1021883a 	mov	r16,r2
 7004800:	10000726 	beq	r2,zero,7004820 <__sfmoreglue+0x4c>
 7004804:	11000304 	addi	r4,r2,12
 7004808:	10000015 	stw	zero,0(r2)
 700480c:	14800115 	stw	r18,4(r2)
 7004810:	11000215 	stw	r4,8(r2)
 7004814:	89801a04 	addi	r6,r17,104
 7004818:	000b883a 	mov	r5,zero
 700481c:	70062600 	call	7006260 <memset>
 7004820:	8005883a 	mov	r2,r16
 7004824:	dfc00317 	ldw	ra,12(sp)
 7004828:	dc800217 	ldw	r18,8(sp)
 700482c:	dc400117 	ldw	r17,4(sp)
 7004830:	dc000017 	ldw	r16,0(sp)
 7004834:	dec00404 	addi	sp,sp,16
 7004838:	f800283a 	ret

0700483c <__sfp>:
 700483c:	defffb04 	addi	sp,sp,-20
 7004840:	dc000015 	stw	r16,0(sp)
 7004844:	0401c074 	movhi	r16,1793
 7004848:	84064904 	addi	r16,r16,6436
 700484c:	dcc00315 	stw	r19,12(sp)
 7004850:	2027883a 	mov	r19,r4
 7004854:	81000017 	ldw	r4,0(r16)
 7004858:	dfc00415 	stw	ra,16(sp)
 700485c:	dc800215 	stw	r18,8(sp)
 7004860:	20800e17 	ldw	r2,56(r4)
 7004864:	dc400115 	stw	r17,4(sp)
 7004868:	1000021e 	bne	r2,zero,7004874 <__sfp+0x38>
 700486c:	70046300 	call	7004630 <__sinit.part.1>
 7004870:	81000017 	ldw	r4,0(r16)
 7004874:	2480b804 	addi	r18,r4,736
 7004878:	047fffc4 	movi	r17,-1
 700487c:	91000117 	ldw	r4,4(r18)
 7004880:	94000217 	ldw	r16,8(r18)
 7004884:	213fffc4 	addi	r4,r4,-1
 7004888:	20000a16 	blt	r4,zero,70048b4 <__sfp+0x78>
 700488c:	8080030f 	ldh	r2,12(r16)
 7004890:	10000c26 	beq	r2,zero,70048c4 <__sfp+0x88>
 7004894:	80c01d04 	addi	r3,r16,116
 7004898:	00000206 	br	70048a4 <__sfp+0x68>
 700489c:	18bfe60f 	ldh	r2,-104(r3)
 70048a0:	10000826 	beq	r2,zero,70048c4 <__sfp+0x88>
 70048a4:	213fffc4 	addi	r4,r4,-1
 70048a8:	1c3ffd04 	addi	r16,r3,-12
 70048ac:	18c01a04 	addi	r3,r3,104
 70048b0:	247ffa1e 	bne	r4,r17,700489c <__alt_data_end+0xff00489c>
 70048b4:	90800017 	ldw	r2,0(r18)
 70048b8:	10001d26 	beq	r2,zero,7004930 <__sfp+0xf4>
 70048bc:	1025883a 	mov	r18,r2
 70048c0:	003fee06 	br	700487c <__alt_data_end+0xff00487c>
 70048c4:	00bfffc4 	movi	r2,-1
 70048c8:	8080038d 	sth	r2,14(r16)
 70048cc:	00800044 	movi	r2,1
 70048d0:	8080030d 	sth	r2,12(r16)
 70048d4:	80001915 	stw	zero,100(r16)
 70048d8:	80000015 	stw	zero,0(r16)
 70048dc:	80000215 	stw	zero,8(r16)
 70048e0:	80000115 	stw	zero,4(r16)
 70048e4:	80000415 	stw	zero,16(r16)
 70048e8:	80000515 	stw	zero,20(r16)
 70048ec:	80000615 	stw	zero,24(r16)
 70048f0:	01800204 	movi	r6,8
 70048f4:	000b883a 	mov	r5,zero
 70048f8:	81001704 	addi	r4,r16,92
 70048fc:	70062600 	call	7006260 <memset>
 7004900:	8005883a 	mov	r2,r16
 7004904:	80000c15 	stw	zero,48(r16)
 7004908:	80000d15 	stw	zero,52(r16)
 700490c:	80001115 	stw	zero,68(r16)
 7004910:	80001215 	stw	zero,72(r16)
 7004914:	dfc00417 	ldw	ra,16(sp)
 7004918:	dcc00317 	ldw	r19,12(sp)
 700491c:	dc800217 	ldw	r18,8(sp)
 7004920:	dc400117 	ldw	r17,4(sp)
 7004924:	dc000017 	ldw	r16,0(sp)
 7004928:	dec00504 	addi	sp,sp,20
 700492c:	f800283a 	ret
 7004930:	01400104 	movi	r5,4
 7004934:	9809883a 	mov	r4,r19
 7004938:	70047d40 	call	70047d4 <__sfmoreglue>
 700493c:	90800015 	stw	r2,0(r18)
 7004940:	103fde1e 	bne	r2,zero,70048bc <__alt_data_end+0xff0048bc>
 7004944:	00800304 	movi	r2,12
 7004948:	98800015 	stw	r2,0(r19)
 700494c:	0005883a 	mov	r2,zero
 7004950:	003ff006 	br	7004914 <__alt_data_end+0xff004914>

07004954 <_cleanup>:
 7004954:	0081c074 	movhi	r2,1793
 7004958:	10864904 	addi	r2,r2,6436
 700495c:	11000017 	ldw	r4,0(r2)
 7004960:	0141c074 	movhi	r5,1793
 7004964:	29659204 	addi	r5,r5,-27064
 7004968:	70053701 	jmpi	7005370 <_fwalk_reent>

0700496c <__sinit>:
 700496c:	20800e17 	ldw	r2,56(r4)
 7004970:	10000126 	beq	r2,zero,7004978 <__sinit+0xc>
 7004974:	f800283a 	ret
 7004978:	70046301 	jmpi	7004630 <__sinit.part.1>

0700497c <__sfp_lock_acquire>:
 700497c:	f800283a 	ret

07004980 <__sfp_lock_release>:
 7004980:	f800283a 	ret

07004984 <__sinit_lock_acquire>:
 7004984:	f800283a 	ret

07004988 <__sinit_lock_release>:
 7004988:	f800283a 	ret

0700498c <__fp_lock_all>:
 700498c:	0081c074 	movhi	r2,1793
 7004990:	10864a04 	addi	r2,r2,6440
 7004994:	11000017 	ldw	r4,0(r2)
 7004998:	0141c034 	movhi	r5,1792
 700499c:	2951f304 	addi	r5,r5,18380
 70049a0:	70052ac1 	jmpi	70052ac <_fwalk>

070049a4 <__fp_unlock_all>:
 70049a4:	0081c074 	movhi	r2,1793
 70049a8:	10864a04 	addi	r2,r2,6440
 70049ac:	11000017 	ldw	r4,0(r2)
 70049b0:	0141c034 	movhi	r5,1792
 70049b4:	29518704 	addi	r5,r5,17948
 70049b8:	70052ac1 	jmpi	70052ac <_fwalk>

070049bc <_malloc_trim_r>:
 70049bc:	defffb04 	addi	sp,sp,-20
 70049c0:	dcc00315 	stw	r19,12(sp)
 70049c4:	04c1c074 	movhi	r19,1793
 70049c8:	dc800215 	stw	r18,8(sp)
 70049cc:	dc400115 	stw	r17,4(sp)
 70049d0:	dc000015 	stw	r16,0(sp)
 70049d4:	dfc00415 	stw	ra,16(sp)
 70049d8:	2821883a 	mov	r16,r5
 70049dc:	9cc0be04 	addi	r19,r19,760
 70049e0:	2025883a 	mov	r18,r4
 70049e4:	700d53c0 	call	700d53c <__malloc_lock>
 70049e8:	98800217 	ldw	r2,8(r19)
 70049ec:	14400117 	ldw	r17,4(r2)
 70049f0:	00bfff04 	movi	r2,-4
 70049f4:	88a2703a 	and	r17,r17,r2
 70049f8:	8c21c83a 	sub	r16,r17,r16
 70049fc:	8403fbc4 	addi	r16,r16,4079
 7004a00:	8020d33a 	srli	r16,r16,12
 7004a04:	0083ffc4 	movi	r2,4095
 7004a08:	843fffc4 	addi	r16,r16,-1
 7004a0c:	8020933a 	slli	r16,r16,12
 7004a10:	1400060e 	bge	r2,r16,7004a2c <_malloc_trim_r+0x70>
 7004a14:	000b883a 	mov	r5,zero
 7004a18:	9009883a 	mov	r4,r18
 7004a1c:	7007ac40 	call	7007ac4 <_sbrk_r>
 7004a20:	98c00217 	ldw	r3,8(r19)
 7004a24:	1c47883a 	add	r3,r3,r17
 7004a28:	10c00a26 	beq	r2,r3,7004a54 <_malloc_trim_r+0x98>
 7004a2c:	9009883a 	mov	r4,r18
 7004a30:	700d5600 	call	700d560 <__malloc_unlock>
 7004a34:	0005883a 	mov	r2,zero
 7004a38:	dfc00417 	ldw	ra,16(sp)
 7004a3c:	dcc00317 	ldw	r19,12(sp)
 7004a40:	dc800217 	ldw	r18,8(sp)
 7004a44:	dc400117 	ldw	r17,4(sp)
 7004a48:	dc000017 	ldw	r16,0(sp)
 7004a4c:	dec00504 	addi	sp,sp,20
 7004a50:	f800283a 	ret
 7004a54:	040bc83a 	sub	r5,zero,r16
 7004a58:	9009883a 	mov	r4,r18
 7004a5c:	7007ac40 	call	7007ac4 <_sbrk_r>
 7004a60:	00ffffc4 	movi	r3,-1
 7004a64:	10c00d26 	beq	r2,r3,7004a9c <_malloc_trim_r+0xe0>
 7004a68:	00c1c074 	movhi	r3,1793
 7004a6c:	18cd2d04 	addi	r3,r3,13492
 7004a70:	18800017 	ldw	r2,0(r3)
 7004a74:	99000217 	ldw	r4,8(r19)
 7004a78:	8c23c83a 	sub	r17,r17,r16
 7004a7c:	8c400054 	ori	r17,r17,1
 7004a80:	1421c83a 	sub	r16,r2,r16
 7004a84:	24400115 	stw	r17,4(r4)
 7004a88:	9009883a 	mov	r4,r18
 7004a8c:	1c000015 	stw	r16,0(r3)
 7004a90:	700d5600 	call	700d560 <__malloc_unlock>
 7004a94:	00800044 	movi	r2,1
 7004a98:	003fe706 	br	7004a38 <__alt_data_end+0xff004a38>
 7004a9c:	000b883a 	mov	r5,zero
 7004aa0:	9009883a 	mov	r4,r18
 7004aa4:	7007ac40 	call	7007ac4 <_sbrk_r>
 7004aa8:	99000217 	ldw	r4,8(r19)
 7004aac:	014003c4 	movi	r5,15
 7004ab0:	1107c83a 	sub	r3,r2,r4
 7004ab4:	28ffdd0e 	bge	r5,r3,7004a2c <__alt_data_end+0xff004a2c>
 7004ab8:	0141c074 	movhi	r5,1793
 7004abc:	29464c04 	addi	r5,r5,6448
 7004ac0:	29400017 	ldw	r5,0(r5)
 7004ac4:	18c00054 	ori	r3,r3,1
 7004ac8:	20c00115 	stw	r3,4(r4)
 7004acc:	00c1c074 	movhi	r3,1793
 7004ad0:	1145c83a 	sub	r2,r2,r5
 7004ad4:	18cd2d04 	addi	r3,r3,13492
 7004ad8:	18800015 	stw	r2,0(r3)
 7004adc:	003fd306 	br	7004a2c <__alt_data_end+0xff004a2c>

07004ae0 <_free_r>:
 7004ae0:	28004126 	beq	r5,zero,7004be8 <_free_r+0x108>
 7004ae4:	defffd04 	addi	sp,sp,-12
 7004ae8:	dc400115 	stw	r17,4(sp)
 7004aec:	dc000015 	stw	r16,0(sp)
 7004af0:	2023883a 	mov	r17,r4
 7004af4:	2821883a 	mov	r16,r5
 7004af8:	dfc00215 	stw	ra,8(sp)
 7004afc:	700d53c0 	call	700d53c <__malloc_lock>
 7004b00:	81ffff17 	ldw	r7,-4(r16)
 7004b04:	00bfff84 	movi	r2,-2
 7004b08:	0101c074 	movhi	r4,1793
 7004b0c:	81bffe04 	addi	r6,r16,-8
 7004b10:	3884703a 	and	r2,r7,r2
 7004b14:	2100be04 	addi	r4,r4,760
 7004b18:	308b883a 	add	r5,r6,r2
 7004b1c:	2a400117 	ldw	r9,4(r5)
 7004b20:	22000217 	ldw	r8,8(r4)
 7004b24:	00ffff04 	movi	r3,-4
 7004b28:	48c6703a 	and	r3,r9,r3
 7004b2c:	2a005726 	beq	r5,r8,7004c8c <_free_r+0x1ac>
 7004b30:	28c00115 	stw	r3,4(r5)
 7004b34:	39c0004c 	andi	r7,r7,1
 7004b38:	3800091e 	bne	r7,zero,7004b60 <_free_r+0x80>
 7004b3c:	823ffe17 	ldw	r8,-8(r16)
 7004b40:	22400204 	addi	r9,r4,8
 7004b44:	320dc83a 	sub	r6,r6,r8
 7004b48:	31c00217 	ldw	r7,8(r6)
 7004b4c:	1205883a 	add	r2,r2,r8
 7004b50:	3a406526 	beq	r7,r9,7004ce8 <_free_r+0x208>
 7004b54:	32000317 	ldw	r8,12(r6)
 7004b58:	3a000315 	stw	r8,12(r7)
 7004b5c:	41c00215 	stw	r7,8(r8)
 7004b60:	28cf883a 	add	r7,r5,r3
 7004b64:	39c00117 	ldw	r7,4(r7)
 7004b68:	39c0004c 	andi	r7,r7,1
 7004b6c:	38003a26 	beq	r7,zero,7004c58 <_free_r+0x178>
 7004b70:	10c00054 	ori	r3,r2,1
 7004b74:	30c00115 	stw	r3,4(r6)
 7004b78:	3087883a 	add	r3,r6,r2
 7004b7c:	18800015 	stw	r2,0(r3)
 7004b80:	00c07fc4 	movi	r3,511
 7004b84:	18801936 	bltu	r3,r2,7004bec <_free_r+0x10c>
 7004b88:	1004d0fa 	srli	r2,r2,3
 7004b8c:	01c00044 	movi	r7,1
 7004b90:	21400117 	ldw	r5,4(r4)
 7004b94:	10c00044 	addi	r3,r2,1
 7004b98:	18c7883a 	add	r3,r3,r3
 7004b9c:	1005d0ba 	srai	r2,r2,2
 7004ba0:	18c7883a 	add	r3,r3,r3
 7004ba4:	18c7883a 	add	r3,r3,r3
 7004ba8:	1907883a 	add	r3,r3,r4
 7004bac:	3884983a 	sll	r2,r7,r2
 7004bb0:	19c00017 	ldw	r7,0(r3)
 7004bb4:	1a3ffe04 	addi	r8,r3,-8
 7004bb8:	1144b03a 	or	r2,r2,r5
 7004bbc:	32000315 	stw	r8,12(r6)
 7004bc0:	31c00215 	stw	r7,8(r6)
 7004bc4:	20800115 	stw	r2,4(r4)
 7004bc8:	19800015 	stw	r6,0(r3)
 7004bcc:	39800315 	stw	r6,12(r7)
 7004bd0:	8809883a 	mov	r4,r17
 7004bd4:	dfc00217 	ldw	ra,8(sp)
 7004bd8:	dc400117 	ldw	r17,4(sp)
 7004bdc:	dc000017 	ldw	r16,0(sp)
 7004be0:	dec00304 	addi	sp,sp,12
 7004be4:	700d5601 	jmpi	700d560 <__malloc_unlock>
 7004be8:	f800283a 	ret
 7004bec:	100ad27a 	srli	r5,r2,9
 7004bf0:	00c00104 	movi	r3,4
 7004bf4:	19404a36 	bltu	r3,r5,7004d20 <_free_r+0x240>
 7004bf8:	100ad1ba 	srli	r5,r2,6
 7004bfc:	28c00e44 	addi	r3,r5,57
 7004c00:	18c7883a 	add	r3,r3,r3
 7004c04:	29400e04 	addi	r5,r5,56
 7004c08:	18c7883a 	add	r3,r3,r3
 7004c0c:	18c7883a 	add	r3,r3,r3
 7004c10:	1909883a 	add	r4,r3,r4
 7004c14:	20c00017 	ldw	r3,0(r4)
 7004c18:	01c1c074 	movhi	r7,1793
 7004c1c:	213ffe04 	addi	r4,r4,-8
 7004c20:	39c0be04 	addi	r7,r7,760
 7004c24:	20c04426 	beq	r4,r3,7004d38 <_free_r+0x258>
 7004c28:	01ffff04 	movi	r7,-4
 7004c2c:	19400117 	ldw	r5,4(r3)
 7004c30:	29ca703a 	and	r5,r5,r7
 7004c34:	1140022e 	bgeu	r2,r5,7004c40 <_free_r+0x160>
 7004c38:	18c00217 	ldw	r3,8(r3)
 7004c3c:	20fffb1e 	bne	r4,r3,7004c2c <__alt_data_end+0xff004c2c>
 7004c40:	19000317 	ldw	r4,12(r3)
 7004c44:	31000315 	stw	r4,12(r6)
 7004c48:	30c00215 	stw	r3,8(r6)
 7004c4c:	21800215 	stw	r6,8(r4)
 7004c50:	19800315 	stw	r6,12(r3)
 7004c54:	003fde06 	br	7004bd0 <__alt_data_end+0xff004bd0>
 7004c58:	29c00217 	ldw	r7,8(r5)
 7004c5c:	10c5883a 	add	r2,r2,r3
 7004c60:	00c1c074 	movhi	r3,1793
 7004c64:	18c0c004 	addi	r3,r3,768
 7004c68:	38c03b26 	beq	r7,r3,7004d58 <_free_r+0x278>
 7004c6c:	2a000317 	ldw	r8,12(r5)
 7004c70:	11400054 	ori	r5,r2,1
 7004c74:	3087883a 	add	r3,r6,r2
 7004c78:	3a000315 	stw	r8,12(r7)
 7004c7c:	41c00215 	stw	r7,8(r8)
 7004c80:	31400115 	stw	r5,4(r6)
 7004c84:	18800015 	stw	r2,0(r3)
 7004c88:	003fbd06 	br	7004b80 <__alt_data_end+0xff004b80>
 7004c8c:	39c0004c 	andi	r7,r7,1
 7004c90:	10c5883a 	add	r2,r2,r3
 7004c94:	3800071e 	bne	r7,zero,7004cb4 <_free_r+0x1d4>
 7004c98:	81fffe17 	ldw	r7,-8(r16)
 7004c9c:	31cdc83a 	sub	r6,r6,r7
 7004ca0:	30c00317 	ldw	r3,12(r6)
 7004ca4:	31400217 	ldw	r5,8(r6)
 7004ca8:	11c5883a 	add	r2,r2,r7
 7004cac:	28c00315 	stw	r3,12(r5)
 7004cb0:	19400215 	stw	r5,8(r3)
 7004cb4:	10c00054 	ori	r3,r2,1
 7004cb8:	30c00115 	stw	r3,4(r6)
 7004cbc:	00c1c074 	movhi	r3,1793
 7004cc0:	18c64d04 	addi	r3,r3,6452
 7004cc4:	18c00017 	ldw	r3,0(r3)
 7004cc8:	21800215 	stw	r6,8(r4)
 7004ccc:	10ffc036 	bltu	r2,r3,7004bd0 <__alt_data_end+0xff004bd0>
 7004cd0:	0081c074 	movhi	r2,1793
 7004cd4:	108d2404 	addi	r2,r2,13456
 7004cd8:	11400017 	ldw	r5,0(r2)
 7004cdc:	8809883a 	mov	r4,r17
 7004ce0:	70049bc0 	call	70049bc <_malloc_trim_r>
 7004ce4:	003fba06 	br	7004bd0 <__alt_data_end+0xff004bd0>
 7004ce8:	28c9883a 	add	r4,r5,r3
 7004cec:	21000117 	ldw	r4,4(r4)
 7004cf0:	2100004c 	andi	r4,r4,1
 7004cf4:	2000391e 	bne	r4,zero,7004ddc <_free_r+0x2fc>
 7004cf8:	29c00217 	ldw	r7,8(r5)
 7004cfc:	29000317 	ldw	r4,12(r5)
 7004d00:	1885883a 	add	r2,r3,r2
 7004d04:	10c00054 	ori	r3,r2,1
 7004d08:	39000315 	stw	r4,12(r7)
 7004d0c:	21c00215 	stw	r7,8(r4)
 7004d10:	30c00115 	stw	r3,4(r6)
 7004d14:	308d883a 	add	r6,r6,r2
 7004d18:	30800015 	stw	r2,0(r6)
 7004d1c:	003fac06 	br	7004bd0 <__alt_data_end+0xff004bd0>
 7004d20:	00c00504 	movi	r3,20
 7004d24:	19401536 	bltu	r3,r5,7004d7c <_free_r+0x29c>
 7004d28:	28c01704 	addi	r3,r5,92
 7004d2c:	18c7883a 	add	r3,r3,r3
 7004d30:	294016c4 	addi	r5,r5,91
 7004d34:	003fb406 	br	7004c08 <__alt_data_end+0xff004c08>
 7004d38:	280bd0ba 	srai	r5,r5,2
 7004d3c:	00c00044 	movi	r3,1
 7004d40:	38800117 	ldw	r2,4(r7)
 7004d44:	194a983a 	sll	r5,r3,r5
 7004d48:	2007883a 	mov	r3,r4
 7004d4c:	2884b03a 	or	r2,r5,r2
 7004d50:	38800115 	stw	r2,4(r7)
 7004d54:	003fbb06 	br	7004c44 <__alt_data_end+0xff004c44>
 7004d58:	21800515 	stw	r6,20(r4)
 7004d5c:	21800415 	stw	r6,16(r4)
 7004d60:	10c00054 	ori	r3,r2,1
 7004d64:	31c00315 	stw	r7,12(r6)
 7004d68:	31c00215 	stw	r7,8(r6)
 7004d6c:	30c00115 	stw	r3,4(r6)
 7004d70:	308d883a 	add	r6,r6,r2
 7004d74:	30800015 	stw	r2,0(r6)
 7004d78:	003f9506 	br	7004bd0 <__alt_data_end+0xff004bd0>
 7004d7c:	00c01504 	movi	r3,84
 7004d80:	19400536 	bltu	r3,r5,7004d98 <_free_r+0x2b8>
 7004d84:	100ad33a 	srli	r5,r2,12
 7004d88:	28c01bc4 	addi	r3,r5,111
 7004d8c:	18c7883a 	add	r3,r3,r3
 7004d90:	29401b84 	addi	r5,r5,110
 7004d94:	003f9c06 	br	7004c08 <__alt_data_end+0xff004c08>
 7004d98:	00c05504 	movi	r3,340
 7004d9c:	19400536 	bltu	r3,r5,7004db4 <_free_r+0x2d4>
 7004da0:	100ad3fa 	srli	r5,r2,15
 7004da4:	28c01e04 	addi	r3,r5,120
 7004da8:	18c7883a 	add	r3,r3,r3
 7004dac:	29401dc4 	addi	r5,r5,119
 7004db0:	003f9506 	br	7004c08 <__alt_data_end+0xff004c08>
 7004db4:	00c15504 	movi	r3,1364
 7004db8:	19400536 	bltu	r3,r5,7004dd0 <_free_r+0x2f0>
 7004dbc:	100ad4ba 	srli	r5,r2,18
 7004dc0:	28c01f44 	addi	r3,r5,125
 7004dc4:	18c7883a 	add	r3,r3,r3
 7004dc8:	29401f04 	addi	r5,r5,124
 7004dcc:	003f8e06 	br	7004c08 <__alt_data_end+0xff004c08>
 7004dd0:	00c03f84 	movi	r3,254
 7004dd4:	01401f84 	movi	r5,126
 7004dd8:	003f8b06 	br	7004c08 <__alt_data_end+0xff004c08>
 7004ddc:	10c00054 	ori	r3,r2,1
 7004de0:	30c00115 	stw	r3,4(r6)
 7004de4:	308d883a 	add	r6,r6,r2
 7004de8:	30800015 	stw	r2,0(r6)
 7004dec:	003f7806 	br	7004bd0 <__alt_data_end+0xff004bd0>

07004df0 <__sfvwrite_r>:
 7004df0:	30800217 	ldw	r2,8(r6)
 7004df4:	10006726 	beq	r2,zero,7004f94 <__sfvwrite_r+0x1a4>
 7004df8:	28c0030b 	ldhu	r3,12(r5)
 7004dfc:	defff404 	addi	sp,sp,-48
 7004e00:	dd400715 	stw	r21,28(sp)
 7004e04:	dd000615 	stw	r20,24(sp)
 7004e08:	dc000215 	stw	r16,8(sp)
 7004e0c:	dfc00b15 	stw	ra,44(sp)
 7004e10:	df000a15 	stw	fp,40(sp)
 7004e14:	ddc00915 	stw	r23,36(sp)
 7004e18:	dd800815 	stw	r22,32(sp)
 7004e1c:	dcc00515 	stw	r19,20(sp)
 7004e20:	dc800415 	stw	r18,16(sp)
 7004e24:	dc400315 	stw	r17,12(sp)
 7004e28:	1880020c 	andi	r2,r3,8
 7004e2c:	2821883a 	mov	r16,r5
 7004e30:	202b883a 	mov	r21,r4
 7004e34:	3029883a 	mov	r20,r6
 7004e38:	10002726 	beq	r2,zero,7004ed8 <__sfvwrite_r+0xe8>
 7004e3c:	28800417 	ldw	r2,16(r5)
 7004e40:	10002526 	beq	r2,zero,7004ed8 <__sfvwrite_r+0xe8>
 7004e44:	1880008c 	andi	r2,r3,2
 7004e48:	a4400017 	ldw	r17,0(r20)
 7004e4c:	10002a26 	beq	r2,zero,7004ef8 <__sfvwrite_r+0x108>
 7004e50:	05a00034 	movhi	r22,32768
 7004e54:	0027883a 	mov	r19,zero
 7004e58:	0025883a 	mov	r18,zero
 7004e5c:	b5bf0004 	addi	r22,r22,-1024
 7004e60:	980d883a 	mov	r6,r19
 7004e64:	a809883a 	mov	r4,r21
 7004e68:	90004626 	beq	r18,zero,7004f84 <__sfvwrite_r+0x194>
 7004e6c:	900f883a 	mov	r7,r18
 7004e70:	b480022e 	bgeu	r22,r18,7004e7c <__sfvwrite_r+0x8c>
 7004e74:	01e00034 	movhi	r7,32768
 7004e78:	39ff0004 	addi	r7,r7,-1024
 7004e7c:	80800917 	ldw	r2,36(r16)
 7004e80:	81400717 	ldw	r5,28(r16)
 7004e84:	103ee83a 	callr	r2
 7004e88:	0080570e 	bge	zero,r2,7004fe8 <__sfvwrite_r+0x1f8>
 7004e8c:	a0c00217 	ldw	r3,8(r20)
 7004e90:	98a7883a 	add	r19,r19,r2
 7004e94:	90a5c83a 	sub	r18,r18,r2
 7004e98:	1885c83a 	sub	r2,r3,r2
 7004e9c:	a0800215 	stw	r2,8(r20)
 7004ea0:	103fef1e 	bne	r2,zero,7004e60 <__alt_data_end+0xff004e60>
 7004ea4:	0005883a 	mov	r2,zero
 7004ea8:	dfc00b17 	ldw	ra,44(sp)
 7004eac:	df000a17 	ldw	fp,40(sp)
 7004eb0:	ddc00917 	ldw	r23,36(sp)
 7004eb4:	dd800817 	ldw	r22,32(sp)
 7004eb8:	dd400717 	ldw	r21,28(sp)
 7004ebc:	dd000617 	ldw	r20,24(sp)
 7004ec0:	dcc00517 	ldw	r19,20(sp)
 7004ec4:	dc800417 	ldw	r18,16(sp)
 7004ec8:	dc400317 	ldw	r17,12(sp)
 7004ecc:	dc000217 	ldw	r16,8(sp)
 7004ed0:	dec00c04 	addi	sp,sp,48
 7004ed4:	f800283a 	ret
 7004ed8:	800b883a 	mov	r5,r16
 7004edc:	a809883a 	mov	r4,r21
 7004ee0:	70029980 	call	7002998 <__swsetup_r>
 7004ee4:	1000eb1e 	bne	r2,zero,7005294 <__sfvwrite_r+0x4a4>
 7004ee8:	80c0030b 	ldhu	r3,12(r16)
 7004eec:	a4400017 	ldw	r17,0(r20)
 7004ef0:	1880008c 	andi	r2,r3,2
 7004ef4:	103fd61e 	bne	r2,zero,7004e50 <__alt_data_end+0xff004e50>
 7004ef8:	1880004c 	andi	r2,r3,1
 7004efc:	10003f1e 	bne	r2,zero,7004ffc <__sfvwrite_r+0x20c>
 7004f00:	0039883a 	mov	fp,zero
 7004f04:	0025883a 	mov	r18,zero
 7004f08:	90001a26 	beq	r18,zero,7004f74 <__sfvwrite_r+0x184>
 7004f0c:	1880800c 	andi	r2,r3,512
 7004f10:	84c00217 	ldw	r19,8(r16)
 7004f14:	10002126 	beq	r2,zero,7004f9c <__sfvwrite_r+0x1ac>
 7004f18:	982f883a 	mov	r23,r19
 7004f1c:	94c09336 	bltu	r18,r19,700516c <__sfvwrite_r+0x37c>
 7004f20:	1881200c 	andi	r2,r3,1152
 7004f24:	10009e1e 	bne	r2,zero,70051a0 <__sfvwrite_r+0x3b0>
 7004f28:	81000017 	ldw	r4,0(r16)
 7004f2c:	b80d883a 	mov	r6,r23
 7004f30:	e00b883a 	mov	r5,fp
 7004f34:	70061040 	call	7006104 <memmove>
 7004f38:	80c00217 	ldw	r3,8(r16)
 7004f3c:	81000017 	ldw	r4,0(r16)
 7004f40:	9005883a 	mov	r2,r18
 7004f44:	1ce7c83a 	sub	r19,r3,r19
 7004f48:	25cf883a 	add	r7,r4,r23
 7004f4c:	84c00215 	stw	r19,8(r16)
 7004f50:	81c00015 	stw	r7,0(r16)
 7004f54:	a0c00217 	ldw	r3,8(r20)
 7004f58:	e0b9883a 	add	fp,fp,r2
 7004f5c:	90a5c83a 	sub	r18,r18,r2
 7004f60:	18a7c83a 	sub	r19,r3,r2
 7004f64:	a4c00215 	stw	r19,8(r20)
 7004f68:	983fce26 	beq	r19,zero,7004ea4 <__alt_data_end+0xff004ea4>
 7004f6c:	80c0030b 	ldhu	r3,12(r16)
 7004f70:	903fe61e 	bne	r18,zero,7004f0c <__alt_data_end+0xff004f0c>
 7004f74:	8f000017 	ldw	fp,0(r17)
 7004f78:	8c800117 	ldw	r18,4(r17)
 7004f7c:	8c400204 	addi	r17,r17,8
 7004f80:	003fe106 	br	7004f08 <__alt_data_end+0xff004f08>
 7004f84:	8cc00017 	ldw	r19,0(r17)
 7004f88:	8c800117 	ldw	r18,4(r17)
 7004f8c:	8c400204 	addi	r17,r17,8
 7004f90:	003fb306 	br	7004e60 <__alt_data_end+0xff004e60>
 7004f94:	0005883a 	mov	r2,zero
 7004f98:	f800283a 	ret
 7004f9c:	81000017 	ldw	r4,0(r16)
 7004fa0:	80800417 	ldw	r2,16(r16)
 7004fa4:	11005736 	bltu	r2,r4,7005104 <__sfvwrite_r+0x314>
 7004fa8:	85c00517 	ldw	r23,20(r16)
 7004fac:	95c05536 	bltu	r18,r23,7005104 <__sfvwrite_r+0x314>
 7004fb0:	00a00034 	movhi	r2,32768
 7004fb4:	10bfffc4 	addi	r2,r2,-1
 7004fb8:	9009883a 	mov	r4,r18
 7004fbc:	1480012e 	bgeu	r2,r18,7004fc4 <__sfvwrite_r+0x1d4>
 7004fc0:	1009883a 	mov	r4,r2
 7004fc4:	b80b883a 	mov	r5,r23
 7004fc8:	700a75c0 	call	700a75c <__divsi3>
 7004fcc:	15cf383a 	mul	r7,r2,r23
 7004fd0:	81400717 	ldw	r5,28(r16)
 7004fd4:	80800917 	ldw	r2,36(r16)
 7004fd8:	e00d883a 	mov	r6,fp
 7004fdc:	a809883a 	mov	r4,r21
 7004fe0:	103ee83a 	callr	r2
 7004fe4:	00bfdb16 	blt	zero,r2,7004f54 <__alt_data_end+0xff004f54>
 7004fe8:	8080030b 	ldhu	r2,12(r16)
 7004fec:	10801014 	ori	r2,r2,64
 7004ff0:	8080030d 	sth	r2,12(r16)
 7004ff4:	00bfffc4 	movi	r2,-1
 7004ff8:	003fab06 	br	7004ea8 <__alt_data_end+0xff004ea8>
 7004ffc:	0027883a 	mov	r19,zero
 7005000:	0011883a 	mov	r8,zero
 7005004:	0039883a 	mov	fp,zero
 7005008:	0025883a 	mov	r18,zero
 700500c:	90001f26 	beq	r18,zero,700508c <__sfvwrite_r+0x29c>
 7005010:	40005a26 	beq	r8,zero,700517c <__sfvwrite_r+0x38c>
 7005014:	982d883a 	mov	r22,r19
 7005018:	94c0012e 	bgeu	r18,r19,7005020 <__sfvwrite_r+0x230>
 700501c:	902d883a 	mov	r22,r18
 7005020:	81000017 	ldw	r4,0(r16)
 7005024:	80800417 	ldw	r2,16(r16)
 7005028:	b02f883a 	mov	r23,r22
 700502c:	81c00517 	ldw	r7,20(r16)
 7005030:	1100032e 	bgeu	r2,r4,7005040 <__sfvwrite_r+0x250>
 7005034:	80c00217 	ldw	r3,8(r16)
 7005038:	38c7883a 	add	r3,r7,r3
 700503c:	1d801816 	blt	r3,r22,70050a0 <__sfvwrite_r+0x2b0>
 7005040:	b1c03e16 	blt	r22,r7,700513c <__sfvwrite_r+0x34c>
 7005044:	80800917 	ldw	r2,36(r16)
 7005048:	81400717 	ldw	r5,28(r16)
 700504c:	e00d883a 	mov	r6,fp
 7005050:	da000115 	stw	r8,4(sp)
 7005054:	a809883a 	mov	r4,r21
 7005058:	103ee83a 	callr	r2
 700505c:	102f883a 	mov	r23,r2
 7005060:	da000117 	ldw	r8,4(sp)
 7005064:	00bfe00e 	bge	zero,r2,7004fe8 <__alt_data_end+0xff004fe8>
 7005068:	9de7c83a 	sub	r19,r19,r23
 700506c:	98001f26 	beq	r19,zero,70050ec <__sfvwrite_r+0x2fc>
 7005070:	a0800217 	ldw	r2,8(r20)
 7005074:	e5f9883a 	add	fp,fp,r23
 7005078:	95e5c83a 	sub	r18,r18,r23
 700507c:	15efc83a 	sub	r23,r2,r23
 7005080:	a5c00215 	stw	r23,8(r20)
 7005084:	b83f8726 	beq	r23,zero,7004ea4 <__alt_data_end+0xff004ea4>
 7005088:	903fe11e 	bne	r18,zero,7005010 <__alt_data_end+0xff005010>
 700508c:	8f000017 	ldw	fp,0(r17)
 7005090:	8c800117 	ldw	r18,4(r17)
 7005094:	0011883a 	mov	r8,zero
 7005098:	8c400204 	addi	r17,r17,8
 700509c:	003fdb06 	br	700500c <__alt_data_end+0xff00500c>
 70050a0:	180d883a 	mov	r6,r3
 70050a4:	e00b883a 	mov	r5,fp
 70050a8:	da000115 	stw	r8,4(sp)
 70050ac:	d8c00015 	stw	r3,0(sp)
 70050b0:	70061040 	call	7006104 <memmove>
 70050b4:	d8c00017 	ldw	r3,0(sp)
 70050b8:	80800017 	ldw	r2,0(r16)
 70050bc:	800b883a 	mov	r5,r16
 70050c0:	a809883a 	mov	r4,r21
 70050c4:	10c5883a 	add	r2,r2,r3
 70050c8:	80800015 	stw	r2,0(r16)
 70050cc:	d8c00015 	stw	r3,0(sp)
 70050d0:	70045900 	call	7004590 <_fflush_r>
 70050d4:	d8c00017 	ldw	r3,0(sp)
 70050d8:	da000117 	ldw	r8,4(sp)
 70050dc:	103fc21e 	bne	r2,zero,7004fe8 <__alt_data_end+0xff004fe8>
 70050e0:	182f883a 	mov	r23,r3
 70050e4:	9de7c83a 	sub	r19,r19,r23
 70050e8:	983fe11e 	bne	r19,zero,7005070 <__alt_data_end+0xff005070>
 70050ec:	800b883a 	mov	r5,r16
 70050f0:	a809883a 	mov	r4,r21
 70050f4:	70045900 	call	7004590 <_fflush_r>
 70050f8:	103fbb1e 	bne	r2,zero,7004fe8 <__alt_data_end+0xff004fe8>
 70050fc:	0011883a 	mov	r8,zero
 7005100:	003fdb06 	br	7005070 <__alt_data_end+0xff005070>
 7005104:	94c0012e 	bgeu	r18,r19,700510c <__sfvwrite_r+0x31c>
 7005108:	9027883a 	mov	r19,r18
 700510c:	980d883a 	mov	r6,r19
 7005110:	e00b883a 	mov	r5,fp
 7005114:	70061040 	call	7006104 <memmove>
 7005118:	80800217 	ldw	r2,8(r16)
 700511c:	80c00017 	ldw	r3,0(r16)
 7005120:	14c5c83a 	sub	r2,r2,r19
 7005124:	1cc7883a 	add	r3,r3,r19
 7005128:	80800215 	stw	r2,8(r16)
 700512c:	80c00015 	stw	r3,0(r16)
 7005130:	10004326 	beq	r2,zero,7005240 <__sfvwrite_r+0x450>
 7005134:	9805883a 	mov	r2,r19
 7005138:	003f8606 	br	7004f54 <__alt_data_end+0xff004f54>
 700513c:	b00d883a 	mov	r6,r22
 7005140:	e00b883a 	mov	r5,fp
 7005144:	da000115 	stw	r8,4(sp)
 7005148:	70061040 	call	7006104 <memmove>
 700514c:	80800217 	ldw	r2,8(r16)
 7005150:	80c00017 	ldw	r3,0(r16)
 7005154:	da000117 	ldw	r8,4(sp)
 7005158:	1585c83a 	sub	r2,r2,r22
 700515c:	1dad883a 	add	r22,r3,r22
 7005160:	80800215 	stw	r2,8(r16)
 7005164:	85800015 	stw	r22,0(r16)
 7005168:	003fbf06 	br	7005068 <__alt_data_end+0xff005068>
 700516c:	81000017 	ldw	r4,0(r16)
 7005170:	9027883a 	mov	r19,r18
 7005174:	902f883a 	mov	r23,r18
 7005178:	003f6c06 	br	7004f2c <__alt_data_end+0xff004f2c>
 700517c:	900d883a 	mov	r6,r18
 7005180:	01400284 	movi	r5,10
 7005184:	e009883a 	mov	r4,fp
 7005188:	7005ed80 	call	7005ed8 <memchr>
 700518c:	10003e26 	beq	r2,zero,7005288 <__sfvwrite_r+0x498>
 7005190:	10800044 	addi	r2,r2,1
 7005194:	1727c83a 	sub	r19,r2,fp
 7005198:	02000044 	movi	r8,1
 700519c:	003f9d06 	br	7005014 <__alt_data_end+0xff005014>
 70051a0:	80800517 	ldw	r2,20(r16)
 70051a4:	81400417 	ldw	r5,16(r16)
 70051a8:	81c00017 	ldw	r7,0(r16)
 70051ac:	10a7883a 	add	r19,r2,r2
 70051b0:	9885883a 	add	r2,r19,r2
 70051b4:	1026d7fa 	srli	r19,r2,31
 70051b8:	396dc83a 	sub	r22,r7,r5
 70051bc:	b1000044 	addi	r4,r22,1
 70051c0:	9885883a 	add	r2,r19,r2
 70051c4:	1027d07a 	srai	r19,r2,1
 70051c8:	2485883a 	add	r2,r4,r18
 70051cc:	980d883a 	mov	r6,r19
 70051d0:	9880022e 	bgeu	r19,r2,70051dc <__sfvwrite_r+0x3ec>
 70051d4:	1027883a 	mov	r19,r2
 70051d8:	100d883a 	mov	r6,r2
 70051dc:	18c1000c 	andi	r3,r3,1024
 70051e0:	18001c26 	beq	r3,zero,7005254 <__sfvwrite_r+0x464>
 70051e4:	300b883a 	mov	r5,r6
 70051e8:	a809883a 	mov	r4,r21
 70051ec:	70056cc0 	call	70056cc <_malloc_r>
 70051f0:	102f883a 	mov	r23,r2
 70051f4:	10002926 	beq	r2,zero,700529c <__sfvwrite_r+0x4ac>
 70051f8:	81400417 	ldw	r5,16(r16)
 70051fc:	b00d883a 	mov	r6,r22
 7005200:	1009883a 	mov	r4,r2
 7005204:	7005fbc0 	call	7005fbc <memcpy>
 7005208:	8080030b 	ldhu	r2,12(r16)
 700520c:	00fedfc4 	movi	r3,-1153
 7005210:	10c4703a 	and	r2,r2,r3
 7005214:	10802014 	ori	r2,r2,128
 7005218:	8080030d 	sth	r2,12(r16)
 700521c:	bd89883a 	add	r4,r23,r22
 7005220:	9d8fc83a 	sub	r7,r19,r22
 7005224:	85c00415 	stw	r23,16(r16)
 7005228:	84c00515 	stw	r19,20(r16)
 700522c:	81000015 	stw	r4,0(r16)
 7005230:	9027883a 	mov	r19,r18
 7005234:	81c00215 	stw	r7,8(r16)
 7005238:	902f883a 	mov	r23,r18
 700523c:	003f3b06 	br	7004f2c <__alt_data_end+0xff004f2c>
 7005240:	800b883a 	mov	r5,r16
 7005244:	a809883a 	mov	r4,r21
 7005248:	70045900 	call	7004590 <_fflush_r>
 700524c:	103fb926 	beq	r2,zero,7005134 <__alt_data_end+0xff005134>
 7005250:	003f6506 	br	7004fe8 <__alt_data_end+0xff004fe8>
 7005254:	a809883a 	mov	r4,r21
 7005258:	70074ec0 	call	70074ec <_realloc_r>
 700525c:	102f883a 	mov	r23,r2
 7005260:	103fee1e 	bne	r2,zero,700521c <__alt_data_end+0xff00521c>
 7005264:	81400417 	ldw	r5,16(r16)
 7005268:	a809883a 	mov	r4,r21
 700526c:	7004ae00 	call	7004ae0 <_free_r>
 7005270:	8080030b 	ldhu	r2,12(r16)
 7005274:	00ffdfc4 	movi	r3,-129
 7005278:	1884703a 	and	r2,r3,r2
 700527c:	00c00304 	movi	r3,12
 7005280:	a8c00015 	stw	r3,0(r21)
 7005284:	003f5906 	br	7004fec <__alt_data_end+0xff004fec>
 7005288:	94c00044 	addi	r19,r18,1
 700528c:	02000044 	movi	r8,1
 7005290:	003f6006 	br	7005014 <__alt_data_end+0xff005014>
 7005294:	00bfffc4 	movi	r2,-1
 7005298:	003f0306 	br	7004ea8 <__alt_data_end+0xff004ea8>
 700529c:	00800304 	movi	r2,12
 70052a0:	a8800015 	stw	r2,0(r21)
 70052a4:	8080030b 	ldhu	r2,12(r16)
 70052a8:	003f5006 	br	7004fec <__alt_data_end+0xff004fec>

070052ac <_fwalk>:
 70052ac:	defff704 	addi	sp,sp,-36
 70052b0:	dd000415 	stw	r20,16(sp)
 70052b4:	dfc00815 	stw	ra,32(sp)
 70052b8:	ddc00715 	stw	r23,28(sp)
 70052bc:	dd800615 	stw	r22,24(sp)
 70052c0:	dd400515 	stw	r21,20(sp)
 70052c4:	dcc00315 	stw	r19,12(sp)
 70052c8:	dc800215 	stw	r18,8(sp)
 70052cc:	dc400115 	stw	r17,4(sp)
 70052d0:	dc000015 	stw	r16,0(sp)
 70052d4:	2500b804 	addi	r20,r4,736
 70052d8:	a0002326 	beq	r20,zero,7005368 <_fwalk+0xbc>
 70052dc:	282b883a 	mov	r21,r5
 70052e0:	002f883a 	mov	r23,zero
 70052e4:	05800044 	movi	r22,1
 70052e8:	04ffffc4 	movi	r19,-1
 70052ec:	a4400117 	ldw	r17,4(r20)
 70052f0:	a4800217 	ldw	r18,8(r20)
 70052f4:	8c7fffc4 	addi	r17,r17,-1
 70052f8:	88000d16 	blt	r17,zero,7005330 <_fwalk+0x84>
 70052fc:	94000304 	addi	r16,r18,12
 7005300:	94800384 	addi	r18,r18,14
 7005304:	8080000b 	ldhu	r2,0(r16)
 7005308:	8c7fffc4 	addi	r17,r17,-1
 700530c:	813ffd04 	addi	r4,r16,-12
 7005310:	b080042e 	bgeu	r22,r2,7005324 <_fwalk+0x78>
 7005314:	9080000f 	ldh	r2,0(r18)
 7005318:	14c00226 	beq	r2,r19,7005324 <_fwalk+0x78>
 700531c:	a83ee83a 	callr	r21
 7005320:	b8aeb03a 	or	r23,r23,r2
 7005324:	84001a04 	addi	r16,r16,104
 7005328:	94801a04 	addi	r18,r18,104
 700532c:	8cfff51e 	bne	r17,r19,7005304 <__alt_data_end+0xff005304>
 7005330:	a5000017 	ldw	r20,0(r20)
 7005334:	a03fed1e 	bne	r20,zero,70052ec <__alt_data_end+0xff0052ec>
 7005338:	b805883a 	mov	r2,r23
 700533c:	dfc00817 	ldw	ra,32(sp)
 7005340:	ddc00717 	ldw	r23,28(sp)
 7005344:	dd800617 	ldw	r22,24(sp)
 7005348:	dd400517 	ldw	r21,20(sp)
 700534c:	dd000417 	ldw	r20,16(sp)
 7005350:	dcc00317 	ldw	r19,12(sp)
 7005354:	dc800217 	ldw	r18,8(sp)
 7005358:	dc400117 	ldw	r17,4(sp)
 700535c:	dc000017 	ldw	r16,0(sp)
 7005360:	dec00904 	addi	sp,sp,36
 7005364:	f800283a 	ret
 7005368:	002f883a 	mov	r23,zero
 700536c:	003ff206 	br	7005338 <__alt_data_end+0xff005338>

07005370 <_fwalk_reent>:
 7005370:	defff704 	addi	sp,sp,-36
 7005374:	dd000415 	stw	r20,16(sp)
 7005378:	dfc00815 	stw	ra,32(sp)
 700537c:	ddc00715 	stw	r23,28(sp)
 7005380:	dd800615 	stw	r22,24(sp)
 7005384:	dd400515 	stw	r21,20(sp)
 7005388:	dcc00315 	stw	r19,12(sp)
 700538c:	dc800215 	stw	r18,8(sp)
 7005390:	dc400115 	stw	r17,4(sp)
 7005394:	dc000015 	stw	r16,0(sp)
 7005398:	2500b804 	addi	r20,r4,736
 700539c:	a0002326 	beq	r20,zero,700542c <_fwalk_reent+0xbc>
 70053a0:	282b883a 	mov	r21,r5
 70053a4:	2027883a 	mov	r19,r4
 70053a8:	002f883a 	mov	r23,zero
 70053ac:	05800044 	movi	r22,1
 70053b0:	04bfffc4 	movi	r18,-1
 70053b4:	a4400117 	ldw	r17,4(r20)
 70053b8:	a4000217 	ldw	r16,8(r20)
 70053bc:	8c7fffc4 	addi	r17,r17,-1
 70053c0:	88000c16 	blt	r17,zero,70053f4 <_fwalk_reent+0x84>
 70053c4:	84000304 	addi	r16,r16,12
 70053c8:	8080000b 	ldhu	r2,0(r16)
 70053cc:	8c7fffc4 	addi	r17,r17,-1
 70053d0:	817ffd04 	addi	r5,r16,-12
 70053d4:	b080052e 	bgeu	r22,r2,70053ec <_fwalk_reent+0x7c>
 70053d8:	8080008f 	ldh	r2,2(r16)
 70053dc:	9809883a 	mov	r4,r19
 70053e0:	14800226 	beq	r2,r18,70053ec <_fwalk_reent+0x7c>
 70053e4:	a83ee83a 	callr	r21
 70053e8:	b8aeb03a 	or	r23,r23,r2
 70053ec:	84001a04 	addi	r16,r16,104
 70053f0:	8cbff51e 	bne	r17,r18,70053c8 <__alt_data_end+0xff0053c8>
 70053f4:	a5000017 	ldw	r20,0(r20)
 70053f8:	a03fee1e 	bne	r20,zero,70053b4 <__alt_data_end+0xff0053b4>
 70053fc:	b805883a 	mov	r2,r23
 7005400:	dfc00817 	ldw	ra,32(sp)
 7005404:	ddc00717 	ldw	r23,28(sp)
 7005408:	dd800617 	ldw	r22,24(sp)
 700540c:	dd400517 	ldw	r21,20(sp)
 7005410:	dd000417 	ldw	r20,16(sp)
 7005414:	dcc00317 	ldw	r19,12(sp)
 7005418:	dc800217 	ldw	r18,8(sp)
 700541c:	dc400117 	ldw	r17,4(sp)
 7005420:	dc000017 	ldw	r16,0(sp)
 7005424:	dec00904 	addi	sp,sp,36
 7005428:	f800283a 	ret
 700542c:	002f883a 	mov	r23,zero
 7005430:	003ff206 	br	70053fc <__alt_data_end+0xff0053fc>

07005434 <_setlocale_r>:
 7005434:	30001b26 	beq	r6,zero,70054a4 <_setlocale_r+0x70>
 7005438:	0141c074 	movhi	r5,1793
 700543c:	defffe04 	addi	sp,sp,-8
 7005440:	297ef504 	addi	r5,r5,-1068
 7005444:	3009883a 	mov	r4,r6
 7005448:	dc000015 	stw	r16,0(sp)
 700544c:	dfc00115 	stw	ra,4(sp)
 7005450:	3021883a 	mov	r16,r6
 7005454:	7007c540 	call	7007c54 <strcmp>
 7005458:	1000061e 	bne	r2,zero,7005474 <_setlocale_r+0x40>
 700545c:	0081c074 	movhi	r2,1793
 7005460:	10bef404 	addi	r2,r2,-1072
 7005464:	dfc00117 	ldw	ra,4(sp)
 7005468:	dc000017 	ldw	r16,0(sp)
 700546c:	dec00204 	addi	sp,sp,8
 7005470:	f800283a 	ret
 7005474:	0141c074 	movhi	r5,1793
 7005478:	297ef404 	addi	r5,r5,-1072
 700547c:	8009883a 	mov	r4,r16
 7005480:	7007c540 	call	7007c54 <strcmp>
 7005484:	103ff526 	beq	r2,zero,700545c <__alt_data_end+0xff00545c>
 7005488:	0141c074 	movhi	r5,1793
 700548c:	297edf04 	addi	r5,r5,-1156
 7005490:	8009883a 	mov	r4,r16
 7005494:	7007c540 	call	7007c54 <strcmp>
 7005498:	103ff026 	beq	r2,zero,700545c <__alt_data_end+0xff00545c>
 700549c:	0005883a 	mov	r2,zero
 70054a0:	003ff006 	br	7005464 <__alt_data_end+0xff005464>
 70054a4:	0081c074 	movhi	r2,1793
 70054a8:	10bef404 	addi	r2,r2,-1072
 70054ac:	f800283a 	ret

070054b0 <__locale_charset>:
 70054b0:	0081c074 	movhi	r2,1793
 70054b4:	1080a804 	addi	r2,r2,672
 70054b8:	f800283a 	ret

070054bc <__locale_mb_cur_max>:
 70054bc:	0081c074 	movhi	r2,1793
 70054c0:	10864b04 	addi	r2,r2,6444
 70054c4:	10800017 	ldw	r2,0(r2)
 70054c8:	f800283a 	ret

070054cc <__locale_msgcharset>:
 70054cc:	0081c074 	movhi	r2,1793
 70054d0:	1080a004 	addi	r2,r2,640
 70054d4:	f800283a 	ret

070054d8 <__locale_cjk_lang>:
 70054d8:	0005883a 	mov	r2,zero
 70054dc:	f800283a 	ret

070054e0 <_localeconv_r>:
 70054e0:	0081c074 	movhi	r2,1793
 70054e4:	1080b004 	addi	r2,r2,704
 70054e8:	f800283a 	ret

070054ec <setlocale>:
 70054ec:	0081c074 	movhi	r2,1793
 70054f0:	10864a04 	addi	r2,r2,6440
 70054f4:	280d883a 	mov	r6,r5
 70054f8:	200b883a 	mov	r5,r4
 70054fc:	11000017 	ldw	r4,0(r2)
 7005500:	70054341 	jmpi	7005434 <_setlocale_r>

07005504 <localeconv>:
 7005504:	0081c074 	movhi	r2,1793
 7005508:	1080b004 	addi	r2,r2,704
 700550c:	f800283a 	ret

07005510 <__smakebuf_r>:
 7005510:	2880030b 	ldhu	r2,12(r5)
 7005514:	10c0008c 	andi	r3,r2,2
 7005518:	1800411e 	bne	r3,zero,7005620 <__smakebuf_r+0x110>
 700551c:	deffec04 	addi	sp,sp,-80
 7005520:	dc000f15 	stw	r16,60(sp)
 7005524:	2821883a 	mov	r16,r5
 7005528:	2940038f 	ldh	r5,14(r5)
 700552c:	dc401015 	stw	r17,64(sp)
 7005530:	dfc01315 	stw	ra,76(sp)
 7005534:	dcc01215 	stw	r19,72(sp)
 7005538:	dc801115 	stw	r18,68(sp)
 700553c:	2023883a 	mov	r17,r4
 7005540:	28001c16 	blt	r5,zero,70055b4 <__smakebuf_r+0xa4>
 7005544:	d80d883a 	mov	r6,sp
 7005548:	70099540 	call	7009954 <_fstat_r>
 700554c:	10001816 	blt	r2,zero,70055b0 <__smakebuf_r+0xa0>
 7005550:	d8800117 	ldw	r2,4(sp)
 7005554:	00e00014 	movui	r3,32768
 7005558:	10bc000c 	andi	r2,r2,61440
 700555c:	14c80020 	cmpeqi	r19,r2,8192
 7005560:	10c03726 	beq	r2,r3,7005640 <__smakebuf_r+0x130>
 7005564:	80c0030b 	ldhu	r3,12(r16)
 7005568:	18c20014 	ori	r3,r3,2048
 700556c:	80c0030d 	sth	r3,12(r16)
 7005570:	00c80004 	movi	r3,8192
 7005574:	10c0521e 	bne	r2,r3,70056c0 <__smakebuf_r+0x1b0>
 7005578:	8140038f 	ldh	r5,14(r16)
 700557c:	8809883a 	mov	r4,r17
 7005580:	70099b00 	call	70099b0 <_isatty_r>
 7005584:	10004c26 	beq	r2,zero,70056b8 <__smakebuf_r+0x1a8>
 7005588:	8080030b 	ldhu	r2,12(r16)
 700558c:	80c010c4 	addi	r3,r16,67
 7005590:	80c00015 	stw	r3,0(r16)
 7005594:	10800054 	ori	r2,r2,1
 7005598:	8080030d 	sth	r2,12(r16)
 700559c:	00800044 	movi	r2,1
 70055a0:	80c00415 	stw	r3,16(r16)
 70055a4:	80800515 	stw	r2,20(r16)
 70055a8:	04810004 	movi	r18,1024
 70055ac:	00000706 	br	70055cc <__smakebuf_r+0xbc>
 70055b0:	8080030b 	ldhu	r2,12(r16)
 70055b4:	10c0200c 	andi	r3,r2,128
 70055b8:	18001f1e 	bne	r3,zero,7005638 <__smakebuf_r+0x128>
 70055bc:	04810004 	movi	r18,1024
 70055c0:	10820014 	ori	r2,r2,2048
 70055c4:	8080030d 	sth	r2,12(r16)
 70055c8:	0027883a 	mov	r19,zero
 70055cc:	900b883a 	mov	r5,r18
 70055d0:	8809883a 	mov	r4,r17
 70055d4:	70056cc0 	call	70056cc <_malloc_r>
 70055d8:	10002c26 	beq	r2,zero,700568c <__smakebuf_r+0x17c>
 70055dc:	80c0030b 	ldhu	r3,12(r16)
 70055e0:	0101c034 	movhi	r4,1792
 70055e4:	21118904 	addi	r4,r4,17956
 70055e8:	89000f15 	stw	r4,60(r17)
 70055ec:	18c02014 	ori	r3,r3,128
 70055f0:	80c0030d 	sth	r3,12(r16)
 70055f4:	80800015 	stw	r2,0(r16)
 70055f8:	80800415 	stw	r2,16(r16)
 70055fc:	84800515 	stw	r18,20(r16)
 7005600:	98001a1e 	bne	r19,zero,700566c <__smakebuf_r+0x15c>
 7005604:	dfc01317 	ldw	ra,76(sp)
 7005608:	dcc01217 	ldw	r19,72(sp)
 700560c:	dc801117 	ldw	r18,68(sp)
 7005610:	dc401017 	ldw	r17,64(sp)
 7005614:	dc000f17 	ldw	r16,60(sp)
 7005618:	dec01404 	addi	sp,sp,80
 700561c:	f800283a 	ret
 7005620:	288010c4 	addi	r2,r5,67
 7005624:	28800015 	stw	r2,0(r5)
 7005628:	28800415 	stw	r2,16(r5)
 700562c:	00800044 	movi	r2,1
 7005630:	28800515 	stw	r2,20(r5)
 7005634:	f800283a 	ret
 7005638:	04801004 	movi	r18,64
 700563c:	003fe006 	br	70055c0 <__alt_data_end+0xff0055c0>
 7005640:	81000a17 	ldw	r4,40(r16)
 7005644:	00c1c034 	movhi	r3,1792
 7005648:	18defc04 	addi	r3,r3,31728
 700564c:	20ffc51e 	bne	r4,r3,7005564 <__alt_data_end+0xff005564>
 7005650:	8080030b 	ldhu	r2,12(r16)
 7005654:	04810004 	movi	r18,1024
 7005658:	84801315 	stw	r18,76(r16)
 700565c:	1484b03a 	or	r2,r2,r18
 7005660:	8080030d 	sth	r2,12(r16)
 7005664:	0027883a 	mov	r19,zero
 7005668:	003fd806 	br	70055cc <__alt_data_end+0xff0055cc>
 700566c:	8140038f 	ldh	r5,14(r16)
 7005670:	8809883a 	mov	r4,r17
 7005674:	70099b00 	call	70099b0 <_isatty_r>
 7005678:	103fe226 	beq	r2,zero,7005604 <__alt_data_end+0xff005604>
 700567c:	8080030b 	ldhu	r2,12(r16)
 7005680:	10800054 	ori	r2,r2,1
 7005684:	8080030d 	sth	r2,12(r16)
 7005688:	003fde06 	br	7005604 <__alt_data_end+0xff005604>
 700568c:	8080030b 	ldhu	r2,12(r16)
 7005690:	10c0800c 	andi	r3,r2,512
 7005694:	183fdb1e 	bne	r3,zero,7005604 <__alt_data_end+0xff005604>
 7005698:	10800094 	ori	r2,r2,2
 700569c:	80c010c4 	addi	r3,r16,67
 70056a0:	8080030d 	sth	r2,12(r16)
 70056a4:	00800044 	movi	r2,1
 70056a8:	80c00015 	stw	r3,0(r16)
 70056ac:	80c00415 	stw	r3,16(r16)
 70056b0:	80800515 	stw	r2,20(r16)
 70056b4:	003fd306 	br	7005604 <__alt_data_end+0xff005604>
 70056b8:	04810004 	movi	r18,1024
 70056bc:	003fc306 	br	70055cc <__alt_data_end+0xff0055cc>
 70056c0:	0027883a 	mov	r19,zero
 70056c4:	04810004 	movi	r18,1024
 70056c8:	003fc006 	br	70055cc <__alt_data_end+0xff0055cc>

070056cc <_malloc_r>:
 70056cc:	defff504 	addi	sp,sp,-44
 70056d0:	dc800315 	stw	r18,12(sp)
 70056d4:	dfc00a15 	stw	ra,40(sp)
 70056d8:	df000915 	stw	fp,36(sp)
 70056dc:	ddc00815 	stw	r23,32(sp)
 70056e0:	dd800715 	stw	r22,28(sp)
 70056e4:	dd400615 	stw	r21,24(sp)
 70056e8:	dd000515 	stw	r20,20(sp)
 70056ec:	dcc00415 	stw	r19,16(sp)
 70056f0:	dc400215 	stw	r17,8(sp)
 70056f4:	dc000115 	stw	r16,4(sp)
 70056f8:	288002c4 	addi	r2,r5,11
 70056fc:	00c00584 	movi	r3,22
 7005700:	2025883a 	mov	r18,r4
 7005704:	18807f2e 	bgeu	r3,r2,7005904 <_malloc_r+0x238>
 7005708:	047ffe04 	movi	r17,-8
 700570c:	1462703a 	and	r17,r2,r17
 7005710:	8800a316 	blt	r17,zero,70059a0 <_malloc_r+0x2d4>
 7005714:	8940a236 	bltu	r17,r5,70059a0 <_malloc_r+0x2d4>
 7005718:	700d53c0 	call	700d53c <__malloc_lock>
 700571c:	00807dc4 	movi	r2,503
 7005720:	1441e92e 	bgeu	r2,r17,7005ec8 <_malloc_r+0x7fc>
 7005724:	8804d27a 	srli	r2,r17,9
 7005728:	1000a126 	beq	r2,zero,70059b0 <_malloc_r+0x2e4>
 700572c:	00c00104 	movi	r3,4
 7005730:	18811e36 	bltu	r3,r2,7005bac <_malloc_r+0x4e0>
 7005734:	8804d1ba 	srli	r2,r17,6
 7005738:	12000e44 	addi	r8,r2,57
 700573c:	11c00e04 	addi	r7,r2,56
 7005740:	4209883a 	add	r4,r8,r8
 7005744:	04c1c074 	movhi	r19,1793
 7005748:	2109883a 	add	r4,r4,r4
 700574c:	9cc0be04 	addi	r19,r19,760
 7005750:	2109883a 	add	r4,r4,r4
 7005754:	9909883a 	add	r4,r19,r4
 7005758:	24000117 	ldw	r16,4(r4)
 700575c:	213ffe04 	addi	r4,r4,-8
 7005760:	24009726 	beq	r4,r16,70059c0 <_malloc_r+0x2f4>
 7005764:	80800117 	ldw	r2,4(r16)
 7005768:	01bfff04 	movi	r6,-4
 700576c:	014003c4 	movi	r5,15
 7005770:	1184703a 	and	r2,r2,r6
 7005774:	1447c83a 	sub	r3,r2,r17
 7005778:	28c00716 	blt	r5,r3,7005798 <_malloc_r+0xcc>
 700577c:	1800920e 	bge	r3,zero,70059c8 <_malloc_r+0x2fc>
 7005780:	84000317 	ldw	r16,12(r16)
 7005784:	24008e26 	beq	r4,r16,70059c0 <_malloc_r+0x2f4>
 7005788:	80800117 	ldw	r2,4(r16)
 700578c:	1184703a 	and	r2,r2,r6
 7005790:	1447c83a 	sub	r3,r2,r17
 7005794:	28fff90e 	bge	r5,r3,700577c <__alt_data_end+0xff00577c>
 7005798:	3809883a 	mov	r4,r7
 700579c:	0181c074 	movhi	r6,1793
 70057a0:	9c000417 	ldw	r16,16(r19)
 70057a4:	3180be04 	addi	r6,r6,760
 70057a8:	32000204 	addi	r8,r6,8
 70057ac:	82013426 	beq	r16,r8,7005c80 <_malloc_r+0x5b4>
 70057b0:	80c00117 	ldw	r3,4(r16)
 70057b4:	00bfff04 	movi	r2,-4
 70057b8:	188e703a 	and	r7,r3,r2
 70057bc:	3c45c83a 	sub	r2,r7,r17
 70057c0:	00c003c4 	movi	r3,15
 70057c4:	18811f16 	blt	r3,r2,7005c44 <_malloc_r+0x578>
 70057c8:	32000515 	stw	r8,20(r6)
 70057cc:	32000415 	stw	r8,16(r6)
 70057d0:	10007f0e 	bge	r2,zero,70059d0 <_malloc_r+0x304>
 70057d4:	00807fc4 	movi	r2,511
 70057d8:	11c0fd36 	bltu	r2,r7,7005bd0 <_malloc_r+0x504>
 70057dc:	3806d0fa 	srli	r3,r7,3
 70057e0:	01c00044 	movi	r7,1
 70057e4:	30800117 	ldw	r2,4(r6)
 70057e8:	19400044 	addi	r5,r3,1
 70057ec:	294b883a 	add	r5,r5,r5
 70057f0:	1807d0ba 	srai	r3,r3,2
 70057f4:	294b883a 	add	r5,r5,r5
 70057f8:	294b883a 	add	r5,r5,r5
 70057fc:	298b883a 	add	r5,r5,r6
 7005800:	38c6983a 	sll	r3,r7,r3
 7005804:	29c00017 	ldw	r7,0(r5)
 7005808:	2a7ffe04 	addi	r9,r5,-8
 700580c:	1886b03a 	or	r3,r3,r2
 7005810:	82400315 	stw	r9,12(r16)
 7005814:	81c00215 	stw	r7,8(r16)
 7005818:	30c00115 	stw	r3,4(r6)
 700581c:	2c000015 	stw	r16,0(r5)
 7005820:	3c000315 	stw	r16,12(r7)
 7005824:	2005d0ba 	srai	r2,r4,2
 7005828:	01400044 	movi	r5,1
 700582c:	288a983a 	sll	r5,r5,r2
 7005830:	19406f36 	bltu	r3,r5,70059f0 <_malloc_r+0x324>
 7005834:	28c4703a 	and	r2,r5,r3
 7005838:	10000a1e 	bne	r2,zero,7005864 <_malloc_r+0x198>
 700583c:	00bfff04 	movi	r2,-4
 7005840:	294b883a 	add	r5,r5,r5
 7005844:	2088703a 	and	r4,r4,r2
 7005848:	28c4703a 	and	r2,r5,r3
 700584c:	21000104 	addi	r4,r4,4
 7005850:	1000041e 	bne	r2,zero,7005864 <_malloc_r+0x198>
 7005854:	294b883a 	add	r5,r5,r5
 7005858:	28c4703a 	and	r2,r5,r3
 700585c:	21000104 	addi	r4,r4,4
 7005860:	103ffc26 	beq	r2,zero,7005854 <__alt_data_end+0xff005854>
 7005864:	02bfff04 	movi	r10,-4
 7005868:	024003c4 	movi	r9,15
 700586c:	21800044 	addi	r6,r4,1
 7005870:	318d883a 	add	r6,r6,r6
 7005874:	318d883a 	add	r6,r6,r6
 7005878:	318d883a 	add	r6,r6,r6
 700587c:	998d883a 	add	r6,r19,r6
 7005880:	333ffe04 	addi	r12,r6,-8
 7005884:	2017883a 	mov	r11,r4
 7005888:	31800104 	addi	r6,r6,4
 700588c:	34000017 	ldw	r16,0(r6)
 7005890:	31fffd04 	addi	r7,r6,-12
 7005894:	81c0041e 	bne	r16,r7,70058a8 <_malloc_r+0x1dc>
 7005898:	0000fb06 	br	7005c88 <_malloc_r+0x5bc>
 700589c:	1801030e 	bge	r3,zero,7005cac <_malloc_r+0x5e0>
 70058a0:	84000317 	ldw	r16,12(r16)
 70058a4:	81c0f826 	beq	r16,r7,7005c88 <_malloc_r+0x5bc>
 70058a8:	80800117 	ldw	r2,4(r16)
 70058ac:	1284703a 	and	r2,r2,r10
 70058b0:	1447c83a 	sub	r3,r2,r17
 70058b4:	48fff90e 	bge	r9,r3,700589c <__alt_data_end+0xff00589c>
 70058b8:	80800317 	ldw	r2,12(r16)
 70058bc:	81000217 	ldw	r4,8(r16)
 70058c0:	89400054 	ori	r5,r17,1
 70058c4:	81400115 	stw	r5,4(r16)
 70058c8:	20800315 	stw	r2,12(r4)
 70058cc:	11000215 	stw	r4,8(r2)
 70058d0:	8463883a 	add	r17,r16,r17
 70058d4:	9c400515 	stw	r17,20(r19)
 70058d8:	9c400415 	stw	r17,16(r19)
 70058dc:	18800054 	ori	r2,r3,1
 70058e0:	88800115 	stw	r2,4(r17)
 70058e4:	8a000315 	stw	r8,12(r17)
 70058e8:	8a000215 	stw	r8,8(r17)
 70058ec:	88e3883a 	add	r17,r17,r3
 70058f0:	88c00015 	stw	r3,0(r17)
 70058f4:	9009883a 	mov	r4,r18
 70058f8:	700d5600 	call	700d560 <__malloc_unlock>
 70058fc:	80800204 	addi	r2,r16,8
 7005900:	00001b06 	br	7005970 <_malloc_r+0x2a4>
 7005904:	04400404 	movi	r17,16
 7005908:	89402536 	bltu	r17,r5,70059a0 <_malloc_r+0x2d4>
 700590c:	700d53c0 	call	700d53c <__malloc_lock>
 7005910:	00800184 	movi	r2,6
 7005914:	01000084 	movi	r4,2
 7005918:	04c1c074 	movhi	r19,1793
 700591c:	1085883a 	add	r2,r2,r2
 7005920:	9cc0be04 	addi	r19,r19,760
 7005924:	1085883a 	add	r2,r2,r2
 7005928:	9885883a 	add	r2,r19,r2
 700592c:	14000117 	ldw	r16,4(r2)
 7005930:	10fffe04 	addi	r3,r2,-8
 7005934:	80c0d926 	beq	r16,r3,7005c9c <_malloc_r+0x5d0>
 7005938:	80c00117 	ldw	r3,4(r16)
 700593c:	81000317 	ldw	r4,12(r16)
 7005940:	00bfff04 	movi	r2,-4
 7005944:	1884703a 	and	r2,r3,r2
 7005948:	81400217 	ldw	r5,8(r16)
 700594c:	8085883a 	add	r2,r16,r2
 7005950:	10c00117 	ldw	r3,4(r2)
 7005954:	29000315 	stw	r4,12(r5)
 7005958:	21400215 	stw	r5,8(r4)
 700595c:	18c00054 	ori	r3,r3,1
 7005960:	10c00115 	stw	r3,4(r2)
 7005964:	9009883a 	mov	r4,r18
 7005968:	700d5600 	call	700d560 <__malloc_unlock>
 700596c:	80800204 	addi	r2,r16,8
 7005970:	dfc00a17 	ldw	ra,40(sp)
 7005974:	df000917 	ldw	fp,36(sp)
 7005978:	ddc00817 	ldw	r23,32(sp)
 700597c:	dd800717 	ldw	r22,28(sp)
 7005980:	dd400617 	ldw	r21,24(sp)
 7005984:	dd000517 	ldw	r20,20(sp)
 7005988:	dcc00417 	ldw	r19,16(sp)
 700598c:	dc800317 	ldw	r18,12(sp)
 7005990:	dc400217 	ldw	r17,8(sp)
 7005994:	dc000117 	ldw	r16,4(sp)
 7005998:	dec00b04 	addi	sp,sp,44
 700599c:	f800283a 	ret
 70059a0:	00800304 	movi	r2,12
 70059a4:	90800015 	stw	r2,0(r18)
 70059a8:	0005883a 	mov	r2,zero
 70059ac:	003ff006 	br	7005970 <__alt_data_end+0xff005970>
 70059b0:	01002004 	movi	r4,128
 70059b4:	02001004 	movi	r8,64
 70059b8:	01c00fc4 	movi	r7,63
 70059bc:	003f6106 	br	7005744 <__alt_data_end+0xff005744>
 70059c0:	4009883a 	mov	r4,r8
 70059c4:	003f7506 	br	700579c <__alt_data_end+0xff00579c>
 70059c8:	81000317 	ldw	r4,12(r16)
 70059cc:	003fde06 	br	7005948 <__alt_data_end+0xff005948>
 70059d0:	81c5883a 	add	r2,r16,r7
 70059d4:	11400117 	ldw	r5,4(r2)
 70059d8:	9009883a 	mov	r4,r18
 70059dc:	29400054 	ori	r5,r5,1
 70059e0:	11400115 	stw	r5,4(r2)
 70059e4:	700d5600 	call	700d560 <__malloc_unlock>
 70059e8:	80800204 	addi	r2,r16,8
 70059ec:	003fe006 	br	7005970 <__alt_data_end+0xff005970>
 70059f0:	9c000217 	ldw	r16,8(r19)
 70059f4:	00bfff04 	movi	r2,-4
 70059f8:	85800117 	ldw	r22,4(r16)
 70059fc:	b0ac703a 	and	r22,r22,r2
 7005a00:	b4400336 	bltu	r22,r17,7005a10 <_malloc_r+0x344>
 7005a04:	b445c83a 	sub	r2,r22,r17
 7005a08:	00c003c4 	movi	r3,15
 7005a0c:	18805d16 	blt	r3,r2,7005b84 <_malloc_r+0x4b8>
 7005a10:	05c1c074 	movhi	r23,1793
 7005a14:	0081c074 	movhi	r2,1793
 7005a18:	108d2404 	addi	r2,r2,13456
 7005a1c:	bdc64c04 	addi	r23,r23,6448
 7005a20:	15400017 	ldw	r21,0(r2)
 7005a24:	b8c00017 	ldw	r3,0(r23)
 7005a28:	00bfffc4 	movi	r2,-1
 7005a2c:	858d883a 	add	r6,r16,r22
 7005a30:	8d6b883a 	add	r21,r17,r21
 7005a34:	1880ea26 	beq	r3,r2,7005de0 <_malloc_r+0x714>
 7005a38:	ad4403c4 	addi	r21,r21,4111
 7005a3c:	00bc0004 	movi	r2,-4096
 7005a40:	a8aa703a 	and	r21,r21,r2
 7005a44:	a80b883a 	mov	r5,r21
 7005a48:	9009883a 	mov	r4,r18
 7005a4c:	d9800015 	stw	r6,0(sp)
 7005a50:	7007ac40 	call	7007ac4 <_sbrk_r>
 7005a54:	1029883a 	mov	r20,r2
 7005a58:	00bfffc4 	movi	r2,-1
 7005a5c:	d9800017 	ldw	r6,0(sp)
 7005a60:	a080e826 	beq	r20,r2,7005e04 <_malloc_r+0x738>
 7005a64:	a180a636 	bltu	r20,r6,7005d00 <_malloc_r+0x634>
 7005a68:	0701c074 	movhi	fp,1793
 7005a6c:	e70d2d04 	addi	fp,fp,13492
 7005a70:	e0800017 	ldw	r2,0(fp)
 7005a74:	a887883a 	add	r3,r21,r2
 7005a78:	e0c00015 	stw	r3,0(fp)
 7005a7c:	3500e626 	beq	r6,r20,7005e18 <_malloc_r+0x74c>
 7005a80:	b9000017 	ldw	r4,0(r23)
 7005a84:	00bfffc4 	movi	r2,-1
 7005a88:	2080ee26 	beq	r4,r2,7005e44 <_malloc_r+0x778>
 7005a8c:	a185c83a 	sub	r2,r20,r6
 7005a90:	10c5883a 	add	r2,r2,r3
 7005a94:	e0800015 	stw	r2,0(fp)
 7005a98:	a0c001cc 	andi	r3,r20,7
 7005a9c:	1800bc26 	beq	r3,zero,7005d90 <_malloc_r+0x6c4>
 7005aa0:	a0e9c83a 	sub	r20,r20,r3
 7005aa4:	00840204 	movi	r2,4104
 7005aa8:	a5000204 	addi	r20,r20,8
 7005aac:	10c7c83a 	sub	r3,r2,r3
 7005ab0:	a545883a 	add	r2,r20,r21
 7005ab4:	1083ffcc 	andi	r2,r2,4095
 7005ab8:	18abc83a 	sub	r21,r3,r2
 7005abc:	a80b883a 	mov	r5,r21
 7005ac0:	9009883a 	mov	r4,r18
 7005ac4:	7007ac40 	call	7007ac4 <_sbrk_r>
 7005ac8:	00ffffc4 	movi	r3,-1
 7005acc:	10c0e126 	beq	r2,r3,7005e54 <_malloc_r+0x788>
 7005ad0:	1505c83a 	sub	r2,r2,r20
 7005ad4:	1545883a 	add	r2,r2,r21
 7005ad8:	10800054 	ori	r2,r2,1
 7005adc:	e0c00017 	ldw	r3,0(fp)
 7005ae0:	9d000215 	stw	r20,8(r19)
 7005ae4:	a0800115 	stw	r2,4(r20)
 7005ae8:	a8c7883a 	add	r3,r21,r3
 7005aec:	e0c00015 	stw	r3,0(fp)
 7005af0:	84c00e26 	beq	r16,r19,7005b2c <_malloc_r+0x460>
 7005af4:	018003c4 	movi	r6,15
 7005af8:	3580a72e 	bgeu	r6,r22,7005d98 <_malloc_r+0x6cc>
 7005afc:	81400117 	ldw	r5,4(r16)
 7005b00:	013ffe04 	movi	r4,-8
 7005b04:	b0bffd04 	addi	r2,r22,-12
 7005b08:	1104703a 	and	r2,r2,r4
 7005b0c:	2900004c 	andi	r4,r5,1
 7005b10:	2088b03a 	or	r4,r4,r2
 7005b14:	81000115 	stw	r4,4(r16)
 7005b18:	01400144 	movi	r5,5
 7005b1c:	8089883a 	add	r4,r16,r2
 7005b20:	21400115 	stw	r5,4(r4)
 7005b24:	21400215 	stw	r5,8(r4)
 7005b28:	3080cd36 	bltu	r6,r2,7005e60 <_malloc_r+0x794>
 7005b2c:	0081c074 	movhi	r2,1793
 7005b30:	108d2304 	addi	r2,r2,13452
 7005b34:	11000017 	ldw	r4,0(r2)
 7005b38:	20c0012e 	bgeu	r4,r3,7005b40 <_malloc_r+0x474>
 7005b3c:	10c00015 	stw	r3,0(r2)
 7005b40:	0081c074 	movhi	r2,1793
 7005b44:	108d2204 	addi	r2,r2,13448
 7005b48:	11000017 	ldw	r4,0(r2)
 7005b4c:	9c000217 	ldw	r16,8(r19)
 7005b50:	20c0012e 	bgeu	r4,r3,7005b58 <_malloc_r+0x48c>
 7005b54:	10c00015 	stw	r3,0(r2)
 7005b58:	80c00117 	ldw	r3,4(r16)
 7005b5c:	00bfff04 	movi	r2,-4
 7005b60:	1886703a 	and	r3,r3,r2
 7005b64:	1c45c83a 	sub	r2,r3,r17
 7005b68:	1c400236 	bltu	r3,r17,7005b74 <_malloc_r+0x4a8>
 7005b6c:	00c003c4 	movi	r3,15
 7005b70:	18800416 	blt	r3,r2,7005b84 <_malloc_r+0x4b8>
 7005b74:	9009883a 	mov	r4,r18
 7005b78:	700d5600 	call	700d560 <__malloc_unlock>
 7005b7c:	0005883a 	mov	r2,zero
 7005b80:	003f7b06 	br	7005970 <__alt_data_end+0xff005970>
 7005b84:	88c00054 	ori	r3,r17,1
 7005b88:	80c00115 	stw	r3,4(r16)
 7005b8c:	8463883a 	add	r17,r16,r17
 7005b90:	10800054 	ori	r2,r2,1
 7005b94:	9c400215 	stw	r17,8(r19)
 7005b98:	88800115 	stw	r2,4(r17)
 7005b9c:	9009883a 	mov	r4,r18
 7005ba0:	700d5600 	call	700d560 <__malloc_unlock>
 7005ba4:	80800204 	addi	r2,r16,8
 7005ba8:	003f7106 	br	7005970 <__alt_data_end+0xff005970>
 7005bac:	00c00504 	movi	r3,20
 7005bb0:	18804a2e 	bgeu	r3,r2,7005cdc <_malloc_r+0x610>
 7005bb4:	00c01504 	movi	r3,84
 7005bb8:	18806e36 	bltu	r3,r2,7005d74 <_malloc_r+0x6a8>
 7005bbc:	8804d33a 	srli	r2,r17,12
 7005bc0:	12001bc4 	addi	r8,r2,111
 7005bc4:	11c01b84 	addi	r7,r2,110
 7005bc8:	4209883a 	add	r4,r8,r8
 7005bcc:	003edd06 	br	7005744 <__alt_data_end+0xff005744>
 7005bd0:	3804d27a 	srli	r2,r7,9
 7005bd4:	00c00104 	movi	r3,4
 7005bd8:	1880442e 	bgeu	r3,r2,7005cec <_malloc_r+0x620>
 7005bdc:	00c00504 	movi	r3,20
 7005be0:	18808136 	bltu	r3,r2,7005de8 <_malloc_r+0x71c>
 7005be4:	11401704 	addi	r5,r2,92
 7005be8:	10c016c4 	addi	r3,r2,91
 7005bec:	294b883a 	add	r5,r5,r5
 7005bf0:	294b883a 	add	r5,r5,r5
 7005bf4:	294b883a 	add	r5,r5,r5
 7005bf8:	994b883a 	add	r5,r19,r5
 7005bfc:	28800017 	ldw	r2,0(r5)
 7005c00:	0181c074 	movhi	r6,1793
 7005c04:	297ffe04 	addi	r5,r5,-8
 7005c08:	3180be04 	addi	r6,r6,760
 7005c0c:	28806526 	beq	r5,r2,7005da4 <_malloc_r+0x6d8>
 7005c10:	01bfff04 	movi	r6,-4
 7005c14:	10c00117 	ldw	r3,4(r2)
 7005c18:	1986703a 	and	r3,r3,r6
 7005c1c:	38c0022e 	bgeu	r7,r3,7005c28 <_malloc_r+0x55c>
 7005c20:	10800217 	ldw	r2,8(r2)
 7005c24:	28bffb1e 	bne	r5,r2,7005c14 <__alt_data_end+0xff005c14>
 7005c28:	11400317 	ldw	r5,12(r2)
 7005c2c:	98c00117 	ldw	r3,4(r19)
 7005c30:	81400315 	stw	r5,12(r16)
 7005c34:	80800215 	stw	r2,8(r16)
 7005c38:	2c000215 	stw	r16,8(r5)
 7005c3c:	14000315 	stw	r16,12(r2)
 7005c40:	003ef806 	br	7005824 <__alt_data_end+0xff005824>
 7005c44:	88c00054 	ori	r3,r17,1
 7005c48:	80c00115 	stw	r3,4(r16)
 7005c4c:	8463883a 	add	r17,r16,r17
 7005c50:	34400515 	stw	r17,20(r6)
 7005c54:	34400415 	stw	r17,16(r6)
 7005c58:	10c00054 	ori	r3,r2,1
 7005c5c:	8a000315 	stw	r8,12(r17)
 7005c60:	8a000215 	stw	r8,8(r17)
 7005c64:	88c00115 	stw	r3,4(r17)
 7005c68:	88a3883a 	add	r17,r17,r2
 7005c6c:	88800015 	stw	r2,0(r17)
 7005c70:	9009883a 	mov	r4,r18
 7005c74:	700d5600 	call	700d560 <__malloc_unlock>
 7005c78:	80800204 	addi	r2,r16,8
 7005c7c:	003f3c06 	br	7005970 <__alt_data_end+0xff005970>
 7005c80:	30c00117 	ldw	r3,4(r6)
 7005c84:	003ee706 	br	7005824 <__alt_data_end+0xff005824>
 7005c88:	5ac00044 	addi	r11,r11,1
 7005c8c:	588000cc 	andi	r2,r11,3
 7005c90:	31800204 	addi	r6,r6,8
 7005c94:	103efd1e 	bne	r2,zero,700588c <__alt_data_end+0xff00588c>
 7005c98:	00002406 	br	7005d2c <_malloc_r+0x660>
 7005c9c:	14000317 	ldw	r16,12(r2)
 7005ca0:	143f251e 	bne	r2,r16,7005938 <__alt_data_end+0xff005938>
 7005ca4:	21000084 	addi	r4,r4,2
 7005ca8:	003ebc06 	br	700579c <__alt_data_end+0xff00579c>
 7005cac:	8085883a 	add	r2,r16,r2
 7005cb0:	10c00117 	ldw	r3,4(r2)
 7005cb4:	81000317 	ldw	r4,12(r16)
 7005cb8:	81400217 	ldw	r5,8(r16)
 7005cbc:	18c00054 	ori	r3,r3,1
 7005cc0:	10c00115 	stw	r3,4(r2)
 7005cc4:	29000315 	stw	r4,12(r5)
 7005cc8:	21400215 	stw	r5,8(r4)
 7005ccc:	9009883a 	mov	r4,r18
 7005cd0:	700d5600 	call	700d560 <__malloc_unlock>
 7005cd4:	80800204 	addi	r2,r16,8
 7005cd8:	003f2506 	br	7005970 <__alt_data_end+0xff005970>
 7005cdc:	12001704 	addi	r8,r2,92
 7005ce0:	11c016c4 	addi	r7,r2,91
 7005ce4:	4209883a 	add	r4,r8,r8
 7005ce8:	003e9606 	br	7005744 <__alt_data_end+0xff005744>
 7005cec:	3804d1ba 	srli	r2,r7,6
 7005cf0:	11400e44 	addi	r5,r2,57
 7005cf4:	10c00e04 	addi	r3,r2,56
 7005cf8:	294b883a 	add	r5,r5,r5
 7005cfc:	003fbc06 	br	7005bf0 <__alt_data_end+0xff005bf0>
 7005d00:	84ff5926 	beq	r16,r19,7005a68 <__alt_data_end+0xff005a68>
 7005d04:	0081c074 	movhi	r2,1793
 7005d08:	1080be04 	addi	r2,r2,760
 7005d0c:	14000217 	ldw	r16,8(r2)
 7005d10:	00bfff04 	movi	r2,-4
 7005d14:	80c00117 	ldw	r3,4(r16)
 7005d18:	1886703a 	and	r3,r3,r2
 7005d1c:	003f9106 	br	7005b64 <__alt_data_end+0xff005b64>
 7005d20:	60800217 	ldw	r2,8(r12)
 7005d24:	213fffc4 	addi	r4,r4,-1
 7005d28:	1300651e 	bne	r2,r12,7005ec0 <_malloc_r+0x7f4>
 7005d2c:	208000cc 	andi	r2,r4,3
 7005d30:	633ffe04 	addi	r12,r12,-8
 7005d34:	103ffa1e 	bne	r2,zero,7005d20 <__alt_data_end+0xff005d20>
 7005d38:	98800117 	ldw	r2,4(r19)
 7005d3c:	0146303a 	nor	r3,zero,r5
 7005d40:	1884703a 	and	r2,r3,r2
 7005d44:	98800115 	stw	r2,4(r19)
 7005d48:	294b883a 	add	r5,r5,r5
 7005d4c:	117f2836 	bltu	r2,r5,70059f0 <__alt_data_end+0xff0059f0>
 7005d50:	283f2726 	beq	r5,zero,70059f0 <__alt_data_end+0xff0059f0>
 7005d54:	2886703a 	and	r3,r5,r2
 7005d58:	5809883a 	mov	r4,r11
 7005d5c:	183ec31e 	bne	r3,zero,700586c <__alt_data_end+0xff00586c>
 7005d60:	294b883a 	add	r5,r5,r5
 7005d64:	2886703a 	and	r3,r5,r2
 7005d68:	21000104 	addi	r4,r4,4
 7005d6c:	183ffc26 	beq	r3,zero,7005d60 <__alt_data_end+0xff005d60>
 7005d70:	003ebe06 	br	700586c <__alt_data_end+0xff00586c>
 7005d74:	00c05504 	movi	r3,340
 7005d78:	18801236 	bltu	r3,r2,7005dc4 <_malloc_r+0x6f8>
 7005d7c:	8804d3fa 	srli	r2,r17,15
 7005d80:	12001e04 	addi	r8,r2,120
 7005d84:	11c01dc4 	addi	r7,r2,119
 7005d88:	4209883a 	add	r4,r8,r8
 7005d8c:	003e6d06 	br	7005744 <__alt_data_end+0xff005744>
 7005d90:	00c40004 	movi	r3,4096
 7005d94:	003f4606 	br	7005ab0 <__alt_data_end+0xff005ab0>
 7005d98:	00800044 	movi	r2,1
 7005d9c:	a0800115 	stw	r2,4(r20)
 7005da0:	003f7406 	br	7005b74 <__alt_data_end+0xff005b74>
 7005da4:	1805d0ba 	srai	r2,r3,2
 7005da8:	01c00044 	movi	r7,1
 7005dac:	30c00117 	ldw	r3,4(r6)
 7005db0:	388e983a 	sll	r7,r7,r2
 7005db4:	2805883a 	mov	r2,r5
 7005db8:	38c6b03a 	or	r3,r7,r3
 7005dbc:	30c00115 	stw	r3,4(r6)
 7005dc0:	003f9b06 	br	7005c30 <__alt_data_end+0xff005c30>
 7005dc4:	00c15504 	movi	r3,1364
 7005dc8:	18801a36 	bltu	r3,r2,7005e34 <_malloc_r+0x768>
 7005dcc:	8804d4ba 	srli	r2,r17,18
 7005dd0:	12001f44 	addi	r8,r2,125
 7005dd4:	11c01f04 	addi	r7,r2,124
 7005dd8:	4209883a 	add	r4,r8,r8
 7005ddc:	003e5906 	br	7005744 <__alt_data_end+0xff005744>
 7005de0:	ad400404 	addi	r21,r21,16
 7005de4:	003f1706 	br	7005a44 <__alt_data_end+0xff005a44>
 7005de8:	00c01504 	movi	r3,84
 7005dec:	18802336 	bltu	r3,r2,7005e7c <_malloc_r+0x7b0>
 7005df0:	3804d33a 	srli	r2,r7,12
 7005df4:	11401bc4 	addi	r5,r2,111
 7005df8:	10c01b84 	addi	r3,r2,110
 7005dfc:	294b883a 	add	r5,r5,r5
 7005e00:	003f7b06 	br	7005bf0 <__alt_data_end+0xff005bf0>
 7005e04:	9c000217 	ldw	r16,8(r19)
 7005e08:	00bfff04 	movi	r2,-4
 7005e0c:	80c00117 	ldw	r3,4(r16)
 7005e10:	1886703a 	and	r3,r3,r2
 7005e14:	003f5306 	br	7005b64 <__alt_data_end+0xff005b64>
 7005e18:	3083ffcc 	andi	r2,r6,4095
 7005e1c:	103f181e 	bne	r2,zero,7005a80 <__alt_data_end+0xff005a80>
 7005e20:	99000217 	ldw	r4,8(r19)
 7005e24:	b545883a 	add	r2,r22,r21
 7005e28:	10800054 	ori	r2,r2,1
 7005e2c:	20800115 	stw	r2,4(r4)
 7005e30:	003f3e06 	br	7005b2c <__alt_data_end+0xff005b2c>
 7005e34:	01003f84 	movi	r4,254
 7005e38:	02001fc4 	movi	r8,127
 7005e3c:	01c01f84 	movi	r7,126
 7005e40:	003e4006 	br	7005744 <__alt_data_end+0xff005744>
 7005e44:	0081c074 	movhi	r2,1793
 7005e48:	10864c04 	addi	r2,r2,6448
 7005e4c:	15000015 	stw	r20,0(r2)
 7005e50:	003f1106 	br	7005a98 <__alt_data_end+0xff005a98>
 7005e54:	00800044 	movi	r2,1
 7005e58:	002b883a 	mov	r21,zero
 7005e5c:	003f1f06 	br	7005adc <__alt_data_end+0xff005adc>
 7005e60:	81400204 	addi	r5,r16,8
 7005e64:	9009883a 	mov	r4,r18
 7005e68:	7004ae00 	call	7004ae0 <_free_r>
 7005e6c:	0081c074 	movhi	r2,1793
 7005e70:	108d2d04 	addi	r2,r2,13492
 7005e74:	10c00017 	ldw	r3,0(r2)
 7005e78:	003f2c06 	br	7005b2c <__alt_data_end+0xff005b2c>
 7005e7c:	00c05504 	movi	r3,340
 7005e80:	18800536 	bltu	r3,r2,7005e98 <_malloc_r+0x7cc>
 7005e84:	3804d3fa 	srli	r2,r7,15
 7005e88:	11401e04 	addi	r5,r2,120
 7005e8c:	10c01dc4 	addi	r3,r2,119
 7005e90:	294b883a 	add	r5,r5,r5
 7005e94:	003f5606 	br	7005bf0 <__alt_data_end+0xff005bf0>
 7005e98:	00c15504 	movi	r3,1364
 7005e9c:	18800536 	bltu	r3,r2,7005eb4 <_malloc_r+0x7e8>
 7005ea0:	3804d4ba 	srli	r2,r7,18
 7005ea4:	11401f44 	addi	r5,r2,125
 7005ea8:	10c01f04 	addi	r3,r2,124
 7005eac:	294b883a 	add	r5,r5,r5
 7005eb0:	003f4f06 	br	7005bf0 <__alt_data_end+0xff005bf0>
 7005eb4:	01403f84 	movi	r5,254
 7005eb8:	00c01f84 	movi	r3,126
 7005ebc:	003f4c06 	br	7005bf0 <__alt_data_end+0xff005bf0>
 7005ec0:	98800117 	ldw	r2,4(r19)
 7005ec4:	003fa006 	br	7005d48 <__alt_data_end+0xff005d48>
 7005ec8:	8808d0fa 	srli	r4,r17,3
 7005ecc:	20800044 	addi	r2,r4,1
 7005ed0:	1085883a 	add	r2,r2,r2
 7005ed4:	003e9006 	br	7005918 <__alt_data_end+0xff005918>

07005ed8 <memchr>:
 7005ed8:	208000cc 	andi	r2,r4,3
 7005edc:	280f883a 	mov	r7,r5
 7005ee0:	10003426 	beq	r2,zero,7005fb4 <memchr+0xdc>
 7005ee4:	30bfffc4 	addi	r2,r6,-1
 7005ee8:	30001a26 	beq	r6,zero,7005f54 <memchr+0x7c>
 7005eec:	20c00003 	ldbu	r3,0(r4)
 7005ef0:	29803fcc 	andi	r6,r5,255
 7005ef4:	30c0051e 	bne	r6,r3,7005f0c <memchr+0x34>
 7005ef8:	00001806 	br	7005f5c <memchr+0x84>
 7005efc:	10001526 	beq	r2,zero,7005f54 <memchr+0x7c>
 7005f00:	20c00003 	ldbu	r3,0(r4)
 7005f04:	10bfffc4 	addi	r2,r2,-1
 7005f08:	30c01426 	beq	r6,r3,7005f5c <memchr+0x84>
 7005f0c:	21000044 	addi	r4,r4,1
 7005f10:	20c000cc 	andi	r3,r4,3
 7005f14:	183ff91e 	bne	r3,zero,7005efc <__alt_data_end+0xff005efc>
 7005f18:	020000c4 	movi	r8,3
 7005f1c:	40801136 	bltu	r8,r2,7005f64 <memchr+0x8c>
 7005f20:	10000c26 	beq	r2,zero,7005f54 <memchr+0x7c>
 7005f24:	20c00003 	ldbu	r3,0(r4)
 7005f28:	29403fcc 	andi	r5,r5,255
 7005f2c:	28c00b26 	beq	r5,r3,7005f5c <memchr+0x84>
 7005f30:	20c00044 	addi	r3,r4,1
 7005f34:	39803fcc 	andi	r6,r7,255
 7005f38:	2089883a 	add	r4,r4,r2
 7005f3c:	00000306 	br	7005f4c <memchr+0x74>
 7005f40:	18c00044 	addi	r3,r3,1
 7005f44:	197fffc3 	ldbu	r5,-1(r3)
 7005f48:	31400526 	beq	r6,r5,7005f60 <memchr+0x88>
 7005f4c:	1805883a 	mov	r2,r3
 7005f50:	20fffb1e 	bne	r4,r3,7005f40 <__alt_data_end+0xff005f40>
 7005f54:	0005883a 	mov	r2,zero
 7005f58:	f800283a 	ret
 7005f5c:	2005883a 	mov	r2,r4
 7005f60:	f800283a 	ret
 7005f64:	28c03fcc 	andi	r3,r5,255
 7005f68:	1812923a 	slli	r9,r3,8
 7005f6c:	02ffbff4 	movhi	r11,65279
 7005f70:	02a02074 	movhi	r10,32897
 7005f74:	48d2b03a 	or	r9,r9,r3
 7005f78:	4806943a 	slli	r3,r9,16
 7005f7c:	5affbfc4 	addi	r11,r11,-257
 7005f80:	52a02004 	addi	r10,r10,-32640
 7005f84:	48d2b03a 	or	r9,r9,r3
 7005f88:	20c00017 	ldw	r3,0(r4)
 7005f8c:	48c6f03a 	xor	r3,r9,r3
 7005f90:	1acd883a 	add	r6,r3,r11
 7005f94:	00c6303a 	nor	r3,zero,r3
 7005f98:	30c6703a 	and	r3,r6,r3
 7005f9c:	1a86703a 	and	r3,r3,r10
 7005fa0:	183fe01e 	bne	r3,zero,7005f24 <__alt_data_end+0xff005f24>
 7005fa4:	10bfff04 	addi	r2,r2,-4
 7005fa8:	21000104 	addi	r4,r4,4
 7005fac:	40bff636 	bltu	r8,r2,7005f88 <__alt_data_end+0xff005f88>
 7005fb0:	003fdb06 	br	7005f20 <__alt_data_end+0xff005f20>
 7005fb4:	3005883a 	mov	r2,r6
 7005fb8:	003fd706 	br	7005f18 <__alt_data_end+0xff005f18>

07005fbc <memcpy>:
 7005fbc:	defffd04 	addi	sp,sp,-12
 7005fc0:	dfc00215 	stw	ra,8(sp)
 7005fc4:	dc400115 	stw	r17,4(sp)
 7005fc8:	dc000015 	stw	r16,0(sp)
 7005fcc:	00c003c4 	movi	r3,15
 7005fd0:	2005883a 	mov	r2,r4
 7005fd4:	1980452e 	bgeu	r3,r6,70060ec <memcpy+0x130>
 7005fd8:	2906b03a 	or	r3,r5,r4
 7005fdc:	18c000cc 	andi	r3,r3,3
 7005fe0:	1800441e 	bne	r3,zero,70060f4 <memcpy+0x138>
 7005fe4:	347ffc04 	addi	r17,r6,-16
 7005fe8:	8822d13a 	srli	r17,r17,4
 7005fec:	28c00104 	addi	r3,r5,4
 7005ff0:	23400104 	addi	r13,r4,4
 7005ff4:	8820913a 	slli	r16,r17,4
 7005ff8:	2b000204 	addi	r12,r5,8
 7005ffc:	22c00204 	addi	r11,r4,8
 7006000:	84000504 	addi	r16,r16,20
 7006004:	2a800304 	addi	r10,r5,12
 7006008:	22400304 	addi	r9,r4,12
 700600c:	2c21883a 	add	r16,r5,r16
 7006010:	2811883a 	mov	r8,r5
 7006014:	200f883a 	mov	r7,r4
 7006018:	41000017 	ldw	r4,0(r8)
 700601c:	1fc00017 	ldw	ra,0(r3)
 7006020:	63c00017 	ldw	r15,0(r12)
 7006024:	39000015 	stw	r4,0(r7)
 7006028:	53800017 	ldw	r14,0(r10)
 700602c:	6fc00015 	stw	ra,0(r13)
 7006030:	5bc00015 	stw	r15,0(r11)
 7006034:	4b800015 	stw	r14,0(r9)
 7006038:	18c00404 	addi	r3,r3,16
 700603c:	39c00404 	addi	r7,r7,16
 7006040:	42000404 	addi	r8,r8,16
 7006044:	6b400404 	addi	r13,r13,16
 7006048:	63000404 	addi	r12,r12,16
 700604c:	5ac00404 	addi	r11,r11,16
 7006050:	52800404 	addi	r10,r10,16
 7006054:	4a400404 	addi	r9,r9,16
 7006058:	1c3fef1e 	bne	r3,r16,7006018 <__alt_data_end+0xff006018>
 700605c:	89c00044 	addi	r7,r17,1
 7006060:	380e913a 	slli	r7,r7,4
 7006064:	310003cc 	andi	r4,r6,15
 7006068:	02c000c4 	movi	r11,3
 700606c:	11c7883a 	add	r3,r2,r7
 7006070:	29cb883a 	add	r5,r5,r7
 7006074:	5900212e 	bgeu	r11,r4,70060fc <memcpy+0x140>
 7006078:	1813883a 	mov	r9,r3
 700607c:	2811883a 	mov	r8,r5
 7006080:	200f883a 	mov	r7,r4
 7006084:	42800017 	ldw	r10,0(r8)
 7006088:	4a400104 	addi	r9,r9,4
 700608c:	39ffff04 	addi	r7,r7,-4
 7006090:	4abfff15 	stw	r10,-4(r9)
 7006094:	42000104 	addi	r8,r8,4
 7006098:	59fffa36 	bltu	r11,r7,7006084 <__alt_data_end+0xff006084>
 700609c:	213fff04 	addi	r4,r4,-4
 70060a0:	2008d0ba 	srli	r4,r4,2
 70060a4:	318000cc 	andi	r6,r6,3
 70060a8:	21000044 	addi	r4,r4,1
 70060ac:	2109883a 	add	r4,r4,r4
 70060b0:	2109883a 	add	r4,r4,r4
 70060b4:	1907883a 	add	r3,r3,r4
 70060b8:	290b883a 	add	r5,r5,r4
 70060bc:	30000626 	beq	r6,zero,70060d8 <memcpy+0x11c>
 70060c0:	198d883a 	add	r6,r3,r6
 70060c4:	29c00003 	ldbu	r7,0(r5)
 70060c8:	18c00044 	addi	r3,r3,1
 70060cc:	29400044 	addi	r5,r5,1
 70060d0:	19ffffc5 	stb	r7,-1(r3)
 70060d4:	19bffb1e 	bne	r3,r6,70060c4 <__alt_data_end+0xff0060c4>
 70060d8:	dfc00217 	ldw	ra,8(sp)
 70060dc:	dc400117 	ldw	r17,4(sp)
 70060e0:	dc000017 	ldw	r16,0(sp)
 70060e4:	dec00304 	addi	sp,sp,12
 70060e8:	f800283a 	ret
 70060ec:	2007883a 	mov	r3,r4
 70060f0:	003ff206 	br	70060bc <__alt_data_end+0xff0060bc>
 70060f4:	2007883a 	mov	r3,r4
 70060f8:	003ff106 	br	70060c0 <__alt_data_end+0xff0060c0>
 70060fc:	200d883a 	mov	r6,r4
 7006100:	003fee06 	br	70060bc <__alt_data_end+0xff0060bc>

07006104 <memmove>:
 7006104:	2005883a 	mov	r2,r4
 7006108:	29000b2e 	bgeu	r5,r4,7006138 <memmove+0x34>
 700610c:	298f883a 	add	r7,r5,r6
 7006110:	21c0092e 	bgeu	r4,r7,7006138 <memmove+0x34>
 7006114:	2187883a 	add	r3,r4,r6
 7006118:	198bc83a 	sub	r5,r3,r6
 700611c:	30004826 	beq	r6,zero,7006240 <memmove+0x13c>
 7006120:	39ffffc4 	addi	r7,r7,-1
 7006124:	39000003 	ldbu	r4,0(r7)
 7006128:	18ffffc4 	addi	r3,r3,-1
 700612c:	19000005 	stb	r4,0(r3)
 7006130:	28fffb1e 	bne	r5,r3,7006120 <__alt_data_end+0xff006120>
 7006134:	f800283a 	ret
 7006138:	00c003c4 	movi	r3,15
 700613c:	1980412e 	bgeu	r3,r6,7006244 <memmove+0x140>
 7006140:	2886b03a 	or	r3,r5,r2
 7006144:	18c000cc 	andi	r3,r3,3
 7006148:	1800401e 	bne	r3,zero,700624c <memmove+0x148>
 700614c:	33fffc04 	addi	r15,r6,-16
 7006150:	781ed13a 	srli	r15,r15,4
 7006154:	28c00104 	addi	r3,r5,4
 7006158:	13400104 	addi	r13,r2,4
 700615c:	781c913a 	slli	r14,r15,4
 7006160:	2b000204 	addi	r12,r5,8
 7006164:	12c00204 	addi	r11,r2,8
 7006168:	73800504 	addi	r14,r14,20
 700616c:	2a800304 	addi	r10,r5,12
 7006170:	12400304 	addi	r9,r2,12
 7006174:	2b9d883a 	add	r14,r5,r14
 7006178:	2811883a 	mov	r8,r5
 700617c:	100f883a 	mov	r7,r2
 7006180:	41000017 	ldw	r4,0(r8)
 7006184:	39c00404 	addi	r7,r7,16
 7006188:	18c00404 	addi	r3,r3,16
 700618c:	393ffc15 	stw	r4,-16(r7)
 7006190:	193ffc17 	ldw	r4,-16(r3)
 7006194:	6b400404 	addi	r13,r13,16
 7006198:	5ac00404 	addi	r11,r11,16
 700619c:	693ffc15 	stw	r4,-16(r13)
 70061a0:	61000017 	ldw	r4,0(r12)
 70061a4:	4a400404 	addi	r9,r9,16
 70061a8:	42000404 	addi	r8,r8,16
 70061ac:	593ffc15 	stw	r4,-16(r11)
 70061b0:	51000017 	ldw	r4,0(r10)
 70061b4:	63000404 	addi	r12,r12,16
 70061b8:	52800404 	addi	r10,r10,16
 70061bc:	493ffc15 	stw	r4,-16(r9)
 70061c0:	1bbfef1e 	bne	r3,r14,7006180 <__alt_data_end+0xff006180>
 70061c4:	79000044 	addi	r4,r15,1
 70061c8:	2008913a 	slli	r4,r4,4
 70061cc:	328003cc 	andi	r10,r6,15
 70061d0:	02c000c4 	movi	r11,3
 70061d4:	1107883a 	add	r3,r2,r4
 70061d8:	290b883a 	add	r5,r5,r4
 70061dc:	5a801e2e 	bgeu	r11,r10,7006258 <memmove+0x154>
 70061e0:	1813883a 	mov	r9,r3
 70061e4:	2811883a 	mov	r8,r5
 70061e8:	500f883a 	mov	r7,r10
 70061ec:	41000017 	ldw	r4,0(r8)
 70061f0:	4a400104 	addi	r9,r9,4
 70061f4:	39ffff04 	addi	r7,r7,-4
 70061f8:	493fff15 	stw	r4,-4(r9)
 70061fc:	42000104 	addi	r8,r8,4
 7006200:	59fffa36 	bltu	r11,r7,70061ec <__alt_data_end+0xff0061ec>
 7006204:	513fff04 	addi	r4,r10,-4
 7006208:	2008d0ba 	srli	r4,r4,2
 700620c:	318000cc 	andi	r6,r6,3
 7006210:	21000044 	addi	r4,r4,1
 7006214:	2109883a 	add	r4,r4,r4
 7006218:	2109883a 	add	r4,r4,r4
 700621c:	1907883a 	add	r3,r3,r4
 7006220:	290b883a 	add	r5,r5,r4
 7006224:	30000b26 	beq	r6,zero,7006254 <memmove+0x150>
 7006228:	198d883a 	add	r6,r3,r6
 700622c:	29c00003 	ldbu	r7,0(r5)
 7006230:	18c00044 	addi	r3,r3,1
 7006234:	29400044 	addi	r5,r5,1
 7006238:	19ffffc5 	stb	r7,-1(r3)
 700623c:	19bffb1e 	bne	r3,r6,700622c <__alt_data_end+0xff00622c>
 7006240:	f800283a 	ret
 7006244:	1007883a 	mov	r3,r2
 7006248:	003ff606 	br	7006224 <__alt_data_end+0xff006224>
 700624c:	1007883a 	mov	r3,r2
 7006250:	003ff506 	br	7006228 <__alt_data_end+0xff006228>
 7006254:	f800283a 	ret
 7006258:	500d883a 	mov	r6,r10
 700625c:	003ff106 	br	7006224 <__alt_data_end+0xff006224>

07006260 <memset>:
 7006260:	20c000cc 	andi	r3,r4,3
 7006264:	2005883a 	mov	r2,r4
 7006268:	18004426 	beq	r3,zero,700637c <memset+0x11c>
 700626c:	31ffffc4 	addi	r7,r6,-1
 7006270:	30004026 	beq	r6,zero,7006374 <memset+0x114>
 7006274:	2813883a 	mov	r9,r5
 7006278:	200d883a 	mov	r6,r4
 700627c:	2007883a 	mov	r3,r4
 7006280:	00000406 	br	7006294 <memset+0x34>
 7006284:	3a3fffc4 	addi	r8,r7,-1
 7006288:	31800044 	addi	r6,r6,1
 700628c:	38003926 	beq	r7,zero,7006374 <memset+0x114>
 7006290:	400f883a 	mov	r7,r8
 7006294:	18c00044 	addi	r3,r3,1
 7006298:	32400005 	stb	r9,0(r6)
 700629c:	1a0000cc 	andi	r8,r3,3
 70062a0:	403ff81e 	bne	r8,zero,7006284 <__alt_data_end+0xff006284>
 70062a4:	010000c4 	movi	r4,3
 70062a8:	21c02d2e 	bgeu	r4,r7,7006360 <memset+0x100>
 70062ac:	29003fcc 	andi	r4,r5,255
 70062b0:	200c923a 	slli	r6,r4,8
 70062b4:	3108b03a 	or	r4,r6,r4
 70062b8:	200c943a 	slli	r6,r4,16
 70062bc:	218cb03a 	or	r6,r4,r6
 70062c0:	010003c4 	movi	r4,15
 70062c4:	21c0182e 	bgeu	r4,r7,7006328 <memset+0xc8>
 70062c8:	3b3ffc04 	addi	r12,r7,-16
 70062cc:	6018d13a 	srli	r12,r12,4
 70062d0:	1a000104 	addi	r8,r3,4
 70062d4:	1ac00204 	addi	r11,r3,8
 70062d8:	6008913a 	slli	r4,r12,4
 70062dc:	1a800304 	addi	r10,r3,12
 70062e0:	1813883a 	mov	r9,r3
 70062e4:	21000504 	addi	r4,r4,20
 70062e8:	1909883a 	add	r4,r3,r4
 70062ec:	49800015 	stw	r6,0(r9)
 70062f0:	41800015 	stw	r6,0(r8)
 70062f4:	59800015 	stw	r6,0(r11)
 70062f8:	51800015 	stw	r6,0(r10)
 70062fc:	42000404 	addi	r8,r8,16
 7006300:	4a400404 	addi	r9,r9,16
 7006304:	5ac00404 	addi	r11,r11,16
 7006308:	52800404 	addi	r10,r10,16
 700630c:	413ff71e 	bne	r8,r4,70062ec <__alt_data_end+0xff0062ec>
 7006310:	63000044 	addi	r12,r12,1
 7006314:	6018913a 	slli	r12,r12,4
 7006318:	39c003cc 	andi	r7,r7,15
 700631c:	010000c4 	movi	r4,3
 7006320:	1b07883a 	add	r3,r3,r12
 7006324:	21c00e2e 	bgeu	r4,r7,7006360 <memset+0x100>
 7006328:	1813883a 	mov	r9,r3
 700632c:	3811883a 	mov	r8,r7
 7006330:	010000c4 	movi	r4,3
 7006334:	49800015 	stw	r6,0(r9)
 7006338:	423fff04 	addi	r8,r8,-4
 700633c:	4a400104 	addi	r9,r9,4
 7006340:	223ffc36 	bltu	r4,r8,7006334 <__alt_data_end+0xff006334>
 7006344:	393fff04 	addi	r4,r7,-4
 7006348:	2008d0ba 	srli	r4,r4,2
 700634c:	39c000cc 	andi	r7,r7,3
 7006350:	21000044 	addi	r4,r4,1
 7006354:	2109883a 	add	r4,r4,r4
 7006358:	2109883a 	add	r4,r4,r4
 700635c:	1907883a 	add	r3,r3,r4
 7006360:	38000526 	beq	r7,zero,7006378 <memset+0x118>
 7006364:	19cf883a 	add	r7,r3,r7
 7006368:	19400005 	stb	r5,0(r3)
 700636c:	18c00044 	addi	r3,r3,1
 7006370:	38fffd1e 	bne	r7,r3,7006368 <__alt_data_end+0xff006368>
 7006374:	f800283a 	ret
 7006378:	f800283a 	ret
 700637c:	2007883a 	mov	r3,r4
 7006380:	300f883a 	mov	r7,r6
 7006384:	003fc706 	br	70062a4 <__alt_data_end+0xff0062a4>

07006388 <_Balloc>:
 7006388:	20801317 	ldw	r2,76(r4)
 700638c:	defffc04 	addi	sp,sp,-16
 7006390:	dc400115 	stw	r17,4(sp)
 7006394:	dc000015 	stw	r16,0(sp)
 7006398:	dfc00315 	stw	ra,12(sp)
 700639c:	dc800215 	stw	r18,8(sp)
 70063a0:	2023883a 	mov	r17,r4
 70063a4:	2821883a 	mov	r16,r5
 70063a8:	10000f26 	beq	r2,zero,70063e8 <_Balloc+0x60>
 70063ac:	8407883a 	add	r3,r16,r16
 70063b0:	18c7883a 	add	r3,r3,r3
 70063b4:	10c7883a 	add	r3,r2,r3
 70063b8:	18800017 	ldw	r2,0(r3)
 70063bc:	10001126 	beq	r2,zero,7006404 <_Balloc+0x7c>
 70063c0:	11000017 	ldw	r4,0(r2)
 70063c4:	19000015 	stw	r4,0(r3)
 70063c8:	10000415 	stw	zero,16(r2)
 70063cc:	10000315 	stw	zero,12(r2)
 70063d0:	dfc00317 	ldw	ra,12(sp)
 70063d4:	dc800217 	ldw	r18,8(sp)
 70063d8:	dc400117 	ldw	r17,4(sp)
 70063dc:	dc000017 	ldw	r16,0(sp)
 70063e0:	dec00404 	addi	sp,sp,16
 70063e4:	f800283a 	ret
 70063e8:	01800844 	movi	r6,33
 70063ec:	01400104 	movi	r5,4
 70063f0:	70095840 	call	7009584 <_calloc_r>
 70063f4:	88801315 	stw	r2,76(r17)
 70063f8:	103fec1e 	bne	r2,zero,70063ac <__alt_data_end+0xff0063ac>
 70063fc:	0005883a 	mov	r2,zero
 7006400:	003ff306 	br	70063d0 <__alt_data_end+0xff0063d0>
 7006404:	01400044 	movi	r5,1
 7006408:	2c24983a 	sll	r18,r5,r16
 700640c:	8809883a 	mov	r4,r17
 7006410:	91800144 	addi	r6,r18,5
 7006414:	318d883a 	add	r6,r6,r6
 7006418:	318d883a 	add	r6,r6,r6
 700641c:	70095840 	call	7009584 <_calloc_r>
 7006420:	103ff626 	beq	r2,zero,70063fc <__alt_data_end+0xff0063fc>
 7006424:	14000115 	stw	r16,4(r2)
 7006428:	14800215 	stw	r18,8(r2)
 700642c:	003fe606 	br	70063c8 <__alt_data_end+0xff0063c8>

07006430 <_Bfree>:
 7006430:	28000826 	beq	r5,zero,7006454 <_Bfree+0x24>
 7006434:	28c00117 	ldw	r3,4(r5)
 7006438:	20801317 	ldw	r2,76(r4)
 700643c:	18c7883a 	add	r3,r3,r3
 7006440:	18c7883a 	add	r3,r3,r3
 7006444:	10c5883a 	add	r2,r2,r3
 7006448:	10c00017 	ldw	r3,0(r2)
 700644c:	28c00015 	stw	r3,0(r5)
 7006450:	11400015 	stw	r5,0(r2)
 7006454:	f800283a 	ret

07006458 <__multadd>:
 7006458:	defffa04 	addi	sp,sp,-24
 700645c:	dc800315 	stw	r18,12(sp)
 7006460:	dc400215 	stw	r17,8(sp)
 7006464:	dc000115 	stw	r16,4(sp)
 7006468:	2823883a 	mov	r17,r5
 700646c:	2c000417 	ldw	r16,16(r5)
 7006470:	dfc00515 	stw	ra,20(sp)
 7006474:	dcc00415 	stw	r19,16(sp)
 7006478:	2025883a 	mov	r18,r4
 700647c:	29400504 	addi	r5,r5,20
 7006480:	0011883a 	mov	r8,zero
 7006484:	28c00017 	ldw	r3,0(r5)
 7006488:	29400104 	addi	r5,r5,4
 700648c:	42000044 	addi	r8,r8,1
 7006490:	18bfffcc 	andi	r2,r3,65535
 7006494:	1185383a 	mul	r2,r2,r6
 7006498:	1806d43a 	srli	r3,r3,16
 700649c:	11cf883a 	add	r7,r2,r7
 70064a0:	3808d43a 	srli	r4,r7,16
 70064a4:	1987383a 	mul	r3,r3,r6
 70064a8:	38bfffcc 	andi	r2,r7,65535
 70064ac:	1907883a 	add	r3,r3,r4
 70064b0:	1808943a 	slli	r4,r3,16
 70064b4:	180ed43a 	srli	r7,r3,16
 70064b8:	2085883a 	add	r2,r4,r2
 70064bc:	28bfff15 	stw	r2,-4(r5)
 70064c0:	443ff016 	blt	r8,r16,7006484 <__alt_data_end+0xff006484>
 70064c4:	38000926 	beq	r7,zero,70064ec <__multadd+0x94>
 70064c8:	88800217 	ldw	r2,8(r17)
 70064cc:	80800f0e 	bge	r16,r2,700650c <__multadd+0xb4>
 70064d0:	80800144 	addi	r2,r16,5
 70064d4:	1085883a 	add	r2,r2,r2
 70064d8:	1085883a 	add	r2,r2,r2
 70064dc:	8885883a 	add	r2,r17,r2
 70064e0:	11c00015 	stw	r7,0(r2)
 70064e4:	84000044 	addi	r16,r16,1
 70064e8:	8c000415 	stw	r16,16(r17)
 70064ec:	8805883a 	mov	r2,r17
 70064f0:	dfc00517 	ldw	ra,20(sp)
 70064f4:	dcc00417 	ldw	r19,16(sp)
 70064f8:	dc800317 	ldw	r18,12(sp)
 70064fc:	dc400217 	ldw	r17,8(sp)
 7006500:	dc000117 	ldw	r16,4(sp)
 7006504:	dec00604 	addi	sp,sp,24
 7006508:	f800283a 	ret
 700650c:	89400117 	ldw	r5,4(r17)
 7006510:	9009883a 	mov	r4,r18
 7006514:	d9c00015 	stw	r7,0(sp)
 7006518:	29400044 	addi	r5,r5,1
 700651c:	70063880 	call	7006388 <_Balloc>
 7006520:	89800417 	ldw	r6,16(r17)
 7006524:	89400304 	addi	r5,r17,12
 7006528:	11000304 	addi	r4,r2,12
 700652c:	31800084 	addi	r6,r6,2
 7006530:	318d883a 	add	r6,r6,r6
 7006534:	318d883a 	add	r6,r6,r6
 7006538:	1027883a 	mov	r19,r2
 700653c:	7005fbc0 	call	7005fbc <memcpy>
 7006540:	d9c00017 	ldw	r7,0(sp)
 7006544:	88000a26 	beq	r17,zero,7006570 <__multadd+0x118>
 7006548:	88c00117 	ldw	r3,4(r17)
 700654c:	90801317 	ldw	r2,76(r18)
 7006550:	18c7883a 	add	r3,r3,r3
 7006554:	18c7883a 	add	r3,r3,r3
 7006558:	10c5883a 	add	r2,r2,r3
 700655c:	10c00017 	ldw	r3,0(r2)
 7006560:	88c00015 	stw	r3,0(r17)
 7006564:	14400015 	stw	r17,0(r2)
 7006568:	9823883a 	mov	r17,r19
 700656c:	003fd806 	br	70064d0 <__alt_data_end+0xff0064d0>
 7006570:	9823883a 	mov	r17,r19
 7006574:	003fd606 	br	70064d0 <__alt_data_end+0xff0064d0>

07006578 <__s2b>:
 7006578:	defff904 	addi	sp,sp,-28
 700657c:	dc400115 	stw	r17,4(sp)
 7006580:	dc000015 	stw	r16,0(sp)
 7006584:	2023883a 	mov	r17,r4
 7006588:	2821883a 	mov	r16,r5
 700658c:	39000204 	addi	r4,r7,8
 7006590:	01400244 	movi	r5,9
 7006594:	dcc00315 	stw	r19,12(sp)
 7006598:	dc800215 	stw	r18,8(sp)
 700659c:	dfc00615 	stw	ra,24(sp)
 70065a0:	dd400515 	stw	r21,20(sp)
 70065a4:	dd000415 	stw	r20,16(sp)
 70065a8:	3825883a 	mov	r18,r7
 70065ac:	3027883a 	mov	r19,r6
 70065b0:	700a75c0 	call	700a75c <__divsi3>
 70065b4:	00c00044 	movi	r3,1
 70065b8:	000b883a 	mov	r5,zero
 70065bc:	1880030e 	bge	r3,r2,70065cc <__s2b+0x54>
 70065c0:	18c7883a 	add	r3,r3,r3
 70065c4:	29400044 	addi	r5,r5,1
 70065c8:	18bffd16 	blt	r3,r2,70065c0 <__alt_data_end+0xff0065c0>
 70065cc:	8809883a 	mov	r4,r17
 70065d0:	70063880 	call	7006388 <_Balloc>
 70065d4:	d8c00717 	ldw	r3,28(sp)
 70065d8:	10c00515 	stw	r3,20(r2)
 70065dc:	00c00044 	movi	r3,1
 70065e0:	10c00415 	stw	r3,16(r2)
 70065e4:	00c00244 	movi	r3,9
 70065e8:	1cc0210e 	bge	r3,r19,7006670 <__s2b+0xf8>
 70065ec:	80eb883a 	add	r21,r16,r3
 70065f0:	a829883a 	mov	r20,r21
 70065f4:	84e1883a 	add	r16,r16,r19
 70065f8:	a1c00007 	ldb	r7,0(r20)
 70065fc:	01800284 	movi	r6,10
 7006600:	a5000044 	addi	r20,r20,1
 7006604:	100b883a 	mov	r5,r2
 7006608:	39fff404 	addi	r7,r7,-48
 700660c:	8809883a 	mov	r4,r17
 7006610:	70064580 	call	7006458 <__multadd>
 7006614:	a43ff81e 	bne	r20,r16,70065f8 <__alt_data_end+0xff0065f8>
 7006618:	ace1883a 	add	r16,r21,r19
 700661c:	843ffe04 	addi	r16,r16,-8
 7006620:	9c800a0e 	bge	r19,r18,700664c <__s2b+0xd4>
 7006624:	94e5c83a 	sub	r18,r18,r19
 7006628:	84a5883a 	add	r18,r16,r18
 700662c:	81c00007 	ldb	r7,0(r16)
 7006630:	01800284 	movi	r6,10
 7006634:	84000044 	addi	r16,r16,1
 7006638:	100b883a 	mov	r5,r2
 700663c:	39fff404 	addi	r7,r7,-48
 7006640:	8809883a 	mov	r4,r17
 7006644:	70064580 	call	7006458 <__multadd>
 7006648:	84bff81e 	bne	r16,r18,700662c <__alt_data_end+0xff00662c>
 700664c:	dfc00617 	ldw	ra,24(sp)
 7006650:	dd400517 	ldw	r21,20(sp)
 7006654:	dd000417 	ldw	r20,16(sp)
 7006658:	dcc00317 	ldw	r19,12(sp)
 700665c:	dc800217 	ldw	r18,8(sp)
 7006660:	dc400117 	ldw	r17,4(sp)
 7006664:	dc000017 	ldw	r16,0(sp)
 7006668:	dec00704 	addi	sp,sp,28
 700666c:	f800283a 	ret
 7006670:	84000284 	addi	r16,r16,10
 7006674:	1827883a 	mov	r19,r3
 7006678:	003fe906 	br	7006620 <__alt_data_end+0xff006620>

0700667c <__hi0bits>:
 700667c:	20bfffec 	andhi	r2,r4,65535
 7006680:	1000141e 	bne	r2,zero,70066d4 <__hi0bits+0x58>
 7006684:	2008943a 	slli	r4,r4,16
 7006688:	00800404 	movi	r2,16
 700668c:	20ffc02c 	andhi	r3,r4,65280
 7006690:	1800021e 	bne	r3,zero,700669c <__hi0bits+0x20>
 7006694:	2008923a 	slli	r4,r4,8
 7006698:	10800204 	addi	r2,r2,8
 700669c:	20fc002c 	andhi	r3,r4,61440
 70066a0:	1800021e 	bne	r3,zero,70066ac <__hi0bits+0x30>
 70066a4:	2008913a 	slli	r4,r4,4
 70066a8:	10800104 	addi	r2,r2,4
 70066ac:	20f0002c 	andhi	r3,r4,49152
 70066b0:	1800031e 	bne	r3,zero,70066c0 <__hi0bits+0x44>
 70066b4:	2109883a 	add	r4,r4,r4
 70066b8:	10800084 	addi	r2,r2,2
 70066bc:	2109883a 	add	r4,r4,r4
 70066c0:	20000316 	blt	r4,zero,70066d0 <__hi0bits+0x54>
 70066c4:	2110002c 	andhi	r4,r4,16384
 70066c8:	2000041e 	bne	r4,zero,70066dc <__hi0bits+0x60>
 70066cc:	00800804 	movi	r2,32
 70066d0:	f800283a 	ret
 70066d4:	0005883a 	mov	r2,zero
 70066d8:	003fec06 	br	700668c <__alt_data_end+0xff00668c>
 70066dc:	10800044 	addi	r2,r2,1
 70066e0:	f800283a 	ret

070066e4 <__lo0bits>:
 70066e4:	20c00017 	ldw	r3,0(r4)
 70066e8:	188001cc 	andi	r2,r3,7
 70066ec:	10000826 	beq	r2,zero,7006710 <__lo0bits+0x2c>
 70066f0:	1880004c 	andi	r2,r3,1
 70066f4:	1000211e 	bne	r2,zero,700677c <__lo0bits+0x98>
 70066f8:	1880008c 	andi	r2,r3,2
 70066fc:	1000211e 	bne	r2,zero,7006784 <__lo0bits+0xa0>
 7006700:	1806d0ba 	srli	r3,r3,2
 7006704:	00800084 	movi	r2,2
 7006708:	20c00015 	stw	r3,0(r4)
 700670c:	f800283a 	ret
 7006710:	18bfffcc 	andi	r2,r3,65535
 7006714:	10001326 	beq	r2,zero,7006764 <__lo0bits+0x80>
 7006718:	0005883a 	mov	r2,zero
 700671c:	19403fcc 	andi	r5,r3,255
 7006720:	2800021e 	bne	r5,zero,700672c <__lo0bits+0x48>
 7006724:	1806d23a 	srli	r3,r3,8
 7006728:	10800204 	addi	r2,r2,8
 700672c:	194003cc 	andi	r5,r3,15
 7006730:	2800021e 	bne	r5,zero,700673c <__lo0bits+0x58>
 7006734:	1806d13a 	srli	r3,r3,4
 7006738:	10800104 	addi	r2,r2,4
 700673c:	194000cc 	andi	r5,r3,3
 7006740:	2800021e 	bne	r5,zero,700674c <__lo0bits+0x68>
 7006744:	1806d0ba 	srli	r3,r3,2
 7006748:	10800084 	addi	r2,r2,2
 700674c:	1940004c 	andi	r5,r3,1
 7006750:	2800081e 	bne	r5,zero,7006774 <__lo0bits+0x90>
 7006754:	1806d07a 	srli	r3,r3,1
 7006758:	1800051e 	bne	r3,zero,7006770 <__lo0bits+0x8c>
 700675c:	00800804 	movi	r2,32
 7006760:	f800283a 	ret
 7006764:	1806d43a 	srli	r3,r3,16
 7006768:	00800404 	movi	r2,16
 700676c:	003feb06 	br	700671c <__alt_data_end+0xff00671c>
 7006770:	10800044 	addi	r2,r2,1
 7006774:	20c00015 	stw	r3,0(r4)
 7006778:	f800283a 	ret
 700677c:	0005883a 	mov	r2,zero
 7006780:	f800283a 	ret
 7006784:	1806d07a 	srli	r3,r3,1
 7006788:	00800044 	movi	r2,1
 700678c:	20c00015 	stw	r3,0(r4)
 7006790:	f800283a 	ret

07006794 <__i2b>:
 7006794:	defffd04 	addi	sp,sp,-12
 7006798:	dc000015 	stw	r16,0(sp)
 700679c:	04000044 	movi	r16,1
 70067a0:	dc400115 	stw	r17,4(sp)
 70067a4:	2823883a 	mov	r17,r5
 70067a8:	800b883a 	mov	r5,r16
 70067ac:	dfc00215 	stw	ra,8(sp)
 70067b0:	70063880 	call	7006388 <_Balloc>
 70067b4:	14400515 	stw	r17,20(r2)
 70067b8:	14000415 	stw	r16,16(r2)
 70067bc:	dfc00217 	ldw	ra,8(sp)
 70067c0:	dc400117 	ldw	r17,4(sp)
 70067c4:	dc000017 	ldw	r16,0(sp)
 70067c8:	dec00304 	addi	sp,sp,12
 70067cc:	f800283a 	ret

070067d0 <__multiply>:
 70067d0:	defffa04 	addi	sp,sp,-24
 70067d4:	dcc00315 	stw	r19,12(sp)
 70067d8:	dc800215 	stw	r18,8(sp)
 70067dc:	34c00417 	ldw	r19,16(r6)
 70067e0:	2c800417 	ldw	r18,16(r5)
 70067e4:	dd000415 	stw	r20,16(sp)
 70067e8:	dc400115 	stw	r17,4(sp)
 70067ec:	dfc00515 	stw	ra,20(sp)
 70067f0:	dc000015 	stw	r16,0(sp)
 70067f4:	2829883a 	mov	r20,r5
 70067f8:	3023883a 	mov	r17,r6
 70067fc:	94c0050e 	bge	r18,r19,7006814 <__multiply+0x44>
 7006800:	9007883a 	mov	r3,r18
 7006804:	3029883a 	mov	r20,r6
 7006808:	9825883a 	mov	r18,r19
 700680c:	2823883a 	mov	r17,r5
 7006810:	1827883a 	mov	r19,r3
 7006814:	a0800217 	ldw	r2,8(r20)
 7006818:	94e1883a 	add	r16,r18,r19
 700681c:	a1400117 	ldw	r5,4(r20)
 7006820:	1400010e 	bge	r2,r16,7006828 <__multiply+0x58>
 7006824:	29400044 	addi	r5,r5,1
 7006828:	70063880 	call	7006388 <_Balloc>
 700682c:	8415883a 	add	r10,r16,r16
 7006830:	12c00504 	addi	r11,r2,20
 7006834:	5295883a 	add	r10,r10,r10
 7006838:	5a95883a 	add	r10,r11,r10
 700683c:	5807883a 	mov	r3,r11
 7006840:	5a80032e 	bgeu	r11,r10,7006850 <__multiply+0x80>
 7006844:	18000015 	stw	zero,0(r3)
 7006848:	18c00104 	addi	r3,r3,4
 700684c:	1abffd36 	bltu	r3,r10,7006844 <__alt_data_end+0xff006844>
 7006850:	9ce7883a 	add	r19,r19,r19
 7006854:	94a5883a 	add	r18,r18,r18
 7006858:	89800504 	addi	r6,r17,20
 700685c:	9ce7883a 	add	r19,r19,r19
 7006860:	a3400504 	addi	r13,r20,20
 7006864:	94a5883a 	add	r18,r18,r18
 7006868:	34d9883a 	add	r12,r6,r19
 700686c:	6c93883a 	add	r9,r13,r18
 7006870:	3300422e 	bgeu	r6,r12,700697c <__multiply+0x1ac>
 7006874:	37c00017 	ldw	ra,0(r6)
 7006878:	fbffffcc 	andi	r15,ra,65535
 700687c:	78001b26 	beq	r15,zero,70068ec <__multiply+0x11c>
 7006880:	5811883a 	mov	r8,r11
 7006884:	681d883a 	mov	r14,r13
 7006888:	000f883a 	mov	r7,zero
 700688c:	71000017 	ldw	r4,0(r14)
 7006890:	40c00017 	ldw	r3,0(r8)
 7006894:	73800104 	addi	r14,r14,4
 7006898:	217fffcc 	andi	r5,r4,65535
 700689c:	2bcb383a 	mul	r5,r5,r15
 70068a0:	2008d43a 	srli	r4,r4,16
 70068a4:	1c7fffcc 	andi	r17,r3,65535
 70068a8:	2c4b883a 	add	r5,r5,r17
 70068ac:	29cb883a 	add	r5,r5,r7
 70068b0:	23c9383a 	mul	r4,r4,r15
 70068b4:	1806d43a 	srli	r3,r3,16
 70068b8:	280ed43a 	srli	r7,r5,16
 70068bc:	297fffcc 	andi	r5,r5,65535
 70068c0:	20c7883a 	add	r3,r4,r3
 70068c4:	19c7883a 	add	r3,r3,r7
 70068c8:	1808943a 	slli	r4,r3,16
 70068cc:	4023883a 	mov	r17,r8
 70068d0:	180ed43a 	srli	r7,r3,16
 70068d4:	214ab03a 	or	r5,r4,r5
 70068d8:	41400015 	stw	r5,0(r8)
 70068dc:	42000104 	addi	r8,r8,4
 70068e0:	727fea36 	bltu	r14,r9,700688c <__alt_data_end+0xff00688c>
 70068e4:	89c00115 	stw	r7,4(r17)
 70068e8:	37c00017 	ldw	ra,0(r6)
 70068ec:	f83ed43a 	srli	ra,ra,16
 70068f0:	f8001f26 	beq	ra,zero,7006970 <__multiply+0x1a0>
 70068f4:	58c00017 	ldw	r3,0(r11)
 70068f8:	681d883a 	mov	r14,r13
 70068fc:	581f883a 	mov	r15,r11
 7006900:	1811883a 	mov	r8,r3
 7006904:	5825883a 	mov	r18,r11
 7006908:	000f883a 	mov	r7,zero
 700690c:	00000106 	br	7006914 <__multiply+0x144>
 7006910:	8825883a 	mov	r18,r17
 7006914:	7140000b 	ldhu	r5,0(r14)
 7006918:	4010d43a 	srli	r8,r8,16
 700691c:	193fffcc 	andi	r4,r3,65535
 7006920:	2fcb383a 	mul	r5,r5,ra
 7006924:	7bc00104 	addi	r15,r15,4
 7006928:	73800104 	addi	r14,r14,4
 700692c:	2a0b883a 	add	r5,r5,r8
 7006930:	29cb883a 	add	r5,r5,r7
 7006934:	2806943a 	slli	r3,r5,16
 7006938:	94400104 	addi	r17,r18,4
 700693c:	280ad43a 	srli	r5,r5,16
 7006940:	1908b03a 	or	r4,r3,r4
 7006944:	793fff15 	stw	r4,-4(r15)
 7006948:	70ffff17 	ldw	r3,-4(r14)
 700694c:	8a000017 	ldw	r8,0(r17)
 7006950:	1806d43a 	srli	r3,r3,16
 7006954:	413fffcc 	andi	r4,r8,65535
 7006958:	1fc7383a 	mul	r3,r3,ra
 700695c:	1907883a 	add	r3,r3,r4
 7006960:	1947883a 	add	r3,r3,r5
 7006964:	180ed43a 	srli	r7,r3,16
 7006968:	727fe936 	bltu	r14,r9,7006910 <__alt_data_end+0xff006910>
 700696c:	90c00115 	stw	r3,4(r18)
 7006970:	31800104 	addi	r6,r6,4
 7006974:	5ac00104 	addi	r11,r11,4
 7006978:	333fbe36 	bltu	r6,r12,7006874 <__alt_data_end+0xff006874>
 700697c:	0400090e 	bge	zero,r16,70069a4 <__multiply+0x1d4>
 7006980:	50ffff17 	ldw	r3,-4(r10)
 7006984:	52bfff04 	addi	r10,r10,-4
 7006988:	18000326 	beq	r3,zero,7006998 <__multiply+0x1c8>
 700698c:	00000506 	br	70069a4 <__multiply+0x1d4>
 7006990:	50c00017 	ldw	r3,0(r10)
 7006994:	1800031e 	bne	r3,zero,70069a4 <__multiply+0x1d4>
 7006998:	843fffc4 	addi	r16,r16,-1
 700699c:	52bfff04 	addi	r10,r10,-4
 70069a0:	803ffb1e 	bne	r16,zero,7006990 <__alt_data_end+0xff006990>
 70069a4:	14000415 	stw	r16,16(r2)
 70069a8:	dfc00517 	ldw	ra,20(sp)
 70069ac:	dd000417 	ldw	r20,16(sp)
 70069b0:	dcc00317 	ldw	r19,12(sp)
 70069b4:	dc800217 	ldw	r18,8(sp)
 70069b8:	dc400117 	ldw	r17,4(sp)
 70069bc:	dc000017 	ldw	r16,0(sp)
 70069c0:	dec00604 	addi	sp,sp,24
 70069c4:	f800283a 	ret

070069c8 <__pow5mult>:
 70069c8:	defffa04 	addi	sp,sp,-24
 70069cc:	dcc00315 	stw	r19,12(sp)
 70069d0:	dc000015 	stw	r16,0(sp)
 70069d4:	dfc00515 	stw	ra,20(sp)
 70069d8:	dd000415 	stw	r20,16(sp)
 70069dc:	dc800215 	stw	r18,8(sp)
 70069e0:	dc400115 	stw	r17,4(sp)
 70069e4:	308000cc 	andi	r2,r6,3
 70069e8:	3021883a 	mov	r16,r6
 70069ec:	2027883a 	mov	r19,r4
 70069f0:	10002f1e 	bne	r2,zero,7006ab0 <__pow5mult+0xe8>
 70069f4:	2825883a 	mov	r18,r5
 70069f8:	8021d0ba 	srai	r16,r16,2
 70069fc:	80001a26 	beq	r16,zero,7006a68 <__pow5mult+0xa0>
 7006a00:	9c401217 	ldw	r17,72(r19)
 7006a04:	8800061e 	bne	r17,zero,7006a20 <__pow5mult+0x58>
 7006a08:	00003406 	br	7006adc <__pow5mult+0x114>
 7006a0c:	8021d07a 	srai	r16,r16,1
 7006a10:	80001526 	beq	r16,zero,7006a68 <__pow5mult+0xa0>
 7006a14:	88800017 	ldw	r2,0(r17)
 7006a18:	10001c26 	beq	r2,zero,7006a8c <__pow5mult+0xc4>
 7006a1c:	1023883a 	mov	r17,r2
 7006a20:	8080004c 	andi	r2,r16,1
 7006a24:	103ff926 	beq	r2,zero,7006a0c <__alt_data_end+0xff006a0c>
 7006a28:	880d883a 	mov	r6,r17
 7006a2c:	900b883a 	mov	r5,r18
 7006a30:	9809883a 	mov	r4,r19
 7006a34:	70067d00 	call	70067d0 <__multiply>
 7006a38:	90001b26 	beq	r18,zero,7006aa8 <__pow5mult+0xe0>
 7006a3c:	91000117 	ldw	r4,4(r18)
 7006a40:	98c01317 	ldw	r3,76(r19)
 7006a44:	8021d07a 	srai	r16,r16,1
 7006a48:	2109883a 	add	r4,r4,r4
 7006a4c:	2109883a 	add	r4,r4,r4
 7006a50:	1907883a 	add	r3,r3,r4
 7006a54:	19000017 	ldw	r4,0(r3)
 7006a58:	91000015 	stw	r4,0(r18)
 7006a5c:	1c800015 	stw	r18,0(r3)
 7006a60:	1025883a 	mov	r18,r2
 7006a64:	803feb1e 	bne	r16,zero,7006a14 <__alt_data_end+0xff006a14>
 7006a68:	9005883a 	mov	r2,r18
 7006a6c:	dfc00517 	ldw	ra,20(sp)
 7006a70:	dd000417 	ldw	r20,16(sp)
 7006a74:	dcc00317 	ldw	r19,12(sp)
 7006a78:	dc800217 	ldw	r18,8(sp)
 7006a7c:	dc400117 	ldw	r17,4(sp)
 7006a80:	dc000017 	ldw	r16,0(sp)
 7006a84:	dec00604 	addi	sp,sp,24
 7006a88:	f800283a 	ret
 7006a8c:	880d883a 	mov	r6,r17
 7006a90:	880b883a 	mov	r5,r17
 7006a94:	9809883a 	mov	r4,r19
 7006a98:	70067d00 	call	70067d0 <__multiply>
 7006a9c:	88800015 	stw	r2,0(r17)
 7006aa0:	10000015 	stw	zero,0(r2)
 7006aa4:	003fdd06 	br	7006a1c <__alt_data_end+0xff006a1c>
 7006aa8:	1025883a 	mov	r18,r2
 7006aac:	003fd706 	br	7006a0c <__alt_data_end+0xff006a0c>
 7006ab0:	10bfffc4 	addi	r2,r2,-1
 7006ab4:	1085883a 	add	r2,r2,r2
 7006ab8:	00c1c074 	movhi	r3,1793
 7006abc:	18fef804 	addi	r3,r3,-1056
 7006ac0:	1085883a 	add	r2,r2,r2
 7006ac4:	1885883a 	add	r2,r3,r2
 7006ac8:	11800017 	ldw	r6,0(r2)
 7006acc:	000f883a 	mov	r7,zero
 7006ad0:	70064580 	call	7006458 <__multadd>
 7006ad4:	1025883a 	mov	r18,r2
 7006ad8:	003fc706 	br	70069f8 <__alt_data_end+0xff0069f8>
 7006adc:	05000044 	movi	r20,1
 7006ae0:	a00b883a 	mov	r5,r20
 7006ae4:	9809883a 	mov	r4,r19
 7006ae8:	70063880 	call	7006388 <_Balloc>
 7006aec:	1023883a 	mov	r17,r2
 7006af0:	00809c44 	movi	r2,625
 7006af4:	88800515 	stw	r2,20(r17)
 7006af8:	8d000415 	stw	r20,16(r17)
 7006afc:	9c401215 	stw	r17,72(r19)
 7006b00:	88000015 	stw	zero,0(r17)
 7006b04:	003fc606 	br	7006a20 <__alt_data_end+0xff006a20>

07006b08 <__lshift>:
 7006b08:	defff904 	addi	sp,sp,-28
 7006b0c:	dd400515 	stw	r21,20(sp)
 7006b10:	dcc00315 	stw	r19,12(sp)
 7006b14:	302bd17a 	srai	r21,r6,5
 7006b18:	2cc00417 	ldw	r19,16(r5)
 7006b1c:	28800217 	ldw	r2,8(r5)
 7006b20:	dd000415 	stw	r20,16(sp)
 7006b24:	ace7883a 	add	r19,r21,r19
 7006b28:	dc800215 	stw	r18,8(sp)
 7006b2c:	dc400115 	stw	r17,4(sp)
 7006b30:	dc000015 	stw	r16,0(sp)
 7006b34:	dfc00615 	stw	ra,24(sp)
 7006b38:	9c000044 	addi	r16,r19,1
 7006b3c:	2823883a 	mov	r17,r5
 7006b40:	3029883a 	mov	r20,r6
 7006b44:	2025883a 	mov	r18,r4
 7006b48:	29400117 	ldw	r5,4(r5)
 7006b4c:	1400030e 	bge	r2,r16,7006b5c <__lshift+0x54>
 7006b50:	1085883a 	add	r2,r2,r2
 7006b54:	29400044 	addi	r5,r5,1
 7006b58:	143ffd16 	blt	r2,r16,7006b50 <__alt_data_end+0xff006b50>
 7006b5c:	9009883a 	mov	r4,r18
 7006b60:	70063880 	call	7006388 <_Balloc>
 7006b64:	10c00504 	addi	r3,r2,20
 7006b68:	0540070e 	bge	zero,r21,7006b88 <__lshift+0x80>
 7006b6c:	ad6b883a 	add	r21,r21,r21
 7006b70:	ad6b883a 	add	r21,r21,r21
 7006b74:	1809883a 	mov	r4,r3
 7006b78:	1d47883a 	add	r3,r3,r21
 7006b7c:	20000015 	stw	zero,0(r4)
 7006b80:	21000104 	addi	r4,r4,4
 7006b84:	193ffd1e 	bne	r3,r4,7006b7c <__alt_data_end+0xff006b7c>
 7006b88:	8a000417 	ldw	r8,16(r17)
 7006b8c:	89000504 	addi	r4,r17,20
 7006b90:	a18007cc 	andi	r6,r20,31
 7006b94:	4211883a 	add	r8,r8,r8
 7006b98:	4211883a 	add	r8,r8,r8
 7006b9c:	2211883a 	add	r8,r4,r8
 7006ba0:	30002326 	beq	r6,zero,7006c30 <__lshift+0x128>
 7006ba4:	02400804 	movi	r9,32
 7006ba8:	4993c83a 	sub	r9,r9,r6
 7006bac:	000b883a 	mov	r5,zero
 7006bb0:	21c00017 	ldw	r7,0(r4)
 7006bb4:	1815883a 	mov	r10,r3
 7006bb8:	18c00104 	addi	r3,r3,4
 7006bbc:	398e983a 	sll	r7,r7,r6
 7006bc0:	21000104 	addi	r4,r4,4
 7006bc4:	394ab03a 	or	r5,r7,r5
 7006bc8:	197fff15 	stw	r5,-4(r3)
 7006bcc:	217fff17 	ldw	r5,-4(r4)
 7006bd0:	2a4ad83a 	srl	r5,r5,r9
 7006bd4:	223ff636 	bltu	r4,r8,7006bb0 <__alt_data_end+0xff006bb0>
 7006bd8:	51400115 	stw	r5,4(r10)
 7006bdc:	28001a1e 	bne	r5,zero,7006c48 <__lshift+0x140>
 7006be0:	843fffc4 	addi	r16,r16,-1
 7006be4:	14000415 	stw	r16,16(r2)
 7006be8:	88000826 	beq	r17,zero,7006c0c <__lshift+0x104>
 7006bec:	89000117 	ldw	r4,4(r17)
 7006bf0:	90c01317 	ldw	r3,76(r18)
 7006bf4:	2109883a 	add	r4,r4,r4
 7006bf8:	2109883a 	add	r4,r4,r4
 7006bfc:	1907883a 	add	r3,r3,r4
 7006c00:	19000017 	ldw	r4,0(r3)
 7006c04:	89000015 	stw	r4,0(r17)
 7006c08:	1c400015 	stw	r17,0(r3)
 7006c0c:	dfc00617 	ldw	ra,24(sp)
 7006c10:	dd400517 	ldw	r21,20(sp)
 7006c14:	dd000417 	ldw	r20,16(sp)
 7006c18:	dcc00317 	ldw	r19,12(sp)
 7006c1c:	dc800217 	ldw	r18,8(sp)
 7006c20:	dc400117 	ldw	r17,4(sp)
 7006c24:	dc000017 	ldw	r16,0(sp)
 7006c28:	dec00704 	addi	sp,sp,28
 7006c2c:	f800283a 	ret
 7006c30:	21400017 	ldw	r5,0(r4)
 7006c34:	18c00104 	addi	r3,r3,4
 7006c38:	21000104 	addi	r4,r4,4
 7006c3c:	197fff15 	stw	r5,-4(r3)
 7006c40:	223ffb36 	bltu	r4,r8,7006c30 <__alt_data_end+0xff006c30>
 7006c44:	003fe606 	br	7006be0 <__alt_data_end+0xff006be0>
 7006c48:	9c000084 	addi	r16,r19,2
 7006c4c:	003fe406 	br	7006be0 <__alt_data_end+0xff006be0>

07006c50 <__mcmp>:
 7006c50:	20800417 	ldw	r2,16(r4)
 7006c54:	28c00417 	ldw	r3,16(r5)
 7006c58:	10c5c83a 	sub	r2,r2,r3
 7006c5c:	1000111e 	bne	r2,zero,7006ca4 <__mcmp+0x54>
 7006c60:	18c7883a 	add	r3,r3,r3
 7006c64:	18c7883a 	add	r3,r3,r3
 7006c68:	21000504 	addi	r4,r4,20
 7006c6c:	29400504 	addi	r5,r5,20
 7006c70:	20c5883a 	add	r2,r4,r3
 7006c74:	28cb883a 	add	r5,r5,r3
 7006c78:	00000106 	br	7006c80 <__mcmp+0x30>
 7006c7c:	20800a2e 	bgeu	r4,r2,7006ca8 <__mcmp+0x58>
 7006c80:	10bfff04 	addi	r2,r2,-4
 7006c84:	297fff04 	addi	r5,r5,-4
 7006c88:	11800017 	ldw	r6,0(r2)
 7006c8c:	28c00017 	ldw	r3,0(r5)
 7006c90:	30fffa26 	beq	r6,r3,7006c7c <__alt_data_end+0xff006c7c>
 7006c94:	30c00236 	bltu	r6,r3,7006ca0 <__mcmp+0x50>
 7006c98:	00800044 	movi	r2,1
 7006c9c:	f800283a 	ret
 7006ca0:	00bfffc4 	movi	r2,-1
 7006ca4:	f800283a 	ret
 7006ca8:	0005883a 	mov	r2,zero
 7006cac:	f800283a 	ret

07006cb0 <__mdiff>:
 7006cb0:	28c00417 	ldw	r3,16(r5)
 7006cb4:	30800417 	ldw	r2,16(r6)
 7006cb8:	defffa04 	addi	sp,sp,-24
 7006cbc:	dcc00315 	stw	r19,12(sp)
 7006cc0:	dc800215 	stw	r18,8(sp)
 7006cc4:	dfc00515 	stw	ra,20(sp)
 7006cc8:	dd000415 	stw	r20,16(sp)
 7006ccc:	dc400115 	stw	r17,4(sp)
 7006cd0:	dc000015 	stw	r16,0(sp)
 7006cd4:	1887c83a 	sub	r3,r3,r2
 7006cd8:	2825883a 	mov	r18,r5
 7006cdc:	3027883a 	mov	r19,r6
 7006ce0:	1800141e 	bne	r3,zero,7006d34 <__mdiff+0x84>
 7006ce4:	1085883a 	add	r2,r2,r2
 7006ce8:	1085883a 	add	r2,r2,r2
 7006cec:	2a000504 	addi	r8,r5,20
 7006cf0:	34000504 	addi	r16,r6,20
 7006cf4:	4087883a 	add	r3,r8,r2
 7006cf8:	8085883a 	add	r2,r16,r2
 7006cfc:	00000106 	br	7006d04 <__mdiff+0x54>
 7006d00:	40c0592e 	bgeu	r8,r3,7006e68 <__mdiff+0x1b8>
 7006d04:	18ffff04 	addi	r3,r3,-4
 7006d08:	10bfff04 	addi	r2,r2,-4
 7006d0c:	19c00017 	ldw	r7,0(r3)
 7006d10:	11400017 	ldw	r5,0(r2)
 7006d14:	397ffa26 	beq	r7,r5,7006d00 <__alt_data_end+0xff006d00>
 7006d18:	3940592e 	bgeu	r7,r5,7006e80 <__mdiff+0x1d0>
 7006d1c:	9005883a 	mov	r2,r18
 7006d20:	4023883a 	mov	r17,r8
 7006d24:	9825883a 	mov	r18,r19
 7006d28:	05000044 	movi	r20,1
 7006d2c:	1027883a 	mov	r19,r2
 7006d30:	00000406 	br	7006d44 <__mdiff+0x94>
 7006d34:	18005616 	blt	r3,zero,7006e90 <__mdiff+0x1e0>
 7006d38:	34400504 	addi	r17,r6,20
 7006d3c:	2c000504 	addi	r16,r5,20
 7006d40:	0029883a 	mov	r20,zero
 7006d44:	91400117 	ldw	r5,4(r18)
 7006d48:	70063880 	call	7006388 <_Balloc>
 7006d4c:	92400417 	ldw	r9,16(r18)
 7006d50:	9b000417 	ldw	r12,16(r19)
 7006d54:	12c00504 	addi	r11,r2,20
 7006d58:	4a51883a 	add	r8,r9,r9
 7006d5c:	6319883a 	add	r12,r12,r12
 7006d60:	4211883a 	add	r8,r8,r8
 7006d64:	6319883a 	add	r12,r12,r12
 7006d68:	15000315 	stw	r20,12(r2)
 7006d6c:	8211883a 	add	r8,r16,r8
 7006d70:	8b19883a 	add	r12,r17,r12
 7006d74:	0007883a 	mov	r3,zero
 7006d78:	81400017 	ldw	r5,0(r16)
 7006d7c:	89c00017 	ldw	r7,0(r17)
 7006d80:	59800104 	addi	r6,r11,4
 7006d84:	293fffcc 	andi	r4,r5,65535
 7006d88:	20c7883a 	add	r3,r4,r3
 7006d8c:	393fffcc 	andi	r4,r7,65535
 7006d90:	1909c83a 	sub	r4,r3,r4
 7006d94:	280ad43a 	srli	r5,r5,16
 7006d98:	380ed43a 	srli	r7,r7,16
 7006d9c:	2007d43a 	srai	r3,r4,16
 7006da0:	213fffcc 	andi	r4,r4,65535
 7006da4:	29cbc83a 	sub	r5,r5,r7
 7006da8:	28c7883a 	add	r3,r5,r3
 7006dac:	180a943a 	slli	r5,r3,16
 7006db0:	8c400104 	addi	r17,r17,4
 7006db4:	84000104 	addi	r16,r16,4
 7006db8:	2908b03a 	or	r4,r5,r4
 7006dbc:	59000015 	stw	r4,0(r11)
 7006dc0:	1807d43a 	srai	r3,r3,16
 7006dc4:	3015883a 	mov	r10,r6
 7006dc8:	3017883a 	mov	r11,r6
 7006dcc:	8b3fea36 	bltu	r17,r12,7006d78 <__alt_data_end+0xff006d78>
 7006dd0:	8200162e 	bgeu	r16,r8,7006e2c <__mdiff+0x17c>
 7006dd4:	8017883a 	mov	r11,r16
 7006dd8:	59400017 	ldw	r5,0(r11)
 7006ddc:	31800104 	addi	r6,r6,4
 7006de0:	5ac00104 	addi	r11,r11,4
 7006de4:	293fffcc 	andi	r4,r5,65535
 7006de8:	20c7883a 	add	r3,r4,r3
 7006dec:	280ed43a 	srli	r7,r5,16
 7006df0:	180bd43a 	srai	r5,r3,16
 7006df4:	193fffcc 	andi	r4,r3,65535
 7006df8:	3947883a 	add	r3,r7,r5
 7006dfc:	180a943a 	slli	r5,r3,16
 7006e00:	1807d43a 	srai	r3,r3,16
 7006e04:	2908b03a 	or	r4,r5,r4
 7006e08:	313fff15 	stw	r4,-4(r6)
 7006e0c:	5a3ff236 	bltu	r11,r8,7006dd8 <__alt_data_end+0xff006dd8>
 7006e10:	0406303a 	nor	r3,zero,r16
 7006e14:	1a07883a 	add	r3,r3,r8
 7006e18:	1806d0ba 	srli	r3,r3,2
 7006e1c:	18c00044 	addi	r3,r3,1
 7006e20:	18c7883a 	add	r3,r3,r3
 7006e24:	18c7883a 	add	r3,r3,r3
 7006e28:	50d5883a 	add	r10,r10,r3
 7006e2c:	50ffff04 	addi	r3,r10,-4
 7006e30:	2000041e 	bne	r4,zero,7006e44 <__mdiff+0x194>
 7006e34:	18ffff04 	addi	r3,r3,-4
 7006e38:	19000017 	ldw	r4,0(r3)
 7006e3c:	4a7fffc4 	addi	r9,r9,-1
 7006e40:	203ffc26 	beq	r4,zero,7006e34 <__alt_data_end+0xff006e34>
 7006e44:	12400415 	stw	r9,16(r2)
 7006e48:	dfc00517 	ldw	ra,20(sp)
 7006e4c:	dd000417 	ldw	r20,16(sp)
 7006e50:	dcc00317 	ldw	r19,12(sp)
 7006e54:	dc800217 	ldw	r18,8(sp)
 7006e58:	dc400117 	ldw	r17,4(sp)
 7006e5c:	dc000017 	ldw	r16,0(sp)
 7006e60:	dec00604 	addi	sp,sp,24
 7006e64:	f800283a 	ret
 7006e68:	000b883a 	mov	r5,zero
 7006e6c:	70063880 	call	7006388 <_Balloc>
 7006e70:	00c00044 	movi	r3,1
 7006e74:	10c00415 	stw	r3,16(r2)
 7006e78:	10000515 	stw	zero,20(r2)
 7006e7c:	003ff206 	br	7006e48 <__alt_data_end+0xff006e48>
 7006e80:	8023883a 	mov	r17,r16
 7006e84:	0029883a 	mov	r20,zero
 7006e88:	4021883a 	mov	r16,r8
 7006e8c:	003fad06 	br	7006d44 <__alt_data_end+0xff006d44>
 7006e90:	9005883a 	mov	r2,r18
 7006e94:	94400504 	addi	r17,r18,20
 7006e98:	9c000504 	addi	r16,r19,20
 7006e9c:	9825883a 	mov	r18,r19
 7006ea0:	05000044 	movi	r20,1
 7006ea4:	1027883a 	mov	r19,r2
 7006ea8:	003fa606 	br	7006d44 <__alt_data_end+0xff006d44>

07006eac <__ulp>:
 7006eac:	295ffc2c 	andhi	r5,r5,32752
 7006eb0:	00bf3034 	movhi	r2,64704
 7006eb4:	2887883a 	add	r3,r5,r2
 7006eb8:	00c0020e 	bge	zero,r3,7006ec4 <__ulp+0x18>
 7006ebc:	0005883a 	mov	r2,zero
 7006ec0:	f800283a 	ret
 7006ec4:	00c7c83a 	sub	r3,zero,r3
 7006ec8:	1807d53a 	srai	r3,r3,20
 7006ecc:	008004c4 	movi	r2,19
 7006ed0:	10c00b0e 	bge	r2,r3,7006f00 <__ulp+0x54>
 7006ed4:	18bffb04 	addi	r2,r3,-20
 7006ed8:	01000784 	movi	r4,30
 7006edc:	0007883a 	mov	r3,zero
 7006ee0:	20800516 	blt	r4,r2,7006ef8 <__ulp+0x4c>
 7006ee4:	010007c4 	movi	r4,31
 7006ee8:	2089c83a 	sub	r4,r4,r2
 7006eec:	00800044 	movi	r2,1
 7006ef0:	1104983a 	sll	r2,r2,r4
 7006ef4:	f800283a 	ret
 7006ef8:	00800044 	movi	r2,1
 7006efc:	f800283a 	ret
 7006f00:	01400234 	movhi	r5,8
 7006f04:	28c7d83a 	sra	r3,r5,r3
 7006f08:	0005883a 	mov	r2,zero
 7006f0c:	f800283a 	ret

07006f10 <__b2d>:
 7006f10:	defffa04 	addi	sp,sp,-24
 7006f14:	dc000015 	stw	r16,0(sp)
 7006f18:	24000417 	ldw	r16,16(r4)
 7006f1c:	dc400115 	stw	r17,4(sp)
 7006f20:	24400504 	addi	r17,r4,20
 7006f24:	8421883a 	add	r16,r16,r16
 7006f28:	8421883a 	add	r16,r16,r16
 7006f2c:	8c21883a 	add	r16,r17,r16
 7006f30:	dc800215 	stw	r18,8(sp)
 7006f34:	84bfff17 	ldw	r18,-4(r16)
 7006f38:	dd000415 	stw	r20,16(sp)
 7006f3c:	dcc00315 	stw	r19,12(sp)
 7006f40:	9009883a 	mov	r4,r18
 7006f44:	2829883a 	mov	r20,r5
 7006f48:	dfc00515 	stw	ra,20(sp)
 7006f4c:	700667c0 	call	700667c <__hi0bits>
 7006f50:	00c00804 	movi	r3,32
 7006f54:	1889c83a 	sub	r4,r3,r2
 7006f58:	a1000015 	stw	r4,0(r20)
 7006f5c:	01000284 	movi	r4,10
 7006f60:	84ffff04 	addi	r19,r16,-4
 7006f64:	20801216 	blt	r4,r2,7006fb0 <__b2d+0xa0>
 7006f68:	018002c4 	movi	r6,11
 7006f6c:	308dc83a 	sub	r6,r6,r2
 7006f70:	9186d83a 	srl	r3,r18,r6
 7006f74:	18cffc34 	orhi	r3,r3,16368
 7006f78:	8cc0212e 	bgeu	r17,r19,7007000 <__b2d+0xf0>
 7006f7c:	813ffe17 	ldw	r4,-8(r16)
 7006f80:	218cd83a 	srl	r6,r4,r6
 7006f84:	10800544 	addi	r2,r2,21
 7006f88:	9084983a 	sll	r2,r18,r2
 7006f8c:	1184b03a 	or	r2,r2,r6
 7006f90:	dfc00517 	ldw	ra,20(sp)
 7006f94:	dd000417 	ldw	r20,16(sp)
 7006f98:	dcc00317 	ldw	r19,12(sp)
 7006f9c:	dc800217 	ldw	r18,8(sp)
 7006fa0:	dc400117 	ldw	r17,4(sp)
 7006fa4:	dc000017 	ldw	r16,0(sp)
 7006fa8:	dec00604 	addi	sp,sp,24
 7006fac:	f800283a 	ret
 7006fb0:	8cc00f2e 	bgeu	r17,r19,7006ff0 <__b2d+0xe0>
 7006fb4:	117ffd44 	addi	r5,r2,-11
 7006fb8:	80bffe17 	ldw	r2,-8(r16)
 7006fbc:	28000e26 	beq	r5,zero,7006ff8 <__b2d+0xe8>
 7006fc0:	1949c83a 	sub	r4,r3,r5
 7006fc4:	9164983a 	sll	r18,r18,r5
 7006fc8:	1106d83a 	srl	r3,r2,r4
 7006fcc:	81bffe04 	addi	r6,r16,-8
 7006fd0:	948ffc34 	orhi	r18,r18,16368
 7006fd4:	90c6b03a 	or	r3,r18,r3
 7006fd8:	89800e2e 	bgeu	r17,r6,7007014 <__b2d+0x104>
 7006fdc:	81bffd17 	ldw	r6,-12(r16)
 7006fe0:	1144983a 	sll	r2,r2,r5
 7006fe4:	310ad83a 	srl	r5,r6,r4
 7006fe8:	2884b03a 	or	r2,r5,r2
 7006fec:	003fe806 	br	7006f90 <__alt_data_end+0xff006f90>
 7006ff0:	10bffd44 	addi	r2,r2,-11
 7006ff4:	1000041e 	bne	r2,zero,7007008 <__b2d+0xf8>
 7006ff8:	90cffc34 	orhi	r3,r18,16368
 7006ffc:	003fe406 	br	7006f90 <__alt_data_end+0xff006f90>
 7007000:	000d883a 	mov	r6,zero
 7007004:	003fdf06 	br	7006f84 <__alt_data_end+0xff006f84>
 7007008:	90a4983a 	sll	r18,r18,r2
 700700c:	0005883a 	mov	r2,zero
 7007010:	003ff906 	br	7006ff8 <__alt_data_end+0xff006ff8>
 7007014:	1144983a 	sll	r2,r2,r5
 7007018:	003fdd06 	br	7006f90 <__alt_data_end+0xff006f90>

0700701c <__d2b>:
 700701c:	defff804 	addi	sp,sp,-32
 7007020:	dc000215 	stw	r16,8(sp)
 7007024:	3021883a 	mov	r16,r6
 7007028:	dc400315 	stw	r17,12(sp)
 700702c:	8022907a 	slli	r17,r16,1
 7007030:	dd000615 	stw	r20,24(sp)
 7007034:	2829883a 	mov	r20,r5
 7007038:	01400044 	movi	r5,1
 700703c:	dcc00515 	stw	r19,20(sp)
 7007040:	dc800415 	stw	r18,16(sp)
 7007044:	dfc00715 	stw	ra,28(sp)
 7007048:	3825883a 	mov	r18,r7
 700704c:	8822d57a 	srli	r17,r17,21
 7007050:	70063880 	call	7006388 <_Balloc>
 7007054:	1027883a 	mov	r19,r2
 7007058:	00800434 	movhi	r2,16
 700705c:	10bfffc4 	addi	r2,r2,-1
 7007060:	808c703a 	and	r6,r16,r2
 7007064:	88000126 	beq	r17,zero,700706c <__d2b+0x50>
 7007068:	31800434 	orhi	r6,r6,16
 700706c:	d9800015 	stw	r6,0(sp)
 7007070:	a0002426 	beq	r20,zero,7007104 <__d2b+0xe8>
 7007074:	d9000104 	addi	r4,sp,4
 7007078:	dd000115 	stw	r20,4(sp)
 700707c:	70066e40 	call	70066e4 <__lo0bits>
 7007080:	d8c00017 	ldw	r3,0(sp)
 7007084:	10002f1e 	bne	r2,zero,7007144 <__d2b+0x128>
 7007088:	d9000117 	ldw	r4,4(sp)
 700708c:	99000515 	stw	r4,20(r19)
 7007090:	1821003a 	cmpeq	r16,r3,zero
 7007094:	01000084 	movi	r4,2
 7007098:	2421c83a 	sub	r16,r4,r16
 700709c:	98c00615 	stw	r3,24(r19)
 70070a0:	9c000415 	stw	r16,16(r19)
 70070a4:	88001f1e 	bne	r17,zero,7007124 <__d2b+0x108>
 70070a8:	10bef384 	addi	r2,r2,-1074
 70070ac:	90800015 	stw	r2,0(r18)
 70070b0:	00900034 	movhi	r2,16384
 70070b4:	10bfffc4 	addi	r2,r2,-1
 70070b8:	8085883a 	add	r2,r16,r2
 70070bc:	1085883a 	add	r2,r2,r2
 70070c0:	1085883a 	add	r2,r2,r2
 70070c4:	9885883a 	add	r2,r19,r2
 70070c8:	11000517 	ldw	r4,20(r2)
 70070cc:	8020917a 	slli	r16,r16,5
 70070d0:	700667c0 	call	700667c <__hi0bits>
 70070d4:	d8c00817 	ldw	r3,32(sp)
 70070d8:	8085c83a 	sub	r2,r16,r2
 70070dc:	18800015 	stw	r2,0(r3)
 70070e0:	9805883a 	mov	r2,r19
 70070e4:	dfc00717 	ldw	ra,28(sp)
 70070e8:	dd000617 	ldw	r20,24(sp)
 70070ec:	dcc00517 	ldw	r19,20(sp)
 70070f0:	dc800417 	ldw	r18,16(sp)
 70070f4:	dc400317 	ldw	r17,12(sp)
 70070f8:	dc000217 	ldw	r16,8(sp)
 70070fc:	dec00804 	addi	sp,sp,32
 7007100:	f800283a 	ret
 7007104:	d809883a 	mov	r4,sp
 7007108:	70066e40 	call	70066e4 <__lo0bits>
 700710c:	d8c00017 	ldw	r3,0(sp)
 7007110:	04000044 	movi	r16,1
 7007114:	9c000415 	stw	r16,16(r19)
 7007118:	98c00515 	stw	r3,20(r19)
 700711c:	10800804 	addi	r2,r2,32
 7007120:	883fe126 	beq	r17,zero,70070a8 <__alt_data_end+0xff0070a8>
 7007124:	00c00d44 	movi	r3,53
 7007128:	8c7ef344 	addi	r17,r17,-1075
 700712c:	88a3883a 	add	r17,r17,r2
 7007130:	1885c83a 	sub	r2,r3,r2
 7007134:	d8c00817 	ldw	r3,32(sp)
 7007138:	94400015 	stw	r17,0(r18)
 700713c:	18800015 	stw	r2,0(r3)
 7007140:	003fe706 	br	70070e0 <__alt_data_end+0xff0070e0>
 7007144:	01000804 	movi	r4,32
 7007148:	2089c83a 	sub	r4,r4,r2
 700714c:	1908983a 	sll	r4,r3,r4
 7007150:	d9400117 	ldw	r5,4(sp)
 7007154:	1886d83a 	srl	r3,r3,r2
 7007158:	2148b03a 	or	r4,r4,r5
 700715c:	99000515 	stw	r4,20(r19)
 7007160:	d8c00015 	stw	r3,0(sp)
 7007164:	003fca06 	br	7007090 <__alt_data_end+0xff007090>

07007168 <__ratio>:
 7007168:	defff904 	addi	sp,sp,-28
 700716c:	dc400315 	stw	r17,12(sp)
 7007170:	2823883a 	mov	r17,r5
 7007174:	d9400104 	addi	r5,sp,4
 7007178:	dfc00615 	stw	ra,24(sp)
 700717c:	dcc00515 	stw	r19,20(sp)
 7007180:	dc800415 	stw	r18,16(sp)
 7007184:	2027883a 	mov	r19,r4
 7007188:	dc000215 	stw	r16,8(sp)
 700718c:	7006f100 	call	7006f10 <__b2d>
 7007190:	d80b883a 	mov	r5,sp
 7007194:	8809883a 	mov	r4,r17
 7007198:	1025883a 	mov	r18,r2
 700719c:	1821883a 	mov	r16,r3
 70071a0:	7006f100 	call	7006f10 <__b2d>
 70071a4:	8a000417 	ldw	r8,16(r17)
 70071a8:	99000417 	ldw	r4,16(r19)
 70071ac:	d9400117 	ldw	r5,4(sp)
 70071b0:	2209c83a 	sub	r4,r4,r8
 70071b4:	2010917a 	slli	r8,r4,5
 70071b8:	d9000017 	ldw	r4,0(sp)
 70071bc:	2909c83a 	sub	r4,r5,r4
 70071c0:	4109883a 	add	r4,r8,r4
 70071c4:	01000e0e 	bge	zero,r4,7007200 <__ratio+0x98>
 70071c8:	2008953a 	slli	r4,r4,20
 70071cc:	2421883a 	add	r16,r4,r16
 70071d0:	100d883a 	mov	r6,r2
 70071d4:	180f883a 	mov	r7,r3
 70071d8:	9009883a 	mov	r4,r18
 70071dc:	800b883a 	mov	r5,r16
 70071e0:	700b1bc0 	call	700b1bc <__divdf3>
 70071e4:	dfc00617 	ldw	ra,24(sp)
 70071e8:	dcc00517 	ldw	r19,20(sp)
 70071ec:	dc800417 	ldw	r18,16(sp)
 70071f0:	dc400317 	ldw	r17,12(sp)
 70071f4:	dc000217 	ldw	r16,8(sp)
 70071f8:	dec00704 	addi	sp,sp,28
 70071fc:	f800283a 	ret
 7007200:	2008953a 	slli	r4,r4,20
 7007204:	1907c83a 	sub	r3,r3,r4
 7007208:	003ff106 	br	70071d0 <__alt_data_end+0xff0071d0>

0700720c <_mprec_log10>:
 700720c:	defffe04 	addi	sp,sp,-8
 7007210:	dc000015 	stw	r16,0(sp)
 7007214:	dfc00115 	stw	ra,4(sp)
 7007218:	008005c4 	movi	r2,23
 700721c:	2021883a 	mov	r16,r4
 7007220:	11000d0e 	bge	r2,r4,7007258 <_mprec_log10+0x4c>
 7007224:	0005883a 	mov	r2,zero
 7007228:	00cffc34 	movhi	r3,16368
 700722c:	843fffc4 	addi	r16,r16,-1
 7007230:	000d883a 	mov	r6,zero
 7007234:	01d00934 	movhi	r7,16420
 7007238:	1009883a 	mov	r4,r2
 700723c:	180b883a 	mov	r5,r3
 7007240:	700bcfc0 	call	700bcfc <__muldf3>
 7007244:	803ff91e 	bne	r16,zero,700722c <__alt_data_end+0xff00722c>
 7007248:	dfc00117 	ldw	ra,4(sp)
 700724c:	dc000017 	ldw	r16,0(sp)
 7007250:	dec00204 	addi	sp,sp,8
 7007254:	f800283a 	ret
 7007258:	202090fa 	slli	r16,r4,3
 700725c:	0081c074 	movhi	r2,1793
 7007260:	10bf0f04 	addi	r2,r2,-964
 7007264:	1421883a 	add	r16,r2,r16
 7007268:	80800017 	ldw	r2,0(r16)
 700726c:	80c00117 	ldw	r3,4(r16)
 7007270:	dfc00117 	ldw	ra,4(sp)
 7007274:	dc000017 	ldw	r16,0(sp)
 7007278:	dec00204 	addi	sp,sp,8
 700727c:	f800283a 	ret

07007280 <__copybits>:
 7007280:	297fffc4 	addi	r5,r5,-1
 7007284:	280fd17a 	srai	r7,r5,5
 7007288:	30c00417 	ldw	r3,16(r6)
 700728c:	30800504 	addi	r2,r6,20
 7007290:	39c00044 	addi	r7,r7,1
 7007294:	18c7883a 	add	r3,r3,r3
 7007298:	39cf883a 	add	r7,r7,r7
 700729c:	18c7883a 	add	r3,r3,r3
 70072a0:	39cf883a 	add	r7,r7,r7
 70072a4:	10c7883a 	add	r3,r2,r3
 70072a8:	21cf883a 	add	r7,r4,r7
 70072ac:	10c00d2e 	bgeu	r2,r3,70072e4 <__copybits+0x64>
 70072b0:	200b883a 	mov	r5,r4
 70072b4:	12000017 	ldw	r8,0(r2)
 70072b8:	29400104 	addi	r5,r5,4
 70072bc:	10800104 	addi	r2,r2,4
 70072c0:	2a3fff15 	stw	r8,-4(r5)
 70072c4:	10fffb36 	bltu	r2,r3,70072b4 <__alt_data_end+0xff0072b4>
 70072c8:	1985c83a 	sub	r2,r3,r6
 70072cc:	10bffac4 	addi	r2,r2,-21
 70072d0:	1004d0ba 	srli	r2,r2,2
 70072d4:	10800044 	addi	r2,r2,1
 70072d8:	1085883a 	add	r2,r2,r2
 70072dc:	1085883a 	add	r2,r2,r2
 70072e0:	2089883a 	add	r4,r4,r2
 70072e4:	21c0032e 	bgeu	r4,r7,70072f4 <__copybits+0x74>
 70072e8:	20000015 	stw	zero,0(r4)
 70072ec:	21000104 	addi	r4,r4,4
 70072f0:	21fffd36 	bltu	r4,r7,70072e8 <__alt_data_end+0xff0072e8>
 70072f4:	f800283a 	ret

070072f8 <__any_on>:
 70072f8:	20c00417 	ldw	r3,16(r4)
 70072fc:	2805d17a 	srai	r2,r5,5
 7007300:	21000504 	addi	r4,r4,20
 7007304:	18800d0e 	bge	r3,r2,700733c <__any_on+0x44>
 7007308:	18c7883a 	add	r3,r3,r3
 700730c:	18c7883a 	add	r3,r3,r3
 7007310:	20c7883a 	add	r3,r4,r3
 7007314:	20c0192e 	bgeu	r4,r3,700737c <__any_on+0x84>
 7007318:	18bfff17 	ldw	r2,-4(r3)
 700731c:	18ffff04 	addi	r3,r3,-4
 7007320:	1000041e 	bne	r2,zero,7007334 <__any_on+0x3c>
 7007324:	20c0142e 	bgeu	r4,r3,7007378 <__any_on+0x80>
 7007328:	18ffff04 	addi	r3,r3,-4
 700732c:	19400017 	ldw	r5,0(r3)
 7007330:	283ffc26 	beq	r5,zero,7007324 <__alt_data_end+0xff007324>
 7007334:	00800044 	movi	r2,1
 7007338:	f800283a 	ret
 700733c:	10c00a0e 	bge	r2,r3,7007368 <__any_on+0x70>
 7007340:	1085883a 	add	r2,r2,r2
 7007344:	1085883a 	add	r2,r2,r2
 7007348:	294007cc 	andi	r5,r5,31
 700734c:	2087883a 	add	r3,r4,r2
 7007350:	283ff026 	beq	r5,zero,7007314 <__alt_data_end+0xff007314>
 7007354:	19800017 	ldw	r6,0(r3)
 7007358:	3144d83a 	srl	r2,r6,r5
 700735c:	114a983a 	sll	r5,r2,r5
 7007360:	317ff41e 	bne	r6,r5,7007334 <__alt_data_end+0xff007334>
 7007364:	003feb06 	br	7007314 <__alt_data_end+0xff007314>
 7007368:	1085883a 	add	r2,r2,r2
 700736c:	1085883a 	add	r2,r2,r2
 7007370:	2087883a 	add	r3,r4,r2
 7007374:	003fe706 	br	7007314 <__alt_data_end+0xff007314>
 7007378:	f800283a 	ret
 700737c:	0005883a 	mov	r2,zero
 7007380:	f800283a 	ret

07007384 <_putc_r>:
 7007384:	defffc04 	addi	sp,sp,-16
 7007388:	dc000215 	stw	r16,8(sp)
 700738c:	dfc00315 	stw	ra,12(sp)
 7007390:	2021883a 	mov	r16,r4
 7007394:	20000226 	beq	r4,zero,70073a0 <_putc_r+0x1c>
 7007398:	20800e17 	ldw	r2,56(r4)
 700739c:	10001b26 	beq	r2,zero,700740c <_putc_r+0x88>
 70073a0:	30800217 	ldw	r2,8(r6)
 70073a4:	10bfffc4 	addi	r2,r2,-1
 70073a8:	30800215 	stw	r2,8(r6)
 70073ac:	10000a16 	blt	r2,zero,70073d8 <_putc_r+0x54>
 70073b0:	30800017 	ldw	r2,0(r6)
 70073b4:	11400005 	stb	r5,0(r2)
 70073b8:	30800017 	ldw	r2,0(r6)
 70073bc:	10c00044 	addi	r3,r2,1
 70073c0:	30c00015 	stw	r3,0(r6)
 70073c4:	10800003 	ldbu	r2,0(r2)
 70073c8:	dfc00317 	ldw	ra,12(sp)
 70073cc:	dc000217 	ldw	r16,8(sp)
 70073d0:	dec00404 	addi	sp,sp,16
 70073d4:	f800283a 	ret
 70073d8:	30c00617 	ldw	r3,24(r6)
 70073dc:	10c00616 	blt	r2,r3,70073f8 <_putc_r+0x74>
 70073e0:	30800017 	ldw	r2,0(r6)
 70073e4:	00c00284 	movi	r3,10
 70073e8:	11400005 	stb	r5,0(r2)
 70073ec:	30800017 	ldw	r2,0(r6)
 70073f0:	11400003 	ldbu	r5,0(r2)
 70073f4:	28fff11e 	bne	r5,r3,70073bc <__alt_data_end+0xff0073bc>
 70073f8:	8009883a 	mov	r4,r16
 70073fc:	dfc00317 	ldw	ra,12(sp)
 7007400:	dc000217 	ldw	r16,8(sp)
 7007404:	dec00404 	addi	sp,sp,16
 7007408:	70093781 	jmpi	7009378 <__swbuf_r>
 700740c:	d9400015 	stw	r5,0(sp)
 7007410:	d9800115 	stw	r6,4(sp)
 7007414:	700496c0 	call	700496c <__sinit>
 7007418:	d9800117 	ldw	r6,4(sp)
 700741c:	d9400017 	ldw	r5,0(sp)
 7007420:	003fdf06 	br	70073a0 <__alt_data_end+0xff0073a0>

07007424 <putc>:
 7007424:	0081c074 	movhi	r2,1793
 7007428:	defffc04 	addi	sp,sp,-16
 700742c:	10864a04 	addi	r2,r2,6440
 7007430:	dc000115 	stw	r16,4(sp)
 7007434:	14000017 	ldw	r16,0(r2)
 7007438:	dc400215 	stw	r17,8(sp)
 700743c:	dfc00315 	stw	ra,12(sp)
 7007440:	2023883a 	mov	r17,r4
 7007444:	80000226 	beq	r16,zero,7007450 <putc+0x2c>
 7007448:	80800e17 	ldw	r2,56(r16)
 700744c:	10001a26 	beq	r2,zero,70074b8 <putc+0x94>
 7007450:	28800217 	ldw	r2,8(r5)
 7007454:	10bfffc4 	addi	r2,r2,-1
 7007458:	28800215 	stw	r2,8(r5)
 700745c:	10000b16 	blt	r2,zero,700748c <putc+0x68>
 7007460:	28800017 	ldw	r2,0(r5)
 7007464:	14400005 	stb	r17,0(r2)
 7007468:	28800017 	ldw	r2,0(r5)
 700746c:	10c00044 	addi	r3,r2,1
 7007470:	28c00015 	stw	r3,0(r5)
 7007474:	10800003 	ldbu	r2,0(r2)
 7007478:	dfc00317 	ldw	ra,12(sp)
 700747c:	dc400217 	ldw	r17,8(sp)
 7007480:	dc000117 	ldw	r16,4(sp)
 7007484:	dec00404 	addi	sp,sp,16
 7007488:	f800283a 	ret
 700748c:	28c00617 	ldw	r3,24(r5)
 7007490:	10c00e16 	blt	r2,r3,70074cc <putc+0xa8>
 7007494:	28800017 	ldw	r2,0(r5)
 7007498:	01000284 	movi	r4,10
 700749c:	14400005 	stb	r17,0(r2)
 70074a0:	28800017 	ldw	r2,0(r5)
 70074a4:	10c00003 	ldbu	r3,0(r2)
 70074a8:	193ff01e 	bne	r3,r4,700746c <__alt_data_end+0xff00746c>
 70074ac:	280d883a 	mov	r6,r5
 70074b0:	180b883a 	mov	r5,r3
 70074b4:	00000706 	br	70074d4 <putc+0xb0>
 70074b8:	8009883a 	mov	r4,r16
 70074bc:	d9400015 	stw	r5,0(sp)
 70074c0:	700496c0 	call	700496c <__sinit>
 70074c4:	d9400017 	ldw	r5,0(sp)
 70074c8:	003fe106 	br	7007450 <__alt_data_end+0xff007450>
 70074cc:	280d883a 	mov	r6,r5
 70074d0:	880b883a 	mov	r5,r17
 70074d4:	8009883a 	mov	r4,r16
 70074d8:	dfc00317 	ldw	ra,12(sp)
 70074dc:	dc400217 	ldw	r17,8(sp)
 70074e0:	dc000117 	ldw	r16,4(sp)
 70074e4:	dec00404 	addi	sp,sp,16
 70074e8:	70093781 	jmpi	7009378 <__swbuf_r>

070074ec <_realloc_r>:
 70074ec:	defff604 	addi	sp,sp,-40
 70074f0:	dc800215 	stw	r18,8(sp)
 70074f4:	dfc00915 	stw	ra,36(sp)
 70074f8:	df000815 	stw	fp,32(sp)
 70074fc:	ddc00715 	stw	r23,28(sp)
 7007500:	dd800615 	stw	r22,24(sp)
 7007504:	dd400515 	stw	r21,20(sp)
 7007508:	dd000415 	stw	r20,16(sp)
 700750c:	dcc00315 	stw	r19,12(sp)
 7007510:	dc400115 	stw	r17,4(sp)
 7007514:	dc000015 	stw	r16,0(sp)
 7007518:	3025883a 	mov	r18,r6
 700751c:	2800b726 	beq	r5,zero,70077fc <_realloc_r+0x310>
 7007520:	282b883a 	mov	r21,r5
 7007524:	2029883a 	mov	r20,r4
 7007528:	700d53c0 	call	700d53c <__malloc_lock>
 700752c:	a8bfff17 	ldw	r2,-4(r21)
 7007530:	043fff04 	movi	r16,-4
 7007534:	90c002c4 	addi	r3,r18,11
 7007538:	01000584 	movi	r4,22
 700753c:	acfffe04 	addi	r19,r21,-8
 7007540:	1420703a 	and	r16,r2,r16
 7007544:	20c0332e 	bgeu	r4,r3,7007614 <_realloc_r+0x128>
 7007548:	047ffe04 	movi	r17,-8
 700754c:	1c62703a 	and	r17,r3,r17
 7007550:	8807883a 	mov	r3,r17
 7007554:	88005816 	blt	r17,zero,70076b8 <_realloc_r+0x1cc>
 7007558:	8c805736 	bltu	r17,r18,70076b8 <_realloc_r+0x1cc>
 700755c:	80c0300e 	bge	r16,r3,7007620 <_realloc_r+0x134>
 7007560:	0701c074 	movhi	fp,1793
 7007564:	e700be04 	addi	fp,fp,760
 7007568:	e1c00217 	ldw	r7,8(fp)
 700756c:	9c09883a 	add	r4,r19,r16
 7007570:	22000117 	ldw	r8,4(r4)
 7007574:	21c06326 	beq	r4,r7,7007704 <_realloc_r+0x218>
 7007578:	017fff84 	movi	r5,-2
 700757c:	414a703a 	and	r5,r8,r5
 7007580:	214b883a 	add	r5,r4,r5
 7007584:	29800117 	ldw	r6,4(r5)
 7007588:	3180004c 	andi	r6,r6,1
 700758c:	30003f26 	beq	r6,zero,700768c <_realloc_r+0x1a0>
 7007590:	1080004c 	andi	r2,r2,1
 7007594:	10008326 	beq	r2,zero,70077a4 <_realloc_r+0x2b8>
 7007598:	900b883a 	mov	r5,r18
 700759c:	a009883a 	mov	r4,r20
 70075a0:	70056cc0 	call	70056cc <_malloc_r>
 70075a4:	1025883a 	mov	r18,r2
 70075a8:	10011e26 	beq	r2,zero,7007a24 <_realloc_r+0x538>
 70075ac:	a93fff17 	ldw	r4,-4(r21)
 70075b0:	10fffe04 	addi	r3,r2,-8
 70075b4:	00bfff84 	movi	r2,-2
 70075b8:	2084703a 	and	r2,r4,r2
 70075bc:	9885883a 	add	r2,r19,r2
 70075c0:	1880ee26 	beq	r3,r2,700797c <_realloc_r+0x490>
 70075c4:	81bfff04 	addi	r6,r16,-4
 70075c8:	00800904 	movi	r2,36
 70075cc:	1180b836 	bltu	r2,r6,70078b0 <_realloc_r+0x3c4>
 70075d0:	00c004c4 	movi	r3,19
 70075d4:	19809636 	bltu	r3,r6,7007830 <_realloc_r+0x344>
 70075d8:	9005883a 	mov	r2,r18
 70075dc:	a807883a 	mov	r3,r21
 70075e0:	19000017 	ldw	r4,0(r3)
 70075e4:	11000015 	stw	r4,0(r2)
 70075e8:	19000117 	ldw	r4,4(r3)
 70075ec:	11000115 	stw	r4,4(r2)
 70075f0:	18c00217 	ldw	r3,8(r3)
 70075f4:	10c00215 	stw	r3,8(r2)
 70075f8:	a80b883a 	mov	r5,r21
 70075fc:	a009883a 	mov	r4,r20
 7007600:	7004ae00 	call	7004ae0 <_free_r>
 7007604:	a009883a 	mov	r4,r20
 7007608:	700d5600 	call	700d560 <__malloc_unlock>
 700760c:	9005883a 	mov	r2,r18
 7007610:	00001206 	br	700765c <_realloc_r+0x170>
 7007614:	00c00404 	movi	r3,16
 7007618:	1823883a 	mov	r17,r3
 700761c:	003fce06 	br	7007558 <__alt_data_end+0xff007558>
 7007620:	a825883a 	mov	r18,r21
 7007624:	8445c83a 	sub	r2,r16,r17
 7007628:	00c003c4 	movi	r3,15
 700762c:	18802636 	bltu	r3,r2,70076c8 <_realloc_r+0x1dc>
 7007630:	99800117 	ldw	r6,4(r19)
 7007634:	9c07883a 	add	r3,r19,r16
 7007638:	3180004c 	andi	r6,r6,1
 700763c:	3420b03a 	or	r16,r6,r16
 7007640:	9c000115 	stw	r16,4(r19)
 7007644:	18800117 	ldw	r2,4(r3)
 7007648:	10800054 	ori	r2,r2,1
 700764c:	18800115 	stw	r2,4(r3)
 7007650:	a009883a 	mov	r4,r20
 7007654:	700d5600 	call	700d560 <__malloc_unlock>
 7007658:	9005883a 	mov	r2,r18
 700765c:	dfc00917 	ldw	ra,36(sp)
 7007660:	df000817 	ldw	fp,32(sp)
 7007664:	ddc00717 	ldw	r23,28(sp)
 7007668:	dd800617 	ldw	r22,24(sp)
 700766c:	dd400517 	ldw	r21,20(sp)
 7007670:	dd000417 	ldw	r20,16(sp)
 7007674:	dcc00317 	ldw	r19,12(sp)
 7007678:	dc800217 	ldw	r18,8(sp)
 700767c:	dc400117 	ldw	r17,4(sp)
 7007680:	dc000017 	ldw	r16,0(sp)
 7007684:	dec00a04 	addi	sp,sp,40
 7007688:	f800283a 	ret
 700768c:	017fff04 	movi	r5,-4
 7007690:	414a703a 	and	r5,r8,r5
 7007694:	814d883a 	add	r6,r16,r5
 7007698:	30c01f16 	blt	r6,r3,7007718 <_realloc_r+0x22c>
 700769c:	20800317 	ldw	r2,12(r4)
 70076a0:	20c00217 	ldw	r3,8(r4)
 70076a4:	a825883a 	mov	r18,r21
 70076a8:	3021883a 	mov	r16,r6
 70076ac:	18800315 	stw	r2,12(r3)
 70076b0:	10c00215 	stw	r3,8(r2)
 70076b4:	003fdb06 	br	7007624 <__alt_data_end+0xff007624>
 70076b8:	00800304 	movi	r2,12
 70076bc:	a0800015 	stw	r2,0(r20)
 70076c0:	0005883a 	mov	r2,zero
 70076c4:	003fe506 	br	700765c <__alt_data_end+0xff00765c>
 70076c8:	98c00117 	ldw	r3,4(r19)
 70076cc:	9c4b883a 	add	r5,r19,r17
 70076d0:	11000054 	ori	r4,r2,1
 70076d4:	18c0004c 	andi	r3,r3,1
 70076d8:	1c62b03a 	or	r17,r3,r17
 70076dc:	9c400115 	stw	r17,4(r19)
 70076e0:	29000115 	stw	r4,4(r5)
 70076e4:	2885883a 	add	r2,r5,r2
 70076e8:	10c00117 	ldw	r3,4(r2)
 70076ec:	29400204 	addi	r5,r5,8
 70076f0:	a009883a 	mov	r4,r20
 70076f4:	18c00054 	ori	r3,r3,1
 70076f8:	10c00115 	stw	r3,4(r2)
 70076fc:	7004ae00 	call	7004ae0 <_free_r>
 7007700:	003fd306 	br	7007650 <__alt_data_end+0xff007650>
 7007704:	017fff04 	movi	r5,-4
 7007708:	414a703a 	and	r5,r8,r5
 700770c:	89800404 	addi	r6,r17,16
 7007710:	8151883a 	add	r8,r16,r5
 7007714:	4180590e 	bge	r8,r6,700787c <_realloc_r+0x390>
 7007718:	1080004c 	andi	r2,r2,1
 700771c:	103f9e1e 	bne	r2,zero,7007598 <__alt_data_end+0xff007598>
 7007720:	adbffe17 	ldw	r22,-8(r21)
 7007724:	00bfff04 	movi	r2,-4
 7007728:	9dadc83a 	sub	r22,r19,r22
 700772c:	b1800117 	ldw	r6,4(r22)
 7007730:	3084703a 	and	r2,r6,r2
 7007734:	20002026 	beq	r4,zero,70077b8 <_realloc_r+0x2cc>
 7007738:	80af883a 	add	r23,r16,r2
 700773c:	b96f883a 	add	r23,r23,r5
 7007740:	21c05f26 	beq	r4,r7,70078c0 <_realloc_r+0x3d4>
 7007744:	b8c01c16 	blt	r23,r3,70077b8 <_realloc_r+0x2cc>
 7007748:	20800317 	ldw	r2,12(r4)
 700774c:	20c00217 	ldw	r3,8(r4)
 7007750:	81bfff04 	addi	r6,r16,-4
 7007754:	01000904 	movi	r4,36
 7007758:	18800315 	stw	r2,12(r3)
 700775c:	10c00215 	stw	r3,8(r2)
 7007760:	b0c00217 	ldw	r3,8(r22)
 7007764:	b0800317 	ldw	r2,12(r22)
 7007768:	b4800204 	addi	r18,r22,8
 700776c:	18800315 	stw	r2,12(r3)
 7007770:	10c00215 	stw	r3,8(r2)
 7007774:	21801b36 	bltu	r4,r6,70077e4 <_realloc_r+0x2f8>
 7007778:	008004c4 	movi	r2,19
 700777c:	1180352e 	bgeu	r2,r6,7007854 <_realloc_r+0x368>
 7007780:	a8800017 	ldw	r2,0(r21)
 7007784:	b0800215 	stw	r2,8(r22)
 7007788:	a8800117 	ldw	r2,4(r21)
 700778c:	b0800315 	stw	r2,12(r22)
 7007790:	008006c4 	movi	r2,27
 7007794:	11807f36 	bltu	r2,r6,7007994 <_realloc_r+0x4a8>
 7007798:	b0800404 	addi	r2,r22,16
 700779c:	ad400204 	addi	r21,r21,8
 70077a0:	00002d06 	br	7007858 <_realloc_r+0x36c>
 70077a4:	adbffe17 	ldw	r22,-8(r21)
 70077a8:	00bfff04 	movi	r2,-4
 70077ac:	9dadc83a 	sub	r22,r19,r22
 70077b0:	b1000117 	ldw	r4,4(r22)
 70077b4:	2084703a 	and	r2,r4,r2
 70077b8:	b03f7726 	beq	r22,zero,7007598 <__alt_data_end+0xff007598>
 70077bc:	80af883a 	add	r23,r16,r2
 70077c0:	b8ff7516 	blt	r23,r3,7007598 <__alt_data_end+0xff007598>
 70077c4:	b0800317 	ldw	r2,12(r22)
 70077c8:	b0c00217 	ldw	r3,8(r22)
 70077cc:	81bfff04 	addi	r6,r16,-4
 70077d0:	01000904 	movi	r4,36
 70077d4:	18800315 	stw	r2,12(r3)
 70077d8:	10c00215 	stw	r3,8(r2)
 70077dc:	b4800204 	addi	r18,r22,8
 70077e0:	21bfe52e 	bgeu	r4,r6,7007778 <__alt_data_end+0xff007778>
 70077e4:	a80b883a 	mov	r5,r21
 70077e8:	9009883a 	mov	r4,r18
 70077ec:	70061040 	call	7006104 <memmove>
 70077f0:	b821883a 	mov	r16,r23
 70077f4:	b027883a 	mov	r19,r22
 70077f8:	003f8a06 	br	7007624 <__alt_data_end+0xff007624>
 70077fc:	300b883a 	mov	r5,r6
 7007800:	dfc00917 	ldw	ra,36(sp)
 7007804:	df000817 	ldw	fp,32(sp)
 7007808:	ddc00717 	ldw	r23,28(sp)
 700780c:	dd800617 	ldw	r22,24(sp)
 7007810:	dd400517 	ldw	r21,20(sp)
 7007814:	dd000417 	ldw	r20,16(sp)
 7007818:	dcc00317 	ldw	r19,12(sp)
 700781c:	dc800217 	ldw	r18,8(sp)
 7007820:	dc400117 	ldw	r17,4(sp)
 7007824:	dc000017 	ldw	r16,0(sp)
 7007828:	dec00a04 	addi	sp,sp,40
 700782c:	70056cc1 	jmpi	70056cc <_malloc_r>
 7007830:	a8c00017 	ldw	r3,0(r21)
 7007834:	90c00015 	stw	r3,0(r18)
 7007838:	a8c00117 	ldw	r3,4(r21)
 700783c:	90c00115 	stw	r3,4(r18)
 7007840:	00c006c4 	movi	r3,27
 7007844:	19804536 	bltu	r3,r6,700795c <_realloc_r+0x470>
 7007848:	90800204 	addi	r2,r18,8
 700784c:	a8c00204 	addi	r3,r21,8
 7007850:	003f6306 	br	70075e0 <__alt_data_end+0xff0075e0>
 7007854:	9005883a 	mov	r2,r18
 7007858:	a8c00017 	ldw	r3,0(r21)
 700785c:	b821883a 	mov	r16,r23
 7007860:	b027883a 	mov	r19,r22
 7007864:	10c00015 	stw	r3,0(r2)
 7007868:	a8c00117 	ldw	r3,4(r21)
 700786c:	10c00115 	stw	r3,4(r2)
 7007870:	a8c00217 	ldw	r3,8(r21)
 7007874:	10c00215 	stw	r3,8(r2)
 7007878:	003f6a06 	br	7007624 <__alt_data_end+0xff007624>
 700787c:	9c67883a 	add	r19,r19,r17
 7007880:	4445c83a 	sub	r2,r8,r17
 7007884:	e4c00215 	stw	r19,8(fp)
 7007888:	10800054 	ori	r2,r2,1
 700788c:	98800115 	stw	r2,4(r19)
 7007890:	a8bfff17 	ldw	r2,-4(r21)
 7007894:	a009883a 	mov	r4,r20
 7007898:	1080004c 	andi	r2,r2,1
 700789c:	1462b03a 	or	r17,r2,r17
 70078a0:	ac7fff15 	stw	r17,-4(r21)
 70078a4:	700d5600 	call	700d560 <__malloc_unlock>
 70078a8:	a805883a 	mov	r2,r21
 70078ac:	003f6b06 	br	700765c <__alt_data_end+0xff00765c>
 70078b0:	a80b883a 	mov	r5,r21
 70078b4:	9009883a 	mov	r4,r18
 70078b8:	70061040 	call	7006104 <memmove>
 70078bc:	003f4e06 	br	70075f8 <__alt_data_end+0xff0075f8>
 70078c0:	89000404 	addi	r4,r17,16
 70078c4:	b93fbc16 	blt	r23,r4,70077b8 <__alt_data_end+0xff0077b8>
 70078c8:	b0800317 	ldw	r2,12(r22)
 70078cc:	b0c00217 	ldw	r3,8(r22)
 70078d0:	81bfff04 	addi	r6,r16,-4
 70078d4:	01000904 	movi	r4,36
 70078d8:	18800315 	stw	r2,12(r3)
 70078dc:	10c00215 	stw	r3,8(r2)
 70078e0:	b4800204 	addi	r18,r22,8
 70078e4:	21804336 	bltu	r4,r6,70079f4 <_realloc_r+0x508>
 70078e8:	008004c4 	movi	r2,19
 70078ec:	11803f2e 	bgeu	r2,r6,70079ec <_realloc_r+0x500>
 70078f0:	a8800017 	ldw	r2,0(r21)
 70078f4:	b0800215 	stw	r2,8(r22)
 70078f8:	a8800117 	ldw	r2,4(r21)
 70078fc:	b0800315 	stw	r2,12(r22)
 7007900:	008006c4 	movi	r2,27
 7007904:	11803f36 	bltu	r2,r6,7007a04 <_realloc_r+0x518>
 7007908:	b0800404 	addi	r2,r22,16
 700790c:	ad400204 	addi	r21,r21,8
 7007910:	a8c00017 	ldw	r3,0(r21)
 7007914:	10c00015 	stw	r3,0(r2)
 7007918:	a8c00117 	ldw	r3,4(r21)
 700791c:	10c00115 	stw	r3,4(r2)
 7007920:	a8c00217 	ldw	r3,8(r21)
 7007924:	10c00215 	stw	r3,8(r2)
 7007928:	b447883a 	add	r3,r22,r17
 700792c:	bc45c83a 	sub	r2,r23,r17
 7007930:	e0c00215 	stw	r3,8(fp)
 7007934:	10800054 	ori	r2,r2,1
 7007938:	18800115 	stw	r2,4(r3)
 700793c:	b0800117 	ldw	r2,4(r22)
 7007940:	a009883a 	mov	r4,r20
 7007944:	1080004c 	andi	r2,r2,1
 7007948:	1462b03a 	or	r17,r2,r17
 700794c:	b4400115 	stw	r17,4(r22)
 7007950:	700d5600 	call	700d560 <__malloc_unlock>
 7007954:	9005883a 	mov	r2,r18
 7007958:	003f4006 	br	700765c <__alt_data_end+0xff00765c>
 700795c:	a8c00217 	ldw	r3,8(r21)
 7007960:	90c00215 	stw	r3,8(r18)
 7007964:	a8c00317 	ldw	r3,12(r21)
 7007968:	90c00315 	stw	r3,12(r18)
 700796c:	30801126 	beq	r6,r2,70079b4 <_realloc_r+0x4c8>
 7007970:	90800404 	addi	r2,r18,16
 7007974:	a8c00404 	addi	r3,r21,16
 7007978:	003f1906 	br	70075e0 <__alt_data_end+0xff0075e0>
 700797c:	90ffff17 	ldw	r3,-4(r18)
 7007980:	00bfff04 	movi	r2,-4
 7007984:	a825883a 	mov	r18,r21
 7007988:	1884703a 	and	r2,r3,r2
 700798c:	80a1883a 	add	r16,r16,r2
 7007990:	003f2406 	br	7007624 <__alt_data_end+0xff007624>
 7007994:	a8800217 	ldw	r2,8(r21)
 7007998:	b0800415 	stw	r2,16(r22)
 700799c:	a8800317 	ldw	r2,12(r21)
 70079a0:	b0800515 	stw	r2,20(r22)
 70079a4:	31000a26 	beq	r6,r4,70079d0 <_realloc_r+0x4e4>
 70079a8:	b0800604 	addi	r2,r22,24
 70079ac:	ad400404 	addi	r21,r21,16
 70079b0:	003fa906 	br	7007858 <__alt_data_end+0xff007858>
 70079b4:	a9000417 	ldw	r4,16(r21)
 70079b8:	90800604 	addi	r2,r18,24
 70079bc:	a8c00604 	addi	r3,r21,24
 70079c0:	91000415 	stw	r4,16(r18)
 70079c4:	a9000517 	ldw	r4,20(r21)
 70079c8:	91000515 	stw	r4,20(r18)
 70079cc:	003f0406 	br	70075e0 <__alt_data_end+0xff0075e0>
 70079d0:	a8c00417 	ldw	r3,16(r21)
 70079d4:	ad400604 	addi	r21,r21,24
 70079d8:	b0800804 	addi	r2,r22,32
 70079dc:	b0c00615 	stw	r3,24(r22)
 70079e0:	a8ffff17 	ldw	r3,-4(r21)
 70079e4:	b0c00715 	stw	r3,28(r22)
 70079e8:	003f9b06 	br	7007858 <__alt_data_end+0xff007858>
 70079ec:	9005883a 	mov	r2,r18
 70079f0:	003fc706 	br	7007910 <__alt_data_end+0xff007910>
 70079f4:	a80b883a 	mov	r5,r21
 70079f8:	9009883a 	mov	r4,r18
 70079fc:	70061040 	call	7006104 <memmove>
 7007a00:	003fc906 	br	7007928 <__alt_data_end+0xff007928>
 7007a04:	a8800217 	ldw	r2,8(r21)
 7007a08:	b0800415 	stw	r2,16(r22)
 7007a0c:	a8800317 	ldw	r2,12(r21)
 7007a10:	b0800515 	stw	r2,20(r22)
 7007a14:	31000726 	beq	r6,r4,7007a34 <_realloc_r+0x548>
 7007a18:	b0800604 	addi	r2,r22,24
 7007a1c:	ad400404 	addi	r21,r21,16
 7007a20:	003fbb06 	br	7007910 <__alt_data_end+0xff007910>
 7007a24:	a009883a 	mov	r4,r20
 7007a28:	700d5600 	call	700d560 <__malloc_unlock>
 7007a2c:	0005883a 	mov	r2,zero
 7007a30:	003f0a06 	br	700765c <__alt_data_end+0xff00765c>
 7007a34:	a8c00417 	ldw	r3,16(r21)
 7007a38:	ad400604 	addi	r21,r21,24
 7007a3c:	b0800804 	addi	r2,r22,32
 7007a40:	b0c00615 	stw	r3,24(r22)
 7007a44:	a8ffff17 	ldw	r3,-4(r21)
 7007a48:	b0c00715 	stw	r3,28(r22)
 7007a4c:	003fb006 	br	7007910 <__alt_data_end+0xff007910>

07007a50 <__fpclassifyd>:
 7007a50:	00a00034 	movhi	r2,32768
 7007a54:	10bfffc4 	addi	r2,r2,-1
 7007a58:	2884703a 	and	r2,r5,r2
 7007a5c:	10000726 	beq	r2,zero,7007a7c <__fpclassifyd+0x2c>
 7007a60:	00fffc34 	movhi	r3,65520
 7007a64:	019ff834 	movhi	r6,32736
 7007a68:	28c7883a 	add	r3,r5,r3
 7007a6c:	31bfffc4 	addi	r6,r6,-1
 7007a70:	30c00536 	bltu	r6,r3,7007a88 <__fpclassifyd+0x38>
 7007a74:	00800104 	movi	r2,4
 7007a78:	f800283a 	ret
 7007a7c:	2000021e 	bne	r4,zero,7007a88 <__fpclassifyd+0x38>
 7007a80:	00800084 	movi	r2,2
 7007a84:	f800283a 	ret
 7007a88:	00dffc34 	movhi	r3,32752
 7007a8c:	019ff834 	movhi	r6,32736
 7007a90:	28cb883a 	add	r5,r5,r3
 7007a94:	31bfffc4 	addi	r6,r6,-1
 7007a98:	317ff62e 	bgeu	r6,r5,7007a74 <__alt_data_end+0xff007a74>
 7007a9c:	01400434 	movhi	r5,16
 7007aa0:	297fffc4 	addi	r5,r5,-1
 7007aa4:	28800236 	bltu	r5,r2,7007ab0 <__fpclassifyd+0x60>
 7007aa8:	008000c4 	movi	r2,3
 7007aac:	f800283a 	ret
 7007ab0:	10c00226 	beq	r2,r3,7007abc <__fpclassifyd+0x6c>
 7007ab4:	0005883a 	mov	r2,zero
 7007ab8:	f800283a 	ret
 7007abc:	2005003a 	cmpeq	r2,r4,zero
 7007ac0:	f800283a 	ret

07007ac4 <_sbrk_r>:
 7007ac4:	defffd04 	addi	sp,sp,-12
 7007ac8:	dc000015 	stw	r16,0(sp)
 7007acc:	0401c074 	movhi	r16,1793
 7007ad0:	dc400115 	stw	r17,4(sp)
 7007ad4:	840d2504 	addi	r16,r16,13460
 7007ad8:	2023883a 	mov	r17,r4
 7007adc:	2809883a 	mov	r4,r5
 7007ae0:	dfc00215 	stw	ra,8(sp)
 7007ae4:	80000015 	stw	zero,0(r16)
 7007ae8:	700d7200 	call	700d720 <sbrk>
 7007aec:	00ffffc4 	movi	r3,-1
 7007af0:	10c00526 	beq	r2,r3,7007b08 <_sbrk_r+0x44>
 7007af4:	dfc00217 	ldw	ra,8(sp)
 7007af8:	dc400117 	ldw	r17,4(sp)
 7007afc:	dc000017 	ldw	r16,0(sp)
 7007b00:	dec00304 	addi	sp,sp,12
 7007b04:	f800283a 	ret
 7007b08:	80c00017 	ldw	r3,0(r16)
 7007b0c:	183ff926 	beq	r3,zero,7007af4 <__alt_data_end+0xff007af4>
 7007b10:	88c00015 	stw	r3,0(r17)
 7007b14:	003ff706 	br	7007af4 <__alt_data_end+0xff007af4>

07007b18 <__sread>:
 7007b18:	defffe04 	addi	sp,sp,-8
 7007b1c:	dc000015 	stw	r16,0(sp)
 7007b20:	2821883a 	mov	r16,r5
 7007b24:	2940038f 	ldh	r5,14(r5)
 7007b28:	dfc00115 	stw	ra,4(sp)
 7007b2c:	7009a640 	call	7009a64 <_read_r>
 7007b30:	10000716 	blt	r2,zero,7007b50 <__sread+0x38>
 7007b34:	80c01417 	ldw	r3,80(r16)
 7007b38:	1887883a 	add	r3,r3,r2
 7007b3c:	80c01415 	stw	r3,80(r16)
 7007b40:	dfc00117 	ldw	ra,4(sp)
 7007b44:	dc000017 	ldw	r16,0(sp)
 7007b48:	dec00204 	addi	sp,sp,8
 7007b4c:	f800283a 	ret
 7007b50:	80c0030b 	ldhu	r3,12(r16)
 7007b54:	18fbffcc 	andi	r3,r3,61439
 7007b58:	80c0030d 	sth	r3,12(r16)
 7007b5c:	dfc00117 	ldw	ra,4(sp)
 7007b60:	dc000017 	ldw	r16,0(sp)
 7007b64:	dec00204 	addi	sp,sp,8
 7007b68:	f800283a 	ret

07007b6c <__seofread>:
 7007b6c:	0005883a 	mov	r2,zero
 7007b70:	f800283a 	ret

07007b74 <__swrite>:
 7007b74:	2880030b 	ldhu	r2,12(r5)
 7007b78:	defffb04 	addi	sp,sp,-20
 7007b7c:	dcc00315 	stw	r19,12(sp)
 7007b80:	dc800215 	stw	r18,8(sp)
 7007b84:	dc400115 	stw	r17,4(sp)
 7007b88:	dc000015 	stw	r16,0(sp)
 7007b8c:	dfc00415 	stw	ra,16(sp)
 7007b90:	10c0400c 	andi	r3,r2,256
 7007b94:	2821883a 	mov	r16,r5
 7007b98:	2023883a 	mov	r17,r4
 7007b9c:	3025883a 	mov	r18,r6
 7007ba0:	3827883a 	mov	r19,r7
 7007ba4:	18000526 	beq	r3,zero,7007bbc <__swrite+0x48>
 7007ba8:	2940038f 	ldh	r5,14(r5)
 7007bac:	01c00084 	movi	r7,2
 7007bb0:	000d883a 	mov	r6,zero
 7007bb4:	7009a040 	call	7009a04 <_lseek_r>
 7007bb8:	8080030b 	ldhu	r2,12(r16)
 7007bbc:	8140038f 	ldh	r5,14(r16)
 7007bc0:	10bbffcc 	andi	r2,r2,61439
 7007bc4:	980f883a 	mov	r7,r19
 7007bc8:	900d883a 	mov	r6,r18
 7007bcc:	8809883a 	mov	r4,r17
 7007bd0:	8080030d 	sth	r2,12(r16)
 7007bd4:	dfc00417 	ldw	ra,16(sp)
 7007bd8:	dcc00317 	ldw	r19,12(sp)
 7007bdc:	dc800217 	ldw	r18,8(sp)
 7007be0:	dc400117 	ldw	r17,4(sp)
 7007be4:	dc000017 	ldw	r16,0(sp)
 7007be8:	dec00504 	addi	sp,sp,20
 7007bec:	70094d01 	jmpi	70094d0 <_write_r>

07007bf0 <__sseek>:
 7007bf0:	defffe04 	addi	sp,sp,-8
 7007bf4:	dc000015 	stw	r16,0(sp)
 7007bf8:	2821883a 	mov	r16,r5
 7007bfc:	2940038f 	ldh	r5,14(r5)
 7007c00:	dfc00115 	stw	ra,4(sp)
 7007c04:	7009a040 	call	7009a04 <_lseek_r>
 7007c08:	00ffffc4 	movi	r3,-1
 7007c0c:	10c00826 	beq	r2,r3,7007c30 <__sseek+0x40>
 7007c10:	80c0030b 	ldhu	r3,12(r16)
 7007c14:	80801415 	stw	r2,80(r16)
 7007c18:	18c40014 	ori	r3,r3,4096
 7007c1c:	80c0030d 	sth	r3,12(r16)
 7007c20:	dfc00117 	ldw	ra,4(sp)
 7007c24:	dc000017 	ldw	r16,0(sp)
 7007c28:	dec00204 	addi	sp,sp,8
 7007c2c:	f800283a 	ret
 7007c30:	80c0030b 	ldhu	r3,12(r16)
 7007c34:	18fbffcc 	andi	r3,r3,61439
 7007c38:	80c0030d 	sth	r3,12(r16)
 7007c3c:	dfc00117 	ldw	ra,4(sp)
 7007c40:	dc000017 	ldw	r16,0(sp)
 7007c44:	dec00204 	addi	sp,sp,8
 7007c48:	f800283a 	ret

07007c4c <__sclose>:
 7007c4c:	2940038f 	ldh	r5,14(r5)
 7007c50:	70095301 	jmpi	7009530 <_close_r>

07007c54 <strcmp>:
 7007c54:	2144b03a 	or	r2,r4,r5
 7007c58:	108000cc 	andi	r2,r2,3
 7007c5c:	1000171e 	bne	r2,zero,7007cbc <strcmp+0x68>
 7007c60:	20800017 	ldw	r2,0(r4)
 7007c64:	28c00017 	ldw	r3,0(r5)
 7007c68:	10c0141e 	bne	r2,r3,7007cbc <strcmp+0x68>
 7007c6c:	027fbff4 	movhi	r9,65279
 7007c70:	4a7fbfc4 	addi	r9,r9,-257
 7007c74:	0086303a 	nor	r3,zero,r2
 7007c78:	02202074 	movhi	r8,32897
 7007c7c:	1245883a 	add	r2,r2,r9
 7007c80:	42202004 	addi	r8,r8,-32640
 7007c84:	10c4703a 	and	r2,r2,r3
 7007c88:	1204703a 	and	r2,r2,r8
 7007c8c:	10000226 	beq	r2,zero,7007c98 <strcmp+0x44>
 7007c90:	00002306 	br	7007d20 <strcmp+0xcc>
 7007c94:	1000221e 	bne	r2,zero,7007d20 <strcmp+0xcc>
 7007c98:	21000104 	addi	r4,r4,4
 7007c9c:	20c00017 	ldw	r3,0(r4)
 7007ca0:	29400104 	addi	r5,r5,4
 7007ca4:	29800017 	ldw	r6,0(r5)
 7007ca8:	1a4f883a 	add	r7,r3,r9
 7007cac:	00c4303a 	nor	r2,zero,r3
 7007cb0:	3884703a 	and	r2,r7,r2
 7007cb4:	1204703a 	and	r2,r2,r8
 7007cb8:	19bff626 	beq	r3,r6,7007c94 <__alt_data_end+0xff007c94>
 7007cbc:	20800003 	ldbu	r2,0(r4)
 7007cc0:	10c03fcc 	andi	r3,r2,255
 7007cc4:	18c0201c 	xori	r3,r3,128
 7007cc8:	18ffe004 	addi	r3,r3,-128
 7007ccc:	18000c26 	beq	r3,zero,7007d00 <strcmp+0xac>
 7007cd0:	29800007 	ldb	r6,0(r5)
 7007cd4:	19800326 	beq	r3,r6,7007ce4 <strcmp+0x90>
 7007cd8:	00001306 	br	7007d28 <strcmp+0xd4>
 7007cdc:	29800007 	ldb	r6,0(r5)
 7007ce0:	11800b1e 	bne	r2,r6,7007d10 <strcmp+0xbc>
 7007ce4:	21000044 	addi	r4,r4,1
 7007ce8:	20c00003 	ldbu	r3,0(r4)
 7007cec:	29400044 	addi	r5,r5,1
 7007cf0:	18803fcc 	andi	r2,r3,255
 7007cf4:	1080201c 	xori	r2,r2,128
 7007cf8:	10bfe004 	addi	r2,r2,-128
 7007cfc:	103ff71e 	bne	r2,zero,7007cdc <__alt_data_end+0xff007cdc>
 7007d00:	0007883a 	mov	r3,zero
 7007d04:	28800003 	ldbu	r2,0(r5)
 7007d08:	1885c83a 	sub	r2,r3,r2
 7007d0c:	f800283a 	ret
 7007d10:	28800003 	ldbu	r2,0(r5)
 7007d14:	18c03fcc 	andi	r3,r3,255
 7007d18:	1885c83a 	sub	r2,r3,r2
 7007d1c:	f800283a 	ret
 7007d20:	0005883a 	mov	r2,zero
 7007d24:	f800283a 	ret
 7007d28:	10c03fcc 	andi	r3,r2,255
 7007d2c:	003ff506 	br	7007d04 <__alt_data_end+0xff007d04>

07007d30 <__sprint_r.part.0>:
 7007d30:	28801917 	ldw	r2,100(r5)
 7007d34:	defff604 	addi	sp,sp,-40
 7007d38:	dd400515 	stw	r21,20(sp)
 7007d3c:	dfc00915 	stw	ra,36(sp)
 7007d40:	df000815 	stw	fp,32(sp)
 7007d44:	ddc00715 	stw	r23,28(sp)
 7007d48:	dd800615 	stw	r22,24(sp)
 7007d4c:	dd000415 	stw	r20,16(sp)
 7007d50:	dcc00315 	stw	r19,12(sp)
 7007d54:	dc800215 	stw	r18,8(sp)
 7007d58:	dc400115 	stw	r17,4(sp)
 7007d5c:	dc000015 	stw	r16,0(sp)
 7007d60:	1088000c 	andi	r2,r2,8192
 7007d64:	302b883a 	mov	r21,r6
 7007d68:	10002e26 	beq	r2,zero,7007e24 <__sprint_r.part.0+0xf4>
 7007d6c:	30800217 	ldw	r2,8(r6)
 7007d70:	35800017 	ldw	r22,0(r6)
 7007d74:	10002926 	beq	r2,zero,7007e1c <__sprint_r.part.0+0xec>
 7007d78:	2827883a 	mov	r19,r5
 7007d7c:	2029883a 	mov	r20,r4
 7007d80:	b5c00104 	addi	r23,r22,4
 7007d84:	04bfffc4 	movi	r18,-1
 7007d88:	bc400017 	ldw	r17,0(r23)
 7007d8c:	b4000017 	ldw	r16,0(r22)
 7007d90:	0039883a 	mov	fp,zero
 7007d94:	8822d0ba 	srli	r17,r17,2
 7007d98:	8800031e 	bne	r17,zero,7007da8 <__sprint_r.part.0+0x78>
 7007d9c:	00001806 	br	7007e00 <__sprint_r.part.0+0xd0>
 7007da0:	84000104 	addi	r16,r16,4
 7007da4:	8f001526 	beq	r17,fp,7007dfc <__sprint_r.part.0+0xcc>
 7007da8:	81400017 	ldw	r5,0(r16)
 7007dac:	980d883a 	mov	r6,r19
 7007db0:	a009883a 	mov	r4,r20
 7007db4:	70098b00 	call	70098b0 <_fputwc_r>
 7007db8:	e7000044 	addi	fp,fp,1
 7007dbc:	14bff81e 	bne	r2,r18,7007da0 <__alt_data_end+0xff007da0>
 7007dc0:	9005883a 	mov	r2,r18
 7007dc4:	a8000215 	stw	zero,8(r21)
 7007dc8:	a8000115 	stw	zero,4(r21)
 7007dcc:	dfc00917 	ldw	ra,36(sp)
 7007dd0:	df000817 	ldw	fp,32(sp)
 7007dd4:	ddc00717 	ldw	r23,28(sp)
 7007dd8:	dd800617 	ldw	r22,24(sp)
 7007ddc:	dd400517 	ldw	r21,20(sp)
 7007de0:	dd000417 	ldw	r20,16(sp)
 7007de4:	dcc00317 	ldw	r19,12(sp)
 7007de8:	dc800217 	ldw	r18,8(sp)
 7007dec:	dc400117 	ldw	r17,4(sp)
 7007df0:	dc000017 	ldw	r16,0(sp)
 7007df4:	dec00a04 	addi	sp,sp,40
 7007df8:	f800283a 	ret
 7007dfc:	a8800217 	ldw	r2,8(r21)
 7007e00:	8c63883a 	add	r17,r17,r17
 7007e04:	8c63883a 	add	r17,r17,r17
 7007e08:	1445c83a 	sub	r2,r2,r17
 7007e0c:	a8800215 	stw	r2,8(r21)
 7007e10:	b5800204 	addi	r22,r22,8
 7007e14:	bdc00204 	addi	r23,r23,8
 7007e18:	103fdb1e 	bne	r2,zero,7007d88 <__alt_data_end+0xff007d88>
 7007e1c:	0005883a 	mov	r2,zero
 7007e20:	003fe806 	br	7007dc4 <__alt_data_end+0xff007dc4>
 7007e24:	7004df00 	call	7004df0 <__sfvwrite_r>
 7007e28:	003fe606 	br	7007dc4 <__alt_data_end+0xff007dc4>

07007e2c <__sprint_r>:
 7007e2c:	30c00217 	ldw	r3,8(r6)
 7007e30:	18000126 	beq	r3,zero,7007e38 <__sprint_r+0xc>
 7007e34:	7007d301 	jmpi	7007d30 <__sprint_r.part.0>
 7007e38:	30000115 	stw	zero,4(r6)
 7007e3c:	0005883a 	mov	r2,zero
 7007e40:	f800283a 	ret

07007e44 <___vfiprintf_internal_r>:
 7007e44:	deffc904 	addi	sp,sp,-220
 7007e48:	df003515 	stw	fp,212(sp)
 7007e4c:	dd003115 	stw	r20,196(sp)
 7007e50:	dfc03615 	stw	ra,216(sp)
 7007e54:	ddc03415 	stw	r23,208(sp)
 7007e58:	dd803315 	stw	r22,204(sp)
 7007e5c:	dd403215 	stw	r21,200(sp)
 7007e60:	dcc03015 	stw	r19,192(sp)
 7007e64:	dc802f15 	stw	r18,188(sp)
 7007e68:	dc402e15 	stw	r17,184(sp)
 7007e6c:	dc002d15 	stw	r16,180(sp)
 7007e70:	d9002015 	stw	r4,128(sp)
 7007e74:	d9c02215 	stw	r7,136(sp)
 7007e78:	2829883a 	mov	r20,r5
 7007e7c:	3039883a 	mov	fp,r6
 7007e80:	20000226 	beq	r4,zero,7007e8c <___vfiprintf_internal_r+0x48>
 7007e84:	20800e17 	ldw	r2,56(r4)
 7007e88:	1000cf26 	beq	r2,zero,70081c8 <___vfiprintf_internal_r+0x384>
 7007e8c:	a080030b 	ldhu	r2,12(r20)
 7007e90:	10c8000c 	andi	r3,r2,8192
 7007e94:	1800061e 	bne	r3,zero,7007eb0 <___vfiprintf_internal_r+0x6c>
 7007e98:	a1001917 	ldw	r4,100(r20)
 7007e9c:	00f7ffc4 	movi	r3,-8193
 7007ea0:	10880014 	ori	r2,r2,8192
 7007ea4:	20c6703a 	and	r3,r4,r3
 7007ea8:	a080030d 	sth	r2,12(r20)
 7007eac:	a0c01915 	stw	r3,100(r20)
 7007eb0:	10c0020c 	andi	r3,r2,8
 7007eb4:	1800a926 	beq	r3,zero,700815c <___vfiprintf_internal_r+0x318>
 7007eb8:	a0c00417 	ldw	r3,16(r20)
 7007ebc:	1800a726 	beq	r3,zero,700815c <___vfiprintf_internal_r+0x318>
 7007ec0:	1080068c 	andi	r2,r2,26
 7007ec4:	00c00284 	movi	r3,10
 7007ec8:	10c0ac26 	beq	r2,r3,700817c <___vfiprintf_internal_r+0x338>
 7007ecc:	da801a04 	addi	r10,sp,104
 7007ed0:	da801e15 	stw	r10,120(sp)
 7007ed4:	d8801e17 	ldw	r2,120(sp)
 7007ed8:	da8019c4 	addi	r10,sp,103
 7007edc:	0581c074 	movhi	r22,1793
 7007ee0:	05c1c074 	movhi	r23,1793
 7007ee4:	da801f15 	stw	r10,124(sp)
 7007ee8:	1295c83a 	sub	r10,r2,r10
 7007eec:	b5bf4504 	addi	r22,r22,-748
 7007ef0:	bdff4104 	addi	r23,r23,-764
 7007ef4:	dec01a15 	stw	sp,104(sp)
 7007ef8:	d8001c15 	stw	zero,112(sp)
 7007efc:	d8001b15 	stw	zero,108(sp)
 7007f00:	d8002615 	stw	zero,152(sp)
 7007f04:	d8002315 	stw	zero,140(sp)
 7007f08:	da802715 	stw	r10,156(sp)
 7007f0c:	d811883a 	mov	r8,sp
 7007f10:	dd002115 	stw	r20,132(sp)
 7007f14:	e021883a 	mov	r16,fp
 7007f18:	80800007 	ldb	r2,0(r16)
 7007f1c:	1003ea26 	beq	r2,zero,7008ec8 <___vfiprintf_internal_r+0x1084>
 7007f20:	00c00944 	movi	r3,37
 7007f24:	8025883a 	mov	r18,r16
 7007f28:	10c0021e 	bne	r2,r3,7007f34 <___vfiprintf_internal_r+0xf0>
 7007f2c:	00001606 	br	7007f88 <___vfiprintf_internal_r+0x144>
 7007f30:	10c00326 	beq	r2,r3,7007f40 <___vfiprintf_internal_r+0xfc>
 7007f34:	94800044 	addi	r18,r18,1
 7007f38:	90800007 	ldb	r2,0(r18)
 7007f3c:	103ffc1e 	bne	r2,zero,7007f30 <__alt_data_end+0xff007f30>
 7007f40:	9423c83a 	sub	r17,r18,r16
 7007f44:	88001026 	beq	r17,zero,7007f88 <___vfiprintf_internal_r+0x144>
 7007f48:	d8c01c17 	ldw	r3,112(sp)
 7007f4c:	d8801b17 	ldw	r2,108(sp)
 7007f50:	44000015 	stw	r16,0(r8)
 7007f54:	88c7883a 	add	r3,r17,r3
 7007f58:	10800044 	addi	r2,r2,1
 7007f5c:	44400115 	stw	r17,4(r8)
 7007f60:	d8c01c15 	stw	r3,112(sp)
 7007f64:	d8801b15 	stw	r2,108(sp)
 7007f68:	010001c4 	movi	r4,7
 7007f6c:	2080760e 	bge	r4,r2,7008148 <___vfiprintf_internal_r+0x304>
 7007f70:	1803821e 	bne	r3,zero,7008d7c <___vfiprintf_internal_r+0xf38>
 7007f74:	da802317 	ldw	r10,140(sp)
 7007f78:	d8001b15 	stw	zero,108(sp)
 7007f7c:	d811883a 	mov	r8,sp
 7007f80:	5455883a 	add	r10,r10,r17
 7007f84:	da802315 	stw	r10,140(sp)
 7007f88:	90800007 	ldb	r2,0(r18)
 7007f8c:	10044626 	beq	r2,zero,70090a8 <___vfiprintf_internal_r+0x1264>
 7007f90:	90c00047 	ldb	r3,1(r18)
 7007f94:	94000044 	addi	r16,r18,1
 7007f98:	d8001d85 	stb	zero,118(sp)
 7007f9c:	0009883a 	mov	r4,zero
 7007fa0:	000f883a 	mov	r7,zero
 7007fa4:	027fffc4 	movi	r9,-1
 7007fa8:	0023883a 	mov	r17,zero
 7007fac:	0029883a 	mov	r20,zero
 7007fb0:	01401604 	movi	r5,88
 7007fb4:	01800244 	movi	r6,9
 7007fb8:	03400a84 	movi	r13,42
 7007fbc:	03001b04 	movi	r12,108
 7007fc0:	84000044 	addi	r16,r16,1
 7007fc4:	18bff804 	addi	r2,r3,-32
 7007fc8:	28827336 	bltu	r5,r2,7008998 <___vfiprintf_internal_r+0xb54>
 7007fcc:	100490ba 	slli	r2,r2,2
 7007fd0:	0281c034 	movhi	r10,1792
 7007fd4:	529ff904 	addi	r10,r10,32740
 7007fd8:	1285883a 	add	r2,r2,r10
 7007fdc:	10800017 	ldw	r2,0(r2)
 7007fe0:	1000683a 	jmp	r2
 7007fe4:	070086cc 	andi	fp,zero,539
 7007fe8:	07008998 	cmpnei	fp,zero,550
 7007fec:	07008998 	cmpnei	fp,zero,550
 7007ff0:	070086ec 	andhi	fp,zero,539
 7007ff4:	07008998 	cmpnei	fp,zero,550
 7007ff8:	07008998 	cmpnei	fp,zero,550
 7007ffc:	07008998 	cmpnei	fp,zero,550
 7008000:	07008998 	cmpnei	fp,zero,550
 7008004:	07008998 	cmpnei	fp,zero,550
 7008008:	07008998 	cmpnei	fp,zero,550
 700800c:	070088d4 	movui	fp,547
 7008010:	070088f0 	cmpltui	fp,zero,547
 7008014:	07008998 	cmpnei	fp,zero,550
 7008018:	070081d8 	cmpnei	fp,zero,519
 700801c:	07008900 	call	700890 <__alt_mem_sdram-0x38ff770>
 7008020:	07008998 	cmpnei	fp,zero,550
 7008024:	070086f8 	rdprs	fp,zero,539
 7008028:	07008704 	movi	fp,540
 700802c:	07008704 	movi	fp,540
 7008030:	07008704 	movi	fp,540
 7008034:	07008704 	movi	fp,540
 7008038:	07008704 	movi	fp,540
 700803c:	07008704 	movi	fp,540
 7008040:	07008704 	movi	fp,540
 7008044:	07008704 	movi	fp,540
 7008048:	07008704 	movi	fp,540
 700804c:	07008998 	cmpnei	fp,zero,550
 7008050:	07008998 	cmpnei	fp,zero,550
 7008054:	07008998 	cmpnei	fp,zero,550
 7008058:	07008998 	cmpnei	fp,zero,550
 700805c:	07008998 	cmpnei	fp,zero,550
 7008060:	07008998 	cmpnei	fp,zero,550
 7008064:	07008998 	cmpnei	fp,zero,550
 7008068:	07008998 	cmpnei	fp,zero,550
 700806c:	07008998 	cmpnei	fp,zero,550
 7008070:	07008998 	cmpnei	fp,zero,550
 7008074:	07008730 	cmpltui	fp,zero,540
 7008078:	07008998 	cmpnei	fp,zero,550
 700807c:	07008998 	cmpnei	fp,zero,550
 7008080:	07008998 	cmpnei	fp,zero,550
 7008084:	07008998 	cmpnei	fp,zero,550
 7008088:	07008998 	cmpnei	fp,zero,550
 700808c:	07008998 	cmpnei	fp,zero,550
 7008090:	07008998 	cmpnei	fp,zero,550
 7008094:	07008998 	cmpnei	fp,zero,550
 7008098:	07008998 	cmpnei	fp,zero,550
 700809c:	07008998 	cmpnei	fp,zero,550
 70080a0:	07008768 	cmpgeui	fp,zero,541
 70080a4:	07008998 	cmpnei	fp,zero,550
 70080a8:	07008998 	cmpnei	fp,zero,550
 70080ac:	07008998 	cmpnei	fp,zero,550
 70080b0:	07008998 	cmpnei	fp,zero,550
 70080b4:	07008998 	cmpnei	fp,zero,550
 70080b8:	070087c0 	call	70087c <__alt_mem_sdram-0x38ff784>
 70080bc:	07008998 	cmpnei	fp,zero,550
 70080c0:	07008998 	cmpnei	fp,zero,550
 70080c4:	07008830 	cmpltui	fp,zero,544
 70080c8:	07008998 	cmpnei	fp,zero,550
 70080cc:	07008998 	cmpnei	fp,zero,550
 70080d0:	07008998 	cmpnei	fp,zero,550
 70080d4:	07008998 	cmpnei	fp,zero,550
 70080d8:	07008998 	cmpnei	fp,zero,550
 70080dc:	07008998 	cmpnei	fp,zero,550
 70080e0:	07008998 	cmpnei	fp,zero,550
 70080e4:	07008998 	cmpnei	fp,zero,550
 70080e8:	07008998 	cmpnei	fp,zero,550
 70080ec:	07008998 	cmpnei	fp,zero,550
 70080f0:	070085dc 	xori	fp,zero,535
 70080f4:	07008608 	cmpgei	fp,zero,536
 70080f8:	07008998 	cmpnei	fp,zero,550
 70080fc:	07008998 	cmpnei	fp,zero,550
 7008100:	07008998 	cmpnei	fp,zero,550
 7008104:	07008940 	call	700894 <__alt_mem_sdram-0x38ff76c>
 7008108:	07008608 	cmpgei	fp,zero,536
 700810c:	07008998 	cmpnei	fp,zero,550
 7008110:	07008998 	cmpnei	fp,zero,550
 7008114:	0700849c 	xori	fp,zero,530
 7008118:	07008998 	cmpnei	fp,zero,550
 700811c:	070084ac 	andhi	fp,zero,530
 7008120:	070084e8 	cmpgeui	fp,zero,531
 7008124:	070081e4 	muli	fp,zero,519
 7008128:	07008490 	cmplti	fp,zero,530
 700812c:	07008998 	cmpnei	fp,zero,550
 7008130:	0700886c 	andhi	fp,zero,545
 7008134:	07008998 	cmpnei	fp,zero,550
 7008138:	070088c4 	movi	fp,547
 700813c:	07008998 	cmpnei	fp,zero,550
 7008140:	07008998 	cmpnei	fp,zero,550
 7008144:	07008588 	cmpgei	fp,zero,534
 7008148:	42000204 	addi	r8,r8,8
 700814c:	da802317 	ldw	r10,140(sp)
 7008150:	5455883a 	add	r10,r10,r17
 7008154:	da802315 	stw	r10,140(sp)
 7008158:	003f8b06 	br	7007f88 <__alt_data_end+0xff007f88>
 700815c:	d9002017 	ldw	r4,128(sp)
 7008160:	a00b883a 	mov	r5,r20
 7008164:	70029980 	call	7002998 <__swsetup_r>
 7008168:	1003b11e 	bne	r2,zero,7009030 <___vfiprintf_internal_r+0x11ec>
 700816c:	a080030b 	ldhu	r2,12(r20)
 7008170:	00c00284 	movi	r3,10
 7008174:	1080068c 	andi	r2,r2,26
 7008178:	10ff541e 	bne	r2,r3,7007ecc <__alt_data_end+0xff007ecc>
 700817c:	a080038f 	ldh	r2,14(r20)
 7008180:	103f5216 	blt	r2,zero,7007ecc <__alt_data_end+0xff007ecc>
 7008184:	d9c02217 	ldw	r7,136(sp)
 7008188:	d9002017 	ldw	r4,128(sp)
 700818c:	e00d883a 	mov	r6,fp
 7008190:	a00b883a 	mov	r5,r20
 7008194:	70092bc0 	call	70092bc <__sbprintf>
 7008198:	dfc03617 	ldw	ra,216(sp)
 700819c:	df003517 	ldw	fp,212(sp)
 70081a0:	ddc03417 	ldw	r23,208(sp)
 70081a4:	dd803317 	ldw	r22,204(sp)
 70081a8:	dd403217 	ldw	r21,200(sp)
 70081ac:	dd003117 	ldw	r20,196(sp)
 70081b0:	dcc03017 	ldw	r19,192(sp)
 70081b4:	dc802f17 	ldw	r18,188(sp)
 70081b8:	dc402e17 	ldw	r17,184(sp)
 70081bc:	dc002d17 	ldw	r16,180(sp)
 70081c0:	dec03704 	addi	sp,sp,220
 70081c4:	f800283a 	ret
 70081c8:	700496c0 	call	700496c <__sinit>
 70081cc:	003f2f06 	br	7007e8c <__alt_data_end+0xff007e8c>
 70081d0:	0463c83a 	sub	r17,zero,r17
 70081d4:	d8802215 	stw	r2,136(sp)
 70081d8:	a5000114 	ori	r20,r20,4
 70081dc:	80c00007 	ldb	r3,0(r16)
 70081e0:	003f7706 	br	7007fc0 <__alt_data_end+0xff007fc0>
 70081e4:	00800c04 	movi	r2,48
 70081e8:	da802217 	ldw	r10,136(sp)
 70081ec:	d8801d05 	stb	r2,116(sp)
 70081f0:	00801e04 	movi	r2,120
 70081f4:	d8801d45 	stb	r2,117(sp)
 70081f8:	d8001d85 	stb	zero,118(sp)
 70081fc:	50c00104 	addi	r3,r10,4
 7008200:	54800017 	ldw	r18,0(r10)
 7008204:	0027883a 	mov	r19,zero
 7008208:	a0800094 	ori	r2,r20,2
 700820c:	48030b16 	blt	r9,zero,7008e3c <___vfiprintf_internal_r+0xff8>
 7008210:	00bfdfc4 	movi	r2,-129
 7008214:	a096703a 	and	r11,r20,r2
 7008218:	d8c02215 	stw	r3,136(sp)
 700821c:	5d000094 	ori	r20,r11,2
 7008220:	90032b1e 	bne	r18,zero,7008ed0 <___vfiprintf_internal_r+0x108c>
 7008224:	0081c074 	movhi	r2,1793
 7008228:	10bee004 	addi	r2,r2,-1152
 700822c:	d8802615 	stw	r2,152(sp)
 7008230:	0039883a 	mov	fp,zero
 7008234:	48017b1e 	bne	r9,zero,7008824 <___vfiprintf_internal_r+0x9e0>
 7008238:	0013883a 	mov	r9,zero
 700823c:	0027883a 	mov	r19,zero
 7008240:	dd401a04 	addi	r21,sp,104
 7008244:	4825883a 	mov	r18,r9
 7008248:	4cc0010e 	bge	r9,r19,7008250 <___vfiprintf_internal_r+0x40c>
 700824c:	9825883a 	mov	r18,r19
 7008250:	e7003fcc 	andi	fp,fp,255
 7008254:	e700201c 	xori	fp,fp,128
 7008258:	e73fe004 	addi	fp,fp,-128
 700825c:	e0000126 	beq	fp,zero,7008264 <___vfiprintf_internal_r+0x420>
 7008260:	94800044 	addi	r18,r18,1
 7008264:	a380008c 	andi	r14,r20,2
 7008268:	70000126 	beq	r14,zero,7008270 <___vfiprintf_internal_r+0x42c>
 700826c:	94800084 	addi	r18,r18,2
 7008270:	a700210c 	andi	fp,r20,132
 7008274:	e001df1e 	bne	fp,zero,70089f4 <___vfiprintf_internal_r+0xbb0>
 7008278:	8c87c83a 	sub	r3,r17,r18
 700827c:	00c1dd0e 	bge	zero,r3,70089f4 <___vfiprintf_internal_r+0xbb0>
 7008280:	01c00404 	movi	r7,16
 7008284:	d8801c17 	ldw	r2,112(sp)
 7008288:	38c3ad0e 	bge	r7,r3,7009140 <___vfiprintf_internal_r+0x12fc>
 700828c:	0281c074 	movhi	r10,1793
 7008290:	52bf4504 	addi	r10,r10,-748
 7008294:	dc002915 	stw	r16,164(sp)
 7008298:	d9801b17 	ldw	r6,108(sp)
 700829c:	da802415 	stw	r10,144(sp)
 70082a0:	03c001c4 	movi	r15,7
 70082a4:	da402515 	stw	r9,148(sp)
 70082a8:	db802815 	stw	r14,160(sp)
 70082ac:	1821883a 	mov	r16,r3
 70082b0:	00000506 	br	70082c8 <___vfiprintf_internal_r+0x484>
 70082b4:	31400084 	addi	r5,r6,2
 70082b8:	42000204 	addi	r8,r8,8
 70082bc:	200d883a 	mov	r6,r4
 70082c0:	843ffc04 	addi	r16,r16,-16
 70082c4:	3c000d0e 	bge	r7,r16,70082fc <___vfiprintf_internal_r+0x4b8>
 70082c8:	10800404 	addi	r2,r2,16
 70082cc:	31000044 	addi	r4,r6,1
 70082d0:	45800015 	stw	r22,0(r8)
 70082d4:	41c00115 	stw	r7,4(r8)
 70082d8:	d8801c15 	stw	r2,112(sp)
 70082dc:	d9001b15 	stw	r4,108(sp)
 70082e0:	793ff40e 	bge	r15,r4,70082b4 <__alt_data_end+0xff0082b4>
 70082e4:	1001b51e 	bne	r2,zero,70089bc <___vfiprintf_internal_r+0xb78>
 70082e8:	843ffc04 	addi	r16,r16,-16
 70082ec:	000d883a 	mov	r6,zero
 70082f0:	01400044 	movi	r5,1
 70082f4:	d811883a 	mov	r8,sp
 70082f8:	3c3ff316 	blt	r7,r16,70082c8 <__alt_data_end+0xff0082c8>
 70082fc:	8007883a 	mov	r3,r16
 7008300:	da402517 	ldw	r9,148(sp)
 7008304:	db802817 	ldw	r14,160(sp)
 7008308:	dc002917 	ldw	r16,164(sp)
 700830c:	da802417 	ldw	r10,144(sp)
 7008310:	1885883a 	add	r2,r3,r2
 7008314:	40c00115 	stw	r3,4(r8)
 7008318:	42800015 	stw	r10,0(r8)
 700831c:	d8801c15 	stw	r2,112(sp)
 7008320:	d9401b15 	stw	r5,108(sp)
 7008324:	00c001c4 	movi	r3,7
 7008328:	19426016 	blt	r3,r5,7008cac <___vfiprintf_internal_r+0xe68>
 700832c:	d8c01d87 	ldb	r3,118(sp)
 7008330:	42000204 	addi	r8,r8,8
 7008334:	29000044 	addi	r4,r5,1
 7008338:	1801b31e 	bne	r3,zero,7008a08 <___vfiprintf_internal_r+0xbc4>
 700833c:	7001c026 	beq	r14,zero,7008a40 <___vfiprintf_internal_r+0xbfc>
 7008340:	d8c01d04 	addi	r3,sp,116
 7008344:	10800084 	addi	r2,r2,2
 7008348:	40c00015 	stw	r3,0(r8)
 700834c:	00c00084 	movi	r3,2
 7008350:	40c00115 	stw	r3,4(r8)
 7008354:	d8801c15 	stw	r2,112(sp)
 7008358:	d9001b15 	stw	r4,108(sp)
 700835c:	00c001c4 	movi	r3,7
 7008360:	1902650e 	bge	r3,r4,7008cf8 <___vfiprintf_internal_r+0xeb4>
 7008364:	10029a1e 	bne	r2,zero,7008dd0 <___vfiprintf_internal_r+0xf8c>
 7008368:	00c02004 	movi	r3,128
 700836c:	01000044 	movi	r4,1
 7008370:	000b883a 	mov	r5,zero
 7008374:	d811883a 	mov	r8,sp
 7008378:	e0c1b31e 	bne	fp,r3,7008a48 <___vfiprintf_internal_r+0xc04>
 700837c:	8cb9c83a 	sub	fp,r17,r18
 7008380:	0701b10e 	bge	zero,fp,7008a48 <___vfiprintf_internal_r+0xc04>
 7008384:	01c00404 	movi	r7,16
 7008388:	3f03890e 	bge	r7,fp,70091b0 <___vfiprintf_internal_r+0x136c>
 700838c:	00c1c074 	movhi	r3,1793
 7008390:	18ff4104 	addi	r3,r3,-764
 7008394:	d8c02415 	stw	r3,144(sp)
 7008398:	8007883a 	mov	r3,r16
 700839c:	034001c4 	movi	r13,7
 70083a0:	e021883a 	mov	r16,fp
 70083a4:	da402515 	stw	r9,148(sp)
 70083a8:	1839883a 	mov	fp,r3
 70083ac:	00000506 	br	70083c4 <___vfiprintf_internal_r+0x580>
 70083b0:	29800084 	addi	r6,r5,2
 70083b4:	42000204 	addi	r8,r8,8
 70083b8:	180b883a 	mov	r5,r3
 70083bc:	843ffc04 	addi	r16,r16,-16
 70083c0:	3c000d0e 	bge	r7,r16,70083f8 <___vfiprintf_internal_r+0x5b4>
 70083c4:	10800404 	addi	r2,r2,16
 70083c8:	28c00044 	addi	r3,r5,1
 70083cc:	45c00015 	stw	r23,0(r8)
 70083d0:	41c00115 	stw	r7,4(r8)
 70083d4:	d8801c15 	stw	r2,112(sp)
 70083d8:	d8c01b15 	stw	r3,108(sp)
 70083dc:	68fff40e 	bge	r13,r3,70083b0 <__alt_data_end+0xff0083b0>
 70083e0:	1002241e 	bne	r2,zero,7008c74 <___vfiprintf_internal_r+0xe30>
 70083e4:	843ffc04 	addi	r16,r16,-16
 70083e8:	01800044 	movi	r6,1
 70083ec:	000b883a 	mov	r5,zero
 70083f0:	d811883a 	mov	r8,sp
 70083f4:	3c3ff316 	blt	r7,r16,70083c4 <__alt_data_end+0xff0083c4>
 70083f8:	da402517 	ldw	r9,148(sp)
 70083fc:	e007883a 	mov	r3,fp
 7008400:	8039883a 	mov	fp,r16
 7008404:	1821883a 	mov	r16,r3
 7008408:	d8c02417 	ldw	r3,144(sp)
 700840c:	1705883a 	add	r2,r2,fp
 7008410:	47000115 	stw	fp,4(r8)
 7008414:	40c00015 	stw	r3,0(r8)
 7008418:	d8801c15 	stw	r2,112(sp)
 700841c:	d9801b15 	stw	r6,108(sp)
 7008420:	00c001c4 	movi	r3,7
 7008424:	19827616 	blt	r3,r6,7008e00 <___vfiprintf_internal_r+0xfbc>
 7008428:	4cf9c83a 	sub	fp,r9,r19
 700842c:	42000204 	addi	r8,r8,8
 7008430:	31000044 	addi	r4,r6,1
 7008434:	300b883a 	mov	r5,r6
 7008438:	07018516 	blt	zero,fp,7008a50 <___vfiprintf_internal_r+0xc0c>
 700843c:	9885883a 	add	r2,r19,r2
 7008440:	45400015 	stw	r21,0(r8)
 7008444:	44c00115 	stw	r19,4(r8)
 7008448:	d8801c15 	stw	r2,112(sp)
 700844c:	d9001b15 	stw	r4,108(sp)
 7008450:	00c001c4 	movi	r3,7
 7008454:	1901dd0e 	bge	r3,r4,7008bcc <___vfiprintf_internal_r+0xd88>
 7008458:	1002401e 	bne	r2,zero,7008d5c <___vfiprintf_internal_r+0xf18>
 700845c:	d8001b15 	stw	zero,108(sp)
 7008460:	a2c0010c 	andi	r11,r20,4
 7008464:	58000226 	beq	r11,zero,7008470 <___vfiprintf_internal_r+0x62c>
 7008468:	8ca7c83a 	sub	r19,r17,r18
 700846c:	04c2f216 	blt	zero,r19,7009038 <___vfiprintf_internal_r+0x11f4>
 7008470:	8c80010e 	bge	r17,r18,7008478 <___vfiprintf_internal_r+0x634>
 7008474:	9023883a 	mov	r17,r18
 7008478:	da802317 	ldw	r10,140(sp)
 700847c:	5455883a 	add	r10,r10,r17
 7008480:	da802315 	stw	r10,140(sp)
 7008484:	d8001b15 	stw	zero,108(sp)
 7008488:	d811883a 	mov	r8,sp
 700848c:	003ea206 	br	7007f18 <__alt_data_end+0xff007f18>
 7008490:	a5000814 	ori	r20,r20,32
 7008494:	80c00007 	ldb	r3,0(r16)
 7008498:	003ec906 	br	7007fc0 <__alt_data_end+0xff007fc0>
 700849c:	80c00007 	ldb	r3,0(r16)
 70084a0:	1b030926 	beq	r3,r12,70090c8 <___vfiprintf_internal_r+0x1284>
 70084a4:	a5000414 	ori	r20,r20,16
 70084a8:	003ec506 	br	7007fc0 <__alt_data_end+0xff007fc0>
 70084ac:	21003fcc 	andi	r4,r4,255
 70084b0:	20035e1e 	bne	r4,zero,700922c <___vfiprintf_internal_r+0x13e8>
 70084b4:	a080080c 	andi	r2,r20,32
 70084b8:	1002a526 	beq	r2,zero,7008f50 <___vfiprintf_internal_r+0x110c>
 70084bc:	da802217 	ldw	r10,136(sp)
 70084c0:	50800017 	ldw	r2,0(r10)
 70084c4:	da802317 	ldw	r10,140(sp)
 70084c8:	5007d7fa 	srai	r3,r10,31
 70084cc:	da802217 	ldw	r10,136(sp)
 70084d0:	10c00115 	stw	r3,4(r2)
 70084d4:	52800104 	addi	r10,r10,4
 70084d8:	da802215 	stw	r10,136(sp)
 70084dc:	da802317 	ldw	r10,140(sp)
 70084e0:	12800015 	stw	r10,0(r2)
 70084e4:	003e8c06 	br	7007f18 <__alt_data_end+0xff007f18>
 70084e8:	21003fcc 	andi	r4,r4,255
 70084ec:	2003511e 	bne	r4,zero,7009234 <___vfiprintf_internal_r+0x13f0>
 70084f0:	a080080c 	andi	r2,r20,32
 70084f4:	1000a126 	beq	r2,zero,700877c <___vfiprintf_internal_r+0x938>
 70084f8:	da802217 	ldw	r10,136(sp)
 70084fc:	d8001d85 	stb	zero,118(sp)
 7008500:	50800204 	addi	r2,r10,8
 7008504:	54800017 	ldw	r18,0(r10)
 7008508:	54c00117 	ldw	r19,4(r10)
 700850c:	4802b416 	blt	r9,zero,7008fe0 <___vfiprintf_internal_r+0x119c>
 7008510:	013fdfc4 	movi	r4,-129
 7008514:	94c6b03a 	or	r3,r18,r19
 7008518:	d8802215 	stw	r2,136(sp)
 700851c:	a128703a 	and	r20,r20,r4
 7008520:	1800a226 	beq	r3,zero,70087ac <___vfiprintf_internal_r+0x968>
 7008524:	0039883a 	mov	fp,zero
 7008528:	dd401a04 	addi	r21,sp,104
 700852c:	9006d0fa 	srli	r3,r18,3
 7008530:	9808977a 	slli	r4,r19,29
 7008534:	9826d0fa 	srli	r19,r19,3
 7008538:	948001cc 	andi	r18,r18,7
 700853c:	90800c04 	addi	r2,r18,48
 7008540:	ad7fffc4 	addi	r21,r21,-1
 7008544:	20e4b03a 	or	r18,r4,r3
 7008548:	a8800005 	stb	r2,0(r21)
 700854c:	94c6b03a 	or	r3,r18,r19
 7008550:	183ff61e 	bne	r3,zero,700852c <__alt_data_end+0xff00852c>
 7008554:	a0c0004c 	andi	r3,r20,1
 7008558:	18005926 	beq	r3,zero,70086c0 <___vfiprintf_internal_r+0x87c>
 700855c:	10803fcc 	andi	r2,r2,255
 7008560:	1080201c 	xori	r2,r2,128
 7008564:	10bfe004 	addi	r2,r2,-128
 7008568:	00c00c04 	movi	r3,48
 700856c:	10c05426 	beq	r2,r3,70086c0 <___vfiprintf_internal_r+0x87c>
 7008570:	da801e17 	ldw	r10,120(sp)
 7008574:	a8bfffc4 	addi	r2,r21,-1
 7008578:	a8ffffc5 	stb	r3,-1(r21)
 700857c:	50a7c83a 	sub	r19,r10,r2
 7008580:	102b883a 	mov	r21,r2
 7008584:	003f2f06 	br	7008244 <__alt_data_end+0xff008244>
 7008588:	21003fcc 	andi	r4,r4,255
 700858c:	2003421e 	bne	r4,zero,7009298 <___vfiprintf_internal_r+0x1454>
 7008590:	0081c074 	movhi	r2,1793
 7008594:	10bee004 	addi	r2,r2,-1152
 7008598:	d8802615 	stw	r2,152(sp)
 700859c:	a080080c 	andi	r2,r20,32
 70085a0:	1000aa26 	beq	r2,zero,700884c <___vfiprintf_internal_r+0xa08>
 70085a4:	da802217 	ldw	r10,136(sp)
 70085a8:	54800017 	ldw	r18,0(r10)
 70085ac:	54c00117 	ldw	r19,4(r10)
 70085b0:	52800204 	addi	r10,r10,8
 70085b4:	da802215 	stw	r10,136(sp)
 70085b8:	a080004c 	andi	r2,r20,1
 70085bc:	1001d226 	beq	r2,zero,7008d08 <___vfiprintf_internal_r+0xec4>
 70085c0:	94c4b03a 	or	r2,r18,r19
 70085c4:	1002351e 	bne	r2,zero,7008e9c <___vfiprintf_internal_r+0x1058>
 70085c8:	d8001d85 	stb	zero,118(sp)
 70085cc:	48022216 	blt	r9,zero,7008e58 <___vfiprintf_internal_r+0x1014>
 70085d0:	00bfdfc4 	movi	r2,-129
 70085d4:	a0a8703a 	and	r20,r20,r2
 70085d8:	003f1506 	br	7008230 <__alt_data_end+0xff008230>
 70085dc:	da802217 	ldw	r10,136(sp)
 70085e0:	04800044 	movi	r18,1
 70085e4:	d8001d85 	stb	zero,118(sp)
 70085e8:	50800017 	ldw	r2,0(r10)
 70085ec:	52800104 	addi	r10,r10,4
 70085f0:	da802215 	stw	r10,136(sp)
 70085f4:	d8801005 	stb	r2,64(sp)
 70085f8:	9027883a 	mov	r19,r18
 70085fc:	dd401004 	addi	r21,sp,64
 7008600:	0013883a 	mov	r9,zero
 7008604:	003f1706 	br	7008264 <__alt_data_end+0xff008264>
 7008608:	21003fcc 	andi	r4,r4,255
 700860c:	2003201e 	bne	r4,zero,7009290 <___vfiprintf_internal_r+0x144c>
 7008610:	a080080c 	andi	r2,r20,32
 7008614:	10004b26 	beq	r2,zero,7008744 <___vfiprintf_internal_r+0x900>
 7008618:	da802217 	ldw	r10,136(sp)
 700861c:	50800117 	ldw	r2,4(r10)
 7008620:	54800017 	ldw	r18,0(r10)
 7008624:	52800204 	addi	r10,r10,8
 7008628:	da802215 	stw	r10,136(sp)
 700862c:	1027883a 	mov	r19,r2
 7008630:	10022c16 	blt	r2,zero,7008ee4 <___vfiprintf_internal_r+0x10a0>
 7008634:	df001d83 	ldbu	fp,118(sp)
 7008638:	48007216 	blt	r9,zero,7008804 <___vfiprintf_internal_r+0x9c0>
 700863c:	00ffdfc4 	movi	r3,-129
 7008640:	94c4b03a 	or	r2,r18,r19
 7008644:	a0e8703a 	and	r20,r20,r3
 7008648:	1000cc26 	beq	r2,zero,700897c <___vfiprintf_internal_r+0xb38>
 700864c:	98021026 	beq	r19,zero,7008e90 <___vfiprintf_internal_r+0x104c>
 7008650:	dc402415 	stw	r17,144(sp)
 7008654:	dc002515 	stw	r16,148(sp)
 7008658:	9823883a 	mov	r17,r19
 700865c:	9021883a 	mov	r16,r18
 7008660:	dd401a04 	addi	r21,sp,104
 7008664:	4825883a 	mov	r18,r9
 7008668:	4027883a 	mov	r19,r8
 700866c:	8009883a 	mov	r4,r16
 7008670:	880b883a 	mov	r5,r17
 7008674:	01800284 	movi	r6,10
 7008678:	000f883a 	mov	r7,zero
 700867c:	700a2240 	call	700a224 <__umoddi3>
 7008680:	10800c04 	addi	r2,r2,48
 7008684:	ad7fffc4 	addi	r21,r21,-1
 7008688:	8009883a 	mov	r4,r16
 700868c:	880b883a 	mov	r5,r17
 7008690:	a8800005 	stb	r2,0(r21)
 7008694:	01800284 	movi	r6,10
 7008698:	000f883a 	mov	r7,zero
 700869c:	7009cac0 	call	7009cac <__udivdi3>
 70086a0:	1021883a 	mov	r16,r2
 70086a4:	10c4b03a 	or	r2,r2,r3
 70086a8:	1823883a 	mov	r17,r3
 70086ac:	103fef1e 	bne	r2,zero,700866c <__alt_data_end+0xff00866c>
 70086b0:	dc402417 	ldw	r17,144(sp)
 70086b4:	dc002517 	ldw	r16,148(sp)
 70086b8:	9013883a 	mov	r9,r18
 70086bc:	9811883a 	mov	r8,r19
 70086c0:	da801e17 	ldw	r10,120(sp)
 70086c4:	5567c83a 	sub	r19,r10,r21
 70086c8:	003ede06 	br	7008244 <__alt_data_end+0xff008244>
 70086cc:	38803fcc 	andi	r2,r7,255
 70086d0:	1080201c 	xori	r2,r2,128
 70086d4:	10bfe004 	addi	r2,r2,-128
 70086d8:	1002371e 	bne	r2,zero,7008fb8 <___vfiprintf_internal_r+0x1174>
 70086dc:	01000044 	movi	r4,1
 70086e0:	01c00804 	movi	r7,32
 70086e4:	80c00007 	ldb	r3,0(r16)
 70086e8:	003e3506 	br	7007fc0 <__alt_data_end+0xff007fc0>
 70086ec:	a5000054 	ori	r20,r20,1
 70086f0:	80c00007 	ldb	r3,0(r16)
 70086f4:	003e3206 	br	7007fc0 <__alt_data_end+0xff007fc0>
 70086f8:	a5002014 	ori	r20,r20,128
 70086fc:	80c00007 	ldb	r3,0(r16)
 7008700:	003e2f06 	br	7007fc0 <__alt_data_end+0xff007fc0>
 7008704:	8015883a 	mov	r10,r16
 7008708:	0023883a 	mov	r17,zero
 700870c:	18bff404 	addi	r2,r3,-48
 7008710:	50c00007 	ldb	r3,0(r10)
 7008714:	8c4002a4 	muli	r17,r17,10
 7008718:	84000044 	addi	r16,r16,1
 700871c:	8015883a 	mov	r10,r16
 7008720:	1463883a 	add	r17,r2,r17
 7008724:	18bff404 	addi	r2,r3,-48
 7008728:	30bff92e 	bgeu	r6,r2,7008710 <__alt_data_end+0xff008710>
 700872c:	003e2506 	br	7007fc4 <__alt_data_end+0xff007fc4>
 7008730:	21003fcc 	andi	r4,r4,255
 7008734:	2002d41e 	bne	r4,zero,7009288 <___vfiprintf_internal_r+0x1444>
 7008738:	a5000414 	ori	r20,r20,16
 700873c:	a080080c 	andi	r2,r20,32
 7008740:	103fb51e 	bne	r2,zero,7008618 <__alt_data_end+0xff008618>
 7008744:	a080040c 	andi	r2,r20,16
 7008748:	1001f826 	beq	r2,zero,7008f2c <___vfiprintf_internal_r+0x10e8>
 700874c:	da802217 	ldw	r10,136(sp)
 7008750:	54800017 	ldw	r18,0(r10)
 7008754:	52800104 	addi	r10,r10,4
 7008758:	da802215 	stw	r10,136(sp)
 700875c:	9027d7fa 	srai	r19,r18,31
 7008760:	9805883a 	mov	r2,r19
 7008764:	003fb206 	br	7008630 <__alt_data_end+0xff008630>
 7008768:	21003fcc 	andi	r4,r4,255
 700876c:	2002c41e 	bne	r4,zero,7009280 <___vfiprintf_internal_r+0x143c>
 7008770:	a5000414 	ori	r20,r20,16
 7008774:	a080080c 	andi	r2,r20,32
 7008778:	103f5f1e 	bne	r2,zero,70084f8 <__alt_data_end+0xff0084f8>
 700877c:	a080040c 	andi	r2,r20,16
 7008780:	10020f26 	beq	r2,zero,7008fc0 <___vfiprintf_internal_r+0x117c>
 7008784:	da802217 	ldw	r10,136(sp)
 7008788:	d8001d85 	stb	zero,118(sp)
 700878c:	0027883a 	mov	r19,zero
 7008790:	50800104 	addi	r2,r10,4
 7008794:	54800017 	ldw	r18,0(r10)
 7008798:	48021116 	blt	r9,zero,7008fe0 <___vfiprintf_internal_r+0x119c>
 700879c:	00ffdfc4 	movi	r3,-129
 70087a0:	d8802215 	stw	r2,136(sp)
 70087a4:	a0e8703a 	and	r20,r20,r3
 70087a8:	903f5e1e 	bne	r18,zero,7008524 <__alt_data_end+0xff008524>
 70087ac:	0039883a 	mov	fp,zero
 70087b0:	4802a626 	beq	r9,zero,700924c <___vfiprintf_internal_r+0x1408>
 70087b4:	0025883a 	mov	r18,zero
 70087b8:	0027883a 	mov	r19,zero
 70087bc:	003f5a06 	br	7008528 <__alt_data_end+0xff008528>
 70087c0:	21003fcc 	andi	r4,r4,255
 70087c4:	20029f1e 	bne	r4,zero,7009244 <___vfiprintf_internal_r+0x1400>
 70087c8:	a5000414 	ori	r20,r20,16
 70087cc:	a080080c 	andi	r2,r20,32
 70087d0:	10005e1e 	bne	r2,zero,700894c <___vfiprintf_internal_r+0xb08>
 70087d4:	a080040c 	andi	r2,r20,16
 70087d8:	1001a21e 	bne	r2,zero,7008e64 <___vfiprintf_internal_r+0x1020>
 70087dc:	a080100c 	andi	r2,r20,64
 70087e0:	d8001d85 	stb	zero,118(sp)
 70087e4:	da802217 	ldw	r10,136(sp)
 70087e8:	1002231e 	bne	r2,zero,7009078 <___vfiprintf_internal_r+0x1234>
 70087ec:	50800104 	addi	r2,r10,4
 70087f0:	54800017 	ldw	r18,0(r10)
 70087f4:	0027883a 	mov	r19,zero
 70087f8:	4801a00e 	bge	r9,zero,7008e7c <___vfiprintf_internal_r+0x1038>
 70087fc:	d8802215 	stw	r2,136(sp)
 7008800:	0039883a 	mov	fp,zero
 7008804:	94c4b03a 	or	r2,r18,r19
 7008808:	103f901e 	bne	r2,zero,700864c <__alt_data_end+0xff00864c>
 700880c:	00800044 	movi	r2,1
 7008810:	10803fcc 	andi	r2,r2,255
 7008814:	00c00044 	movi	r3,1
 7008818:	10c05926 	beq	r2,r3,7008980 <___vfiprintf_internal_r+0xb3c>
 700881c:	00c00084 	movi	r3,2
 7008820:	10ffe41e 	bne	r2,r3,70087b4 <__alt_data_end+0xff0087b4>
 7008824:	0025883a 	mov	r18,zero
 7008828:	0027883a 	mov	r19,zero
 700882c:	00013d06 	br	7008d24 <___vfiprintf_internal_r+0xee0>
 7008830:	21003fcc 	andi	r4,r4,255
 7008834:	2002811e 	bne	r4,zero,700923c <___vfiprintf_internal_r+0x13f8>
 7008838:	0081c074 	movhi	r2,1793
 700883c:	10bedb04 	addi	r2,r2,-1172
 7008840:	d8802615 	stw	r2,152(sp)
 7008844:	a080080c 	andi	r2,r20,32
 7008848:	103f561e 	bne	r2,zero,70085a4 <__alt_data_end+0xff0085a4>
 700884c:	a080040c 	andi	r2,r20,16
 7008850:	1001d126 	beq	r2,zero,7008f98 <___vfiprintf_internal_r+0x1154>
 7008854:	da802217 	ldw	r10,136(sp)
 7008858:	0027883a 	mov	r19,zero
 700885c:	54800017 	ldw	r18,0(r10)
 7008860:	52800104 	addi	r10,r10,4
 7008864:	da802215 	stw	r10,136(sp)
 7008868:	003f5306 	br	70085b8 <__alt_data_end+0xff0085b8>
 700886c:	da802217 	ldw	r10,136(sp)
 7008870:	d8001d85 	stb	zero,118(sp)
 7008874:	55400017 	ldw	r21,0(r10)
 7008878:	50c00104 	addi	r3,r10,4
 700887c:	a8024226 	beq	r21,zero,7009188 <___vfiprintf_internal_r+0x1344>
 7008880:	48021816 	blt	r9,zero,70090e4 <___vfiprintf_internal_r+0x12a0>
 7008884:	480d883a 	mov	r6,r9
 7008888:	000b883a 	mov	r5,zero
 700888c:	a809883a 	mov	r4,r21
 7008890:	d8c02a15 	stw	r3,168(sp)
 7008894:	da002b15 	stw	r8,172(sp)
 7008898:	da402c15 	stw	r9,176(sp)
 700889c:	7005ed80 	call	7005ed8 <memchr>
 70088a0:	d8c02a17 	ldw	r3,168(sp)
 70088a4:	da002b17 	ldw	r8,172(sp)
 70088a8:	da402c17 	ldw	r9,176(sp)
 70088ac:	10024826 	beq	r2,zero,70091d0 <___vfiprintf_internal_r+0x138c>
 70088b0:	1567c83a 	sub	r19,r2,r21
 70088b4:	df001d83 	ldbu	fp,118(sp)
 70088b8:	d8c02215 	stw	r3,136(sp)
 70088bc:	0013883a 	mov	r9,zero
 70088c0:	003e6006 	br	7008244 <__alt_data_end+0xff008244>
 70088c4:	21003fcc 	andi	r4,r4,255
 70088c8:	203fc026 	beq	r4,zero,70087cc <__alt_data_end+0xff0087cc>
 70088cc:	d9c01d85 	stb	r7,118(sp)
 70088d0:	003fbe06 	br	70087cc <__alt_data_end+0xff0087cc>
 70088d4:	da802217 	ldw	r10,136(sp)
 70088d8:	54400017 	ldw	r17,0(r10)
 70088dc:	50800104 	addi	r2,r10,4
 70088e0:	883e3b16 	blt	r17,zero,70081d0 <__alt_data_end+0xff0081d0>
 70088e4:	d8802215 	stw	r2,136(sp)
 70088e8:	80c00007 	ldb	r3,0(r16)
 70088ec:	003db406 	br	7007fc0 <__alt_data_end+0xff007fc0>
 70088f0:	01000044 	movi	r4,1
 70088f4:	01c00ac4 	movi	r7,43
 70088f8:	80c00007 	ldb	r3,0(r16)
 70088fc:	003db006 	br	7007fc0 <__alt_data_end+0xff007fc0>
 7008900:	80c00007 	ldb	r3,0(r16)
 7008904:	82800044 	addi	r10,r16,1
 7008908:	1b423c26 	beq	r3,r13,70091fc <___vfiprintf_internal_r+0x13b8>
 700890c:	18bff404 	addi	r2,r3,-48
 7008910:	0013883a 	mov	r9,zero
 7008914:	30822b36 	bltu	r6,r2,70091c4 <___vfiprintf_internal_r+0x1380>
 7008918:	50c00007 	ldb	r3,0(r10)
 700891c:	4a4002a4 	muli	r9,r9,10
 7008920:	54000044 	addi	r16,r10,1
 7008924:	8015883a 	mov	r10,r16
 7008928:	4893883a 	add	r9,r9,r2
 700892c:	18bff404 	addi	r2,r3,-48
 7008930:	30bff92e 	bgeu	r6,r2,7008918 <__alt_data_end+0xff008918>
 7008934:	483da30e 	bge	r9,zero,7007fc4 <__alt_data_end+0xff007fc4>
 7008938:	027fffc4 	movi	r9,-1
 700893c:	003da106 	br	7007fc4 <__alt_data_end+0xff007fc4>
 7008940:	a5001014 	ori	r20,r20,64
 7008944:	80c00007 	ldb	r3,0(r16)
 7008948:	003d9d06 	br	7007fc0 <__alt_data_end+0xff007fc0>
 700894c:	da802217 	ldw	r10,136(sp)
 7008950:	d8001d85 	stb	zero,118(sp)
 7008954:	50c00204 	addi	r3,r10,8
 7008958:	54800017 	ldw	r18,0(r10)
 700895c:	54c00117 	ldw	r19,4(r10)
 7008960:	4801ca16 	blt	r9,zero,700908c <___vfiprintf_internal_r+0x1248>
 7008964:	013fdfc4 	movi	r4,-129
 7008968:	94c4b03a 	or	r2,r18,r19
 700896c:	d8c02215 	stw	r3,136(sp)
 7008970:	a128703a 	and	r20,r20,r4
 7008974:	0039883a 	mov	fp,zero
 7008978:	103f341e 	bne	r2,zero,700864c <__alt_data_end+0xff00864c>
 700897c:	483e2e26 	beq	r9,zero,7008238 <__alt_data_end+0xff008238>
 7008980:	0025883a 	mov	r18,zero
 7008984:	94800c04 	addi	r18,r18,48
 7008988:	dc8019c5 	stb	r18,103(sp)
 700898c:	dcc02717 	ldw	r19,156(sp)
 7008990:	dd4019c4 	addi	r21,sp,103
 7008994:	003e2b06 	br	7008244 <__alt_data_end+0xff008244>
 7008998:	21003fcc 	andi	r4,r4,255
 700899c:	2002361e 	bne	r4,zero,7009278 <___vfiprintf_internal_r+0x1434>
 70089a0:	1801c126 	beq	r3,zero,70090a8 <___vfiprintf_internal_r+0x1264>
 70089a4:	04800044 	movi	r18,1
 70089a8:	d8c01005 	stb	r3,64(sp)
 70089ac:	d8001d85 	stb	zero,118(sp)
 70089b0:	9027883a 	mov	r19,r18
 70089b4:	dd401004 	addi	r21,sp,64
 70089b8:	003f1106 	br	7008600 <__alt_data_end+0xff008600>
 70089bc:	d9402117 	ldw	r5,132(sp)
 70089c0:	d9002017 	ldw	r4,128(sp)
 70089c4:	d9801a04 	addi	r6,sp,104
 70089c8:	d9c02b15 	stw	r7,172(sp)
 70089cc:	dbc02a15 	stw	r15,168(sp)
 70089d0:	7007d300 	call	7007d30 <__sprint_r.part.0>
 70089d4:	d9c02b17 	ldw	r7,172(sp)
 70089d8:	dbc02a17 	ldw	r15,168(sp)
 70089dc:	10006d1e 	bne	r2,zero,7008b94 <___vfiprintf_internal_r+0xd50>
 70089e0:	d9801b17 	ldw	r6,108(sp)
 70089e4:	d8801c17 	ldw	r2,112(sp)
 70089e8:	d811883a 	mov	r8,sp
 70089ec:	31400044 	addi	r5,r6,1
 70089f0:	003e3306 	br	70082c0 <__alt_data_end+0xff0082c0>
 70089f4:	d9401b17 	ldw	r5,108(sp)
 70089f8:	d8801c17 	ldw	r2,112(sp)
 70089fc:	29000044 	addi	r4,r5,1
 7008a00:	d8c01d87 	ldb	r3,118(sp)
 7008a04:	183e4d26 	beq	r3,zero,700833c <__alt_data_end+0xff00833c>
 7008a08:	00c00044 	movi	r3,1
 7008a0c:	d9401d84 	addi	r5,sp,118
 7008a10:	10c5883a 	add	r2,r2,r3
 7008a14:	41400015 	stw	r5,0(r8)
 7008a18:	40c00115 	stw	r3,4(r8)
 7008a1c:	d8801c15 	stw	r2,112(sp)
 7008a20:	d9001b15 	stw	r4,108(sp)
 7008a24:	014001c4 	movi	r5,7
 7008a28:	2900a90e 	bge	r5,r4,7008cd0 <___vfiprintf_internal_r+0xe8c>
 7008a2c:	1000da1e 	bne	r2,zero,7008d98 <___vfiprintf_internal_r+0xf54>
 7008a30:	7000ab1e 	bne	r14,zero,7008ce0 <___vfiprintf_internal_r+0xe9c>
 7008a34:	000b883a 	mov	r5,zero
 7008a38:	1809883a 	mov	r4,r3
 7008a3c:	d811883a 	mov	r8,sp
 7008a40:	00c02004 	movi	r3,128
 7008a44:	e0fe4d26 	beq	fp,r3,700837c <__alt_data_end+0xff00837c>
 7008a48:	4cf9c83a 	sub	fp,r9,r19
 7008a4c:	073e7b0e 	bge	zero,fp,700843c <__alt_data_end+0xff00843c>
 7008a50:	01c00404 	movi	r7,16
 7008a54:	3f01900e 	bge	r7,fp,7009098 <___vfiprintf_internal_r+0x1254>
 7008a58:	00c1c074 	movhi	r3,1793
 7008a5c:	18ff4104 	addi	r3,r3,-764
 7008a60:	d8c02415 	stw	r3,144(sp)
 7008a64:	034001c4 	movi	r13,7
 7008a68:	00000506 	br	7008a80 <___vfiprintf_internal_r+0xc3c>
 7008a6c:	29000084 	addi	r4,r5,2
 7008a70:	42000204 	addi	r8,r8,8
 7008a74:	180b883a 	mov	r5,r3
 7008a78:	e73ffc04 	addi	fp,fp,-16
 7008a7c:	3f000d0e 	bge	r7,fp,7008ab4 <___vfiprintf_internal_r+0xc70>
 7008a80:	10800404 	addi	r2,r2,16
 7008a84:	28c00044 	addi	r3,r5,1
 7008a88:	45c00015 	stw	r23,0(r8)
 7008a8c:	41c00115 	stw	r7,4(r8)
 7008a90:	d8801c15 	stw	r2,112(sp)
 7008a94:	d8c01b15 	stw	r3,108(sp)
 7008a98:	68fff40e 	bge	r13,r3,7008a6c <__alt_data_end+0xff008a6c>
 7008a9c:	1000101e 	bne	r2,zero,7008ae0 <___vfiprintf_internal_r+0xc9c>
 7008aa0:	e73ffc04 	addi	fp,fp,-16
 7008aa4:	01000044 	movi	r4,1
 7008aa8:	000b883a 	mov	r5,zero
 7008aac:	d811883a 	mov	r8,sp
 7008ab0:	3f3ff316 	blt	r7,fp,7008a80 <__alt_data_end+0xff008a80>
 7008ab4:	da802417 	ldw	r10,144(sp)
 7008ab8:	1705883a 	add	r2,r2,fp
 7008abc:	47000115 	stw	fp,4(r8)
 7008ac0:	42800015 	stw	r10,0(r8)
 7008ac4:	d8801c15 	stw	r2,112(sp)
 7008ac8:	d9001b15 	stw	r4,108(sp)
 7008acc:	00c001c4 	movi	r3,7
 7008ad0:	19003616 	blt	r3,r4,7008bac <___vfiprintf_internal_r+0xd68>
 7008ad4:	42000204 	addi	r8,r8,8
 7008ad8:	21000044 	addi	r4,r4,1
 7008adc:	003e5706 	br	700843c <__alt_data_end+0xff00843c>
 7008ae0:	d9402117 	ldw	r5,132(sp)
 7008ae4:	d9002017 	ldw	r4,128(sp)
 7008ae8:	d9801a04 	addi	r6,sp,104
 7008aec:	d9c02b15 	stw	r7,172(sp)
 7008af0:	db402a15 	stw	r13,168(sp)
 7008af4:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008af8:	d9c02b17 	ldw	r7,172(sp)
 7008afc:	db402a17 	ldw	r13,168(sp)
 7008b00:	1000241e 	bne	r2,zero,7008b94 <___vfiprintf_internal_r+0xd50>
 7008b04:	d9401b17 	ldw	r5,108(sp)
 7008b08:	d8801c17 	ldw	r2,112(sp)
 7008b0c:	d811883a 	mov	r8,sp
 7008b10:	29000044 	addi	r4,r5,1
 7008b14:	003fd806 	br	7008a78 <__alt_data_end+0xff008a78>
 7008b18:	d9401b17 	ldw	r5,108(sp)
 7008b1c:	00c1c074 	movhi	r3,1793
 7008b20:	18ff4504 	addi	r3,r3,-748
 7008b24:	d8c02415 	stw	r3,144(sp)
 7008b28:	29400044 	addi	r5,r5,1
 7008b2c:	d8c02417 	ldw	r3,144(sp)
 7008b30:	14c5883a 	add	r2,r2,r19
 7008b34:	44c00115 	stw	r19,4(r8)
 7008b38:	40c00015 	stw	r3,0(r8)
 7008b3c:	d8801c15 	stw	r2,112(sp)
 7008b40:	d9401b15 	stw	r5,108(sp)
 7008b44:	00c001c4 	movi	r3,7
 7008b48:	1940070e 	bge	r3,r5,7008b68 <___vfiprintf_internal_r+0xd24>
 7008b4c:	103e4826 	beq	r2,zero,7008470 <__alt_data_end+0xff008470>
 7008b50:	d9402117 	ldw	r5,132(sp)
 7008b54:	d9002017 	ldw	r4,128(sp)
 7008b58:	d9801a04 	addi	r6,sp,104
 7008b5c:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008b60:	10000c1e 	bne	r2,zero,7008b94 <___vfiprintf_internal_r+0xd50>
 7008b64:	d8801c17 	ldw	r2,112(sp)
 7008b68:	8c80010e 	bge	r17,r18,7008b70 <___vfiprintf_internal_r+0xd2c>
 7008b6c:	9023883a 	mov	r17,r18
 7008b70:	da802317 	ldw	r10,140(sp)
 7008b74:	5455883a 	add	r10,r10,r17
 7008b78:	da802315 	stw	r10,140(sp)
 7008b7c:	103e4126 	beq	r2,zero,7008484 <__alt_data_end+0xff008484>
 7008b80:	d9402117 	ldw	r5,132(sp)
 7008b84:	d9002017 	ldw	r4,128(sp)
 7008b88:	d9801a04 	addi	r6,sp,104
 7008b8c:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008b90:	103e3c26 	beq	r2,zero,7008484 <__alt_data_end+0xff008484>
 7008b94:	dd002117 	ldw	r20,132(sp)
 7008b98:	a080030b 	ldhu	r2,12(r20)
 7008b9c:	1080100c 	andi	r2,r2,64
 7008ba0:	1001231e 	bne	r2,zero,7009030 <___vfiprintf_internal_r+0x11ec>
 7008ba4:	d8802317 	ldw	r2,140(sp)
 7008ba8:	003d7b06 	br	7008198 <__alt_data_end+0xff008198>
 7008bac:	1000991e 	bne	r2,zero,7008e14 <___vfiprintf_internal_r+0xfd0>
 7008bb0:	00c00044 	movi	r3,1
 7008bb4:	9805883a 	mov	r2,r19
 7008bb8:	dd400015 	stw	r21,0(sp)
 7008bbc:	dcc00115 	stw	r19,4(sp)
 7008bc0:	dcc01c15 	stw	r19,112(sp)
 7008bc4:	d8c01b15 	stw	r3,108(sp)
 7008bc8:	d811883a 	mov	r8,sp
 7008bcc:	42000204 	addi	r8,r8,8
 7008bd0:	a2c0010c 	andi	r11,r20,4
 7008bd4:	583fe426 	beq	r11,zero,7008b68 <__alt_data_end+0xff008b68>
 7008bd8:	8ca7c83a 	sub	r19,r17,r18
 7008bdc:	04ffe20e 	bge	zero,r19,7008b68 <__alt_data_end+0xff008b68>
 7008be0:	01c00404 	movi	r7,16
 7008be4:	3cffcc0e 	bge	r7,r19,7008b18 <__alt_data_end+0xff008b18>
 7008be8:	0281c074 	movhi	r10,1793
 7008bec:	52bf4504 	addi	r10,r10,-748
 7008bf0:	d9001b17 	ldw	r4,108(sp)
 7008bf4:	da802415 	stw	r10,144(sp)
 7008bf8:	382b883a 	mov	r21,r7
 7008bfc:	050001c4 	movi	r20,7
 7008c00:	df002017 	ldw	fp,128(sp)
 7008c04:	00000506 	br	7008c1c <___vfiprintf_internal_r+0xdd8>
 7008c08:	21400084 	addi	r5,r4,2
 7008c0c:	42000204 	addi	r8,r8,8
 7008c10:	1809883a 	mov	r4,r3
 7008c14:	9cfffc04 	addi	r19,r19,-16
 7008c18:	acffc40e 	bge	r21,r19,7008b2c <__alt_data_end+0xff008b2c>
 7008c1c:	10800404 	addi	r2,r2,16
 7008c20:	20c00044 	addi	r3,r4,1
 7008c24:	45800015 	stw	r22,0(r8)
 7008c28:	45400115 	stw	r21,4(r8)
 7008c2c:	d8801c15 	stw	r2,112(sp)
 7008c30:	d8c01b15 	stw	r3,108(sp)
 7008c34:	a0fff40e 	bge	r20,r3,7008c08 <__alt_data_end+0xff008c08>
 7008c38:	1000041e 	bne	r2,zero,7008c4c <___vfiprintf_internal_r+0xe08>
 7008c3c:	01400044 	movi	r5,1
 7008c40:	0009883a 	mov	r4,zero
 7008c44:	d811883a 	mov	r8,sp
 7008c48:	003ff206 	br	7008c14 <__alt_data_end+0xff008c14>
 7008c4c:	d9402117 	ldw	r5,132(sp)
 7008c50:	d9801a04 	addi	r6,sp,104
 7008c54:	e009883a 	mov	r4,fp
 7008c58:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008c5c:	103fcd1e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 7008c60:	d9001b17 	ldw	r4,108(sp)
 7008c64:	d8801c17 	ldw	r2,112(sp)
 7008c68:	d811883a 	mov	r8,sp
 7008c6c:	21400044 	addi	r5,r4,1
 7008c70:	003fe806 	br	7008c14 <__alt_data_end+0xff008c14>
 7008c74:	d9402117 	ldw	r5,132(sp)
 7008c78:	d9002017 	ldw	r4,128(sp)
 7008c7c:	d9801a04 	addi	r6,sp,104
 7008c80:	d9c02b15 	stw	r7,172(sp)
 7008c84:	db402a15 	stw	r13,168(sp)
 7008c88:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008c8c:	d9c02b17 	ldw	r7,172(sp)
 7008c90:	db402a17 	ldw	r13,168(sp)
 7008c94:	103fbf1e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 7008c98:	d9401b17 	ldw	r5,108(sp)
 7008c9c:	d8801c17 	ldw	r2,112(sp)
 7008ca0:	d811883a 	mov	r8,sp
 7008ca4:	29800044 	addi	r6,r5,1
 7008ca8:	003dc406 	br	70083bc <__alt_data_end+0xff0083bc>
 7008cac:	1000d21e 	bne	r2,zero,7008ff8 <___vfiprintf_internal_r+0x11b4>
 7008cb0:	d8c01d87 	ldb	r3,118(sp)
 7008cb4:	18009526 	beq	r3,zero,7008f0c <___vfiprintf_internal_r+0x10c8>
 7008cb8:	00800044 	movi	r2,1
 7008cbc:	d8c01d84 	addi	r3,sp,118
 7008cc0:	1009883a 	mov	r4,r2
 7008cc4:	d8c00015 	stw	r3,0(sp)
 7008cc8:	d8800115 	stw	r2,4(sp)
 7008ccc:	d811883a 	mov	r8,sp
 7008cd0:	200b883a 	mov	r5,r4
 7008cd4:	42000204 	addi	r8,r8,8
 7008cd8:	21000044 	addi	r4,r4,1
 7008cdc:	003d9706 	br	700833c <__alt_data_end+0xff00833c>
 7008ce0:	d9001d04 	addi	r4,sp,116
 7008ce4:	00800084 	movi	r2,2
 7008ce8:	d9000015 	stw	r4,0(sp)
 7008cec:	d8800115 	stw	r2,4(sp)
 7008cf0:	1809883a 	mov	r4,r3
 7008cf4:	d811883a 	mov	r8,sp
 7008cf8:	200b883a 	mov	r5,r4
 7008cfc:	42000204 	addi	r8,r8,8
 7008d00:	21000044 	addi	r4,r4,1
 7008d04:	003f4e06 	br	7008a40 <__alt_data_end+0xff008a40>
 7008d08:	d8001d85 	stb	zero,118(sp)
 7008d0c:	48005016 	blt	r9,zero,7008e50 <___vfiprintf_internal_r+0x100c>
 7008d10:	00ffdfc4 	movi	r3,-129
 7008d14:	94c4b03a 	or	r2,r18,r19
 7008d18:	a0e8703a 	and	r20,r20,r3
 7008d1c:	103d4426 	beq	r2,zero,7008230 <__alt_data_end+0xff008230>
 7008d20:	0039883a 	mov	fp,zero
 7008d24:	d9002617 	ldw	r4,152(sp)
 7008d28:	dd401a04 	addi	r21,sp,104
 7008d2c:	908003cc 	andi	r2,r18,15
 7008d30:	9806973a 	slli	r3,r19,28
 7008d34:	2085883a 	add	r2,r4,r2
 7008d38:	9024d13a 	srli	r18,r18,4
 7008d3c:	10800003 	ldbu	r2,0(r2)
 7008d40:	9826d13a 	srli	r19,r19,4
 7008d44:	ad7fffc4 	addi	r21,r21,-1
 7008d48:	1ca4b03a 	or	r18,r3,r18
 7008d4c:	a8800005 	stb	r2,0(r21)
 7008d50:	94c4b03a 	or	r2,r18,r19
 7008d54:	103ff51e 	bne	r2,zero,7008d2c <__alt_data_end+0xff008d2c>
 7008d58:	003e5906 	br	70086c0 <__alt_data_end+0xff0086c0>
 7008d5c:	d9402117 	ldw	r5,132(sp)
 7008d60:	d9002017 	ldw	r4,128(sp)
 7008d64:	d9801a04 	addi	r6,sp,104
 7008d68:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008d6c:	103f891e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 7008d70:	d8801c17 	ldw	r2,112(sp)
 7008d74:	d811883a 	mov	r8,sp
 7008d78:	003f9506 	br	7008bd0 <__alt_data_end+0xff008bd0>
 7008d7c:	d9402117 	ldw	r5,132(sp)
 7008d80:	d9002017 	ldw	r4,128(sp)
 7008d84:	d9801a04 	addi	r6,sp,104
 7008d88:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008d8c:	103f811e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 7008d90:	d811883a 	mov	r8,sp
 7008d94:	003ced06 	br	700814c <__alt_data_end+0xff00814c>
 7008d98:	d9402117 	ldw	r5,132(sp)
 7008d9c:	d9002017 	ldw	r4,128(sp)
 7008da0:	d9801a04 	addi	r6,sp,104
 7008da4:	da402c15 	stw	r9,176(sp)
 7008da8:	db802a15 	stw	r14,168(sp)
 7008dac:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008db0:	da402c17 	ldw	r9,176(sp)
 7008db4:	db802a17 	ldw	r14,168(sp)
 7008db8:	103f761e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 7008dbc:	d9401b17 	ldw	r5,108(sp)
 7008dc0:	d8801c17 	ldw	r2,112(sp)
 7008dc4:	d811883a 	mov	r8,sp
 7008dc8:	29000044 	addi	r4,r5,1
 7008dcc:	003d5b06 	br	700833c <__alt_data_end+0xff00833c>
 7008dd0:	d9402117 	ldw	r5,132(sp)
 7008dd4:	d9002017 	ldw	r4,128(sp)
 7008dd8:	d9801a04 	addi	r6,sp,104
 7008ddc:	da402c15 	stw	r9,176(sp)
 7008de0:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008de4:	da402c17 	ldw	r9,176(sp)
 7008de8:	103f6a1e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 7008dec:	d9401b17 	ldw	r5,108(sp)
 7008df0:	d8801c17 	ldw	r2,112(sp)
 7008df4:	d811883a 	mov	r8,sp
 7008df8:	29000044 	addi	r4,r5,1
 7008dfc:	003f1006 	br	7008a40 <__alt_data_end+0xff008a40>
 7008e00:	1000c31e 	bne	r2,zero,7009110 <___vfiprintf_internal_r+0x12cc>
 7008e04:	01000044 	movi	r4,1
 7008e08:	000b883a 	mov	r5,zero
 7008e0c:	d811883a 	mov	r8,sp
 7008e10:	003f0d06 	br	7008a48 <__alt_data_end+0xff008a48>
 7008e14:	d9402117 	ldw	r5,132(sp)
 7008e18:	d9002017 	ldw	r4,128(sp)
 7008e1c:	d9801a04 	addi	r6,sp,104
 7008e20:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7008e24:	103f5b1e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 7008e28:	d9001b17 	ldw	r4,108(sp)
 7008e2c:	d8801c17 	ldw	r2,112(sp)
 7008e30:	d811883a 	mov	r8,sp
 7008e34:	21000044 	addi	r4,r4,1
 7008e38:	003d8006 	br	700843c <__alt_data_end+0xff00843c>
 7008e3c:	0101c074 	movhi	r4,1793
 7008e40:	213ee004 	addi	r4,r4,-1152
 7008e44:	d9002615 	stw	r4,152(sp)
 7008e48:	d8c02215 	stw	r3,136(sp)
 7008e4c:	1029883a 	mov	r20,r2
 7008e50:	94c4b03a 	or	r2,r18,r19
 7008e54:	103fb21e 	bne	r2,zero,7008d20 <__alt_data_end+0xff008d20>
 7008e58:	0039883a 	mov	fp,zero
 7008e5c:	00800084 	movi	r2,2
 7008e60:	003e6b06 	br	7008810 <__alt_data_end+0xff008810>
 7008e64:	da802217 	ldw	r10,136(sp)
 7008e68:	d8001d85 	stb	zero,118(sp)
 7008e6c:	0027883a 	mov	r19,zero
 7008e70:	50800104 	addi	r2,r10,4
 7008e74:	54800017 	ldw	r18,0(r10)
 7008e78:	483e6016 	blt	r9,zero,70087fc <__alt_data_end+0xff0087fc>
 7008e7c:	00ffdfc4 	movi	r3,-129
 7008e80:	d8802215 	stw	r2,136(sp)
 7008e84:	a0e8703a 	and	r20,r20,r3
 7008e88:	0039883a 	mov	fp,zero
 7008e8c:	903ebb26 	beq	r18,zero,700897c <__alt_data_end+0xff00897c>
 7008e90:	00800244 	movi	r2,9
 7008e94:	14bdee36 	bltu	r2,r18,7008650 <__alt_data_end+0xff008650>
 7008e98:	003eba06 	br	7008984 <__alt_data_end+0xff008984>
 7008e9c:	00800c04 	movi	r2,48
 7008ea0:	d8c01d45 	stb	r3,117(sp)
 7008ea4:	d8801d05 	stb	r2,116(sp)
 7008ea8:	d8001d85 	stb	zero,118(sp)
 7008eac:	a0c00094 	ori	r3,r20,2
 7008eb0:	4800a916 	blt	r9,zero,7009158 <___vfiprintf_internal_r+0x1314>
 7008eb4:	00bfdfc4 	movi	r2,-129
 7008eb8:	a096703a 	and	r11,r20,r2
 7008ebc:	5d000094 	ori	r20,r11,2
 7008ec0:	0039883a 	mov	fp,zero
 7008ec4:	003f9706 	br	7008d24 <__alt_data_end+0xff008d24>
 7008ec8:	8025883a 	mov	r18,r16
 7008ecc:	003c2e06 	br	7007f88 <__alt_data_end+0xff007f88>
 7008ed0:	0081c074 	movhi	r2,1793
 7008ed4:	10bee004 	addi	r2,r2,-1152
 7008ed8:	0039883a 	mov	fp,zero
 7008edc:	d8802615 	stw	r2,152(sp)
 7008ee0:	003f9006 	br	7008d24 <__alt_data_end+0xff008d24>
 7008ee4:	04a5c83a 	sub	r18,zero,r18
 7008ee8:	07000b44 	movi	fp,45
 7008eec:	9004c03a 	cmpne	r2,r18,zero
 7008ef0:	04e7c83a 	sub	r19,zero,r19
 7008ef4:	df001d85 	stb	fp,118(sp)
 7008ef8:	98a7c83a 	sub	r19,r19,r2
 7008efc:	48009f16 	blt	r9,zero,700917c <___vfiprintf_internal_r+0x1338>
 7008f00:	00bfdfc4 	movi	r2,-129
 7008f04:	a0a8703a 	and	r20,r20,r2
 7008f08:	003dd006 	br	700864c <__alt_data_end+0xff00864c>
 7008f0c:	70004c26 	beq	r14,zero,7009040 <___vfiprintf_internal_r+0x11fc>
 7008f10:	00800084 	movi	r2,2
 7008f14:	d8c01d04 	addi	r3,sp,116
 7008f18:	d8c00015 	stw	r3,0(sp)
 7008f1c:	d8800115 	stw	r2,4(sp)
 7008f20:	01000044 	movi	r4,1
 7008f24:	d811883a 	mov	r8,sp
 7008f28:	003f7306 	br	7008cf8 <__alt_data_end+0xff008cf8>
 7008f2c:	a080100c 	andi	r2,r20,64
 7008f30:	da802217 	ldw	r10,136(sp)
 7008f34:	103e0626 	beq	r2,zero,7008750 <__alt_data_end+0xff008750>
 7008f38:	5480000f 	ldh	r18,0(r10)
 7008f3c:	52800104 	addi	r10,r10,4
 7008f40:	da802215 	stw	r10,136(sp)
 7008f44:	9027d7fa 	srai	r19,r18,31
 7008f48:	9805883a 	mov	r2,r19
 7008f4c:	003db806 	br	7008630 <__alt_data_end+0xff008630>
 7008f50:	a080040c 	andi	r2,r20,16
 7008f54:	1000091e 	bne	r2,zero,7008f7c <___vfiprintf_internal_r+0x1138>
 7008f58:	a2c0100c 	andi	r11,r20,64
 7008f5c:	58000726 	beq	r11,zero,7008f7c <___vfiprintf_internal_r+0x1138>
 7008f60:	da802217 	ldw	r10,136(sp)
 7008f64:	50800017 	ldw	r2,0(r10)
 7008f68:	52800104 	addi	r10,r10,4
 7008f6c:	da802215 	stw	r10,136(sp)
 7008f70:	da802317 	ldw	r10,140(sp)
 7008f74:	1280000d 	sth	r10,0(r2)
 7008f78:	003be706 	br	7007f18 <__alt_data_end+0xff007f18>
 7008f7c:	da802217 	ldw	r10,136(sp)
 7008f80:	50800017 	ldw	r2,0(r10)
 7008f84:	52800104 	addi	r10,r10,4
 7008f88:	da802215 	stw	r10,136(sp)
 7008f8c:	da802317 	ldw	r10,140(sp)
 7008f90:	12800015 	stw	r10,0(r2)
 7008f94:	003be006 	br	7007f18 <__alt_data_end+0xff007f18>
 7008f98:	a080100c 	andi	r2,r20,64
 7008f9c:	da802217 	ldw	r10,136(sp)
 7008fa0:	10003026 	beq	r2,zero,7009064 <___vfiprintf_internal_r+0x1220>
 7008fa4:	5480000b 	ldhu	r18,0(r10)
 7008fa8:	52800104 	addi	r10,r10,4
 7008fac:	0027883a 	mov	r19,zero
 7008fb0:	da802215 	stw	r10,136(sp)
 7008fb4:	003d8006 	br	70085b8 <__alt_data_end+0xff0085b8>
 7008fb8:	80c00007 	ldb	r3,0(r16)
 7008fbc:	003c0006 	br	7007fc0 <__alt_data_end+0xff007fc0>
 7008fc0:	a080100c 	andi	r2,r20,64
 7008fc4:	d8001d85 	stb	zero,118(sp)
 7008fc8:	da802217 	ldw	r10,136(sp)
 7008fcc:	1000201e 	bne	r2,zero,7009050 <___vfiprintf_internal_r+0x120c>
 7008fd0:	50800104 	addi	r2,r10,4
 7008fd4:	54800017 	ldw	r18,0(r10)
 7008fd8:	0027883a 	mov	r19,zero
 7008fdc:	483def0e 	bge	r9,zero,700879c <__alt_data_end+0xff00879c>
 7008fe0:	94c6b03a 	or	r3,r18,r19
 7008fe4:	d8802215 	stw	r2,136(sp)
 7008fe8:	183d4e1e 	bne	r3,zero,7008524 <__alt_data_end+0xff008524>
 7008fec:	0039883a 	mov	fp,zero
 7008ff0:	0005883a 	mov	r2,zero
 7008ff4:	003e0606 	br	7008810 <__alt_data_end+0xff008810>
 7008ff8:	d9402117 	ldw	r5,132(sp)
 7008ffc:	d9002017 	ldw	r4,128(sp)
 7009000:	d9801a04 	addi	r6,sp,104
 7009004:	da402c15 	stw	r9,176(sp)
 7009008:	db802a15 	stw	r14,168(sp)
 700900c:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7009010:	da402c17 	ldw	r9,176(sp)
 7009014:	db802a17 	ldw	r14,168(sp)
 7009018:	103ede1e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 700901c:	d9401b17 	ldw	r5,108(sp)
 7009020:	d8801c17 	ldw	r2,112(sp)
 7009024:	d811883a 	mov	r8,sp
 7009028:	29000044 	addi	r4,r5,1
 700902c:	003e7406 	br	7008a00 <__alt_data_end+0xff008a00>
 7009030:	00bfffc4 	movi	r2,-1
 7009034:	003c5806 	br	7008198 <__alt_data_end+0xff008198>
 7009038:	d811883a 	mov	r8,sp
 700903c:	003ee806 	br	7008be0 <__alt_data_end+0xff008be0>
 7009040:	000b883a 	mov	r5,zero
 7009044:	01000044 	movi	r4,1
 7009048:	d811883a 	mov	r8,sp
 700904c:	003e7c06 	br	7008a40 <__alt_data_end+0xff008a40>
 7009050:	50800104 	addi	r2,r10,4
 7009054:	5480000b 	ldhu	r18,0(r10)
 7009058:	0027883a 	mov	r19,zero
 700905c:	483dcf0e 	bge	r9,zero,700879c <__alt_data_end+0xff00879c>
 7009060:	003fdf06 	br	7008fe0 <__alt_data_end+0xff008fe0>
 7009064:	54800017 	ldw	r18,0(r10)
 7009068:	52800104 	addi	r10,r10,4
 700906c:	0027883a 	mov	r19,zero
 7009070:	da802215 	stw	r10,136(sp)
 7009074:	003d5006 	br	70085b8 <__alt_data_end+0xff0085b8>
 7009078:	50800104 	addi	r2,r10,4
 700907c:	5480000b 	ldhu	r18,0(r10)
 7009080:	0027883a 	mov	r19,zero
 7009084:	483f7d0e 	bge	r9,zero,7008e7c <__alt_data_end+0xff008e7c>
 7009088:	003ddc06 	br	70087fc <__alt_data_end+0xff0087fc>
 700908c:	d8c02215 	stw	r3,136(sp)
 7009090:	0039883a 	mov	fp,zero
 7009094:	003ddb06 	br	7008804 <__alt_data_end+0xff008804>
 7009098:	0281c074 	movhi	r10,1793
 700909c:	52bf4104 	addi	r10,r10,-764
 70090a0:	da802415 	stw	r10,144(sp)
 70090a4:	003e8306 	br	7008ab4 <__alt_data_end+0xff008ab4>
 70090a8:	d8801c17 	ldw	r2,112(sp)
 70090ac:	dd002117 	ldw	r20,132(sp)
 70090b0:	103eb926 	beq	r2,zero,7008b98 <__alt_data_end+0xff008b98>
 70090b4:	d9002017 	ldw	r4,128(sp)
 70090b8:	d9801a04 	addi	r6,sp,104
 70090bc:	a00b883a 	mov	r5,r20
 70090c0:	7007d300 	call	7007d30 <__sprint_r.part.0>
 70090c4:	003eb406 	br	7008b98 <__alt_data_end+0xff008b98>
 70090c8:	80c00043 	ldbu	r3,1(r16)
 70090cc:	a5000814 	ori	r20,r20,32
 70090d0:	84000044 	addi	r16,r16,1
 70090d4:	18c03fcc 	andi	r3,r3,255
 70090d8:	18c0201c 	xori	r3,r3,128
 70090dc:	18ffe004 	addi	r3,r3,-128
 70090e0:	003bb706 	br	7007fc0 <__alt_data_end+0xff007fc0>
 70090e4:	a809883a 	mov	r4,r21
 70090e8:	d8c02a15 	stw	r3,168(sp)
 70090ec:	da002b15 	stw	r8,172(sp)
 70090f0:	70006300 	call	7000630 <strlen>
 70090f4:	d8c02a17 	ldw	r3,168(sp)
 70090f8:	1027883a 	mov	r19,r2
 70090fc:	df001d83 	ldbu	fp,118(sp)
 7009100:	d8c02215 	stw	r3,136(sp)
 7009104:	0013883a 	mov	r9,zero
 7009108:	da002b17 	ldw	r8,172(sp)
 700910c:	003c4d06 	br	7008244 <__alt_data_end+0xff008244>
 7009110:	d9402117 	ldw	r5,132(sp)
 7009114:	d9002017 	ldw	r4,128(sp)
 7009118:	d9801a04 	addi	r6,sp,104
 700911c:	da402c15 	stw	r9,176(sp)
 7009120:	7007d300 	call	7007d30 <__sprint_r.part.0>
 7009124:	da402c17 	ldw	r9,176(sp)
 7009128:	103e9a1e 	bne	r2,zero,7008b94 <__alt_data_end+0xff008b94>
 700912c:	d9401b17 	ldw	r5,108(sp)
 7009130:	d8801c17 	ldw	r2,112(sp)
 7009134:	d811883a 	mov	r8,sp
 7009138:	29000044 	addi	r4,r5,1
 700913c:	003e4206 	br	7008a48 <__alt_data_end+0xff008a48>
 7009140:	d9401b17 	ldw	r5,108(sp)
 7009144:	0101c074 	movhi	r4,1793
 7009148:	213f4504 	addi	r4,r4,-748
 700914c:	d9002415 	stw	r4,144(sp)
 7009150:	29400044 	addi	r5,r5,1
 7009154:	003c6d06 	br	700830c <__alt_data_end+0xff00830c>
 7009158:	0039883a 	mov	fp,zero
 700915c:	00800084 	movi	r2,2
 7009160:	10803fcc 	andi	r2,r2,255
 7009164:	01000044 	movi	r4,1
 7009168:	11001e26 	beq	r2,r4,70091e4 <___vfiprintf_internal_r+0x13a0>
 700916c:	01000084 	movi	r4,2
 7009170:	11001e1e 	bne	r2,r4,70091ec <___vfiprintf_internal_r+0x13a8>
 7009174:	1829883a 	mov	r20,r3
 7009178:	003eea06 	br	7008d24 <__alt_data_end+0xff008d24>
 700917c:	a007883a 	mov	r3,r20
 7009180:	00800044 	movi	r2,1
 7009184:	003ff606 	br	7009160 <__alt_data_end+0xff009160>
 7009188:	00800184 	movi	r2,6
 700918c:	1240012e 	bgeu	r2,r9,7009194 <___vfiprintf_internal_r+0x1350>
 7009190:	1013883a 	mov	r9,r2
 7009194:	4827883a 	mov	r19,r9
 7009198:	4825883a 	mov	r18,r9
 700919c:	48001516 	blt	r9,zero,70091f4 <___vfiprintf_internal_r+0x13b0>
 70091a0:	0541c074 	movhi	r21,1793
 70091a4:	d8c02215 	stw	r3,136(sp)
 70091a8:	ad7ee504 	addi	r21,r21,-1132
 70091ac:	003d1406 	br	7008600 <__alt_data_end+0xff008600>
 70091b0:	0281c074 	movhi	r10,1793
 70091b4:	52bf4104 	addi	r10,r10,-764
 70091b8:	da802415 	stw	r10,144(sp)
 70091bc:	200d883a 	mov	r6,r4
 70091c0:	003c9106 	br	7008408 <__alt_data_end+0xff008408>
 70091c4:	5021883a 	mov	r16,r10
 70091c8:	0013883a 	mov	r9,zero
 70091cc:	003b7d06 	br	7007fc4 <__alt_data_end+0xff007fc4>
 70091d0:	4827883a 	mov	r19,r9
 70091d4:	df001d83 	ldbu	fp,118(sp)
 70091d8:	d8c02215 	stw	r3,136(sp)
 70091dc:	0013883a 	mov	r9,zero
 70091e0:	003c1806 	br	7008244 <__alt_data_end+0xff008244>
 70091e4:	1829883a 	mov	r20,r3
 70091e8:	003d1806 	br	700864c <__alt_data_end+0xff00864c>
 70091ec:	1829883a 	mov	r20,r3
 70091f0:	003ccd06 	br	7008528 <__alt_data_end+0xff008528>
 70091f4:	0025883a 	mov	r18,zero
 70091f8:	003fe906 	br	70091a0 <__alt_data_end+0xff0091a0>
 70091fc:	d8802217 	ldw	r2,136(sp)
 7009200:	80c00043 	ldbu	r3,1(r16)
 7009204:	5021883a 	mov	r16,r10
 7009208:	12400017 	ldw	r9,0(r2)
 700920c:	10800104 	addi	r2,r2,4
 7009210:	d8802215 	stw	r2,136(sp)
 7009214:	483faf0e 	bge	r9,zero,70090d4 <__alt_data_end+0xff0090d4>
 7009218:	18c03fcc 	andi	r3,r3,255
 700921c:	18c0201c 	xori	r3,r3,128
 7009220:	027fffc4 	movi	r9,-1
 7009224:	18ffe004 	addi	r3,r3,-128
 7009228:	003b6506 	br	7007fc0 <__alt_data_end+0xff007fc0>
 700922c:	d9c01d85 	stb	r7,118(sp)
 7009230:	003ca006 	br	70084b4 <__alt_data_end+0xff0084b4>
 7009234:	d9c01d85 	stb	r7,118(sp)
 7009238:	003cad06 	br	70084f0 <__alt_data_end+0xff0084f0>
 700923c:	d9c01d85 	stb	r7,118(sp)
 7009240:	003d7d06 	br	7008838 <__alt_data_end+0xff008838>
 7009244:	d9c01d85 	stb	r7,118(sp)
 7009248:	003d5f06 	br	70087c8 <__alt_data_end+0xff0087c8>
 700924c:	a080004c 	andi	r2,r20,1
 7009250:	0039883a 	mov	fp,zero
 7009254:	10000526 	beq	r2,zero,700926c <___vfiprintf_internal_r+0x1428>
 7009258:	00800c04 	movi	r2,48
 700925c:	d88019c5 	stb	r2,103(sp)
 7009260:	dcc02717 	ldw	r19,156(sp)
 7009264:	dd4019c4 	addi	r21,sp,103
 7009268:	003bf606 	br	7008244 <__alt_data_end+0xff008244>
 700926c:	0027883a 	mov	r19,zero
 7009270:	dd401a04 	addi	r21,sp,104
 7009274:	003bf306 	br	7008244 <__alt_data_end+0xff008244>
 7009278:	d9c01d85 	stb	r7,118(sp)
 700927c:	003dc806 	br	70089a0 <__alt_data_end+0xff0089a0>
 7009280:	d9c01d85 	stb	r7,118(sp)
 7009284:	003d3a06 	br	7008770 <__alt_data_end+0xff008770>
 7009288:	d9c01d85 	stb	r7,118(sp)
 700928c:	003d2a06 	br	7008738 <__alt_data_end+0xff008738>
 7009290:	d9c01d85 	stb	r7,118(sp)
 7009294:	003cde06 	br	7008610 <__alt_data_end+0xff008610>
 7009298:	d9c01d85 	stb	r7,118(sp)
 700929c:	003cbc06 	br	7008590 <__alt_data_end+0xff008590>

070092a0 <__vfiprintf_internal>:
 70092a0:	0081c074 	movhi	r2,1793
 70092a4:	10864a04 	addi	r2,r2,6440
 70092a8:	300f883a 	mov	r7,r6
 70092ac:	280d883a 	mov	r6,r5
 70092b0:	200b883a 	mov	r5,r4
 70092b4:	11000017 	ldw	r4,0(r2)
 70092b8:	7007e441 	jmpi	7007e44 <___vfiprintf_internal_r>

070092bc <__sbprintf>:
 70092bc:	2880030b 	ldhu	r2,12(r5)
 70092c0:	2ac01917 	ldw	r11,100(r5)
 70092c4:	2a80038b 	ldhu	r10,14(r5)
 70092c8:	2a400717 	ldw	r9,28(r5)
 70092cc:	2a000917 	ldw	r8,36(r5)
 70092d0:	defee204 	addi	sp,sp,-1144
 70092d4:	00c10004 	movi	r3,1024
 70092d8:	dc011a15 	stw	r16,1128(sp)
 70092dc:	10bfff4c 	andi	r2,r2,65533
 70092e0:	2821883a 	mov	r16,r5
 70092e4:	d8cb883a 	add	r5,sp,r3
 70092e8:	dc811c15 	stw	r18,1136(sp)
 70092ec:	dc411b15 	stw	r17,1132(sp)
 70092f0:	dfc11d15 	stw	ra,1140(sp)
 70092f4:	2025883a 	mov	r18,r4
 70092f8:	d881030d 	sth	r2,1036(sp)
 70092fc:	dac11915 	stw	r11,1124(sp)
 7009300:	da81038d 	sth	r10,1038(sp)
 7009304:	da410715 	stw	r9,1052(sp)
 7009308:	da010915 	stw	r8,1060(sp)
 700930c:	dec10015 	stw	sp,1024(sp)
 7009310:	dec10415 	stw	sp,1040(sp)
 7009314:	d8c10215 	stw	r3,1032(sp)
 7009318:	d8c10515 	stw	r3,1044(sp)
 700931c:	d8010615 	stw	zero,1048(sp)
 7009320:	7007e440 	call	7007e44 <___vfiprintf_internal_r>
 7009324:	1023883a 	mov	r17,r2
 7009328:	10000416 	blt	r2,zero,700933c <__sbprintf+0x80>
 700932c:	d9410004 	addi	r5,sp,1024
 7009330:	9009883a 	mov	r4,r18
 7009334:	70045900 	call	7004590 <_fflush_r>
 7009338:	10000d1e 	bne	r2,zero,7009370 <__sbprintf+0xb4>
 700933c:	d881030b 	ldhu	r2,1036(sp)
 7009340:	1080100c 	andi	r2,r2,64
 7009344:	10000326 	beq	r2,zero,7009354 <__sbprintf+0x98>
 7009348:	8080030b 	ldhu	r2,12(r16)
 700934c:	10801014 	ori	r2,r2,64
 7009350:	8080030d 	sth	r2,12(r16)
 7009354:	8805883a 	mov	r2,r17
 7009358:	dfc11d17 	ldw	ra,1140(sp)
 700935c:	dc811c17 	ldw	r18,1136(sp)
 7009360:	dc411b17 	ldw	r17,1132(sp)
 7009364:	dc011a17 	ldw	r16,1128(sp)
 7009368:	dec11e04 	addi	sp,sp,1144
 700936c:	f800283a 	ret
 7009370:	047fffc4 	movi	r17,-1
 7009374:	003ff106 	br	700933c <__alt_data_end+0xff00933c>

07009378 <__swbuf_r>:
 7009378:	defffb04 	addi	sp,sp,-20
 700937c:	dcc00315 	stw	r19,12(sp)
 7009380:	dc800215 	stw	r18,8(sp)
 7009384:	dc000015 	stw	r16,0(sp)
 7009388:	dfc00415 	stw	ra,16(sp)
 700938c:	dc400115 	stw	r17,4(sp)
 7009390:	2025883a 	mov	r18,r4
 7009394:	2827883a 	mov	r19,r5
 7009398:	3021883a 	mov	r16,r6
 700939c:	20000226 	beq	r4,zero,70093a8 <__swbuf_r+0x30>
 70093a0:	20800e17 	ldw	r2,56(r4)
 70093a4:	10004226 	beq	r2,zero,70094b0 <__swbuf_r+0x138>
 70093a8:	80800617 	ldw	r2,24(r16)
 70093ac:	8100030b 	ldhu	r4,12(r16)
 70093b0:	80800215 	stw	r2,8(r16)
 70093b4:	2080020c 	andi	r2,r4,8
 70093b8:	10003626 	beq	r2,zero,7009494 <__swbuf_r+0x11c>
 70093bc:	80c00417 	ldw	r3,16(r16)
 70093c0:	18003426 	beq	r3,zero,7009494 <__swbuf_r+0x11c>
 70093c4:	2088000c 	andi	r2,r4,8192
 70093c8:	9c403fcc 	andi	r17,r19,255
 70093cc:	10001a26 	beq	r2,zero,7009438 <__swbuf_r+0xc0>
 70093d0:	80800017 	ldw	r2,0(r16)
 70093d4:	81000517 	ldw	r4,20(r16)
 70093d8:	10c7c83a 	sub	r3,r2,r3
 70093dc:	1900200e 	bge	r3,r4,7009460 <__swbuf_r+0xe8>
 70093e0:	18c00044 	addi	r3,r3,1
 70093e4:	81000217 	ldw	r4,8(r16)
 70093e8:	11400044 	addi	r5,r2,1
 70093ec:	81400015 	stw	r5,0(r16)
 70093f0:	213fffc4 	addi	r4,r4,-1
 70093f4:	81000215 	stw	r4,8(r16)
 70093f8:	14c00005 	stb	r19,0(r2)
 70093fc:	80800517 	ldw	r2,20(r16)
 7009400:	10c01e26 	beq	r2,r3,700947c <__swbuf_r+0x104>
 7009404:	8080030b 	ldhu	r2,12(r16)
 7009408:	1080004c 	andi	r2,r2,1
 700940c:	10000226 	beq	r2,zero,7009418 <__swbuf_r+0xa0>
 7009410:	00800284 	movi	r2,10
 7009414:	88801926 	beq	r17,r2,700947c <__swbuf_r+0x104>
 7009418:	8805883a 	mov	r2,r17
 700941c:	dfc00417 	ldw	ra,16(sp)
 7009420:	dcc00317 	ldw	r19,12(sp)
 7009424:	dc800217 	ldw	r18,8(sp)
 7009428:	dc400117 	ldw	r17,4(sp)
 700942c:	dc000017 	ldw	r16,0(sp)
 7009430:	dec00504 	addi	sp,sp,20
 7009434:	f800283a 	ret
 7009438:	81401917 	ldw	r5,100(r16)
 700943c:	00b7ffc4 	movi	r2,-8193
 7009440:	21080014 	ori	r4,r4,8192
 7009444:	2884703a 	and	r2,r5,r2
 7009448:	80801915 	stw	r2,100(r16)
 700944c:	80800017 	ldw	r2,0(r16)
 7009450:	8100030d 	sth	r4,12(r16)
 7009454:	81000517 	ldw	r4,20(r16)
 7009458:	10c7c83a 	sub	r3,r2,r3
 700945c:	193fe016 	blt	r3,r4,70093e0 <__alt_data_end+0xff0093e0>
 7009460:	800b883a 	mov	r5,r16
 7009464:	9009883a 	mov	r4,r18
 7009468:	70045900 	call	7004590 <_fflush_r>
 700946c:	1000071e 	bne	r2,zero,700948c <__swbuf_r+0x114>
 7009470:	80800017 	ldw	r2,0(r16)
 7009474:	00c00044 	movi	r3,1
 7009478:	003fda06 	br	70093e4 <__alt_data_end+0xff0093e4>
 700947c:	800b883a 	mov	r5,r16
 7009480:	9009883a 	mov	r4,r18
 7009484:	70045900 	call	7004590 <_fflush_r>
 7009488:	103fe326 	beq	r2,zero,7009418 <__alt_data_end+0xff009418>
 700948c:	00bfffc4 	movi	r2,-1
 7009490:	003fe206 	br	700941c <__alt_data_end+0xff00941c>
 7009494:	800b883a 	mov	r5,r16
 7009498:	9009883a 	mov	r4,r18
 700949c:	70029980 	call	7002998 <__swsetup_r>
 70094a0:	103ffa1e 	bne	r2,zero,700948c <__alt_data_end+0xff00948c>
 70094a4:	8100030b 	ldhu	r4,12(r16)
 70094a8:	80c00417 	ldw	r3,16(r16)
 70094ac:	003fc506 	br	70093c4 <__alt_data_end+0xff0093c4>
 70094b0:	700496c0 	call	700496c <__sinit>
 70094b4:	003fbc06 	br	70093a8 <__alt_data_end+0xff0093a8>

070094b8 <__swbuf>:
 70094b8:	0081c074 	movhi	r2,1793
 70094bc:	10864a04 	addi	r2,r2,6440
 70094c0:	280d883a 	mov	r6,r5
 70094c4:	200b883a 	mov	r5,r4
 70094c8:	11000017 	ldw	r4,0(r2)
 70094cc:	70093781 	jmpi	7009378 <__swbuf_r>

070094d0 <_write_r>:
 70094d0:	defffd04 	addi	sp,sp,-12
 70094d4:	2805883a 	mov	r2,r5
 70094d8:	dc000015 	stw	r16,0(sp)
 70094dc:	0401c074 	movhi	r16,1793
 70094e0:	dc400115 	stw	r17,4(sp)
 70094e4:	300b883a 	mov	r5,r6
 70094e8:	840d2504 	addi	r16,r16,13460
 70094ec:	2023883a 	mov	r17,r4
 70094f0:	380d883a 	mov	r6,r7
 70094f4:	1009883a 	mov	r4,r2
 70094f8:	dfc00215 	stw	ra,8(sp)
 70094fc:	80000015 	stw	zero,0(r16)
 7009500:	700d80c0 	call	700d80c <write>
 7009504:	00ffffc4 	movi	r3,-1
 7009508:	10c00526 	beq	r2,r3,7009520 <_write_r+0x50>
 700950c:	dfc00217 	ldw	ra,8(sp)
 7009510:	dc400117 	ldw	r17,4(sp)
 7009514:	dc000017 	ldw	r16,0(sp)
 7009518:	dec00304 	addi	sp,sp,12
 700951c:	f800283a 	ret
 7009520:	80c00017 	ldw	r3,0(r16)
 7009524:	183ff926 	beq	r3,zero,700950c <__alt_data_end+0xff00950c>
 7009528:	88c00015 	stw	r3,0(r17)
 700952c:	003ff706 	br	700950c <__alt_data_end+0xff00950c>

07009530 <_close_r>:
 7009530:	defffd04 	addi	sp,sp,-12
 7009534:	dc000015 	stw	r16,0(sp)
 7009538:	0401c074 	movhi	r16,1793
 700953c:	dc400115 	stw	r17,4(sp)
 7009540:	840d2504 	addi	r16,r16,13460
 7009544:	2023883a 	mov	r17,r4
 7009548:	2809883a 	mov	r4,r5
 700954c:	dfc00215 	stw	ra,8(sp)
 7009550:	80000015 	stw	zero,0(r16)
 7009554:	700cfb40 	call	700cfb4 <close>
 7009558:	00ffffc4 	movi	r3,-1
 700955c:	10c00526 	beq	r2,r3,7009574 <_close_r+0x44>
 7009560:	dfc00217 	ldw	ra,8(sp)
 7009564:	dc400117 	ldw	r17,4(sp)
 7009568:	dc000017 	ldw	r16,0(sp)
 700956c:	dec00304 	addi	sp,sp,12
 7009570:	f800283a 	ret
 7009574:	80c00017 	ldw	r3,0(r16)
 7009578:	183ff926 	beq	r3,zero,7009560 <__alt_data_end+0xff009560>
 700957c:	88c00015 	stw	r3,0(r17)
 7009580:	003ff706 	br	7009560 <__alt_data_end+0xff009560>

07009584 <_calloc_r>:
 7009584:	298b383a 	mul	r5,r5,r6
 7009588:	defffe04 	addi	sp,sp,-8
 700958c:	dfc00115 	stw	ra,4(sp)
 7009590:	dc000015 	stw	r16,0(sp)
 7009594:	70056cc0 	call	70056cc <_malloc_r>
 7009598:	10002926 	beq	r2,zero,7009640 <_calloc_r+0xbc>
 700959c:	11bfff17 	ldw	r6,-4(r2)
 70095a0:	1021883a 	mov	r16,r2
 70095a4:	00bfff04 	movi	r2,-4
 70095a8:	308c703a 	and	r6,r6,r2
 70095ac:	00c00904 	movi	r3,36
 70095b0:	308d883a 	add	r6,r6,r2
 70095b4:	19801636 	bltu	r3,r6,7009610 <_calloc_r+0x8c>
 70095b8:	008004c4 	movi	r2,19
 70095bc:	11800b2e 	bgeu	r2,r6,70095ec <_calloc_r+0x68>
 70095c0:	80000015 	stw	zero,0(r16)
 70095c4:	80000115 	stw	zero,4(r16)
 70095c8:	008006c4 	movi	r2,27
 70095cc:	11801a2e 	bgeu	r2,r6,7009638 <_calloc_r+0xb4>
 70095d0:	80000215 	stw	zero,8(r16)
 70095d4:	80000315 	stw	zero,12(r16)
 70095d8:	30c0151e 	bne	r6,r3,7009630 <_calloc_r+0xac>
 70095dc:	80000415 	stw	zero,16(r16)
 70095e0:	80800604 	addi	r2,r16,24
 70095e4:	80000515 	stw	zero,20(r16)
 70095e8:	00000106 	br	70095f0 <_calloc_r+0x6c>
 70095ec:	8005883a 	mov	r2,r16
 70095f0:	10000015 	stw	zero,0(r2)
 70095f4:	10000115 	stw	zero,4(r2)
 70095f8:	10000215 	stw	zero,8(r2)
 70095fc:	8005883a 	mov	r2,r16
 7009600:	dfc00117 	ldw	ra,4(sp)
 7009604:	dc000017 	ldw	r16,0(sp)
 7009608:	dec00204 	addi	sp,sp,8
 700960c:	f800283a 	ret
 7009610:	000b883a 	mov	r5,zero
 7009614:	8009883a 	mov	r4,r16
 7009618:	70062600 	call	7006260 <memset>
 700961c:	8005883a 	mov	r2,r16
 7009620:	dfc00117 	ldw	ra,4(sp)
 7009624:	dc000017 	ldw	r16,0(sp)
 7009628:	dec00204 	addi	sp,sp,8
 700962c:	f800283a 	ret
 7009630:	80800404 	addi	r2,r16,16
 7009634:	003fee06 	br	70095f0 <__alt_data_end+0xff0095f0>
 7009638:	80800204 	addi	r2,r16,8
 700963c:	003fec06 	br	70095f0 <__alt_data_end+0xff0095f0>
 7009640:	0005883a 	mov	r2,zero
 7009644:	003fee06 	br	7009600 <__alt_data_end+0xff009600>

07009648 <_fclose_r>:
 7009648:	28003926 	beq	r5,zero,7009730 <_fclose_r+0xe8>
 700964c:	defffc04 	addi	sp,sp,-16
 7009650:	dc400115 	stw	r17,4(sp)
 7009654:	dc000015 	stw	r16,0(sp)
 7009658:	dfc00315 	stw	ra,12(sp)
 700965c:	dc800215 	stw	r18,8(sp)
 7009660:	2023883a 	mov	r17,r4
 7009664:	2821883a 	mov	r16,r5
 7009668:	20000226 	beq	r4,zero,7009674 <_fclose_r+0x2c>
 700966c:	20800e17 	ldw	r2,56(r4)
 7009670:	10002726 	beq	r2,zero,7009710 <_fclose_r+0xc8>
 7009674:	8080030f 	ldh	r2,12(r16)
 7009678:	1000071e 	bne	r2,zero,7009698 <_fclose_r+0x50>
 700967c:	0005883a 	mov	r2,zero
 7009680:	dfc00317 	ldw	ra,12(sp)
 7009684:	dc800217 	ldw	r18,8(sp)
 7009688:	dc400117 	ldw	r17,4(sp)
 700968c:	dc000017 	ldw	r16,0(sp)
 7009690:	dec00404 	addi	sp,sp,16
 7009694:	f800283a 	ret
 7009698:	800b883a 	mov	r5,r16
 700969c:	8809883a 	mov	r4,r17
 70096a0:	70043740 	call	7004374 <__sflush_r>
 70096a4:	1025883a 	mov	r18,r2
 70096a8:	80800b17 	ldw	r2,44(r16)
 70096ac:	10000426 	beq	r2,zero,70096c0 <_fclose_r+0x78>
 70096b0:	81400717 	ldw	r5,28(r16)
 70096b4:	8809883a 	mov	r4,r17
 70096b8:	103ee83a 	callr	r2
 70096bc:	10001616 	blt	r2,zero,7009718 <_fclose_r+0xd0>
 70096c0:	8080030b 	ldhu	r2,12(r16)
 70096c4:	1080200c 	andi	r2,r2,128
 70096c8:	1000151e 	bne	r2,zero,7009720 <_fclose_r+0xd8>
 70096cc:	81400c17 	ldw	r5,48(r16)
 70096d0:	28000526 	beq	r5,zero,70096e8 <_fclose_r+0xa0>
 70096d4:	80801004 	addi	r2,r16,64
 70096d8:	28800226 	beq	r5,r2,70096e4 <_fclose_r+0x9c>
 70096dc:	8809883a 	mov	r4,r17
 70096e0:	7004ae00 	call	7004ae0 <_free_r>
 70096e4:	80000c15 	stw	zero,48(r16)
 70096e8:	81401117 	ldw	r5,68(r16)
 70096ec:	28000326 	beq	r5,zero,70096fc <_fclose_r+0xb4>
 70096f0:	8809883a 	mov	r4,r17
 70096f4:	7004ae00 	call	7004ae0 <_free_r>
 70096f8:	80001115 	stw	zero,68(r16)
 70096fc:	700497c0 	call	700497c <__sfp_lock_acquire>
 7009700:	8000030d 	sth	zero,12(r16)
 7009704:	70049800 	call	7004980 <__sfp_lock_release>
 7009708:	9005883a 	mov	r2,r18
 700970c:	003fdc06 	br	7009680 <__alt_data_end+0xff009680>
 7009710:	700496c0 	call	700496c <__sinit>
 7009714:	003fd706 	br	7009674 <__alt_data_end+0xff009674>
 7009718:	04bfffc4 	movi	r18,-1
 700971c:	003fe806 	br	70096c0 <__alt_data_end+0xff0096c0>
 7009720:	81400417 	ldw	r5,16(r16)
 7009724:	8809883a 	mov	r4,r17
 7009728:	7004ae00 	call	7004ae0 <_free_r>
 700972c:	003fe706 	br	70096cc <__alt_data_end+0xff0096cc>
 7009730:	0005883a 	mov	r2,zero
 7009734:	f800283a 	ret

07009738 <fclose>:
 7009738:	0081c074 	movhi	r2,1793
 700973c:	10864a04 	addi	r2,r2,6440
 7009740:	200b883a 	mov	r5,r4
 7009744:	11000017 	ldw	r4,0(r2)
 7009748:	70096481 	jmpi	7009648 <_fclose_r>

0700974c <__fputwc>:
 700974c:	defff804 	addi	sp,sp,-32
 7009750:	dcc00415 	stw	r19,16(sp)
 7009754:	dc800315 	stw	r18,12(sp)
 7009758:	dc000115 	stw	r16,4(sp)
 700975c:	dfc00715 	stw	ra,28(sp)
 7009760:	dd400615 	stw	r21,24(sp)
 7009764:	dd000515 	stw	r20,20(sp)
 7009768:	dc400215 	stw	r17,8(sp)
 700976c:	2027883a 	mov	r19,r4
 7009770:	2825883a 	mov	r18,r5
 7009774:	3021883a 	mov	r16,r6
 7009778:	70054bc0 	call	70054bc <__locale_mb_cur_max>
 700977c:	00c00044 	movi	r3,1
 7009780:	10c03e26 	beq	r2,r3,700987c <__fputwc+0x130>
 7009784:	81c01704 	addi	r7,r16,92
 7009788:	900d883a 	mov	r6,r18
 700978c:	d80b883a 	mov	r5,sp
 7009790:	9809883a 	mov	r4,r19
 7009794:	7009ac40 	call	7009ac4 <_wcrtomb_r>
 7009798:	1029883a 	mov	r20,r2
 700979c:	00bfffc4 	movi	r2,-1
 70097a0:	a0802026 	beq	r20,r2,7009824 <__fputwc+0xd8>
 70097a4:	d9400003 	ldbu	r5,0(sp)
 70097a8:	a0001c26 	beq	r20,zero,700981c <__fputwc+0xd0>
 70097ac:	0023883a 	mov	r17,zero
 70097b0:	05400284 	movi	r21,10
 70097b4:	00000906 	br	70097dc <__fputwc+0x90>
 70097b8:	80800017 	ldw	r2,0(r16)
 70097bc:	11400005 	stb	r5,0(r2)
 70097c0:	80c00017 	ldw	r3,0(r16)
 70097c4:	18c00044 	addi	r3,r3,1
 70097c8:	80c00015 	stw	r3,0(r16)
 70097cc:	8c400044 	addi	r17,r17,1
 70097d0:	dc45883a 	add	r2,sp,r17
 70097d4:	8d00112e 	bgeu	r17,r20,700981c <__fputwc+0xd0>
 70097d8:	11400003 	ldbu	r5,0(r2)
 70097dc:	80c00217 	ldw	r3,8(r16)
 70097e0:	18ffffc4 	addi	r3,r3,-1
 70097e4:	80c00215 	stw	r3,8(r16)
 70097e8:	183ff30e 	bge	r3,zero,70097b8 <__alt_data_end+0xff0097b8>
 70097ec:	80800617 	ldw	r2,24(r16)
 70097f0:	18801916 	blt	r3,r2,7009858 <__fputwc+0x10c>
 70097f4:	80800017 	ldw	r2,0(r16)
 70097f8:	11400005 	stb	r5,0(r2)
 70097fc:	80800017 	ldw	r2,0(r16)
 7009800:	10c00003 	ldbu	r3,0(r2)
 7009804:	10800044 	addi	r2,r2,1
 7009808:	1d402326 	beq	r3,r21,7009898 <__fputwc+0x14c>
 700980c:	80800015 	stw	r2,0(r16)
 7009810:	8c400044 	addi	r17,r17,1
 7009814:	dc45883a 	add	r2,sp,r17
 7009818:	8d3fef36 	bltu	r17,r20,70097d8 <__alt_data_end+0xff0097d8>
 700981c:	9005883a 	mov	r2,r18
 7009820:	00000406 	br	7009834 <__fputwc+0xe8>
 7009824:	80c0030b 	ldhu	r3,12(r16)
 7009828:	a005883a 	mov	r2,r20
 700982c:	18c01014 	ori	r3,r3,64
 7009830:	80c0030d 	sth	r3,12(r16)
 7009834:	dfc00717 	ldw	ra,28(sp)
 7009838:	dd400617 	ldw	r21,24(sp)
 700983c:	dd000517 	ldw	r20,20(sp)
 7009840:	dcc00417 	ldw	r19,16(sp)
 7009844:	dc800317 	ldw	r18,12(sp)
 7009848:	dc400217 	ldw	r17,8(sp)
 700984c:	dc000117 	ldw	r16,4(sp)
 7009850:	dec00804 	addi	sp,sp,32
 7009854:	f800283a 	ret
 7009858:	800d883a 	mov	r6,r16
 700985c:	29403fcc 	andi	r5,r5,255
 7009860:	9809883a 	mov	r4,r19
 7009864:	70093780 	call	7009378 <__swbuf_r>
 7009868:	10bfffe0 	cmpeqi	r2,r2,-1
 700986c:	10803fcc 	andi	r2,r2,255
 7009870:	103fd626 	beq	r2,zero,70097cc <__alt_data_end+0xff0097cc>
 7009874:	00bfffc4 	movi	r2,-1
 7009878:	003fee06 	br	7009834 <__alt_data_end+0xff009834>
 700987c:	90ffffc4 	addi	r3,r18,-1
 7009880:	01003f84 	movi	r4,254
 7009884:	20ffbf36 	bltu	r4,r3,7009784 <__alt_data_end+0xff009784>
 7009888:	900b883a 	mov	r5,r18
 700988c:	dc800005 	stb	r18,0(sp)
 7009890:	1029883a 	mov	r20,r2
 7009894:	003fc506 	br	70097ac <__alt_data_end+0xff0097ac>
 7009898:	800d883a 	mov	r6,r16
 700989c:	a80b883a 	mov	r5,r21
 70098a0:	9809883a 	mov	r4,r19
 70098a4:	70093780 	call	7009378 <__swbuf_r>
 70098a8:	10bfffe0 	cmpeqi	r2,r2,-1
 70098ac:	003fef06 	br	700986c <__alt_data_end+0xff00986c>

070098b0 <_fputwc_r>:
 70098b0:	3080030b 	ldhu	r2,12(r6)
 70098b4:	10c8000c 	andi	r3,r2,8192
 70098b8:	1800051e 	bne	r3,zero,70098d0 <_fputwc_r+0x20>
 70098bc:	30c01917 	ldw	r3,100(r6)
 70098c0:	10880014 	ori	r2,r2,8192
 70098c4:	3080030d 	sth	r2,12(r6)
 70098c8:	18880014 	ori	r2,r3,8192
 70098cc:	30801915 	stw	r2,100(r6)
 70098d0:	700974c1 	jmpi	700974c <__fputwc>

070098d4 <fputwc>:
 70098d4:	0081c074 	movhi	r2,1793
 70098d8:	defffc04 	addi	sp,sp,-16
 70098dc:	10864a04 	addi	r2,r2,6440
 70098e0:	dc000115 	stw	r16,4(sp)
 70098e4:	14000017 	ldw	r16,0(r2)
 70098e8:	dc400215 	stw	r17,8(sp)
 70098ec:	dfc00315 	stw	ra,12(sp)
 70098f0:	2023883a 	mov	r17,r4
 70098f4:	80000226 	beq	r16,zero,7009900 <fputwc+0x2c>
 70098f8:	80800e17 	ldw	r2,56(r16)
 70098fc:	10001026 	beq	r2,zero,7009940 <fputwc+0x6c>
 7009900:	2880030b 	ldhu	r2,12(r5)
 7009904:	10c8000c 	andi	r3,r2,8192
 7009908:	1800051e 	bne	r3,zero,7009920 <fputwc+0x4c>
 700990c:	28c01917 	ldw	r3,100(r5)
 7009910:	10880014 	ori	r2,r2,8192
 7009914:	2880030d 	sth	r2,12(r5)
 7009918:	18880014 	ori	r2,r3,8192
 700991c:	28801915 	stw	r2,100(r5)
 7009920:	280d883a 	mov	r6,r5
 7009924:	8009883a 	mov	r4,r16
 7009928:	880b883a 	mov	r5,r17
 700992c:	dfc00317 	ldw	ra,12(sp)
 7009930:	dc400217 	ldw	r17,8(sp)
 7009934:	dc000117 	ldw	r16,4(sp)
 7009938:	dec00404 	addi	sp,sp,16
 700993c:	700974c1 	jmpi	700974c <__fputwc>
 7009940:	8009883a 	mov	r4,r16
 7009944:	d9400015 	stw	r5,0(sp)
 7009948:	700496c0 	call	700496c <__sinit>
 700994c:	d9400017 	ldw	r5,0(sp)
 7009950:	003feb06 	br	7009900 <__alt_data_end+0xff009900>

07009954 <_fstat_r>:
 7009954:	defffd04 	addi	sp,sp,-12
 7009958:	2805883a 	mov	r2,r5
 700995c:	dc000015 	stw	r16,0(sp)
 7009960:	0401c074 	movhi	r16,1793
 7009964:	dc400115 	stw	r17,4(sp)
 7009968:	840d2504 	addi	r16,r16,13460
 700996c:	2023883a 	mov	r17,r4
 7009970:	300b883a 	mov	r5,r6
 7009974:	1009883a 	mov	r4,r2
 7009978:	dfc00215 	stw	ra,8(sp)
 700997c:	80000015 	stw	zero,0(r16)
 7009980:	700d1340 	call	700d134 <fstat>
 7009984:	00ffffc4 	movi	r3,-1
 7009988:	10c00526 	beq	r2,r3,70099a0 <_fstat_r+0x4c>
 700998c:	dfc00217 	ldw	ra,8(sp)
 7009990:	dc400117 	ldw	r17,4(sp)
 7009994:	dc000017 	ldw	r16,0(sp)
 7009998:	dec00304 	addi	sp,sp,12
 700999c:	f800283a 	ret
 70099a0:	80c00017 	ldw	r3,0(r16)
 70099a4:	183ff926 	beq	r3,zero,700998c <__alt_data_end+0xff00998c>
 70099a8:	88c00015 	stw	r3,0(r17)
 70099ac:	003ff706 	br	700998c <__alt_data_end+0xff00998c>

070099b0 <_isatty_r>:
 70099b0:	defffd04 	addi	sp,sp,-12
 70099b4:	dc000015 	stw	r16,0(sp)
 70099b8:	0401c074 	movhi	r16,1793
 70099bc:	dc400115 	stw	r17,4(sp)
 70099c0:	840d2504 	addi	r16,r16,13460
 70099c4:	2023883a 	mov	r17,r4
 70099c8:	2809883a 	mov	r4,r5
 70099cc:	dfc00215 	stw	ra,8(sp)
 70099d0:	80000015 	stw	zero,0(r16)
 70099d4:	700d2200 	call	700d220 <isatty>
 70099d8:	00ffffc4 	movi	r3,-1
 70099dc:	10c00526 	beq	r2,r3,70099f4 <_isatty_r+0x44>
 70099e0:	dfc00217 	ldw	ra,8(sp)
 70099e4:	dc400117 	ldw	r17,4(sp)
 70099e8:	dc000017 	ldw	r16,0(sp)
 70099ec:	dec00304 	addi	sp,sp,12
 70099f0:	f800283a 	ret
 70099f4:	80c00017 	ldw	r3,0(r16)
 70099f8:	183ff926 	beq	r3,zero,70099e0 <__alt_data_end+0xff0099e0>
 70099fc:	88c00015 	stw	r3,0(r17)
 7009a00:	003ff706 	br	70099e0 <__alt_data_end+0xff0099e0>

07009a04 <_lseek_r>:
 7009a04:	defffd04 	addi	sp,sp,-12
 7009a08:	2805883a 	mov	r2,r5
 7009a0c:	dc000015 	stw	r16,0(sp)
 7009a10:	0401c074 	movhi	r16,1793
 7009a14:	dc400115 	stw	r17,4(sp)
 7009a18:	300b883a 	mov	r5,r6
 7009a1c:	840d2504 	addi	r16,r16,13460
 7009a20:	2023883a 	mov	r17,r4
 7009a24:	380d883a 	mov	r6,r7
 7009a28:	1009883a 	mov	r4,r2
 7009a2c:	dfc00215 	stw	ra,8(sp)
 7009a30:	80000015 	stw	zero,0(r16)
 7009a34:	700d3ec0 	call	700d3ec <lseek>
 7009a38:	00ffffc4 	movi	r3,-1
 7009a3c:	10c00526 	beq	r2,r3,7009a54 <_lseek_r+0x50>
 7009a40:	dfc00217 	ldw	ra,8(sp)
 7009a44:	dc400117 	ldw	r17,4(sp)
 7009a48:	dc000017 	ldw	r16,0(sp)
 7009a4c:	dec00304 	addi	sp,sp,12
 7009a50:	f800283a 	ret
 7009a54:	80c00017 	ldw	r3,0(r16)
 7009a58:	183ff926 	beq	r3,zero,7009a40 <__alt_data_end+0xff009a40>
 7009a5c:	88c00015 	stw	r3,0(r17)
 7009a60:	003ff706 	br	7009a40 <__alt_data_end+0xff009a40>

07009a64 <_read_r>:
 7009a64:	defffd04 	addi	sp,sp,-12
 7009a68:	2805883a 	mov	r2,r5
 7009a6c:	dc000015 	stw	r16,0(sp)
 7009a70:	0401c074 	movhi	r16,1793
 7009a74:	dc400115 	stw	r17,4(sp)
 7009a78:	300b883a 	mov	r5,r6
 7009a7c:	840d2504 	addi	r16,r16,13460
 7009a80:	2023883a 	mov	r17,r4
 7009a84:	380d883a 	mov	r6,r7
 7009a88:	1009883a 	mov	r4,r2
 7009a8c:	dfc00215 	stw	ra,8(sp)
 7009a90:	80000015 	stw	zero,0(r16)
 7009a94:	700d5c00 	call	700d5c0 <read>
 7009a98:	00ffffc4 	movi	r3,-1
 7009a9c:	10c00526 	beq	r2,r3,7009ab4 <_read_r+0x50>
 7009aa0:	dfc00217 	ldw	ra,8(sp)
 7009aa4:	dc400117 	ldw	r17,4(sp)
 7009aa8:	dc000017 	ldw	r16,0(sp)
 7009aac:	dec00304 	addi	sp,sp,12
 7009ab0:	f800283a 	ret
 7009ab4:	80c00017 	ldw	r3,0(r16)
 7009ab8:	183ff926 	beq	r3,zero,7009aa0 <__alt_data_end+0xff009aa0>
 7009abc:	88c00015 	stw	r3,0(r17)
 7009ac0:	003ff706 	br	7009aa0 <__alt_data_end+0xff009aa0>

07009ac4 <_wcrtomb_r>:
 7009ac4:	defff604 	addi	sp,sp,-40
 7009ac8:	0081c074 	movhi	r2,1793
 7009acc:	dc800815 	stw	r18,32(sp)
 7009ad0:	dc400715 	stw	r17,28(sp)
 7009ad4:	dc000615 	stw	r16,24(sp)
 7009ad8:	10864e04 	addi	r2,r2,6456
 7009adc:	dfc00915 	stw	ra,36(sp)
 7009ae0:	2021883a 	mov	r16,r4
 7009ae4:	3823883a 	mov	r17,r7
 7009ae8:	14800017 	ldw	r18,0(r2)
 7009aec:	28001426 	beq	r5,zero,7009b40 <_wcrtomb_r+0x7c>
 7009af0:	d9400415 	stw	r5,16(sp)
 7009af4:	d9800515 	stw	r6,20(sp)
 7009af8:	70054b00 	call	70054b0 <__locale_charset>
 7009afc:	d9800517 	ldw	r6,20(sp)
 7009b00:	d9400417 	ldw	r5,16(sp)
 7009b04:	100f883a 	mov	r7,r2
 7009b08:	dc400015 	stw	r17,0(sp)
 7009b0c:	8009883a 	mov	r4,r16
 7009b10:	903ee83a 	callr	r18
 7009b14:	00ffffc4 	movi	r3,-1
 7009b18:	10c0031e 	bne	r2,r3,7009b28 <_wcrtomb_r+0x64>
 7009b1c:	88000015 	stw	zero,0(r17)
 7009b20:	00c02284 	movi	r3,138
 7009b24:	80c00015 	stw	r3,0(r16)
 7009b28:	dfc00917 	ldw	ra,36(sp)
 7009b2c:	dc800817 	ldw	r18,32(sp)
 7009b30:	dc400717 	ldw	r17,28(sp)
 7009b34:	dc000617 	ldw	r16,24(sp)
 7009b38:	dec00a04 	addi	sp,sp,40
 7009b3c:	f800283a 	ret
 7009b40:	70054b00 	call	70054b0 <__locale_charset>
 7009b44:	100f883a 	mov	r7,r2
 7009b48:	dc400015 	stw	r17,0(sp)
 7009b4c:	000d883a 	mov	r6,zero
 7009b50:	d9400104 	addi	r5,sp,4
 7009b54:	8009883a 	mov	r4,r16
 7009b58:	903ee83a 	callr	r18
 7009b5c:	003fed06 	br	7009b14 <__alt_data_end+0xff009b14>

07009b60 <wcrtomb>:
 7009b60:	defff604 	addi	sp,sp,-40
 7009b64:	0081c074 	movhi	r2,1793
 7009b68:	dc800615 	stw	r18,24(sp)
 7009b6c:	dc400515 	stw	r17,20(sp)
 7009b70:	10864a04 	addi	r2,r2,6440
 7009b74:	dfc00915 	stw	ra,36(sp)
 7009b78:	dd000815 	stw	r20,32(sp)
 7009b7c:	dcc00715 	stw	r19,28(sp)
 7009b80:	dc000415 	stw	r16,16(sp)
 7009b84:	3025883a 	mov	r18,r6
 7009b88:	14400017 	ldw	r17,0(r2)
 7009b8c:	20001926 	beq	r4,zero,7009bf4 <wcrtomb+0x94>
 7009b90:	0081c074 	movhi	r2,1793
 7009b94:	10864e04 	addi	r2,r2,6456
 7009b98:	15000017 	ldw	r20,0(r2)
 7009b9c:	2021883a 	mov	r16,r4
 7009ba0:	2827883a 	mov	r19,r5
 7009ba4:	70054b00 	call	70054b0 <__locale_charset>
 7009ba8:	100f883a 	mov	r7,r2
 7009bac:	dc800015 	stw	r18,0(sp)
 7009bb0:	980d883a 	mov	r6,r19
 7009bb4:	800b883a 	mov	r5,r16
 7009bb8:	8809883a 	mov	r4,r17
 7009bbc:	a03ee83a 	callr	r20
 7009bc0:	00ffffc4 	movi	r3,-1
 7009bc4:	10c0031e 	bne	r2,r3,7009bd4 <wcrtomb+0x74>
 7009bc8:	90000015 	stw	zero,0(r18)
 7009bcc:	00c02284 	movi	r3,138
 7009bd0:	88c00015 	stw	r3,0(r17)
 7009bd4:	dfc00917 	ldw	ra,36(sp)
 7009bd8:	dd000817 	ldw	r20,32(sp)
 7009bdc:	dcc00717 	ldw	r19,28(sp)
 7009be0:	dc800617 	ldw	r18,24(sp)
 7009be4:	dc400517 	ldw	r17,20(sp)
 7009be8:	dc000417 	ldw	r16,16(sp)
 7009bec:	dec00a04 	addi	sp,sp,40
 7009bf0:	f800283a 	ret
 7009bf4:	0081c074 	movhi	r2,1793
 7009bf8:	10864e04 	addi	r2,r2,6456
 7009bfc:	14000017 	ldw	r16,0(r2)
 7009c00:	70054b00 	call	70054b0 <__locale_charset>
 7009c04:	100f883a 	mov	r7,r2
 7009c08:	dc800015 	stw	r18,0(sp)
 7009c0c:	000d883a 	mov	r6,zero
 7009c10:	d9400104 	addi	r5,sp,4
 7009c14:	8809883a 	mov	r4,r17
 7009c18:	803ee83a 	callr	r16
 7009c1c:	003fe806 	br	7009bc0 <__alt_data_end+0xff009bc0>

07009c20 <__ascii_wctomb>:
 7009c20:	28000526 	beq	r5,zero,7009c38 <__ascii_wctomb+0x18>
 7009c24:	00803fc4 	movi	r2,255
 7009c28:	11800536 	bltu	r2,r6,7009c40 <__ascii_wctomb+0x20>
 7009c2c:	29800005 	stb	r6,0(r5)
 7009c30:	00800044 	movi	r2,1
 7009c34:	f800283a 	ret
 7009c38:	0005883a 	mov	r2,zero
 7009c3c:	f800283a 	ret
 7009c40:	00802284 	movi	r2,138
 7009c44:	20800015 	stw	r2,0(r4)
 7009c48:	00bfffc4 	movi	r2,-1
 7009c4c:	f800283a 	ret

07009c50 <_wctomb_r>:
 7009c50:	0081c074 	movhi	r2,1793
 7009c54:	defff904 	addi	sp,sp,-28
 7009c58:	10864e04 	addi	r2,r2,6456
 7009c5c:	dfc00615 	stw	ra,24(sp)
 7009c60:	dc400515 	stw	r17,20(sp)
 7009c64:	dc000415 	stw	r16,16(sp)
 7009c68:	3823883a 	mov	r17,r7
 7009c6c:	14000017 	ldw	r16,0(r2)
 7009c70:	d9000115 	stw	r4,4(sp)
 7009c74:	d9400215 	stw	r5,8(sp)
 7009c78:	d9800315 	stw	r6,12(sp)
 7009c7c:	70054b00 	call	70054b0 <__locale_charset>
 7009c80:	d9800317 	ldw	r6,12(sp)
 7009c84:	d9400217 	ldw	r5,8(sp)
 7009c88:	d9000117 	ldw	r4,4(sp)
 7009c8c:	100f883a 	mov	r7,r2
 7009c90:	dc400015 	stw	r17,0(sp)
 7009c94:	803ee83a 	callr	r16
 7009c98:	dfc00617 	ldw	ra,24(sp)
 7009c9c:	dc400517 	ldw	r17,20(sp)
 7009ca0:	dc000417 	ldw	r16,16(sp)
 7009ca4:	dec00704 	addi	sp,sp,28
 7009ca8:	f800283a 	ret

07009cac <__udivdi3>:
 7009cac:	defff504 	addi	sp,sp,-44
 7009cb0:	dcc00415 	stw	r19,16(sp)
 7009cb4:	dc000115 	stw	r16,4(sp)
 7009cb8:	dfc00a15 	stw	ra,40(sp)
 7009cbc:	df000915 	stw	fp,36(sp)
 7009cc0:	ddc00815 	stw	r23,32(sp)
 7009cc4:	dd800715 	stw	r22,28(sp)
 7009cc8:	dd400615 	stw	r21,24(sp)
 7009ccc:	dd000515 	stw	r20,20(sp)
 7009cd0:	dc800315 	stw	r18,12(sp)
 7009cd4:	dc400215 	stw	r17,8(sp)
 7009cd8:	2027883a 	mov	r19,r4
 7009cdc:	2821883a 	mov	r16,r5
 7009ce0:	3800411e 	bne	r7,zero,7009de8 <__udivdi3+0x13c>
 7009ce4:	3023883a 	mov	r17,r6
 7009ce8:	2025883a 	mov	r18,r4
 7009cec:	2980522e 	bgeu	r5,r6,7009e38 <__udivdi3+0x18c>
 7009cf0:	00bfffd4 	movui	r2,65535
 7009cf4:	282d883a 	mov	r22,r5
 7009cf8:	1180a836 	bltu	r2,r6,7009f9c <__udivdi3+0x2f0>
 7009cfc:	00803fc4 	movi	r2,255
 7009d00:	1185803a 	cmpltu	r2,r2,r6
 7009d04:	100490fa 	slli	r2,r2,3
 7009d08:	3086d83a 	srl	r3,r6,r2
 7009d0c:	0101c074 	movhi	r4,1793
 7009d10:	213f4904 	addi	r4,r4,-732
 7009d14:	20c7883a 	add	r3,r4,r3
 7009d18:	18c00003 	ldbu	r3,0(r3)
 7009d1c:	1885883a 	add	r2,r3,r2
 7009d20:	00c00804 	movi	r3,32
 7009d24:	1887c83a 	sub	r3,r3,r2
 7009d28:	18000526 	beq	r3,zero,7009d40 <__udivdi3+0x94>
 7009d2c:	80e0983a 	sll	r16,r16,r3
 7009d30:	9884d83a 	srl	r2,r19,r2
 7009d34:	30e2983a 	sll	r17,r6,r3
 7009d38:	98e4983a 	sll	r18,r19,r3
 7009d3c:	142cb03a 	or	r22,r2,r16
 7009d40:	882ad43a 	srli	r21,r17,16
 7009d44:	b009883a 	mov	r4,r22
 7009d48:	8d3fffcc 	andi	r20,r17,65535
 7009d4c:	a80b883a 	mov	r5,r21
 7009d50:	700a8b80 	call	700a8b8 <__umodsi3>
 7009d54:	b009883a 	mov	r4,r22
 7009d58:	a80b883a 	mov	r5,r21
 7009d5c:	1027883a 	mov	r19,r2
 7009d60:	700a8540 	call	700a854 <__udivsi3>
 7009d64:	102d883a 	mov	r22,r2
 7009d68:	9826943a 	slli	r19,r19,16
 7009d6c:	9004d43a 	srli	r2,r18,16
 7009d70:	a5a1383a 	mul	r16,r20,r22
 7009d74:	14c4b03a 	or	r2,r2,r19
 7009d78:	1400052e 	bgeu	r2,r16,7009d90 <__udivdi3+0xe4>
 7009d7c:	1445883a 	add	r2,r2,r17
 7009d80:	b0ffffc4 	addi	r3,r22,-1
 7009d84:	14400136 	bltu	r2,r17,7009d8c <__udivdi3+0xe0>
 7009d88:	14012336 	bltu	r2,r16,700a218 <__udivdi3+0x56c>
 7009d8c:	182d883a 	mov	r22,r3
 7009d90:	1421c83a 	sub	r16,r2,r16
 7009d94:	a80b883a 	mov	r5,r21
 7009d98:	8009883a 	mov	r4,r16
 7009d9c:	700a8b80 	call	700a8b8 <__umodsi3>
 7009da0:	1027883a 	mov	r19,r2
 7009da4:	a80b883a 	mov	r5,r21
 7009da8:	8009883a 	mov	r4,r16
 7009dac:	700a8540 	call	700a854 <__udivsi3>
 7009db0:	9826943a 	slli	r19,r19,16
 7009db4:	a0a9383a 	mul	r20,r20,r2
 7009db8:	94bfffcc 	andi	r18,r18,65535
 7009dbc:	94e4b03a 	or	r18,r18,r19
 7009dc0:	9500052e 	bgeu	r18,r20,7009dd8 <__udivdi3+0x12c>
 7009dc4:	8ca5883a 	add	r18,r17,r18
 7009dc8:	10ffffc4 	addi	r3,r2,-1
 7009dcc:	9440f136 	bltu	r18,r17,700a194 <__udivdi3+0x4e8>
 7009dd0:	9500f02e 	bgeu	r18,r20,700a194 <__udivdi3+0x4e8>
 7009dd4:	10bfff84 	addi	r2,r2,-2
 7009dd8:	b00c943a 	slli	r6,r22,16
 7009ddc:	0007883a 	mov	r3,zero
 7009de0:	3084b03a 	or	r2,r6,r2
 7009de4:	00005906 	br	7009f4c <__udivdi3+0x2a0>
 7009de8:	29c05636 	bltu	r5,r7,7009f44 <__udivdi3+0x298>
 7009dec:	00bfffd4 	movui	r2,65535
 7009df0:	11c0622e 	bgeu	r2,r7,7009f7c <__udivdi3+0x2d0>
 7009df4:	00804034 	movhi	r2,256
 7009df8:	10bfffc4 	addi	r2,r2,-1
 7009dfc:	11c0ee36 	bltu	r2,r7,700a1b8 <__udivdi3+0x50c>
 7009e00:	00800404 	movi	r2,16
 7009e04:	3886d83a 	srl	r3,r7,r2
 7009e08:	0101c074 	movhi	r4,1793
 7009e0c:	213f4904 	addi	r4,r4,-732
 7009e10:	20c7883a 	add	r3,r4,r3
 7009e14:	18c00003 	ldbu	r3,0(r3)
 7009e18:	05400804 	movi	r21,32
 7009e1c:	1885883a 	add	r2,r3,r2
 7009e20:	a8abc83a 	sub	r21,r21,r2
 7009e24:	a800621e 	bne	r21,zero,7009fb0 <__udivdi3+0x304>
 7009e28:	3c00e936 	bltu	r7,r16,700a1d0 <__udivdi3+0x524>
 7009e2c:	9985403a 	cmpgeu	r2,r19,r6
 7009e30:	0007883a 	mov	r3,zero
 7009e34:	00004506 	br	7009f4c <__udivdi3+0x2a0>
 7009e38:	3000041e 	bne	r6,zero,7009e4c <__udivdi3+0x1a0>
 7009e3c:	000b883a 	mov	r5,zero
 7009e40:	01000044 	movi	r4,1
 7009e44:	700a8540 	call	700a854 <__udivsi3>
 7009e48:	1023883a 	mov	r17,r2
 7009e4c:	00bfffd4 	movui	r2,65535
 7009e50:	14404e2e 	bgeu	r2,r17,7009f8c <__udivdi3+0x2e0>
 7009e54:	00804034 	movhi	r2,256
 7009e58:	10bfffc4 	addi	r2,r2,-1
 7009e5c:	1440d836 	bltu	r2,r17,700a1c0 <__udivdi3+0x514>
 7009e60:	00800404 	movi	r2,16
 7009e64:	8886d83a 	srl	r3,r17,r2
 7009e68:	0101c074 	movhi	r4,1793
 7009e6c:	213f4904 	addi	r4,r4,-732
 7009e70:	20c7883a 	add	r3,r4,r3
 7009e74:	18c00003 	ldbu	r3,0(r3)
 7009e78:	1885883a 	add	r2,r3,r2
 7009e7c:	00c00804 	movi	r3,32
 7009e80:	1887c83a 	sub	r3,r3,r2
 7009e84:	18008f1e 	bne	r3,zero,700a0c4 <__udivdi3+0x418>
 7009e88:	882ad43a 	srli	r21,r17,16
 7009e8c:	8461c83a 	sub	r16,r16,r17
 7009e90:	8d3fffcc 	andi	r20,r17,65535
 7009e94:	00c00044 	movi	r3,1
 7009e98:	8009883a 	mov	r4,r16
 7009e9c:	a80b883a 	mov	r5,r21
 7009ea0:	d8c00015 	stw	r3,0(sp)
 7009ea4:	700a8b80 	call	700a8b8 <__umodsi3>
 7009ea8:	8009883a 	mov	r4,r16
 7009eac:	a80b883a 	mov	r5,r21
 7009eb0:	1027883a 	mov	r19,r2
 7009eb4:	700a8540 	call	700a854 <__udivsi3>
 7009eb8:	9826943a 	slli	r19,r19,16
 7009ebc:	9008d43a 	srli	r4,r18,16
 7009ec0:	1521383a 	mul	r16,r2,r20
 7009ec4:	102d883a 	mov	r22,r2
 7009ec8:	24c8b03a 	or	r4,r4,r19
 7009ecc:	d8c00017 	ldw	r3,0(sp)
 7009ed0:	2400052e 	bgeu	r4,r16,7009ee8 <__udivdi3+0x23c>
 7009ed4:	2449883a 	add	r4,r4,r17
 7009ed8:	b0bfffc4 	addi	r2,r22,-1
 7009edc:	24400136 	bltu	r4,r17,7009ee4 <__udivdi3+0x238>
 7009ee0:	2400ca36 	bltu	r4,r16,700a20c <__udivdi3+0x560>
 7009ee4:	102d883a 	mov	r22,r2
 7009ee8:	2421c83a 	sub	r16,r4,r16
 7009eec:	a80b883a 	mov	r5,r21
 7009ef0:	8009883a 	mov	r4,r16
 7009ef4:	d8c00015 	stw	r3,0(sp)
 7009ef8:	700a8b80 	call	700a8b8 <__umodsi3>
 7009efc:	1027883a 	mov	r19,r2
 7009f00:	a80b883a 	mov	r5,r21
 7009f04:	8009883a 	mov	r4,r16
 7009f08:	700a8540 	call	700a854 <__udivsi3>
 7009f0c:	9826943a 	slli	r19,r19,16
 7009f10:	1529383a 	mul	r20,r2,r20
 7009f14:	94bfffcc 	andi	r18,r18,65535
 7009f18:	94e4b03a 	or	r18,r18,r19
 7009f1c:	d8c00017 	ldw	r3,0(sp)
 7009f20:	9500052e 	bgeu	r18,r20,7009f38 <__udivdi3+0x28c>
 7009f24:	8ca5883a 	add	r18,r17,r18
 7009f28:	113fffc4 	addi	r4,r2,-1
 7009f2c:	94409736 	bltu	r18,r17,700a18c <__udivdi3+0x4e0>
 7009f30:	9500962e 	bgeu	r18,r20,700a18c <__udivdi3+0x4e0>
 7009f34:	10bfff84 	addi	r2,r2,-2
 7009f38:	b00c943a 	slli	r6,r22,16
 7009f3c:	3084b03a 	or	r2,r6,r2
 7009f40:	00000206 	br	7009f4c <__udivdi3+0x2a0>
 7009f44:	0007883a 	mov	r3,zero
 7009f48:	0005883a 	mov	r2,zero
 7009f4c:	dfc00a17 	ldw	ra,40(sp)
 7009f50:	df000917 	ldw	fp,36(sp)
 7009f54:	ddc00817 	ldw	r23,32(sp)
 7009f58:	dd800717 	ldw	r22,28(sp)
 7009f5c:	dd400617 	ldw	r21,24(sp)
 7009f60:	dd000517 	ldw	r20,20(sp)
 7009f64:	dcc00417 	ldw	r19,16(sp)
 7009f68:	dc800317 	ldw	r18,12(sp)
 7009f6c:	dc400217 	ldw	r17,8(sp)
 7009f70:	dc000117 	ldw	r16,4(sp)
 7009f74:	dec00b04 	addi	sp,sp,44
 7009f78:	f800283a 	ret
 7009f7c:	00803fc4 	movi	r2,255
 7009f80:	11c5803a 	cmpltu	r2,r2,r7
 7009f84:	100490fa 	slli	r2,r2,3
 7009f88:	003f9e06 	br	7009e04 <__alt_data_end+0xff009e04>
 7009f8c:	00803fc4 	movi	r2,255
 7009f90:	1445803a 	cmpltu	r2,r2,r17
 7009f94:	100490fa 	slli	r2,r2,3
 7009f98:	003fb206 	br	7009e64 <__alt_data_end+0xff009e64>
 7009f9c:	00804034 	movhi	r2,256
 7009fa0:	10bfffc4 	addi	r2,r2,-1
 7009fa4:	11808836 	bltu	r2,r6,700a1c8 <__udivdi3+0x51c>
 7009fa8:	00800404 	movi	r2,16
 7009fac:	003f5606 	br	7009d08 <__alt_data_end+0xff009d08>
 7009fb0:	30aed83a 	srl	r23,r6,r2
 7009fb4:	3d4e983a 	sll	r7,r7,r21
 7009fb8:	80acd83a 	srl	r22,r16,r2
 7009fbc:	9884d83a 	srl	r2,r19,r2
 7009fc0:	3deeb03a 	or	r23,r7,r23
 7009fc4:	b824d43a 	srli	r18,r23,16
 7009fc8:	8560983a 	sll	r16,r16,r21
 7009fcc:	b009883a 	mov	r4,r22
 7009fd0:	900b883a 	mov	r5,r18
 7009fd4:	3568983a 	sll	r20,r6,r21
 7009fd8:	1420b03a 	or	r16,r2,r16
 7009fdc:	700a8b80 	call	700a8b8 <__umodsi3>
 7009fe0:	b009883a 	mov	r4,r22
 7009fe4:	900b883a 	mov	r5,r18
 7009fe8:	1023883a 	mov	r17,r2
 7009fec:	700a8540 	call	700a854 <__udivsi3>
 7009ff0:	8808943a 	slli	r4,r17,16
 7009ff4:	bf3fffcc 	andi	fp,r23,65535
 7009ff8:	8006d43a 	srli	r3,r16,16
 7009ffc:	e0a3383a 	mul	r17,fp,r2
 700a000:	100d883a 	mov	r6,r2
 700a004:	1906b03a 	or	r3,r3,r4
 700a008:	1c40042e 	bgeu	r3,r17,700a01c <__udivdi3+0x370>
 700a00c:	1dc7883a 	add	r3,r3,r23
 700a010:	10bfffc4 	addi	r2,r2,-1
 700a014:	1dc0752e 	bgeu	r3,r23,700a1ec <__udivdi3+0x540>
 700a018:	100d883a 	mov	r6,r2
 700a01c:	1c63c83a 	sub	r17,r3,r17
 700a020:	900b883a 	mov	r5,r18
 700a024:	8809883a 	mov	r4,r17
 700a028:	d9800015 	stw	r6,0(sp)
 700a02c:	700a8b80 	call	700a8b8 <__umodsi3>
 700a030:	102d883a 	mov	r22,r2
 700a034:	8809883a 	mov	r4,r17
 700a038:	900b883a 	mov	r5,r18
 700a03c:	700a8540 	call	700a854 <__udivsi3>
 700a040:	b02c943a 	slli	r22,r22,16
 700a044:	e089383a 	mul	r4,fp,r2
 700a048:	843fffcc 	andi	r16,r16,65535
 700a04c:	85a0b03a 	or	r16,r16,r22
 700a050:	d9800017 	ldw	r6,0(sp)
 700a054:	8100042e 	bgeu	r16,r4,700a068 <__udivdi3+0x3bc>
 700a058:	85e1883a 	add	r16,r16,r23
 700a05c:	10ffffc4 	addi	r3,r2,-1
 700a060:	85c05e2e 	bgeu	r16,r23,700a1dc <__udivdi3+0x530>
 700a064:	1805883a 	mov	r2,r3
 700a068:	300c943a 	slli	r6,r6,16
 700a06c:	a17fffcc 	andi	r5,r20,65535
 700a070:	a028d43a 	srli	r20,r20,16
 700a074:	3084b03a 	or	r2,r6,r2
 700a078:	10ffffcc 	andi	r3,r2,65535
 700a07c:	100cd43a 	srli	r6,r2,16
 700a080:	194f383a 	mul	r7,r3,r5
 700a084:	1d07383a 	mul	r3,r3,r20
 700a088:	314b383a 	mul	r5,r6,r5
 700a08c:	3810d43a 	srli	r8,r7,16
 700a090:	8121c83a 	sub	r16,r16,r4
 700a094:	1947883a 	add	r3,r3,r5
 700a098:	40c7883a 	add	r3,r8,r3
 700a09c:	350d383a 	mul	r6,r6,r20
 700a0a0:	1940022e 	bgeu	r3,r5,700a0ac <__udivdi3+0x400>
 700a0a4:	01000074 	movhi	r4,1
 700a0a8:	310d883a 	add	r6,r6,r4
 700a0ac:	1828d43a 	srli	r20,r3,16
 700a0b0:	a18d883a 	add	r6,r20,r6
 700a0b4:	81803e36 	bltu	r16,r6,700a1b0 <__udivdi3+0x504>
 700a0b8:	81803826 	beq	r16,r6,700a19c <__udivdi3+0x4f0>
 700a0bc:	0007883a 	mov	r3,zero
 700a0c0:	003fa206 	br	7009f4c <__alt_data_end+0xff009f4c>
 700a0c4:	88e2983a 	sll	r17,r17,r3
 700a0c8:	80a8d83a 	srl	r20,r16,r2
 700a0cc:	80e0983a 	sll	r16,r16,r3
 700a0d0:	882ad43a 	srli	r21,r17,16
 700a0d4:	9884d83a 	srl	r2,r19,r2
 700a0d8:	a009883a 	mov	r4,r20
 700a0dc:	a80b883a 	mov	r5,r21
 700a0e0:	142eb03a 	or	r23,r2,r16
 700a0e4:	98e4983a 	sll	r18,r19,r3
 700a0e8:	700a8b80 	call	700a8b8 <__umodsi3>
 700a0ec:	a009883a 	mov	r4,r20
 700a0f0:	a80b883a 	mov	r5,r21
 700a0f4:	1021883a 	mov	r16,r2
 700a0f8:	700a8540 	call	700a854 <__udivsi3>
 700a0fc:	1039883a 	mov	fp,r2
 700a100:	8d3fffcc 	andi	r20,r17,65535
 700a104:	8020943a 	slli	r16,r16,16
 700a108:	b804d43a 	srli	r2,r23,16
 700a10c:	a72d383a 	mul	r22,r20,fp
 700a110:	1404b03a 	or	r2,r2,r16
 700a114:	1580062e 	bgeu	r2,r22,700a130 <__udivdi3+0x484>
 700a118:	1445883a 	add	r2,r2,r17
 700a11c:	e0ffffc4 	addi	r3,fp,-1
 700a120:	14403836 	bltu	r2,r17,700a204 <__udivdi3+0x558>
 700a124:	1580372e 	bgeu	r2,r22,700a204 <__udivdi3+0x558>
 700a128:	e73fff84 	addi	fp,fp,-2
 700a12c:	1445883a 	add	r2,r2,r17
 700a130:	15adc83a 	sub	r22,r2,r22
 700a134:	a80b883a 	mov	r5,r21
 700a138:	b009883a 	mov	r4,r22
 700a13c:	700a8b80 	call	700a8b8 <__umodsi3>
 700a140:	1027883a 	mov	r19,r2
 700a144:	b009883a 	mov	r4,r22
 700a148:	a80b883a 	mov	r5,r21
 700a14c:	700a8540 	call	700a854 <__udivsi3>
 700a150:	9826943a 	slli	r19,r19,16
 700a154:	a0a1383a 	mul	r16,r20,r2
 700a158:	b93fffcc 	andi	r4,r23,65535
 700a15c:	24c8b03a 	or	r4,r4,r19
 700a160:	2400062e 	bgeu	r4,r16,700a17c <__udivdi3+0x4d0>
 700a164:	2449883a 	add	r4,r4,r17
 700a168:	10ffffc4 	addi	r3,r2,-1
 700a16c:	24402336 	bltu	r4,r17,700a1fc <__udivdi3+0x550>
 700a170:	2400222e 	bgeu	r4,r16,700a1fc <__udivdi3+0x550>
 700a174:	10bfff84 	addi	r2,r2,-2
 700a178:	2449883a 	add	r4,r4,r17
 700a17c:	e038943a 	slli	fp,fp,16
 700a180:	2421c83a 	sub	r16,r4,r16
 700a184:	e086b03a 	or	r3,fp,r2
 700a188:	003f4306 	br	7009e98 <__alt_data_end+0xff009e98>
 700a18c:	2005883a 	mov	r2,r4
 700a190:	003f6906 	br	7009f38 <__alt_data_end+0xff009f38>
 700a194:	1805883a 	mov	r2,r3
 700a198:	003f0f06 	br	7009dd8 <__alt_data_end+0xff009dd8>
 700a19c:	1806943a 	slli	r3,r3,16
 700a1a0:	9d66983a 	sll	r19,r19,r21
 700a1a4:	39ffffcc 	andi	r7,r7,65535
 700a1a8:	19c7883a 	add	r3,r3,r7
 700a1ac:	98ffc32e 	bgeu	r19,r3,700a0bc <__alt_data_end+0xff00a0bc>
 700a1b0:	10bfffc4 	addi	r2,r2,-1
 700a1b4:	003fc106 	br	700a0bc <__alt_data_end+0xff00a0bc>
 700a1b8:	00800604 	movi	r2,24
 700a1bc:	003f1106 	br	7009e04 <__alt_data_end+0xff009e04>
 700a1c0:	00800604 	movi	r2,24
 700a1c4:	003f2706 	br	7009e64 <__alt_data_end+0xff009e64>
 700a1c8:	00800604 	movi	r2,24
 700a1cc:	003ece06 	br	7009d08 <__alt_data_end+0xff009d08>
 700a1d0:	0007883a 	mov	r3,zero
 700a1d4:	00800044 	movi	r2,1
 700a1d8:	003f5c06 	br	7009f4c <__alt_data_end+0xff009f4c>
 700a1dc:	813fa12e 	bgeu	r16,r4,700a064 <__alt_data_end+0xff00a064>
 700a1e0:	10bfff84 	addi	r2,r2,-2
 700a1e4:	85e1883a 	add	r16,r16,r23
 700a1e8:	003f9f06 	br	700a068 <__alt_data_end+0xff00a068>
 700a1ec:	1c7f8a2e 	bgeu	r3,r17,700a018 <__alt_data_end+0xff00a018>
 700a1f0:	31bfff84 	addi	r6,r6,-2
 700a1f4:	1dc7883a 	add	r3,r3,r23
 700a1f8:	003f8806 	br	700a01c <__alt_data_end+0xff00a01c>
 700a1fc:	1805883a 	mov	r2,r3
 700a200:	003fde06 	br	700a17c <__alt_data_end+0xff00a17c>
 700a204:	1839883a 	mov	fp,r3
 700a208:	003fc906 	br	700a130 <__alt_data_end+0xff00a130>
 700a20c:	b5bfff84 	addi	r22,r22,-2
 700a210:	2449883a 	add	r4,r4,r17
 700a214:	003f3406 	br	7009ee8 <__alt_data_end+0xff009ee8>
 700a218:	b5bfff84 	addi	r22,r22,-2
 700a21c:	1445883a 	add	r2,r2,r17
 700a220:	003edb06 	br	7009d90 <__alt_data_end+0xff009d90>

0700a224 <__umoddi3>:
 700a224:	defff404 	addi	sp,sp,-48
 700a228:	df000a15 	stw	fp,40(sp)
 700a22c:	dc400315 	stw	r17,12(sp)
 700a230:	dc000215 	stw	r16,8(sp)
 700a234:	dfc00b15 	stw	ra,44(sp)
 700a238:	ddc00915 	stw	r23,36(sp)
 700a23c:	dd800815 	stw	r22,32(sp)
 700a240:	dd400715 	stw	r21,28(sp)
 700a244:	dd000615 	stw	r20,24(sp)
 700a248:	dcc00515 	stw	r19,20(sp)
 700a24c:	dc800415 	stw	r18,16(sp)
 700a250:	2021883a 	mov	r16,r4
 700a254:	2823883a 	mov	r17,r5
 700a258:	2839883a 	mov	fp,r5
 700a25c:	38003c1e 	bne	r7,zero,700a350 <__umoddi3+0x12c>
 700a260:	3027883a 	mov	r19,r6
 700a264:	2029883a 	mov	r20,r4
 700a268:	2980512e 	bgeu	r5,r6,700a3b0 <__umoddi3+0x18c>
 700a26c:	00bfffd4 	movui	r2,65535
 700a270:	11809a36 	bltu	r2,r6,700a4dc <__umoddi3+0x2b8>
 700a274:	01003fc4 	movi	r4,255
 700a278:	2189803a 	cmpltu	r4,r4,r6
 700a27c:	200890fa 	slli	r4,r4,3
 700a280:	3104d83a 	srl	r2,r6,r4
 700a284:	00c1c074 	movhi	r3,1793
 700a288:	18ff4904 	addi	r3,r3,-732
 700a28c:	1885883a 	add	r2,r3,r2
 700a290:	10c00003 	ldbu	r3,0(r2)
 700a294:	00800804 	movi	r2,32
 700a298:	1909883a 	add	r4,r3,r4
 700a29c:	1125c83a 	sub	r18,r2,r4
 700a2a0:	90000526 	beq	r18,zero,700a2b8 <__umoddi3+0x94>
 700a2a4:	8ca2983a 	sll	r17,r17,r18
 700a2a8:	8108d83a 	srl	r4,r16,r4
 700a2ac:	34a6983a 	sll	r19,r6,r18
 700a2b0:	84a8983a 	sll	r20,r16,r18
 700a2b4:	2478b03a 	or	fp,r4,r17
 700a2b8:	982ed43a 	srli	r23,r19,16
 700a2bc:	e009883a 	mov	r4,fp
 700a2c0:	9dbfffcc 	andi	r22,r19,65535
 700a2c4:	b80b883a 	mov	r5,r23
 700a2c8:	700a8b80 	call	700a8b8 <__umodsi3>
 700a2cc:	e009883a 	mov	r4,fp
 700a2d0:	b80b883a 	mov	r5,r23
 700a2d4:	102b883a 	mov	r21,r2
 700a2d8:	700a8540 	call	700a854 <__udivsi3>
 700a2dc:	a806943a 	slli	r3,r21,16
 700a2e0:	a008d43a 	srli	r4,r20,16
 700a2e4:	b085383a 	mul	r2,r22,r2
 700a2e8:	20c8b03a 	or	r4,r4,r3
 700a2ec:	2080032e 	bgeu	r4,r2,700a2fc <__umoddi3+0xd8>
 700a2f0:	24c9883a 	add	r4,r4,r19
 700a2f4:	24c00136 	bltu	r4,r19,700a2fc <__umoddi3+0xd8>
 700a2f8:	20811036 	bltu	r4,r2,700a73c <__umoddi3+0x518>
 700a2fc:	20abc83a 	sub	r21,r4,r2
 700a300:	b80b883a 	mov	r5,r23
 700a304:	a809883a 	mov	r4,r21
 700a308:	700a8b80 	call	700a8b8 <__umodsi3>
 700a30c:	1023883a 	mov	r17,r2
 700a310:	b80b883a 	mov	r5,r23
 700a314:	a809883a 	mov	r4,r21
 700a318:	700a8540 	call	700a854 <__udivsi3>
 700a31c:	8822943a 	slli	r17,r17,16
 700a320:	b085383a 	mul	r2,r22,r2
 700a324:	a0ffffcc 	andi	r3,r20,65535
 700a328:	1c46b03a 	or	r3,r3,r17
 700a32c:	1880042e 	bgeu	r3,r2,700a340 <__umoddi3+0x11c>
 700a330:	1cc7883a 	add	r3,r3,r19
 700a334:	1cc00236 	bltu	r3,r19,700a340 <__umoddi3+0x11c>
 700a338:	1880012e 	bgeu	r3,r2,700a340 <__umoddi3+0x11c>
 700a33c:	1cc7883a 	add	r3,r3,r19
 700a340:	1885c83a 	sub	r2,r3,r2
 700a344:	1484d83a 	srl	r2,r2,r18
 700a348:	0007883a 	mov	r3,zero
 700a34c:	00004f06 	br	700a48c <__umoddi3+0x268>
 700a350:	29c04c36 	bltu	r5,r7,700a484 <__umoddi3+0x260>
 700a354:	00bfffd4 	movui	r2,65535
 700a358:	11c0582e 	bgeu	r2,r7,700a4bc <__umoddi3+0x298>
 700a35c:	00804034 	movhi	r2,256
 700a360:	10bfffc4 	addi	r2,r2,-1
 700a364:	11c0e736 	bltu	r2,r7,700a704 <__umoddi3+0x4e0>
 700a368:	01000404 	movi	r4,16
 700a36c:	3904d83a 	srl	r2,r7,r4
 700a370:	00c1c074 	movhi	r3,1793
 700a374:	18ff4904 	addi	r3,r3,-732
 700a378:	1885883a 	add	r2,r3,r2
 700a37c:	14c00003 	ldbu	r19,0(r2)
 700a380:	00c00804 	movi	r3,32
 700a384:	9927883a 	add	r19,r19,r4
 700a388:	1ce9c83a 	sub	r20,r3,r19
 700a38c:	a000581e 	bne	r20,zero,700a4f0 <__umoddi3+0x2cc>
 700a390:	3c400136 	bltu	r7,r17,700a398 <__umoddi3+0x174>
 700a394:	8180eb36 	bltu	r16,r6,700a744 <__umoddi3+0x520>
 700a398:	8185c83a 	sub	r2,r16,r6
 700a39c:	89e3c83a 	sub	r17,r17,r7
 700a3a0:	8089803a 	cmpltu	r4,r16,r2
 700a3a4:	8939c83a 	sub	fp,r17,r4
 700a3a8:	e007883a 	mov	r3,fp
 700a3ac:	00003706 	br	700a48c <__umoddi3+0x268>
 700a3b0:	3000041e 	bne	r6,zero,700a3c4 <__umoddi3+0x1a0>
 700a3b4:	000b883a 	mov	r5,zero
 700a3b8:	01000044 	movi	r4,1
 700a3bc:	700a8540 	call	700a854 <__udivsi3>
 700a3c0:	1027883a 	mov	r19,r2
 700a3c4:	00bfffd4 	movui	r2,65535
 700a3c8:	14c0402e 	bgeu	r2,r19,700a4cc <__umoddi3+0x2a8>
 700a3cc:	00804034 	movhi	r2,256
 700a3d0:	10bfffc4 	addi	r2,r2,-1
 700a3d4:	14c0cd36 	bltu	r2,r19,700a70c <__umoddi3+0x4e8>
 700a3d8:	00800404 	movi	r2,16
 700a3dc:	9886d83a 	srl	r3,r19,r2
 700a3e0:	0101c074 	movhi	r4,1793
 700a3e4:	213f4904 	addi	r4,r4,-732
 700a3e8:	20c7883a 	add	r3,r4,r3
 700a3ec:	18c00003 	ldbu	r3,0(r3)
 700a3f0:	1887883a 	add	r3,r3,r2
 700a3f4:	00800804 	movi	r2,32
 700a3f8:	10e5c83a 	sub	r18,r2,r3
 700a3fc:	9000901e 	bne	r18,zero,700a640 <__umoddi3+0x41c>
 700a400:	982cd43a 	srli	r22,r19,16
 700a404:	8ce3c83a 	sub	r17,r17,r19
 700a408:	9d7fffcc 	andi	r21,r19,65535
 700a40c:	b00b883a 	mov	r5,r22
 700a410:	8809883a 	mov	r4,r17
 700a414:	700a8b80 	call	700a8b8 <__umodsi3>
 700a418:	8809883a 	mov	r4,r17
 700a41c:	b00b883a 	mov	r5,r22
 700a420:	1021883a 	mov	r16,r2
 700a424:	700a8540 	call	700a854 <__udivsi3>
 700a428:	8006943a 	slli	r3,r16,16
 700a42c:	a008d43a 	srli	r4,r20,16
 700a430:	1545383a 	mul	r2,r2,r21
 700a434:	20c8b03a 	or	r4,r4,r3
 700a438:	2080042e 	bgeu	r4,r2,700a44c <__umoddi3+0x228>
 700a43c:	24c9883a 	add	r4,r4,r19
 700a440:	24c00236 	bltu	r4,r19,700a44c <__umoddi3+0x228>
 700a444:	2080012e 	bgeu	r4,r2,700a44c <__umoddi3+0x228>
 700a448:	24c9883a 	add	r4,r4,r19
 700a44c:	20a1c83a 	sub	r16,r4,r2
 700a450:	b00b883a 	mov	r5,r22
 700a454:	8009883a 	mov	r4,r16
 700a458:	700a8b80 	call	700a8b8 <__umodsi3>
 700a45c:	1023883a 	mov	r17,r2
 700a460:	b00b883a 	mov	r5,r22
 700a464:	8009883a 	mov	r4,r16
 700a468:	700a8540 	call	700a854 <__udivsi3>
 700a46c:	8822943a 	slli	r17,r17,16
 700a470:	1545383a 	mul	r2,r2,r21
 700a474:	a53fffcc 	andi	r20,r20,65535
 700a478:	a446b03a 	or	r3,r20,r17
 700a47c:	18bfb02e 	bgeu	r3,r2,700a340 <__alt_data_end+0xff00a340>
 700a480:	003fab06 	br	700a330 <__alt_data_end+0xff00a330>
 700a484:	2005883a 	mov	r2,r4
 700a488:	2807883a 	mov	r3,r5
 700a48c:	dfc00b17 	ldw	ra,44(sp)
 700a490:	df000a17 	ldw	fp,40(sp)
 700a494:	ddc00917 	ldw	r23,36(sp)
 700a498:	dd800817 	ldw	r22,32(sp)
 700a49c:	dd400717 	ldw	r21,28(sp)
 700a4a0:	dd000617 	ldw	r20,24(sp)
 700a4a4:	dcc00517 	ldw	r19,20(sp)
 700a4a8:	dc800417 	ldw	r18,16(sp)
 700a4ac:	dc400317 	ldw	r17,12(sp)
 700a4b0:	dc000217 	ldw	r16,8(sp)
 700a4b4:	dec00c04 	addi	sp,sp,48
 700a4b8:	f800283a 	ret
 700a4bc:	04c03fc4 	movi	r19,255
 700a4c0:	99c9803a 	cmpltu	r4,r19,r7
 700a4c4:	200890fa 	slli	r4,r4,3
 700a4c8:	003fa806 	br	700a36c <__alt_data_end+0xff00a36c>
 700a4cc:	00803fc4 	movi	r2,255
 700a4d0:	14c5803a 	cmpltu	r2,r2,r19
 700a4d4:	100490fa 	slli	r2,r2,3
 700a4d8:	003fc006 	br	700a3dc <__alt_data_end+0xff00a3dc>
 700a4dc:	00804034 	movhi	r2,256
 700a4e0:	10bfffc4 	addi	r2,r2,-1
 700a4e4:	11808b36 	bltu	r2,r6,700a714 <__umoddi3+0x4f0>
 700a4e8:	01000404 	movi	r4,16
 700a4ec:	003f6406 	br	700a280 <__alt_data_end+0xff00a280>
 700a4f0:	34c4d83a 	srl	r2,r6,r19
 700a4f4:	3d0e983a 	sll	r7,r7,r20
 700a4f8:	8cf8d83a 	srl	fp,r17,r19
 700a4fc:	8d10983a 	sll	r8,r17,r20
 700a500:	38aab03a 	or	r21,r7,r2
 700a504:	a82cd43a 	srli	r22,r21,16
 700a508:	84e2d83a 	srl	r17,r16,r19
 700a50c:	e009883a 	mov	r4,fp
 700a510:	b00b883a 	mov	r5,r22
 700a514:	8a22b03a 	or	r17,r17,r8
 700a518:	3524983a 	sll	r18,r6,r20
 700a51c:	700a8b80 	call	700a8b8 <__umodsi3>
 700a520:	e009883a 	mov	r4,fp
 700a524:	b00b883a 	mov	r5,r22
 700a528:	102f883a 	mov	r23,r2
 700a52c:	700a8540 	call	700a854 <__udivsi3>
 700a530:	100d883a 	mov	r6,r2
 700a534:	b808943a 	slli	r4,r23,16
 700a538:	aa3fffcc 	andi	r8,r21,65535
 700a53c:	8804d43a 	srli	r2,r17,16
 700a540:	41af383a 	mul	r23,r8,r6
 700a544:	8520983a 	sll	r16,r16,r20
 700a548:	1104b03a 	or	r2,r2,r4
 700a54c:	15c0042e 	bgeu	r2,r23,700a560 <__umoddi3+0x33c>
 700a550:	1545883a 	add	r2,r2,r21
 700a554:	30ffffc4 	addi	r3,r6,-1
 700a558:	1540742e 	bgeu	r2,r21,700a72c <__umoddi3+0x508>
 700a55c:	180d883a 	mov	r6,r3
 700a560:	15efc83a 	sub	r23,r2,r23
 700a564:	b00b883a 	mov	r5,r22
 700a568:	b809883a 	mov	r4,r23
 700a56c:	d9800115 	stw	r6,4(sp)
 700a570:	da000015 	stw	r8,0(sp)
 700a574:	700a8b80 	call	700a8b8 <__umodsi3>
 700a578:	b00b883a 	mov	r5,r22
 700a57c:	b809883a 	mov	r4,r23
 700a580:	1039883a 	mov	fp,r2
 700a584:	700a8540 	call	700a854 <__udivsi3>
 700a588:	da000017 	ldw	r8,0(sp)
 700a58c:	e038943a 	slli	fp,fp,16
 700a590:	100b883a 	mov	r5,r2
 700a594:	4089383a 	mul	r4,r8,r2
 700a598:	8a3fffcc 	andi	r8,r17,65535
 700a59c:	4710b03a 	or	r8,r8,fp
 700a5a0:	d9800117 	ldw	r6,4(sp)
 700a5a4:	4100042e 	bgeu	r8,r4,700a5b8 <__umoddi3+0x394>
 700a5a8:	4551883a 	add	r8,r8,r21
 700a5ac:	10bfffc4 	addi	r2,r2,-1
 700a5b0:	45405a2e 	bgeu	r8,r21,700a71c <__umoddi3+0x4f8>
 700a5b4:	100b883a 	mov	r5,r2
 700a5b8:	300c943a 	slli	r6,r6,16
 700a5bc:	91ffffcc 	andi	r7,r18,65535
 700a5c0:	9004d43a 	srli	r2,r18,16
 700a5c4:	314cb03a 	or	r6,r6,r5
 700a5c8:	317fffcc 	andi	r5,r6,65535
 700a5cc:	300cd43a 	srli	r6,r6,16
 700a5d0:	29d3383a 	mul	r9,r5,r7
 700a5d4:	288b383a 	mul	r5,r5,r2
 700a5d8:	31cf383a 	mul	r7,r6,r7
 700a5dc:	4806d43a 	srli	r3,r9,16
 700a5e0:	4111c83a 	sub	r8,r8,r4
 700a5e4:	29cb883a 	add	r5,r5,r7
 700a5e8:	194b883a 	add	r5,r3,r5
 700a5ec:	3085383a 	mul	r2,r6,r2
 700a5f0:	29c0022e 	bgeu	r5,r7,700a5fc <__umoddi3+0x3d8>
 700a5f4:	00c00074 	movhi	r3,1
 700a5f8:	10c5883a 	add	r2,r2,r3
 700a5fc:	2808d43a 	srli	r4,r5,16
 700a600:	280a943a 	slli	r5,r5,16
 700a604:	4a7fffcc 	andi	r9,r9,65535
 700a608:	2085883a 	add	r2,r4,r2
 700a60c:	2a4b883a 	add	r5,r5,r9
 700a610:	40803636 	bltu	r8,r2,700a6ec <__umoddi3+0x4c8>
 700a614:	40804d26 	beq	r8,r2,700a74c <__umoddi3+0x528>
 700a618:	4089c83a 	sub	r4,r8,r2
 700a61c:	280f883a 	mov	r7,r5
 700a620:	81cfc83a 	sub	r7,r16,r7
 700a624:	81c7803a 	cmpltu	r3,r16,r7
 700a628:	20c7c83a 	sub	r3,r4,r3
 700a62c:	1cc4983a 	sll	r2,r3,r19
 700a630:	3d0ed83a 	srl	r7,r7,r20
 700a634:	1d06d83a 	srl	r3,r3,r20
 700a638:	11c4b03a 	or	r2,r2,r7
 700a63c:	003f9306 	br	700a48c <__alt_data_end+0xff00a48c>
 700a640:	9ca6983a 	sll	r19,r19,r18
 700a644:	88e8d83a 	srl	r20,r17,r3
 700a648:	80c4d83a 	srl	r2,r16,r3
 700a64c:	982cd43a 	srli	r22,r19,16
 700a650:	8ca2983a 	sll	r17,r17,r18
 700a654:	a009883a 	mov	r4,r20
 700a658:	b00b883a 	mov	r5,r22
 700a65c:	1478b03a 	or	fp,r2,r17
 700a660:	700a8b80 	call	700a8b8 <__umodsi3>
 700a664:	a009883a 	mov	r4,r20
 700a668:	b00b883a 	mov	r5,r22
 700a66c:	1023883a 	mov	r17,r2
 700a670:	700a8540 	call	700a854 <__udivsi3>
 700a674:	9d7fffcc 	andi	r21,r19,65535
 700a678:	880a943a 	slli	r5,r17,16
 700a67c:	e008d43a 	srli	r4,fp,16
 700a680:	a885383a 	mul	r2,r21,r2
 700a684:	84a8983a 	sll	r20,r16,r18
 700a688:	2148b03a 	or	r4,r4,r5
 700a68c:	2080042e 	bgeu	r4,r2,700a6a0 <__umoddi3+0x47c>
 700a690:	24c9883a 	add	r4,r4,r19
 700a694:	24c00236 	bltu	r4,r19,700a6a0 <__umoddi3+0x47c>
 700a698:	2080012e 	bgeu	r4,r2,700a6a0 <__umoddi3+0x47c>
 700a69c:	24c9883a 	add	r4,r4,r19
 700a6a0:	20a3c83a 	sub	r17,r4,r2
 700a6a4:	b00b883a 	mov	r5,r22
 700a6a8:	8809883a 	mov	r4,r17
 700a6ac:	700a8b80 	call	700a8b8 <__umodsi3>
 700a6b0:	102f883a 	mov	r23,r2
 700a6b4:	8809883a 	mov	r4,r17
 700a6b8:	b00b883a 	mov	r5,r22
 700a6bc:	700a8540 	call	700a854 <__udivsi3>
 700a6c0:	b82e943a 	slli	r23,r23,16
 700a6c4:	a885383a 	mul	r2,r21,r2
 700a6c8:	e13fffcc 	andi	r4,fp,65535
 700a6cc:	25c8b03a 	or	r4,r4,r23
 700a6d0:	2080042e 	bgeu	r4,r2,700a6e4 <__umoddi3+0x4c0>
 700a6d4:	24c9883a 	add	r4,r4,r19
 700a6d8:	24c00236 	bltu	r4,r19,700a6e4 <__umoddi3+0x4c0>
 700a6dc:	2080012e 	bgeu	r4,r2,700a6e4 <__umoddi3+0x4c0>
 700a6e0:	24c9883a 	add	r4,r4,r19
 700a6e4:	20a3c83a 	sub	r17,r4,r2
 700a6e8:	003f4806 	br	700a40c <__alt_data_end+0xff00a40c>
 700a6ec:	2c8fc83a 	sub	r7,r5,r18
 700a6f0:	1545c83a 	sub	r2,r2,r21
 700a6f4:	29cb803a 	cmpltu	r5,r5,r7
 700a6f8:	1145c83a 	sub	r2,r2,r5
 700a6fc:	4089c83a 	sub	r4,r8,r2
 700a700:	003fc706 	br	700a620 <__alt_data_end+0xff00a620>
 700a704:	01000604 	movi	r4,24
 700a708:	003f1806 	br	700a36c <__alt_data_end+0xff00a36c>
 700a70c:	00800604 	movi	r2,24
 700a710:	003f3206 	br	700a3dc <__alt_data_end+0xff00a3dc>
 700a714:	01000604 	movi	r4,24
 700a718:	003ed906 	br	700a280 <__alt_data_end+0xff00a280>
 700a71c:	413fa52e 	bgeu	r8,r4,700a5b4 <__alt_data_end+0xff00a5b4>
 700a720:	297fff84 	addi	r5,r5,-2
 700a724:	4551883a 	add	r8,r8,r21
 700a728:	003fa306 	br	700a5b8 <__alt_data_end+0xff00a5b8>
 700a72c:	15ff8b2e 	bgeu	r2,r23,700a55c <__alt_data_end+0xff00a55c>
 700a730:	31bfff84 	addi	r6,r6,-2
 700a734:	1545883a 	add	r2,r2,r21
 700a738:	003f8906 	br	700a560 <__alt_data_end+0xff00a560>
 700a73c:	24c9883a 	add	r4,r4,r19
 700a740:	003eee06 	br	700a2fc <__alt_data_end+0xff00a2fc>
 700a744:	8005883a 	mov	r2,r16
 700a748:	003f1706 	br	700a3a8 <__alt_data_end+0xff00a3a8>
 700a74c:	817fe736 	bltu	r16,r5,700a6ec <__alt_data_end+0xff00a6ec>
 700a750:	280f883a 	mov	r7,r5
 700a754:	0009883a 	mov	r4,zero
 700a758:	003fb106 	br	700a620 <__alt_data_end+0xff00a620>

0700a75c <__divsi3>:
 700a75c:	20001b16 	blt	r4,zero,700a7cc <__divsi3+0x70>
 700a760:	000f883a 	mov	r7,zero
 700a764:	28001616 	blt	r5,zero,700a7c0 <__divsi3+0x64>
 700a768:	200d883a 	mov	r6,r4
 700a76c:	29001a2e 	bgeu	r5,r4,700a7d8 <__divsi3+0x7c>
 700a770:	00800804 	movi	r2,32
 700a774:	00c00044 	movi	r3,1
 700a778:	00000106 	br	700a780 <__divsi3+0x24>
 700a77c:	10000d26 	beq	r2,zero,700a7b4 <__divsi3+0x58>
 700a780:	294b883a 	add	r5,r5,r5
 700a784:	10bfffc4 	addi	r2,r2,-1
 700a788:	18c7883a 	add	r3,r3,r3
 700a78c:	293ffb36 	bltu	r5,r4,700a77c <__alt_data_end+0xff00a77c>
 700a790:	0005883a 	mov	r2,zero
 700a794:	18000726 	beq	r3,zero,700a7b4 <__divsi3+0x58>
 700a798:	0005883a 	mov	r2,zero
 700a79c:	31400236 	bltu	r6,r5,700a7a8 <__divsi3+0x4c>
 700a7a0:	314dc83a 	sub	r6,r6,r5
 700a7a4:	10c4b03a 	or	r2,r2,r3
 700a7a8:	1806d07a 	srli	r3,r3,1
 700a7ac:	280ad07a 	srli	r5,r5,1
 700a7b0:	183ffa1e 	bne	r3,zero,700a79c <__alt_data_end+0xff00a79c>
 700a7b4:	38000126 	beq	r7,zero,700a7bc <__divsi3+0x60>
 700a7b8:	0085c83a 	sub	r2,zero,r2
 700a7bc:	f800283a 	ret
 700a7c0:	014bc83a 	sub	r5,zero,r5
 700a7c4:	39c0005c 	xori	r7,r7,1
 700a7c8:	003fe706 	br	700a768 <__alt_data_end+0xff00a768>
 700a7cc:	0109c83a 	sub	r4,zero,r4
 700a7d0:	01c00044 	movi	r7,1
 700a7d4:	003fe306 	br	700a764 <__alt_data_end+0xff00a764>
 700a7d8:	00c00044 	movi	r3,1
 700a7dc:	003fee06 	br	700a798 <__alt_data_end+0xff00a798>

0700a7e0 <__modsi3>:
 700a7e0:	20001716 	blt	r4,zero,700a840 <__modsi3+0x60>
 700a7e4:	000f883a 	mov	r7,zero
 700a7e8:	2005883a 	mov	r2,r4
 700a7ec:	28001216 	blt	r5,zero,700a838 <__modsi3+0x58>
 700a7f0:	2900162e 	bgeu	r5,r4,700a84c <__modsi3+0x6c>
 700a7f4:	01800804 	movi	r6,32
 700a7f8:	00c00044 	movi	r3,1
 700a7fc:	00000106 	br	700a804 <__modsi3+0x24>
 700a800:	30000a26 	beq	r6,zero,700a82c <__modsi3+0x4c>
 700a804:	294b883a 	add	r5,r5,r5
 700a808:	31bfffc4 	addi	r6,r6,-1
 700a80c:	18c7883a 	add	r3,r3,r3
 700a810:	293ffb36 	bltu	r5,r4,700a800 <__alt_data_end+0xff00a800>
 700a814:	18000526 	beq	r3,zero,700a82c <__modsi3+0x4c>
 700a818:	1806d07a 	srli	r3,r3,1
 700a81c:	11400136 	bltu	r2,r5,700a824 <__modsi3+0x44>
 700a820:	1145c83a 	sub	r2,r2,r5
 700a824:	280ad07a 	srli	r5,r5,1
 700a828:	183ffb1e 	bne	r3,zero,700a818 <__alt_data_end+0xff00a818>
 700a82c:	38000126 	beq	r7,zero,700a834 <__modsi3+0x54>
 700a830:	0085c83a 	sub	r2,zero,r2
 700a834:	f800283a 	ret
 700a838:	014bc83a 	sub	r5,zero,r5
 700a83c:	003fec06 	br	700a7f0 <__alt_data_end+0xff00a7f0>
 700a840:	0109c83a 	sub	r4,zero,r4
 700a844:	01c00044 	movi	r7,1
 700a848:	003fe706 	br	700a7e8 <__alt_data_end+0xff00a7e8>
 700a84c:	00c00044 	movi	r3,1
 700a850:	003ff106 	br	700a818 <__alt_data_end+0xff00a818>

0700a854 <__udivsi3>:
 700a854:	200d883a 	mov	r6,r4
 700a858:	2900152e 	bgeu	r5,r4,700a8b0 <__udivsi3+0x5c>
 700a85c:	28001416 	blt	r5,zero,700a8b0 <__udivsi3+0x5c>
 700a860:	00800804 	movi	r2,32
 700a864:	00c00044 	movi	r3,1
 700a868:	00000206 	br	700a874 <__udivsi3+0x20>
 700a86c:	10000e26 	beq	r2,zero,700a8a8 <__udivsi3+0x54>
 700a870:	28000516 	blt	r5,zero,700a888 <__udivsi3+0x34>
 700a874:	294b883a 	add	r5,r5,r5
 700a878:	10bfffc4 	addi	r2,r2,-1
 700a87c:	18c7883a 	add	r3,r3,r3
 700a880:	293ffa36 	bltu	r5,r4,700a86c <__alt_data_end+0xff00a86c>
 700a884:	18000826 	beq	r3,zero,700a8a8 <__udivsi3+0x54>
 700a888:	0005883a 	mov	r2,zero
 700a88c:	31400236 	bltu	r6,r5,700a898 <__udivsi3+0x44>
 700a890:	314dc83a 	sub	r6,r6,r5
 700a894:	10c4b03a 	or	r2,r2,r3
 700a898:	1806d07a 	srli	r3,r3,1
 700a89c:	280ad07a 	srli	r5,r5,1
 700a8a0:	183ffa1e 	bne	r3,zero,700a88c <__alt_data_end+0xff00a88c>
 700a8a4:	f800283a 	ret
 700a8a8:	0005883a 	mov	r2,zero
 700a8ac:	f800283a 	ret
 700a8b0:	00c00044 	movi	r3,1
 700a8b4:	003ff406 	br	700a888 <__alt_data_end+0xff00a888>

0700a8b8 <__umodsi3>:
 700a8b8:	2005883a 	mov	r2,r4
 700a8bc:	2900122e 	bgeu	r5,r4,700a908 <__umodsi3+0x50>
 700a8c0:	28001116 	blt	r5,zero,700a908 <__umodsi3+0x50>
 700a8c4:	01800804 	movi	r6,32
 700a8c8:	00c00044 	movi	r3,1
 700a8cc:	00000206 	br	700a8d8 <__umodsi3+0x20>
 700a8d0:	30000c26 	beq	r6,zero,700a904 <__umodsi3+0x4c>
 700a8d4:	28000516 	blt	r5,zero,700a8ec <__umodsi3+0x34>
 700a8d8:	294b883a 	add	r5,r5,r5
 700a8dc:	31bfffc4 	addi	r6,r6,-1
 700a8e0:	18c7883a 	add	r3,r3,r3
 700a8e4:	293ffa36 	bltu	r5,r4,700a8d0 <__alt_data_end+0xff00a8d0>
 700a8e8:	18000626 	beq	r3,zero,700a904 <__umodsi3+0x4c>
 700a8ec:	1806d07a 	srli	r3,r3,1
 700a8f0:	11400136 	bltu	r2,r5,700a8f8 <__umodsi3+0x40>
 700a8f4:	1145c83a 	sub	r2,r2,r5
 700a8f8:	280ad07a 	srli	r5,r5,1
 700a8fc:	183ffb1e 	bne	r3,zero,700a8ec <__alt_data_end+0xff00a8ec>
 700a900:	f800283a 	ret
 700a904:	f800283a 	ret
 700a908:	00c00044 	movi	r3,1
 700a90c:	003ff706 	br	700a8ec <__alt_data_end+0xff00a8ec>

0700a910 <__adddf3>:
 700a910:	02c00434 	movhi	r11,16
 700a914:	5affffc4 	addi	r11,r11,-1
 700a918:	2806d7fa 	srli	r3,r5,31
 700a91c:	2ad4703a 	and	r10,r5,r11
 700a920:	3ad2703a 	and	r9,r7,r11
 700a924:	3804d53a 	srli	r2,r7,20
 700a928:	3018d77a 	srli	r12,r6,29
 700a92c:	280ad53a 	srli	r5,r5,20
 700a930:	501490fa 	slli	r10,r10,3
 700a934:	2010d77a 	srli	r8,r4,29
 700a938:	481290fa 	slli	r9,r9,3
 700a93c:	380ed7fa 	srli	r7,r7,31
 700a940:	defffb04 	addi	sp,sp,-20
 700a944:	dc800215 	stw	r18,8(sp)
 700a948:	dc400115 	stw	r17,4(sp)
 700a94c:	dc000015 	stw	r16,0(sp)
 700a950:	dfc00415 	stw	ra,16(sp)
 700a954:	dcc00315 	stw	r19,12(sp)
 700a958:	1c803fcc 	andi	r18,r3,255
 700a95c:	2c01ffcc 	andi	r16,r5,2047
 700a960:	5210b03a 	or	r8,r10,r8
 700a964:	202290fa 	slli	r17,r4,3
 700a968:	1081ffcc 	andi	r2,r2,2047
 700a96c:	4b12b03a 	or	r9,r9,r12
 700a970:	300c90fa 	slli	r6,r6,3
 700a974:	91c07526 	beq	r18,r7,700ab4c <__adddf3+0x23c>
 700a978:	8087c83a 	sub	r3,r16,r2
 700a97c:	00c0ab0e 	bge	zero,r3,700ac2c <__adddf3+0x31c>
 700a980:	10002a1e 	bne	r2,zero,700aa2c <__adddf3+0x11c>
 700a984:	4984b03a 	or	r2,r9,r6
 700a988:	1000961e 	bne	r2,zero,700abe4 <__adddf3+0x2d4>
 700a98c:	888001cc 	andi	r2,r17,7
 700a990:	10000726 	beq	r2,zero,700a9b0 <__adddf3+0xa0>
 700a994:	888003cc 	andi	r2,r17,15
 700a998:	00c00104 	movi	r3,4
 700a99c:	10c00426 	beq	r2,r3,700a9b0 <__adddf3+0xa0>
 700a9a0:	88c7883a 	add	r3,r17,r3
 700a9a4:	1c63803a 	cmpltu	r17,r3,r17
 700a9a8:	4451883a 	add	r8,r8,r17
 700a9ac:	1823883a 	mov	r17,r3
 700a9b0:	4080202c 	andhi	r2,r8,128
 700a9b4:	10005926 	beq	r2,zero,700ab1c <__adddf3+0x20c>
 700a9b8:	84000044 	addi	r16,r16,1
 700a9bc:	0081ffc4 	movi	r2,2047
 700a9c0:	8080ba26 	beq	r16,r2,700acac <__adddf3+0x39c>
 700a9c4:	00bfe034 	movhi	r2,65408
 700a9c8:	10bfffc4 	addi	r2,r2,-1
 700a9cc:	4090703a 	and	r8,r8,r2
 700a9d0:	4004977a 	slli	r2,r8,29
 700a9d4:	4010927a 	slli	r8,r8,9
 700a9d8:	8822d0fa 	srli	r17,r17,3
 700a9dc:	8401ffcc 	andi	r16,r16,2047
 700a9e0:	4010d33a 	srli	r8,r8,12
 700a9e4:	9007883a 	mov	r3,r18
 700a9e8:	1444b03a 	or	r2,r2,r17
 700a9ec:	8401ffcc 	andi	r16,r16,2047
 700a9f0:	8020953a 	slli	r16,r16,20
 700a9f4:	18c03fcc 	andi	r3,r3,255
 700a9f8:	01000434 	movhi	r4,16
 700a9fc:	213fffc4 	addi	r4,r4,-1
 700aa00:	180697fa 	slli	r3,r3,31
 700aa04:	4110703a 	and	r8,r8,r4
 700aa08:	4410b03a 	or	r8,r8,r16
 700aa0c:	40c6b03a 	or	r3,r8,r3
 700aa10:	dfc00417 	ldw	ra,16(sp)
 700aa14:	dcc00317 	ldw	r19,12(sp)
 700aa18:	dc800217 	ldw	r18,8(sp)
 700aa1c:	dc400117 	ldw	r17,4(sp)
 700aa20:	dc000017 	ldw	r16,0(sp)
 700aa24:	dec00504 	addi	sp,sp,20
 700aa28:	f800283a 	ret
 700aa2c:	0081ffc4 	movi	r2,2047
 700aa30:	80bfd626 	beq	r16,r2,700a98c <__alt_data_end+0xff00a98c>
 700aa34:	4a402034 	orhi	r9,r9,128
 700aa38:	00800e04 	movi	r2,56
 700aa3c:	10c09f16 	blt	r2,r3,700acbc <__adddf3+0x3ac>
 700aa40:	008007c4 	movi	r2,31
 700aa44:	10c0c216 	blt	r2,r3,700ad50 <__adddf3+0x440>
 700aa48:	00800804 	movi	r2,32
 700aa4c:	10c5c83a 	sub	r2,r2,r3
 700aa50:	488a983a 	sll	r5,r9,r2
 700aa54:	30c8d83a 	srl	r4,r6,r3
 700aa58:	3084983a 	sll	r2,r6,r2
 700aa5c:	48c6d83a 	srl	r3,r9,r3
 700aa60:	290cb03a 	or	r6,r5,r4
 700aa64:	1004c03a 	cmpne	r2,r2,zero
 700aa68:	308cb03a 	or	r6,r6,r2
 700aa6c:	898dc83a 	sub	r6,r17,r6
 700aa70:	89a3803a 	cmpltu	r17,r17,r6
 700aa74:	40d1c83a 	sub	r8,r8,r3
 700aa78:	4451c83a 	sub	r8,r8,r17
 700aa7c:	3023883a 	mov	r17,r6
 700aa80:	4080202c 	andhi	r2,r8,128
 700aa84:	10002326 	beq	r2,zero,700ab14 <__adddf3+0x204>
 700aa88:	04c02034 	movhi	r19,128
 700aa8c:	9cffffc4 	addi	r19,r19,-1
 700aa90:	44e6703a 	and	r19,r8,r19
 700aa94:	98007626 	beq	r19,zero,700ac70 <__adddf3+0x360>
 700aa98:	9809883a 	mov	r4,r19
 700aa9c:	700cf140 	call	700cf14 <__clzsi2>
 700aaa0:	10fffe04 	addi	r3,r2,-8
 700aaa4:	010007c4 	movi	r4,31
 700aaa8:	20c07716 	blt	r4,r3,700ac88 <__adddf3+0x378>
 700aaac:	00800804 	movi	r2,32
 700aab0:	10c5c83a 	sub	r2,r2,r3
 700aab4:	8884d83a 	srl	r2,r17,r2
 700aab8:	98d0983a 	sll	r8,r19,r3
 700aabc:	88e2983a 	sll	r17,r17,r3
 700aac0:	1204b03a 	or	r2,r2,r8
 700aac4:	1c007416 	blt	r3,r16,700ac98 <__adddf3+0x388>
 700aac8:	1c21c83a 	sub	r16,r3,r16
 700aacc:	82000044 	addi	r8,r16,1
 700aad0:	00c007c4 	movi	r3,31
 700aad4:	1a009116 	blt	r3,r8,700ad1c <__adddf3+0x40c>
 700aad8:	00c00804 	movi	r3,32
 700aadc:	1a07c83a 	sub	r3,r3,r8
 700aae0:	8a08d83a 	srl	r4,r17,r8
 700aae4:	88e2983a 	sll	r17,r17,r3
 700aae8:	10c6983a 	sll	r3,r2,r3
 700aaec:	1210d83a 	srl	r8,r2,r8
 700aaf0:	8804c03a 	cmpne	r2,r17,zero
 700aaf4:	1906b03a 	or	r3,r3,r4
 700aaf8:	18a2b03a 	or	r17,r3,r2
 700aafc:	0021883a 	mov	r16,zero
 700ab00:	003fa206 	br	700a98c <__alt_data_end+0xff00a98c>
 700ab04:	1890b03a 	or	r8,r3,r2
 700ab08:	40017d26 	beq	r8,zero,700b100 <__adddf3+0x7f0>
 700ab0c:	1011883a 	mov	r8,r2
 700ab10:	1823883a 	mov	r17,r3
 700ab14:	888001cc 	andi	r2,r17,7
 700ab18:	103f9e1e 	bne	r2,zero,700a994 <__alt_data_end+0xff00a994>
 700ab1c:	4004977a 	slli	r2,r8,29
 700ab20:	8822d0fa 	srli	r17,r17,3
 700ab24:	4010d0fa 	srli	r8,r8,3
 700ab28:	9007883a 	mov	r3,r18
 700ab2c:	1444b03a 	or	r2,r2,r17
 700ab30:	0101ffc4 	movi	r4,2047
 700ab34:	81002426 	beq	r16,r4,700abc8 <__adddf3+0x2b8>
 700ab38:	8120703a 	and	r16,r16,r4
 700ab3c:	01000434 	movhi	r4,16
 700ab40:	213fffc4 	addi	r4,r4,-1
 700ab44:	4110703a 	and	r8,r8,r4
 700ab48:	003fa806 	br	700a9ec <__alt_data_end+0xff00a9ec>
 700ab4c:	8089c83a 	sub	r4,r16,r2
 700ab50:	01005e0e 	bge	zero,r4,700accc <__adddf3+0x3bc>
 700ab54:	10002b26 	beq	r2,zero,700ac04 <__adddf3+0x2f4>
 700ab58:	0081ffc4 	movi	r2,2047
 700ab5c:	80bf8b26 	beq	r16,r2,700a98c <__alt_data_end+0xff00a98c>
 700ab60:	4a402034 	orhi	r9,r9,128
 700ab64:	00800e04 	movi	r2,56
 700ab68:	1100a40e 	bge	r2,r4,700adfc <__adddf3+0x4ec>
 700ab6c:	498cb03a 	or	r6,r9,r6
 700ab70:	300ac03a 	cmpne	r5,r6,zero
 700ab74:	0013883a 	mov	r9,zero
 700ab78:	2c4b883a 	add	r5,r5,r17
 700ab7c:	2c63803a 	cmpltu	r17,r5,r17
 700ab80:	4a11883a 	add	r8,r9,r8
 700ab84:	8a11883a 	add	r8,r17,r8
 700ab88:	2823883a 	mov	r17,r5
 700ab8c:	4080202c 	andhi	r2,r8,128
 700ab90:	103fe026 	beq	r2,zero,700ab14 <__alt_data_end+0xff00ab14>
 700ab94:	84000044 	addi	r16,r16,1
 700ab98:	0081ffc4 	movi	r2,2047
 700ab9c:	8080d226 	beq	r16,r2,700aee8 <__adddf3+0x5d8>
 700aba0:	00bfe034 	movhi	r2,65408
 700aba4:	10bfffc4 	addi	r2,r2,-1
 700aba8:	4090703a 	and	r8,r8,r2
 700abac:	880ad07a 	srli	r5,r17,1
 700abb0:	400897fa 	slli	r4,r8,31
 700abb4:	88c0004c 	andi	r3,r17,1
 700abb8:	28e2b03a 	or	r17,r5,r3
 700abbc:	4010d07a 	srli	r8,r8,1
 700abc0:	2462b03a 	or	r17,r4,r17
 700abc4:	003f7106 	br	700a98c <__alt_data_end+0xff00a98c>
 700abc8:	4088b03a 	or	r4,r8,r2
 700abcc:	20014526 	beq	r4,zero,700b0e4 <__adddf3+0x7d4>
 700abd0:	01000434 	movhi	r4,16
 700abd4:	42000234 	orhi	r8,r8,8
 700abd8:	213fffc4 	addi	r4,r4,-1
 700abdc:	4110703a 	and	r8,r8,r4
 700abe0:	003f8206 	br	700a9ec <__alt_data_end+0xff00a9ec>
 700abe4:	18ffffc4 	addi	r3,r3,-1
 700abe8:	1800491e 	bne	r3,zero,700ad10 <__adddf3+0x400>
 700abec:	898bc83a 	sub	r5,r17,r6
 700abf0:	8963803a 	cmpltu	r17,r17,r5
 700abf4:	4251c83a 	sub	r8,r8,r9
 700abf8:	4451c83a 	sub	r8,r8,r17
 700abfc:	2823883a 	mov	r17,r5
 700ac00:	003f9f06 	br	700aa80 <__alt_data_end+0xff00aa80>
 700ac04:	4984b03a 	or	r2,r9,r6
 700ac08:	103f6026 	beq	r2,zero,700a98c <__alt_data_end+0xff00a98c>
 700ac0c:	213fffc4 	addi	r4,r4,-1
 700ac10:	2000931e 	bne	r4,zero,700ae60 <__adddf3+0x550>
 700ac14:	898d883a 	add	r6,r17,r6
 700ac18:	3463803a 	cmpltu	r17,r6,r17
 700ac1c:	4251883a 	add	r8,r8,r9
 700ac20:	8a11883a 	add	r8,r17,r8
 700ac24:	3023883a 	mov	r17,r6
 700ac28:	003fd806 	br	700ab8c <__alt_data_end+0xff00ab8c>
 700ac2c:	1800541e 	bne	r3,zero,700ad80 <__adddf3+0x470>
 700ac30:	80800044 	addi	r2,r16,1
 700ac34:	1081ffcc 	andi	r2,r2,2047
 700ac38:	00c00044 	movi	r3,1
 700ac3c:	1880a00e 	bge	r3,r2,700aec0 <__adddf3+0x5b0>
 700ac40:	8989c83a 	sub	r4,r17,r6
 700ac44:	8905803a 	cmpltu	r2,r17,r4
 700ac48:	4267c83a 	sub	r19,r8,r9
 700ac4c:	98a7c83a 	sub	r19,r19,r2
 700ac50:	9880202c 	andhi	r2,r19,128
 700ac54:	10006326 	beq	r2,zero,700ade4 <__adddf3+0x4d4>
 700ac58:	3463c83a 	sub	r17,r6,r17
 700ac5c:	4a07c83a 	sub	r3,r9,r8
 700ac60:	344d803a 	cmpltu	r6,r6,r17
 700ac64:	19a7c83a 	sub	r19,r3,r6
 700ac68:	3825883a 	mov	r18,r7
 700ac6c:	983f8a1e 	bne	r19,zero,700aa98 <__alt_data_end+0xff00aa98>
 700ac70:	8809883a 	mov	r4,r17
 700ac74:	700cf140 	call	700cf14 <__clzsi2>
 700ac78:	10800804 	addi	r2,r2,32
 700ac7c:	10fffe04 	addi	r3,r2,-8
 700ac80:	010007c4 	movi	r4,31
 700ac84:	20ff890e 	bge	r4,r3,700aaac <__alt_data_end+0xff00aaac>
 700ac88:	10bff604 	addi	r2,r2,-40
 700ac8c:	8884983a 	sll	r2,r17,r2
 700ac90:	0023883a 	mov	r17,zero
 700ac94:	1c3f8c0e 	bge	r3,r16,700aac8 <__alt_data_end+0xff00aac8>
 700ac98:	023fe034 	movhi	r8,65408
 700ac9c:	423fffc4 	addi	r8,r8,-1
 700aca0:	80e1c83a 	sub	r16,r16,r3
 700aca4:	1210703a 	and	r8,r2,r8
 700aca8:	003f3806 	br	700a98c <__alt_data_end+0xff00a98c>
 700acac:	9007883a 	mov	r3,r18
 700acb0:	0011883a 	mov	r8,zero
 700acb4:	0005883a 	mov	r2,zero
 700acb8:	003f4c06 	br	700a9ec <__alt_data_end+0xff00a9ec>
 700acbc:	498cb03a 	or	r6,r9,r6
 700acc0:	300cc03a 	cmpne	r6,r6,zero
 700acc4:	0007883a 	mov	r3,zero
 700acc8:	003f6806 	br	700aa6c <__alt_data_end+0xff00aa6c>
 700accc:	20009c1e 	bne	r4,zero,700af40 <__adddf3+0x630>
 700acd0:	80800044 	addi	r2,r16,1
 700acd4:	1141ffcc 	andi	r5,r2,2047
 700acd8:	01000044 	movi	r4,1
 700acdc:	2140670e 	bge	r4,r5,700ae7c <__adddf3+0x56c>
 700ace0:	0101ffc4 	movi	r4,2047
 700ace4:	11007f26 	beq	r2,r4,700aee4 <__adddf3+0x5d4>
 700ace8:	898d883a 	add	r6,r17,r6
 700acec:	4247883a 	add	r3,r8,r9
 700acf0:	3451803a 	cmpltu	r8,r6,r17
 700acf4:	40d1883a 	add	r8,r8,r3
 700acf8:	402297fa 	slli	r17,r8,31
 700acfc:	300cd07a 	srli	r6,r6,1
 700ad00:	4010d07a 	srli	r8,r8,1
 700ad04:	1021883a 	mov	r16,r2
 700ad08:	89a2b03a 	or	r17,r17,r6
 700ad0c:	003f1f06 	br	700a98c <__alt_data_end+0xff00a98c>
 700ad10:	0081ffc4 	movi	r2,2047
 700ad14:	80bf481e 	bne	r16,r2,700aa38 <__alt_data_end+0xff00aa38>
 700ad18:	003f1c06 	br	700a98c <__alt_data_end+0xff00a98c>
 700ad1c:	843ff844 	addi	r16,r16,-31
 700ad20:	01000804 	movi	r4,32
 700ad24:	1406d83a 	srl	r3,r2,r16
 700ad28:	41005026 	beq	r8,r4,700ae6c <__adddf3+0x55c>
 700ad2c:	01001004 	movi	r4,64
 700ad30:	2211c83a 	sub	r8,r4,r8
 700ad34:	1204983a 	sll	r2,r2,r8
 700ad38:	88a2b03a 	or	r17,r17,r2
 700ad3c:	8822c03a 	cmpne	r17,r17,zero
 700ad40:	1c62b03a 	or	r17,r3,r17
 700ad44:	0011883a 	mov	r8,zero
 700ad48:	0021883a 	mov	r16,zero
 700ad4c:	003f7106 	br	700ab14 <__alt_data_end+0xff00ab14>
 700ad50:	193ff804 	addi	r4,r3,-32
 700ad54:	00800804 	movi	r2,32
 700ad58:	4908d83a 	srl	r4,r9,r4
 700ad5c:	18804526 	beq	r3,r2,700ae74 <__adddf3+0x564>
 700ad60:	00801004 	movi	r2,64
 700ad64:	10c5c83a 	sub	r2,r2,r3
 700ad68:	4886983a 	sll	r3,r9,r2
 700ad6c:	198cb03a 	or	r6,r3,r6
 700ad70:	300cc03a 	cmpne	r6,r6,zero
 700ad74:	218cb03a 	or	r6,r4,r6
 700ad78:	0007883a 	mov	r3,zero
 700ad7c:	003f3b06 	br	700aa6c <__alt_data_end+0xff00aa6c>
 700ad80:	80002a26 	beq	r16,zero,700ae2c <__adddf3+0x51c>
 700ad84:	0101ffc4 	movi	r4,2047
 700ad88:	11006826 	beq	r2,r4,700af2c <__adddf3+0x61c>
 700ad8c:	00c7c83a 	sub	r3,zero,r3
 700ad90:	42002034 	orhi	r8,r8,128
 700ad94:	01000e04 	movi	r4,56
 700ad98:	20c07c16 	blt	r4,r3,700af8c <__adddf3+0x67c>
 700ad9c:	010007c4 	movi	r4,31
 700ada0:	20c0da16 	blt	r4,r3,700b10c <__adddf3+0x7fc>
 700ada4:	01000804 	movi	r4,32
 700ada8:	20c9c83a 	sub	r4,r4,r3
 700adac:	4114983a 	sll	r10,r8,r4
 700adb0:	88cad83a 	srl	r5,r17,r3
 700adb4:	8908983a 	sll	r4,r17,r4
 700adb8:	40c6d83a 	srl	r3,r8,r3
 700adbc:	5162b03a 	or	r17,r10,r5
 700adc0:	2008c03a 	cmpne	r4,r4,zero
 700adc4:	8922b03a 	or	r17,r17,r4
 700adc8:	3463c83a 	sub	r17,r6,r17
 700adcc:	48c7c83a 	sub	r3,r9,r3
 700add0:	344d803a 	cmpltu	r6,r6,r17
 700add4:	1991c83a 	sub	r8,r3,r6
 700add8:	1021883a 	mov	r16,r2
 700addc:	3825883a 	mov	r18,r7
 700ade0:	003f2706 	br	700aa80 <__alt_data_end+0xff00aa80>
 700ade4:	24d0b03a 	or	r8,r4,r19
 700ade8:	40001b1e 	bne	r8,zero,700ae58 <__adddf3+0x548>
 700adec:	0005883a 	mov	r2,zero
 700adf0:	0007883a 	mov	r3,zero
 700adf4:	0021883a 	mov	r16,zero
 700adf8:	003f4d06 	br	700ab30 <__alt_data_end+0xff00ab30>
 700adfc:	008007c4 	movi	r2,31
 700ae00:	11003c16 	blt	r2,r4,700aef4 <__adddf3+0x5e4>
 700ae04:	00800804 	movi	r2,32
 700ae08:	1105c83a 	sub	r2,r2,r4
 700ae0c:	488e983a 	sll	r7,r9,r2
 700ae10:	310ad83a 	srl	r5,r6,r4
 700ae14:	3084983a 	sll	r2,r6,r2
 700ae18:	4912d83a 	srl	r9,r9,r4
 700ae1c:	394ab03a 	or	r5,r7,r5
 700ae20:	1004c03a 	cmpne	r2,r2,zero
 700ae24:	288ab03a 	or	r5,r5,r2
 700ae28:	003f5306 	br	700ab78 <__alt_data_end+0xff00ab78>
 700ae2c:	4448b03a 	or	r4,r8,r17
 700ae30:	20003e26 	beq	r4,zero,700af2c <__adddf3+0x61c>
 700ae34:	00c6303a 	nor	r3,zero,r3
 700ae38:	18003a1e 	bne	r3,zero,700af24 <__adddf3+0x614>
 700ae3c:	3463c83a 	sub	r17,r6,r17
 700ae40:	4a07c83a 	sub	r3,r9,r8
 700ae44:	344d803a 	cmpltu	r6,r6,r17
 700ae48:	1991c83a 	sub	r8,r3,r6
 700ae4c:	1021883a 	mov	r16,r2
 700ae50:	3825883a 	mov	r18,r7
 700ae54:	003f0a06 	br	700aa80 <__alt_data_end+0xff00aa80>
 700ae58:	2023883a 	mov	r17,r4
 700ae5c:	003f0d06 	br	700aa94 <__alt_data_end+0xff00aa94>
 700ae60:	0081ffc4 	movi	r2,2047
 700ae64:	80bf3f1e 	bne	r16,r2,700ab64 <__alt_data_end+0xff00ab64>
 700ae68:	003ec806 	br	700a98c <__alt_data_end+0xff00a98c>
 700ae6c:	0005883a 	mov	r2,zero
 700ae70:	003fb106 	br	700ad38 <__alt_data_end+0xff00ad38>
 700ae74:	0007883a 	mov	r3,zero
 700ae78:	003fbc06 	br	700ad6c <__alt_data_end+0xff00ad6c>
 700ae7c:	4444b03a 	or	r2,r8,r17
 700ae80:	8000871e 	bne	r16,zero,700b0a0 <__adddf3+0x790>
 700ae84:	1000ba26 	beq	r2,zero,700b170 <__adddf3+0x860>
 700ae88:	4984b03a 	or	r2,r9,r6
 700ae8c:	103ebf26 	beq	r2,zero,700a98c <__alt_data_end+0xff00a98c>
 700ae90:	8985883a 	add	r2,r17,r6
 700ae94:	4247883a 	add	r3,r8,r9
 700ae98:	1451803a 	cmpltu	r8,r2,r17
 700ae9c:	40d1883a 	add	r8,r8,r3
 700aea0:	40c0202c 	andhi	r3,r8,128
 700aea4:	1023883a 	mov	r17,r2
 700aea8:	183f1a26 	beq	r3,zero,700ab14 <__alt_data_end+0xff00ab14>
 700aeac:	00bfe034 	movhi	r2,65408
 700aeb0:	10bfffc4 	addi	r2,r2,-1
 700aeb4:	2021883a 	mov	r16,r4
 700aeb8:	4090703a 	and	r8,r8,r2
 700aebc:	003eb306 	br	700a98c <__alt_data_end+0xff00a98c>
 700aec0:	4444b03a 	or	r2,r8,r17
 700aec4:	8000291e 	bne	r16,zero,700af6c <__adddf3+0x65c>
 700aec8:	10004b1e 	bne	r2,zero,700aff8 <__adddf3+0x6e8>
 700aecc:	4990b03a 	or	r8,r9,r6
 700aed0:	40008b26 	beq	r8,zero,700b100 <__adddf3+0x7f0>
 700aed4:	4811883a 	mov	r8,r9
 700aed8:	3023883a 	mov	r17,r6
 700aedc:	3825883a 	mov	r18,r7
 700aee0:	003eaa06 	br	700a98c <__alt_data_end+0xff00a98c>
 700aee4:	1021883a 	mov	r16,r2
 700aee8:	0011883a 	mov	r8,zero
 700aeec:	0005883a 	mov	r2,zero
 700aef0:	003f0f06 	br	700ab30 <__alt_data_end+0xff00ab30>
 700aef4:	217ff804 	addi	r5,r4,-32
 700aef8:	00800804 	movi	r2,32
 700aefc:	494ad83a 	srl	r5,r9,r5
 700af00:	20807d26 	beq	r4,r2,700b0f8 <__adddf3+0x7e8>
 700af04:	00801004 	movi	r2,64
 700af08:	1109c83a 	sub	r4,r2,r4
 700af0c:	4912983a 	sll	r9,r9,r4
 700af10:	498cb03a 	or	r6,r9,r6
 700af14:	300cc03a 	cmpne	r6,r6,zero
 700af18:	298ab03a 	or	r5,r5,r6
 700af1c:	0013883a 	mov	r9,zero
 700af20:	003f1506 	br	700ab78 <__alt_data_end+0xff00ab78>
 700af24:	0101ffc4 	movi	r4,2047
 700af28:	113f9a1e 	bne	r2,r4,700ad94 <__alt_data_end+0xff00ad94>
 700af2c:	4811883a 	mov	r8,r9
 700af30:	3023883a 	mov	r17,r6
 700af34:	1021883a 	mov	r16,r2
 700af38:	3825883a 	mov	r18,r7
 700af3c:	003e9306 	br	700a98c <__alt_data_end+0xff00a98c>
 700af40:	8000161e 	bne	r16,zero,700af9c <__adddf3+0x68c>
 700af44:	444ab03a 	or	r5,r8,r17
 700af48:	28005126 	beq	r5,zero,700b090 <__adddf3+0x780>
 700af4c:	0108303a 	nor	r4,zero,r4
 700af50:	20004d1e 	bne	r4,zero,700b088 <__adddf3+0x778>
 700af54:	89a3883a 	add	r17,r17,r6
 700af58:	4253883a 	add	r9,r8,r9
 700af5c:	898d803a 	cmpltu	r6,r17,r6
 700af60:	3251883a 	add	r8,r6,r9
 700af64:	1021883a 	mov	r16,r2
 700af68:	003f0806 	br	700ab8c <__alt_data_end+0xff00ab8c>
 700af6c:	1000301e 	bne	r2,zero,700b030 <__adddf3+0x720>
 700af70:	4984b03a 	or	r2,r9,r6
 700af74:	10007126 	beq	r2,zero,700b13c <__adddf3+0x82c>
 700af78:	4811883a 	mov	r8,r9
 700af7c:	3023883a 	mov	r17,r6
 700af80:	3825883a 	mov	r18,r7
 700af84:	0401ffc4 	movi	r16,2047
 700af88:	003e8006 	br	700a98c <__alt_data_end+0xff00a98c>
 700af8c:	4462b03a 	or	r17,r8,r17
 700af90:	8822c03a 	cmpne	r17,r17,zero
 700af94:	0007883a 	mov	r3,zero
 700af98:	003f8b06 	br	700adc8 <__alt_data_end+0xff00adc8>
 700af9c:	0141ffc4 	movi	r5,2047
 700afa0:	11403b26 	beq	r2,r5,700b090 <__adddf3+0x780>
 700afa4:	0109c83a 	sub	r4,zero,r4
 700afa8:	42002034 	orhi	r8,r8,128
 700afac:	01400e04 	movi	r5,56
 700afb0:	29006716 	blt	r5,r4,700b150 <__adddf3+0x840>
 700afb4:	014007c4 	movi	r5,31
 700afb8:	29007016 	blt	r5,r4,700b17c <__adddf3+0x86c>
 700afbc:	01400804 	movi	r5,32
 700afc0:	290bc83a 	sub	r5,r5,r4
 700afc4:	4154983a 	sll	r10,r8,r5
 700afc8:	890ed83a 	srl	r7,r17,r4
 700afcc:	894a983a 	sll	r5,r17,r5
 700afd0:	4108d83a 	srl	r4,r8,r4
 700afd4:	51e2b03a 	or	r17,r10,r7
 700afd8:	280ac03a 	cmpne	r5,r5,zero
 700afdc:	8962b03a 	or	r17,r17,r5
 700afe0:	89a3883a 	add	r17,r17,r6
 700afe4:	2253883a 	add	r9,r4,r9
 700afe8:	898d803a 	cmpltu	r6,r17,r6
 700afec:	3251883a 	add	r8,r6,r9
 700aff0:	1021883a 	mov	r16,r2
 700aff4:	003ee506 	br	700ab8c <__alt_data_end+0xff00ab8c>
 700aff8:	4984b03a 	or	r2,r9,r6
 700affc:	103e6326 	beq	r2,zero,700a98c <__alt_data_end+0xff00a98c>
 700b000:	8987c83a 	sub	r3,r17,r6
 700b004:	88c9803a 	cmpltu	r4,r17,r3
 700b008:	4245c83a 	sub	r2,r8,r9
 700b00c:	1105c83a 	sub	r2,r2,r4
 700b010:	1100202c 	andhi	r4,r2,128
 700b014:	203ebb26 	beq	r4,zero,700ab04 <__alt_data_end+0xff00ab04>
 700b018:	3463c83a 	sub	r17,r6,r17
 700b01c:	4a07c83a 	sub	r3,r9,r8
 700b020:	344d803a 	cmpltu	r6,r6,r17
 700b024:	1991c83a 	sub	r8,r3,r6
 700b028:	3825883a 	mov	r18,r7
 700b02c:	003e5706 	br	700a98c <__alt_data_end+0xff00a98c>
 700b030:	4984b03a 	or	r2,r9,r6
 700b034:	10002e26 	beq	r2,zero,700b0f0 <__adddf3+0x7e0>
 700b038:	4004d0fa 	srli	r2,r8,3
 700b03c:	8822d0fa 	srli	r17,r17,3
 700b040:	4010977a 	slli	r8,r8,29
 700b044:	10c0022c 	andhi	r3,r2,8
 700b048:	4462b03a 	or	r17,r8,r17
 700b04c:	18000826 	beq	r3,zero,700b070 <__adddf3+0x760>
 700b050:	4808d0fa 	srli	r4,r9,3
 700b054:	20c0022c 	andhi	r3,r4,8
 700b058:	1800051e 	bne	r3,zero,700b070 <__adddf3+0x760>
 700b05c:	300cd0fa 	srli	r6,r6,3
 700b060:	4806977a 	slli	r3,r9,29
 700b064:	2005883a 	mov	r2,r4
 700b068:	3825883a 	mov	r18,r7
 700b06c:	19a2b03a 	or	r17,r3,r6
 700b070:	8810d77a 	srli	r8,r17,29
 700b074:	100490fa 	slli	r2,r2,3
 700b078:	882290fa 	slli	r17,r17,3
 700b07c:	0401ffc4 	movi	r16,2047
 700b080:	4090b03a 	or	r8,r8,r2
 700b084:	003e4106 	br	700a98c <__alt_data_end+0xff00a98c>
 700b088:	0141ffc4 	movi	r5,2047
 700b08c:	117fc71e 	bne	r2,r5,700afac <__alt_data_end+0xff00afac>
 700b090:	4811883a 	mov	r8,r9
 700b094:	3023883a 	mov	r17,r6
 700b098:	1021883a 	mov	r16,r2
 700b09c:	003e3b06 	br	700a98c <__alt_data_end+0xff00a98c>
 700b0a0:	10002f26 	beq	r2,zero,700b160 <__adddf3+0x850>
 700b0a4:	4984b03a 	or	r2,r9,r6
 700b0a8:	10001126 	beq	r2,zero,700b0f0 <__adddf3+0x7e0>
 700b0ac:	4004d0fa 	srli	r2,r8,3
 700b0b0:	8822d0fa 	srli	r17,r17,3
 700b0b4:	4010977a 	slli	r8,r8,29
 700b0b8:	10c0022c 	andhi	r3,r2,8
 700b0bc:	4462b03a 	or	r17,r8,r17
 700b0c0:	183feb26 	beq	r3,zero,700b070 <__alt_data_end+0xff00b070>
 700b0c4:	4808d0fa 	srli	r4,r9,3
 700b0c8:	20c0022c 	andhi	r3,r4,8
 700b0cc:	183fe81e 	bne	r3,zero,700b070 <__alt_data_end+0xff00b070>
 700b0d0:	300cd0fa 	srli	r6,r6,3
 700b0d4:	4806977a 	slli	r3,r9,29
 700b0d8:	2005883a 	mov	r2,r4
 700b0dc:	19a2b03a 	or	r17,r3,r6
 700b0e0:	003fe306 	br	700b070 <__alt_data_end+0xff00b070>
 700b0e4:	0011883a 	mov	r8,zero
 700b0e8:	0005883a 	mov	r2,zero
 700b0ec:	003e3f06 	br	700a9ec <__alt_data_end+0xff00a9ec>
 700b0f0:	0401ffc4 	movi	r16,2047
 700b0f4:	003e2506 	br	700a98c <__alt_data_end+0xff00a98c>
 700b0f8:	0013883a 	mov	r9,zero
 700b0fc:	003f8406 	br	700af10 <__alt_data_end+0xff00af10>
 700b100:	0005883a 	mov	r2,zero
 700b104:	0007883a 	mov	r3,zero
 700b108:	003e8906 	br	700ab30 <__alt_data_end+0xff00ab30>
 700b10c:	197ff804 	addi	r5,r3,-32
 700b110:	01000804 	movi	r4,32
 700b114:	414ad83a 	srl	r5,r8,r5
 700b118:	19002426 	beq	r3,r4,700b1ac <__adddf3+0x89c>
 700b11c:	01001004 	movi	r4,64
 700b120:	20c7c83a 	sub	r3,r4,r3
 700b124:	40c6983a 	sll	r3,r8,r3
 700b128:	1c46b03a 	or	r3,r3,r17
 700b12c:	1806c03a 	cmpne	r3,r3,zero
 700b130:	28e2b03a 	or	r17,r5,r3
 700b134:	0007883a 	mov	r3,zero
 700b138:	003f2306 	br	700adc8 <__alt_data_end+0xff00adc8>
 700b13c:	0007883a 	mov	r3,zero
 700b140:	5811883a 	mov	r8,r11
 700b144:	00bfffc4 	movi	r2,-1
 700b148:	0401ffc4 	movi	r16,2047
 700b14c:	003e7806 	br	700ab30 <__alt_data_end+0xff00ab30>
 700b150:	4462b03a 	or	r17,r8,r17
 700b154:	8822c03a 	cmpne	r17,r17,zero
 700b158:	0009883a 	mov	r4,zero
 700b15c:	003fa006 	br	700afe0 <__alt_data_end+0xff00afe0>
 700b160:	4811883a 	mov	r8,r9
 700b164:	3023883a 	mov	r17,r6
 700b168:	0401ffc4 	movi	r16,2047
 700b16c:	003e0706 	br	700a98c <__alt_data_end+0xff00a98c>
 700b170:	4811883a 	mov	r8,r9
 700b174:	3023883a 	mov	r17,r6
 700b178:	003e0406 	br	700a98c <__alt_data_end+0xff00a98c>
 700b17c:	21fff804 	addi	r7,r4,-32
 700b180:	01400804 	movi	r5,32
 700b184:	41ced83a 	srl	r7,r8,r7
 700b188:	21400a26 	beq	r4,r5,700b1b4 <__adddf3+0x8a4>
 700b18c:	01401004 	movi	r5,64
 700b190:	2909c83a 	sub	r4,r5,r4
 700b194:	4108983a 	sll	r4,r8,r4
 700b198:	2448b03a 	or	r4,r4,r17
 700b19c:	2008c03a 	cmpne	r4,r4,zero
 700b1a0:	3922b03a 	or	r17,r7,r4
 700b1a4:	0009883a 	mov	r4,zero
 700b1a8:	003f8d06 	br	700afe0 <__alt_data_end+0xff00afe0>
 700b1ac:	0007883a 	mov	r3,zero
 700b1b0:	003fdd06 	br	700b128 <__alt_data_end+0xff00b128>
 700b1b4:	0009883a 	mov	r4,zero
 700b1b8:	003ff706 	br	700b198 <__alt_data_end+0xff00b198>

0700b1bc <__divdf3>:
 700b1bc:	defff204 	addi	sp,sp,-56
 700b1c0:	dd400915 	stw	r21,36(sp)
 700b1c4:	282ad53a 	srli	r21,r5,20
 700b1c8:	dd000815 	stw	r20,32(sp)
 700b1cc:	2828d7fa 	srli	r20,r5,31
 700b1d0:	dc000415 	stw	r16,16(sp)
 700b1d4:	04000434 	movhi	r16,16
 700b1d8:	df000c15 	stw	fp,48(sp)
 700b1dc:	843fffc4 	addi	r16,r16,-1
 700b1e0:	dfc00d15 	stw	ra,52(sp)
 700b1e4:	ddc00b15 	stw	r23,44(sp)
 700b1e8:	dd800a15 	stw	r22,40(sp)
 700b1ec:	dcc00715 	stw	r19,28(sp)
 700b1f0:	dc800615 	stw	r18,24(sp)
 700b1f4:	dc400515 	stw	r17,20(sp)
 700b1f8:	ad41ffcc 	andi	r21,r21,2047
 700b1fc:	2c20703a 	and	r16,r5,r16
 700b200:	a7003fcc 	andi	fp,r20,255
 700b204:	a8006126 	beq	r21,zero,700b38c <__divdf3+0x1d0>
 700b208:	0081ffc4 	movi	r2,2047
 700b20c:	2025883a 	mov	r18,r4
 700b210:	a8803726 	beq	r21,r2,700b2f0 <__divdf3+0x134>
 700b214:	80800434 	orhi	r2,r16,16
 700b218:	100490fa 	slli	r2,r2,3
 700b21c:	2020d77a 	srli	r16,r4,29
 700b220:	202490fa 	slli	r18,r4,3
 700b224:	ad7f0044 	addi	r21,r21,-1023
 700b228:	80a0b03a 	or	r16,r16,r2
 700b22c:	0027883a 	mov	r19,zero
 700b230:	0013883a 	mov	r9,zero
 700b234:	3804d53a 	srli	r2,r7,20
 700b238:	382cd7fa 	srli	r22,r7,31
 700b23c:	04400434 	movhi	r17,16
 700b240:	8c7fffc4 	addi	r17,r17,-1
 700b244:	1081ffcc 	andi	r2,r2,2047
 700b248:	3011883a 	mov	r8,r6
 700b24c:	3c62703a 	and	r17,r7,r17
 700b250:	b5c03fcc 	andi	r23,r22,255
 700b254:	10006c26 	beq	r2,zero,700b408 <__divdf3+0x24c>
 700b258:	00c1ffc4 	movi	r3,2047
 700b25c:	10c06426 	beq	r2,r3,700b3f0 <__divdf3+0x234>
 700b260:	88c00434 	orhi	r3,r17,16
 700b264:	180690fa 	slli	r3,r3,3
 700b268:	3022d77a 	srli	r17,r6,29
 700b26c:	301090fa 	slli	r8,r6,3
 700b270:	10bf0044 	addi	r2,r2,-1023
 700b274:	88e2b03a 	or	r17,r17,r3
 700b278:	000f883a 	mov	r7,zero
 700b27c:	a58cf03a 	xor	r6,r20,r22
 700b280:	3cc8b03a 	or	r4,r7,r19
 700b284:	a8abc83a 	sub	r21,r21,r2
 700b288:	008003c4 	movi	r2,15
 700b28c:	3007883a 	mov	r3,r6
 700b290:	34c03fcc 	andi	r19,r6,255
 700b294:	11009036 	bltu	r2,r4,700b4d8 <__divdf3+0x31c>
 700b298:	200890ba 	slli	r4,r4,2
 700b29c:	0081c074 	movhi	r2,1793
 700b2a0:	10acac04 	addi	r2,r2,-19792
 700b2a4:	2089883a 	add	r4,r4,r2
 700b2a8:	20800017 	ldw	r2,0(r4)
 700b2ac:	1000683a 	jmp	r2
 700b2b0:	0700b4d8 	cmpnei	fp,zero,723
 700b2b4:	0700b328 	cmpgeui	fp,zero,716
 700b2b8:	0700b4c8 	cmpgei	fp,zero,723
 700b2bc:	0700b31c 	xori	fp,zero,716
 700b2c0:	0700b4c8 	cmpgei	fp,zero,723
 700b2c4:	0700b49c 	xori	fp,zero,722
 700b2c8:	0700b4c8 	cmpgei	fp,zero,723
 700b2cc:	0700b31c 	xori	fp,zero,716
 700b2d0:	0700b328 	cmpgeui	fp,zero,716
 700b2d4:	0700b328 	cmpgeui	fp,zero,716
 700b2d8:	0700b49c 	xori	fp,zero,722
 700b2dc:	0700b31c 	xori	fp,zero,716
 700b2e0:	0700b30c 	andi	fp,zero,716
 700b2e4:	0700b30c 	andi	fp,zero,716
 700b2e8:	0700b30c 	andi	fp,zero,716
 700b2ec:	0700b7bc 	xorhi	fp,zero,734
 700b2f0:	2404b03a 	or	r2,r4,r16
 700b2f4:	1000661e 	bne	r2,zero,700b490 <__divdf3+0x2d4>
 700b2f8:	04c00204 	movi	r19,8
 700b2fc:	0021883a 	mov	r16,zero
 700b300:	0025883a 	mov	r18,zero
 700b304:	02400084 	movi	r9,2
 700b308:	003fca06 	br	700b234 <__alt_data_end+0xff00b234>
 700b30c:	8023883a 	mov	r17,r16
 700b310:	9011883a 	mov	r8,r18
 700b314:	e02f883a 	mov	r23,fp
 700b318:	480f883a 	mov	r7,r9
 700b31c:	00800084 	movi	r2,2
 700b320:	3881311e 	bne	r7,r2,700b7e8 <__divdf3+0x62c>
 700b324:	b827883a 	mov	r19,r23
 700b328:	98c0004c 	andi	r3,r19,1
 700b32c:	0081ffc4 	movi	r2,2047
 700b330:	000b883a 	mov	r5,zero
 700b334:	0025883a 	mov	r18,zero
 700b338:	1004953a 	slli	r2,r2,20
 700b33c:	18c03fcc 	andi	r3,r3,255
 700b340:	04400434 	movhi	r17,16
 700b344:	8c7fffc4 	addi	r17,r17,-1
 700b348:	180697fa 	slli	r3,r3,31
 700b34c:	2c4a703a 	and	r5,r5,r17
 700b350:	288ab03a 	or	r5,r5,r2
 700b354:	28c6b03a 	or	r3,r5,r3
 700b358:	9005883a 	mov	r2,r18
 700b35c:	dfc00d17 	ldw	ra,52(sp)
 700b360:	df000c17 	ldw	fp,48(sp)
 700b364:	ddc00b17 	ldw	r23,44(sp)
 700b368:	dd800a17 	ldw	r22,40(sp)
 700b36c:	dd400917 	ldw	r21,36(sp)
 700b370:	dd000817 	ldw	r20,32(sp)
 700b374:	dcc00717 	ldw	r19,28(sp)
 700b378:	dc800617 	ldw	r18,24(sp)
 700b37c:	dc400517 	ldw	r17,20(sp)
 700b380:	dc000417 	ldw	r16,16(sp)
 700b384:	dec00e04 	addi	sp,sp,56
 700b388:	f800283a 	ret
 700b38c:	2404b03a 	or	r2,r4,r16
 700b390:	2027883a 	mov	r19,r4
 700b394:	10003926 	beq	r2,zero,700b47c <__divdf3+0x2c0>
 700b398:	80012e26 	beq	r16,zero,700b854 <__divdf3+0x698>
 700b39c:	8009883a 	mov	r4,r16
 700b3a0:	d9800315 	stw	r6,12(sp)
 700b3a4:	d9c00215 	stw	r7,8(sp)
 700b3a8:	700cf140 	call	700cf14 <__clzsi2>
 700b3ac:	d9800317 	ldw	r6,12(sp)
 700b3b0:	d9c00217 	ldw	r7,8(sp)
 700b3b4:	113ffd44 	addi	r4,r2,-11
 700b3b8:	00c00704 	movi	r3,28
 700b3bc:	19012116 	blt	r3,r4,700b844 <__divdf3+0x688>
 700b3c0:	00c00744 	movi	r3,29
 700b3c4:	147ffe04 	addi	r17,r2,-8
 700b3c8:	1907c83a 	sub	r3,r3,r4
 700b3cc:	8460983a 	sll	r16,r16,r17
 700b3d0:	98c6d83a 	srl	r3,r19,r3
 700b3d4:	9c64983a 	sll	r18,r19,r17
 700b3d8:	1c20b03a 	or	r16,r3,r16
 700b3dc:	1080fcc4 	addi	r2,r2,1011
 700b3e0:	00abc83a 	sub	r21,zero,r2
 700b3e4:	0027883a 	mov	r19,zero
 700b3e8:	0013883a 	mov	r9,zero
 700b3ec:	003f9106 	br	700b234 <__alt_data_end+0xff00b234>
 700b3f0:	3446b03a 	or	r3,r6,r17
 700b3f4:	18001f1e 	bne	r3,zero,700b474 <__divdf3+0x2b8>
 700b3f8:	0023883a 	mov	r17,zero
 700b3fc:	0011883a 	mov	r8,zero
 700b400:	01c00084 	movi	r7,2
 700b404:	003f9d06 	br	700b27c <__alt_data_end+0xff00b27c>
 700b408:	3446b03a 	or	r3,r6,r17
 700b40c:	18001526 	beq	r3,zero,700b464 <__divdf3+0x2a8>
 700b410:	88011b26 	beq	r17,zero,700b880 <__divdf3+0x6c4>
 700b414:	8809883a 	mov	r4,r17
 700b418:	d9800315 	stw	r6,12(sp)
 700b41c:	da400115 	stw	r9,4(sp)
 700b420:	700cf140 	call	700cf14 <__clzsi2>
 700b424:	d9800317 	ldw	r6,12(sp)
 700b428:	da400117 	ldw	r9,4(sp)
 700b42c:	113ffd44 	addi	r4,r2,-11
 700b430:	00c00704 	movi	r3,28
 700b434:	19010e16 	blt	r3,r4,700b870 <__divdf3+0x6b4>
 700b438:	00c00744 	movi	r3,29
 700b43c:	123ffe04 	addi	r8,r2,-8
 700b440:	1907c83a 	sub	r3,r3,r4
 700b444:	8a22983a 	sll	r17,r17,r8
 700b448:	30c6d83a 	srl	r3,r6,r3
 700b44c:	3210983a 	sll	r8,r6,r8
 700b450:	1c62b03a 	or	r17,r3,r17
 700b454:	1080fcc4 	addi	r2,r2,1011
 700b458:	0085c83a 	sub	r2,zero,r2
 700b45c:	000f883a 	mov	r7,zero
 700b460:	003f8606 	br	700b27c <__alt_data_end+0xff00b27c>
 700b464:	0023883a 	mov	r17,zero
 700b468:	0011883a 	mov	r8,zero
 700b46c:	01c00044 	movi	r7,1
 700b470:	003f8206 	br	700b27c <__alt_data_end+0xff00b27c>
 700b474:	01c000c4 	movi	r7,3
 700b478:	003f8006 	br	700b27c <__alt_data_end+0xff00b27c>
 700b47c:	04c00104 	movi	r19,4
 700b480:	0021883a 	mov	r16,zero
 700b484:	0025883a 	mov	r18,zero
 700b488:	02400044 	movi	r9,1
 700b48c:	003f6906 	br	700b234 <__alt_data_end+0xff00b234>
 700b490:	04c00304 	movi	r19,12
 700b494:	024000c4 	movi	r9,3
 700b498:	003f6606 	br	700b234 <__alt_data_end+0xff00b234>
 700b49c:	01400434 	movhi	r5,16
 700b4a0:	0007883a 	mov	r3,zero
 700b4a4:	297fffc4 	addi	r5,r5,-1
 700b4a8:	04bfffc4 	movi	r18,-1
 700b4ac:	0081ffc4 	movi	r2,2047
 700b4b0:	003fa106 	br	700b338 <__alt_data_end+0xff00b338>
 700b4b4:	00c00044 	movi	r3,1
 700b4b8:	1887c83a 	sub	r3,r3,r2
 700b4bc:	01000e04 	movi	r4,56
 700b4c0:	20c1210e 	bge	r4,r3,700b948 <__divdf3+0x78c>
 700b4c4:	98c0004c 	andi	r3,r19,1
 700b4c8:	0005883a 	mov	r2,zero
 700b4cc:	000b883a 	mov	r5,zero
 700b4d0:	0025883a 	mov	r18,zero
 700b4d4:	003f9806 	br	700b338 <__alt_data_end+0xff00b338>
 700b4d8:	8c00fd36 	bltu	r17,r16,700b8d0 <__divdf3+0x714>
 700b4dc:	8440fb26 	beq	r16,r17,700b8cc <__divdf3+0x710>
 700b4e0:	8007883a 	mov	r3,r16
 700b4e4:	ad7fffc4 	addi	r21,r21,-1
 700b4e8:	0021883a 	mov	r16,zero
 700b4ec:	4004d63a 	srli	r2,r8,24
 700b4f0:	8822923a 	slli	r17,r17,8
 700b4f4:	1809883a 	mov	r4,r3
 700b4f8:	402c923a 	slli	r22,r8,8
 700b4fc:	88b8b03a 	or	fp,r17,r2
 700b500:	e028d43a 	srli	r20,fp,16
 700b504:	d8c00015 	stw	r3,0(sp)
 700b508:	e5ffffcc 	andi	r23,fp,65535
 700b50c:	a00b883a 	mov	r5,r20
 700b510:	700a8540 	call	700a854 <__udivsi3>
 700b514:	d8c00017 	ldw	r3,0(sp)
 700b518:	a00b883a 	mov	r5,r20
 700b51c:	d8800315 	stw	r2,12(sp)
 700b520:	1809883a 	mov	r4,r3
 700b524:	700a8b80 	call	700a8b8 <__umodsi3>
 700b528:	d9800317 	ldw	r6,12(sp)
 700b52c:	1006943a 	slli	r3,r2,16
 700b530:	9004d43a 	srli	r2,r18,16
 700b534:	b9a3383a 	mul	r17,r23,r6
 700b538:	10c4b03a 	or	r2,r2,r3
 700b53c:	1440062e 	bgeu	r2,r17,700b558 <__divdf3+0x39c>
 700b540:	1705883a 	add	r2,r2,fp
 700b544:	30ffffc4 	addi	r3,r6,-1
 700b548:	1700ee36 	bltu	r2,fp,700b904 <__divdf3+0x748>
 700b54c:	1440ed2e 	bgeu	r2,r17,700b904 <__divdf3+0x748>
 700b550:	31bfff84 	addi	r6,r6,-2
 700b554:	1705883a 	add	r2,r2,fp
 700b558:	1463c83a 	sub	r17,r2,r17
 700b55c:	a00b883a 	mov	r5,r20
 700b560:	8809883a 	mov	r4,r17
 700b564:	d9800315 	stw	r6,12(sp)
 700b568:	700a8540 	call	700a854 <__udivsi3>
 700b56c:	a00b883a 	mov	r5,r20
 700b570:	8809883a 	mov	r4,r17
 700b574:	d8800215 	stw	r2,8(sp)
 700b578:	700a8b80 	call	700a8b8 <__umodsi3>
 700b57c:	d9c00217 	ldw	r7,8(sp)
 700b580:	1004943a 	slli	r2,r2,16
 700b584:	94bfffcc 	andi	r18,r18,65535
 700b588:	b9d1383a 	mul	r8,r23,r7
 700b58c:	90a4b03a 	or	r18,r18,r2
 700b590:	d9800317 	ldw	r6,12(sp)
 700b594:	9200062e 	bgeu	r18,r8,700b5b0 <__divdf3+0x3f4>
 700b598:	9725883a 	add	r18,r18,fp
 700b59c:	38bfffc4 	addi	r2,r7,-1
 700b5a0:	9700d636 	bltu	r18,fp,700b8fc <__divdf3+0x740>
 700b5a4:	9200d52e 	bgeu	r18,r8,700b8fc <__divdf3+0x740>
 700b5a8:	39ffff84 	addi	r7,r7,-2
 700b5ac:	9725883a 	add	r18,r18,fp
 700b5b0:	3004943a 	slli	r2,r6,16
 700b5b4:	b012d43a 	srli	r9,r22,16
 700b5b8:	b1bfffcc 	andi	r6,r22,65535
 700b5bc:	11e2b03a 	or	r17,r2,r7
 700b5c0:	8806d43a 	srli	r3,r17,16
 700b5c4:	893fffcc 	andi	r4,r17,65535
 700b5c8:	218b383a 	mul	r5,r4,r6
 700b5cc:	30c5383a 	mul	r2,r6,r3
 700b5d0:	2249383a 	mul	r4,r4,r9
 700b5d4:	280ed43a 	srli	r7,r5,16
 700b5d8:	9225c83a 	sub	r18,r18,r8
 700b5dc:	2089883a 	add	r4,r4,r2
 700b5e0:	3909883a 	add	r4,r7,r4
 700b5e4:	1a47383a 	mul	r3,r3,r9
 700b5e8:	2080022e 	bgeu	r4,r2,700b5f4 <__divdf3+0x438>
 700b5ec:	00800074 	movhi	r2,1
 700b5f0:	1887883a 	add	r3,r3,r2
 700b5f4:	2004d43a 	srli	r2,r4,16
 700b5f8:	2008943a 	slli	r4,r4,16
 700b5fc:	297fffcc 	andi	r5,r5,65535
 700b600:	10c7883a 	add	r3,r2,r3
 700b604:	2149883a 	add	r4,r4,r5
 700b608:	90c0a536 	bltu	r18,r3,700b8a0 <__divdf3+0x6e4>
 700b60c:	90c0bf26 	beq	r18,r3,700b90c <__divdf3+0x750>
 700b610:	90c7c83a 	sub	r3,r18,r3
 700b614:	810fc83a 	sub	r7,r16,r4
 700b618:	81e5803a 	cmpltu	r18,r16,r7
 700b61c:	1ca5c83a 	sub	r18,r3,r18
 700b620:	e480c126 	beq	fp,r18,700b928 <__divdf3+0x76c>
 700b624:	a00b883a 	mov	r5,r20
 700b628:	9009883a 	mov	r4,r18
 700b62c:	d9800315 	stw	r6,12(sp)
 700b630:	d9c00215 	stw	r7,8(sp)
 700b634:	da400115 	stw	r9,4(sp)
 700b638:	700a8540 	call	700a854 <__udivsi3>
 700b63c:	a00b883a 	mov	r5,r20
 700b640:	9009883a 	mov	r4,r18
 700b644:	d8800015 	stw	r2,0(sp)
 700b648:	700a8b80 	call	700a8b8 <__umodsi3>
 700b64c:	d9c00217 	ldw	r7,8(sp)
 700b650:	da000017 	ldw	r8,0(sp)
 700b654:	1006943a 	slli	r3,r2,16
 700b658:	3804d43a 	srli	r2,r7,16
 700b65c:	ba21383a 	mul	r16,r23,r8
 700b660:	d9800317 	ldw	r6,12(sp)
 700b664:	10c4b03a 	or	r2,r2,r3
 700b668:	da400117 	ldw	r9,4(sp)
 700b66c:	1400062e 	bgeu	r2,r16,700b688 <__divdf3+0x4cc>
 700b670:	1705883a 	add	r2,r2,fp
 700b674:	40ffffc4 	addi	r3,r8,-1
 700b678:	1700ad36 	bltu	r2,fp,700b930 <__divdf3+0x774>
 700b67c:	1400ac2e 	bgeu	r2,r16,700b930 <__divdf3+0x774>
 700b680:	423fff84 	addi	r8,r8,-2
 700b684:	1705883a 	add	r2,r2,fp
 700b688:	1421c83a 	sub	r16,r2,r16
 700b68c:	a00b883a 	mov	r5,r20
 700b690:	8009883a 	mov	r4,r16
 700b694:	d9800315 	stw	r6,12(sp)
 700b698:	d9c00215 	stw	r7,8(sp)
 700b69c:	da000015 	stw	r8,0(sp)
 700b6a0:	da400115 	stw	r9,4(sp)
 700b6a4:	700a8540 	call	700a854 <__udivsi3>
 700b6a8:	8009883a 	mov	r4,r16
 700b6ac:	a00b883a 	mov	r5,r20
 700b6b0:	1025883a 	mov	r18,r2
 700b6b4:	700a8b80 	call	700a8b8 <__umodsi3>
 700b6b8:	d9c00217 	ldw	r7,8(sp)
 700b6bc:	1004943a 	slli	r2,r2,16
 700b6c0:	bcaf383a 	mul	r23,r23,r18
 700b6c4:	393fffcc 	andi	r4,r7,65535
 700b6c8:	2088b03a 	or	r4,r4,r2
 700b6cc:	d9800317 	ldw	r6,12(sp)
 700b6d0:	da000017 	ldw	r8,0(sp)
 700b6d4:	da400117 	ldw	r9,4(sp)
 700b6d8:	25c0062e 	bgeu	r4,r23,700b6f4 <__divdf3+0x538>
 700b6dc:	2709883a 	add	r4,r4,fp
 700b6e0:	90bfffc4 	addi	r2,r18,-1
 700b6e4:	27009436 	bltu	r4,fp,700b938 <__divdf3+0x77c>
 700b6e8:	25c0932e 	bgeu	r4,r23,700b938 <__divdf3+0x77c>
 700b6ec:	94bfff84 	addi	r18,r18,-2
 700b6f0:	2709883a 	add	r4,r4,fp
 700b6f4:	4004943a 	slli	r2,r8,16
 700b6f8:	25efc83a 	sub	r23,r4,r23
 700b6fc:	1490b03a 	or	r8,r2,r18
 700b700:	4008d43a 	srli	r4,r8,16
 700b704:	40ffffcc 	andi	r3,r8,65535
 700b708:	30c5383a 	mul	r2,r6,r3
 700b70c:	1a47383a 	mul	r3,r3,r9
 700b710:	310d383a 	mul	r6,r6,r4
 700b714:	100ad43a 	srli	r5,r2,16
 700b718:	4913383a 	mul	r9,r9,r4
 700b71c:	1987883a 	add	r3,r3,r6
 700b720:	28c7883a 	add	r3,r5,r3
 700b724:	1980022e 	bgeu	r3,r6,700b730 <__divdf3+0x574>
 700b728:	01000074 	movhi	r4,1
 700b72c:	4913883a 	add	r9,r9,r4
 700b730:	1808d43a 	srli	r4,r3,16
 700b734:	1806943a 	slli	r3,r3,16
 700b738:	10bfffcc 	andi	r2,r2,65535
 700b73c:	2253883a 	add	r9,r4,r9
 700b740:	1887883a 	add	r3,r3,r2
 700b744:	ba403836 	bltu	r23,r9,700b828 <__divdf3+0x66c>
 700b748:	ba403626 	beq	r23,r9,700b824 <__divdf3+0x668>
 700b74c:	42000054 	ori	r8,r8,1
 700b750:	a880ffc4 	addi	r2,r21,1023
 700b754:	00bf570e 	bge	zero,r2,700b4b4 <__alt_data_end+0xff00b4b4>
 700b758:	40c001cc 	andi	r3,r8,7
 700b75c:	18000726 	beq	r3,zero,700b77c <__divdf3+0x5c0>
 700b760:	40c003cc 	andi	r3,r8,15
 700b764:	01000104 	movi	r4,4
 700b768:	19000426 	beq	r3,r4,700b77c <__divdf3+0x5c0>
 700b76c:	4107883a 	add	r3,r8,r4
 700b770:	1a11803a 	cmpltu	r8,r3,r8
 700b774:	8a23883a 	add	r17,r17,r8
 700b778:	1811883a 	mov	r8,r3
 700b77c:	88c0402c 	andhi	r3,r17,256
 700b780:	18000426 	beq	r3,zero,700b794 <__divdf3+0x5d8>
 700b784:	00ffc034 	movhi	r3,65280
 700b788:	18ffffc4 	addi	r3,r3,-1
 700b78c:	a8810004 	addi	r2,r21,1024
 700b790:	88e2703a 	and	r17,r17,r3
 700b794:	00c1ff84 	movi	r3,2046
 700b798:	18bee316 	blt	r3,r2,700b328 <__alt_data_end+0xff00b328>
 700b79c:	8824977a 	slli	r18,r17,29
 700b7a0:	4010d0fa 	srli	r8,r8,3
 700b7a4:	8822927a 	slli	r17,r17,9
 700b7a8:	1081ffcc 	andi	r2,r2,2047
 700b7ac:	9224b03a 	or	r18,r18,r8
 700b7b0:	880ad33a 	srli	r5,r17,12
 700b7b4:	98c0004c 	andi	r3,r19,1
 700b7b8:	003edf06 	br	700b338 <__alt_data_end+0xff00b338>
 700b7bc:	8080022c 	andhi	r2,r16,8
 700b7c0:	10001226 	beq	r2,zero,700b80c <__divdf3+0x650>
 700b7c4:	8880022c 	andhi	r2,r17,8
 700b7c8:	1000101e 	bne	r2,zero,700b80c <__divdf3+0x650>
 700b7cc:	00800434 	movhi	r2,16
 700b7d0:	89400234 	orhi	r5,r17,8
 700b7d4:	10bfffc4 	addi	r2,r2,-1
 700b7d8:	b007883a 	mov	r3,r22
 700b7dc:	288a703a 	and	r5,r5,r2
 700b7e0:	4025883a 	mov	r18,r8
 700b7e4:	003f3106 	br	700b4ac <__alt_data_end+0xff00b4ac>
 700b7e8:	008000c4 	movi	r2,3
 700b7ec:	3880a626 	beq	r7,r2,700ba88 <__divdf3+0x8cc>
 700b7f0:	00800044 	movi	r2,1
 700b7f4:	3880521e 	bne	r7,r2,700b940 <__divdf3+0x784>
 700b7f8:	b807883a 	mov	r3,r23
 700b7fc:	0005883a 	mov	r2,zero
 700b800:	000b883a 	mov	r5,zero
 700b804:	0025883a 	mov	r18,zero
 700b808:	003ecb06 	br	700b338 <__alt_data_end+0xff00b338>
 700b80c:	00800434 	movhi	r2,16
 700b810:	81400234 	orhi	r5,r16,8
 700b814:	10bfffc4 	addi	r2,r2,-1
 700b818:	a007883a 	mov	r3,r20
 700b81c:	288a703a 	and	r5,r5,r2
 700b820:	003f2206 	br	700b4ac <__alt_data_end+0xff00b4ac>
 700b824:	183fca26 	beq	r3,zero,700b750 <__alt_data_end+0xff00b750>
 700b828:	e5ef883a 	add	r23,fp,r23
 700b82c:	40bfffc4 	addi	r2,r8,-1
 700b830:	bf00392e 	bgeu	r23,fp,700b918 <__divdf3+0x75c>
 700b834:	1011883a 	mov	r8,r2
 700b838:	ba7fc41e 	bne	r23,r9,700b74c <__alt_data_end+0xff00b74c>
 700b83c:	b0ffc31e 	bne	r22,r3,700b74c <__alt_data_end+0xff00b74c>
 700b840:	003fc306 	br	700b750 <__alt_data_end+0xff00b750>
 700b844:	143ff604 	addi	r16,r2,-40
 700b848:	9c20983a 	sll	r16,r19,r16
 700b84c:	0025883a 	mov	r18,zero
 700b850:	003ee206 	br	700b3dc <__alt_data_end+0xff00b3dc>
 700b854:	d9800315 	stw	r6,12(sp)
 700b858:	d9c00215 	stw	r7,8(sp)
 700b85c:	700cf140 	call	700cf14 <__clzsi2>
 700b860:	10800804 	addi	r2,r2,32
 700b864:	d9c00217 	ldw	r7,8(sp)
 700b868:	d9800317 	ldw	r6,12(sp)
 700b86c:	003ed106 	br	700b3b4 <__alt_data_end+0xff00b3b4>
 700b870:	147ff604 	addi	r17,r2,-40
 700b874:	3462983a 	sll	r17,r6,r17
 700b878:	0011883a 	mov	r8,zero
 700b87c:	003ef506 	br	700b454 <__alt_data_end+0xff00b454>
 700b880:	3009883a 	mov	r4,r6
 700b884:	d9800315 	stw	r6,12(sp)
 700b888:	da400115 	stw	r9,4(sp)
 700b88c:	700cf140 	call	700cf14 <__clzsi2>
 700b890:	10800804 	addi	r2,r2,32
 700b894:	da400117 	ldw	r9,4(sp)
 700b898:	d9800317 	ldw	r6,12(sp)
 700b89c:	003ee306 	br	700b42c <__alt_data_end+0xff00b42c>
 700b8a0:	85a1883a 	add	r16,r16,r22
 700b8a4:	8585803a 	cmpltu	r2,r16,r22
 700b8a8:	1705883a 	add	r2,r2,fp
 700b8ac:	14a5883a 	add	r18,r2,r18
 700b8b0:	88bfffc4 	addi	r2,r17,-1
 700b8b4:	e4800c2e 	bgeu	fp,r18,700b8e8 <__divdf3+0x72c>
 700b8b8:	90c03e36 	bltu	r18,r3,700b9b4 <__divdf3+0x7f8>
 700b8bc:	1c806926 	beq	r3,r18,700ba64 <__divdf3+0x8a8>
 700b8c0:	90c7c83a 	sub	r3,r18,r3
 700b8c4:	1023883a 	mov	r17,r2
 700b8c8:	003f5206 	br	700b614 <__alt_data_end+0xff00b614>
 700b8cc:	923f0436 	bltu	r18,r8,700b4e0 <__alt_data_end+0xff00b4e0>
 700b8d0:	800897fa 	slli	r4,r16,31
 700b8d4:	9004d07a 	srli	r2,r18,1
 700b8d8:	8006d07a 	srli	r3,r16,1
 700b8dc:	902097fa 	slli	r16,r18,31
 700b8e0:	20a4b03a 	or	r18,r4,r2
 700b8e4:	003f0106 	br	700b4ec <__alt_data_end+0xff00b4ec>
 700b8e8:	e4bff51e 	bne	fp,r18,700b8c0 <__alt_data_end+0xff00b8c0>
 700b8ec:	85bff22e 	bgeu	r16,r22,700b8b8 <__alt_data_end+0xff00b8b8>
 700b8f0:	e0c7c83a 	sub	r3,fp,r3
 700b8f4:	1023883a 	mov	r17,r2
 700b8f8:	003f4606 	br	700b614 <__alt_data_end+0xff00b614>
 700b8fc:	100f883a 	mov	r7,r2
 700b900:	003f2b06 	br	700b5b0 <__alt_data_end+0xff00b5b0>
 700b904:	180d883a 	mov	r6,r3
 700b908:	003f1306 	br	700b558 <__alt_data_end+0xff00b558>
 700b90c:	813fe436 	bltu	r16,r4,700b8a0 <__alt_data_end+0xff00b8a0>
 700b910:	0007883a 	mov	r3,zero
 700b914:	003f3f06 	br	700b614 <__alt_data_end+0xff00b614>
 700b918:	ba402c36 	bltu	r23,r9,700b9cc <__divdf3+0x810>
 700b91c:	4dc05426 	beq	r9,r23,700ba70 <__divdf3+0x8b4>
 700b920:	1011883a 	mov	r8,r2
 700b924:	003f8906 	br	700b74c <__alt_data_end+0xff00b74c>
 700b928:	023fffc4 	movi	r8,-1
 700b92c:	003f8806 	br	700b750 <__alt_data_end+0xff00b750>
 700b930:	1811883a 	mov	r8,r3
 700b934:	003f5406 	br	700b688 <__alt_data_end+0xff00b688>
 700b938:	1025883a 	mov	r18,r2
 700b93c:	003f6d06 	br	700b6f4 <__alt_data_end+0xff00b6f4>
 700b940:	b827883a 	mov	r19,r23
 700b944:	003f8206 	br	700b750 <__alt_data_end+0xff00b750>
 700b948:	010007c4 	movi	r4,31
 700b94c:	20c02616 	blt	r4,r3,700b9e8 <__divdf3+0x82c>
 700b950:	00800804 	movi	r2,32
 700b954:	10c5c83a 	sub	r2,r2,r3
 700b958:	888a983a 	sll	r5,r17,r2
 700b95c:	40c8d83a 	srl	r4,r8,r3
 700b960:	4084983a 	sll	r2,r8,r2
 700b964:	88e2d83a 	srl	r17,r17,r3
 700b968:	2906b03a 	or	r3,r5,r4
 700b96c:	1004c03a 	cmpne	r2,r2,zero
 700b970:	1886b03a 	or	r3,r3,r2
 700b974:	188001cc 	andi	r2,r3,7
 700b978:	10000726 	beq	r2,zero,700b998 <__divdf3+0x7dc>
 700b97c:	188003cc 	andi	r2,r3,15
 700b980:	01000104 	movi	r4,4
 700b984:	11000426 	beq	r2,r4,700b998 <__divdf3+0x7dc>
 700b988:	1805883a 	mov	r2,r3
 700b98c:	10c00104 	addi	r3,r2,4
 700b990:	1885803a 	cmpltu	r2,r3,r2
 700b994:	88a3883a 	add	r17,r17,r2
 700b998:	8880202c 	andhi	r2,r17,128
 700b99c:	10002726 	beq	r2,zero,700ba3c <__divdf3+0x880>
 700b9a0:	98c0004c 	andi	r3,r19,1
 700b9a4:	00800044 	movi	r2,1
 700b9a8:	000b883a 	mov	r5,zero
 700b9ac:	0025883a 	mov	r18,zero
 700b9b0:	003e6106 	br	700b338 <__alt_data_end+0xff00b338>
 700b9b4:	85a1883a 	add	r16,r16,r22
 700b9b8:	8585803a 	cmpltu	r2,r16,r22
 700b9bc:	1705883a 	add	r2,r2,fp
 700b9c0:	14a5883a 	add	r18,r2,r18
 700b9c4:	8c7fff84 	addi	r17,r17,-2
 700b9c8:	003f1106 	br	700b610 <__alt_data_end+0xff00b610>
 700b9cc:	b589883a 	add	r4,r22,r22
 700b9d0:	25ad803a 	cmpltu	r22,r4,r22
 700b9d4:	b739883a 	add	fp,r22,fp
 700b9d8:	40bfff84 	addi	r2,r8,-2
 700b9dc:	bf2f883a 	add	r23,r23,fp
 700b9e0:	202d883a 	mov	r22,r4
 700b9e4:	003f9306 	br	700b834 <__alt_data_end+0xff00b834>
 700b9e8:	013ff844 	movi	r4,-31
 700b9ec:	2085c83a 	sub	r2,r4,r2
 700b9f0:	8888d83a 	srl	r4,r17,r2
 700b9f4:	00800804 	movi	r2,32
 700b9f8:	18802126 	beq	r3,r2,700ba80 <__divdf3+0x8c4>
 700b9fc:	00801004 	movi	r2,64
 700ba00:	10c5c83a 	sub	r2,r2,r3
 700ba04:	8884983a 	sll	r2,r17,r2
 700ba08:	1204b03a 	or	r2,r2,r8
 700ba0c:	1004c03a 	cmpne	r2,r2,zero
 700ba10:	2084b03a 	or	r2,r4,r2
 700ba14:	144001cc 	andi	r17,r2,7
 700ba18:	88000d1e 	bne	r17,zero,700ba50 <__divdf3+0x894>
 700ba1c:	000b883a 	mov	r5,zero
 700ba20:	1024d0fa 	srli	r18,r2,3
 700ba24:	98c0004c 	andi	r3,r19,1
 700ba28:	0005883a 	mov	r2,zero
 700ba2c:	9464b03a 	or	r18,r18,r17
 700ba30:	003e4106 	br	700b338 <__alt_data_end+0xff00b338>
 700ba34:	1007883a 	mov	r3,r2
 700ba38:	0023883a 	mov	r17,zero
 700ba3c:	880a927a 	slli	r5,r17,9
 700ba40:	1805883a 	mov	r2,r3
 700ba44:	8822977a 	slli	r17,r17,29
 700ba48:	280ad33a 	srli	r5,r5,12
 700ba4c:	003ff406 	br	700ba20 <__alt_data_end+0xff00ba20>
 700ba50:	10c003cc 	andi	r3,r2,15
 700ba54:	01000104 	movi	r4,4
 700ba58:	193ff626 	beq	r3,r4,700ba34 <__alt_data_end+0xff00ba34>
 700ba5c:	0023883a 	mov	r17,zero
 700ba60:	003fca06 	br	700b98c <__alt_data_end+0xff00b98c>
 700ba64:	813fd336 	bltu	r16,r4,700b9b4 <__alt_data_end+0xff00b9b4>
 700ba68:	1023883a 	mov	r17,r2
 700ba6c:	003fa806 	br	700b910 <__alt_data_end+0xff00b910>
 700ba70:	b0ffd636 	bltu	r22,r3,700b9cc <__alt_data_end+0xff00b9cc>
 700ba74:	1011883a 	mov	r8,r2
 700ba78:	b0ff341e 	bne	r22,r3,700b74c <__alt_data_end+0xff00b74c>
 700ba7c:	003f3406 	br	700b750 <__alt_data_end+0xff00b750>
 700ba80:	0005883a 	mov	r2,zero
 700ba84:	003fe006 	br	700ba08 <__alt_data_end+0xff00ba08>
 700ba88:	00800434 	movhi	r2,16
 700ba8c:	89400234 	orhi	r5,r17,8
 700ba90:	10bfffc4 	addi	r2,r2,-1
 700ba94:	b807883a 	mov	r3,r23
 700ba98:	288a703a 	and	r5,r5,r2
 700ba9c:	4025883a 	mov	r18,r8
 700baa0:	003e8206 	br	700b4ac <__alt_data_end+0xff00b4ac>

0700baa4 <__eqdf2>:
 700baa4:	2804d53a 	srli	r2,r5,20
 700baa8:	3806d53a 	srli	r3,r7,20
 700baac:	02000434 	movhi	r8,16
 700bab0:	423fffc4 	addi	r8,r8,-1
 700bab4:	1081ffcc 	andi	r2,r2,2047
 700bab8:	0281ffc4 	movi	r10,2047
 700babc:	2a12703a 	and	r9,r5,r8
 700bac0:	18c1ffcc 	andi	r3,r3,2047
 700bac4:	3a10703a 	and	r8,r7,r8
 700bac8:	280ad7fa 	srli	r5,r5,31
 700bacc:	380ed7fa 	srli	r7,r7,31
 700bad0:	12801026 	beq	r2,r10,700bb14 <__eqdf2+0x70>
 700bad4:	0281ffc4 	movi	r10,2047
 700bad8:	1a800a26 	beq	r3,r10,700bb04 <__eqdf2+0x60>
 700badc:	10c00226 	beq	r2,r3,700bae8 <__eqdf2+0x44>
 700bae0:	00800044 	movi	r2,1
 700bae4:	f800283a 	ret
 700bae8:	4a3ffd1e 	bne	r9,r8,700bae0 <__alt_data_end+0xff00bae0>
 700baec:	21bffc1e 	bne	r4,r6,700bae0 <__alt_data_end+0xff00bae0>
 700baf0:	29c00c26 	beq	r5,r7,700bb24 <__eqdf2+0x80>
 700baf4:	103ffa1e 	bne	r2,zero,700bae0 <__alt_data_end+0xff00bae0>
 700baf8:	2244b03a 	or	r2,r4,r9
 700bafc:	1004c03a 	cmpne	r2,r2,zero
 700bb00:	f800283a 	ret
 700bb04:	3214b03a 	or	r10,r6,r8
 700bb08:	503ff426 	beq	r10,zero,700badc <__alt_data_end+0xff00badc>
 700bb0c:	00800044 	movi	r2,1
 700bb10:	f800283a 	ret
 700bb14:	2254b03a 	or	r10,r4,r9
 700bb18:	503fee26 	beq	r10,zero,700bad4 <__alt_data_end+0xff00bad4>
 700bb1c:	00800044 	movi	r2,1
 700bb20:	f800283a 	ret
 700bb24:	0005883a 	mov	r2,zero
 700bb28:	f800283a 	ret

0700bb2c <__gedf2>:
 700bb2c:	2804d53a 	srli	r2,r5,20
 700bb30:	3806d53a 	srli	r3,r7,20
 700bb34:	02000434 	movhi	r8,16
 700bb38:	423fffc4 	addi	r8,r8,-1
 700bb3c:	1081ffcc 	andi	r2,r2,2047
 700bb40:	0241ffc4 	movi	r9,2047
 700bb44:	2a14703a 	and	r10,r5,r8
 700bb48:	18c1ffcc 	andi	r3,r3,2047
 700bb4c:	3a10703a 	and	r8,r7,r8
 700bb50:	280ad7fa 	srli	r5,r5,31
 700bb54:	380ed7fa 	srli	r7,r7,31
 700bb58:	12401d26 	beq	r2,r9,700bbd0 <__gedf2+0xa4>
 700bb5c:	0241ffc4 	movi	r9,2047
 700bb60:	1a401226 	beq	r3,r9,700bbac <__gedf2+0x80>
 700bb64:	1000081e 	bne	r2,zero,700bb88 <__gedf2+0x5c>
 700bb68:	2296b03a 	or	r11,r4,r10
 700bb6c:	5813003a 	cmpeq	r9,r11,zero
 700bb70:	1800091e 	bne	r3,zero,700bb98 <__gedf2+0x6c>
 700bb74:	3218b03a 	or	r12,r6,r8
 700bb78:	6000071e 	bne	r12,zero,700bb98 <__gedf2+0x6c>
 700bb7c:	0005883a 	mov	r2,zero
 700bb80:	5800101e 	bne	r11,zero,700bbc4 <__gedf2+0x98>
 700bb84:	f800283a 	ret
 700bb88:	18000c1e 	bne	r3,zero,700bbbc <__gedf2+0x90>
 700bb8c:	3212b03a 	or	r9,r6,r8
 700bb90:	48000c26 	beq	r9,zero,700bbc4 <__gedf2+0x98>
 700bb94:	0013883a 	mov	r9,zero
 700bb98:	39c03fcc 	andi	r7,r7,255
 700bb9c:	48000826 	beq	r9,zero,700bbc0 <__gedf2+0x94>
 700bba0:	38000926 	beq	r7,zero,700bbc8 <__gedf2+0x9c>
 700bba4:	00800044 	movi	r2,1
 700bba8:	f800283a 	ret
 700bbac:	3212b03a 	or	r9,r6,r8
 700bbb0:	483fec26 	beq	r9,zero,700bb64 <__alt_data_end+0xff00bb64>
 700bbb4:	00bfff84 	movi	r2,-2
 700bbb8:	f800283a 	ret
 700bbbc:	39c03fcc 	andi	r7,r7,255
 700bbc0:	29c00626 	beq	r5,r7,700bbdc <__gedf2+0xb0>
 700bbc4:	283ff726 	beq	r5,zero,700bba4 <__alt_data_end+0xff00bba4>
 700bbc8:	00bfffc4 	movi	r2,-1
 700bbcc:	f800283a 	ret
 700bbd0:	2292b03a 	or	r9,r4,r10
 700bbd4:	483fe126 	beq	r9,zero,700bb5c <__alt_data_end+0xff00bb5c>
 700bbd8:	003ff606 	br	700bbb4 <__alt_data_end+0xff00bbb4>
 700bbdc:	18bff916 	blt	r3,r2,700bbc4 <__alt_data_end+0xff00bbc4>
 700bbe0:	10c00316 	blt	r2,r3,700bbf0 <__gedf2+0xc4>
 700bbe4:	42bff736 	bltu	r8,r10,700bbc4 <__alt_data_end+0xff00bbc4>
 700bbe8:	52000326 	beq	r10,r8,700bbf8 <__gedf2+0xcc>
 700bbec:	5200042e 	bgeu	r10,r8,700bc00 <__gedf2+0xd4>
 700bbf0:	283fec1e 	bne	r5,zero,700bba4 <__alt_data_end+0xff00bba4>
 700bbf4:	003ff406 	br	700bbc8 <__alt_data_end+0xff00bbc8>
 700bbf8:	313ff236 	bltu	r6,r4,700bbc4 <__alt_data_end+0xff00bbc4>
 700bbfc:	21bffc36 	bltu	r4,r6,700bbf0 <__alt_data_end+0xff00bbf0>
 700bc00:	0005883a 	mov	r2,zero
 700bc04:	f800283a 	ret

0700bc08 <__ledf2>:
 700bc08:	2804d53a 	srli	r2,r5,20
 700bc0c:	3810d53a 	srli	r8,r7,20
 700bc10:	00c00434 	movhi	r3,16
 700bc14:	18ffffc4 	addi	r3,r3,-1
 700bc18:	1081ffcc 	andi	r2,r2,2047
 700bc1c:	0241ffc4 	movi	r9,2047
 700bc20:	28d4703a 	and	r10,r5,r3
 700bc24:	4201ffcc 	andi	r8,r8,2047
 700bc28:	38c6703a 	and	r3,r7,r3
 700bc2c:	280ad7fa 	srli	r5,r5,31
 700bc30:	380ed7fa 	srli	r7,r7,31
 700bc34:	12401f26 	beq	r2,r9,700bcb4 <__ledf2+0xac>
 700bc38:	0241ffc4 	movi	r9,2047
 700bc3c:	42401426 	beq	r8,r9,700bc90 <__ledf2+0x88>
 700bc40:	1000091e 	bne	r2,zero,700bc68 <__ledf2+0x60>
 700bc44:	2296b03a 	or	r11,r4,r10
 700bc48:	5813003a 	cmpeq	r9,r11,zero
 700bc4c:	29403fcc 	andi	r5,r5,255
 700bc50:	40000a1e 	bne	r8,zero,700bc7c <__ledf2+0x74>
 700bc54:	30d8b03a 	or	r12,r6,r3
 700bc58:	6000081e 	bne	r12,zero,700bc7c <__ledf2+0x74>
 700bc5c:	0005883a 	mov	r2,zero
 700bc60:	5800111e 	bne	r11,zero,700bca8 <__ledf2+0xa0>
 700bc64:	f800283a 	ret
 700bc68:	29403fcc 	andi	r5,r5,255
 700bc6c:	40000c1e 	bne	r8,zero,700bca0 <__ledf2+0x98>
 700bc70:	30d2b03a 	or	r9,r6,r3
 700bc74:	48000c26 	beq	r9,zero,700bca8 <__ledf2+0xa0>
 700bc78:	0013883a 	mov	r9,zero
 700bc7c:	39c03fcc 	andi	r7,r7,255
 700bc80:	48000826 	beq	r9,zero,700bca4 <__ledf2+0x9c>
 700bc84:	38001126 	beq	r7,zero,700bccc <__ledf2+0xc4>
 700bc88:	00800044 	movi	r2,1
 700bc8c:	f800283a 	ret
 700bc90:	30d2b03a 	or	r9,r6,r3
 700bc94:	483fea26 	beq	r9,zero,700bc40 <__alt_data_end+0xff00bc40>
 700bc98:	00800084 	movi	r2,2
 700bc9c:	f800283a 	ret
 700bca0:	39c03fcc 	andi	r7,r7,255
 700bca4:	39400726 	beq	r7,r5,700bcc4 <__ledf2+0xbc>
 700bca8:	2800081e 	bne	r5,zero,700bccc <__ledf2+0xc4>
 700bcac:	00800044 	movi	r2,1
 700bcb0:	f800283a 	ret
 700bcb4:	2292b03a 	or	r9,r4,r10
 700bcb8:	483fdf26 	beq	r9,zero,700bc38 <__alt_data_end+0xff00bc38>
 700bcbc:	00800084 	movi	r2,2
 700bcc0:	f800283a 	ret
 700bcc4:	4080030e 	bge	r8,r2,700bcd4 <__ledf2+0xcc>
 700bcc8:	383fef26 	beq	r7,zero,700bc88 <__alt_data_end+0xff00bc88>
 700bccc:	00bfffc4 	movi	r2,-1
 700bcd0:	f800283a 	ret
 700bcd4:	123feb16 	blt	r2,r8,700bc84 <__alt_data_end+0xff00bc84>
 700bcd8:	1abff336 	bltu	r3,r10,700bca8 <__alt_data_end+0xff00bca8>
 700bcdc:	50c00326 	beq	r10,r3,700bcec <__ledf2+0xe4>
 700bce0:	50c0042e 	bgeu	r10,r3,700bcf4 <__ledf2+0xec>
 700bce4:	283fe81e 	bne	r5,zero,700bc88 <__alt_data_end+0xff00bc88>
 700bce8:	003ff806 	br	700bccc <__alt_data_end+0xff00bccc>
 700bcec:	313fee36 	bltu	r6,r4,700bca8 <__alt_data_end+0xff00bca8>
 700bcf0:	21bffc36 	bltu	r4,r6,700bce4 <__alt_data_end+0xff00bce4>
 700bcf4:	0005883a 	mov	r2,zero
 700bcf8:	f800283a 	ret

0700bcfc <__muldf3>:
 700bcfc:	defff304 	addi	sp,sp,-52
 700bd00:	2804d53a 	srli	r2,r5,20
 700bd04:	dd800915 	stw	r22,36(sp)
 700bd08:	282cd7fa 	srli	r22,r5,31
 700bd0c:	dc000315 	stw	r16,12(sp)
 700bd10:	04000434 	movhi	r16,16
 700bd14:	dd400815 	stw	r21,32(sp)
 700bd18:	dc800515 	stw	r18,20(sp)
 700bd1c:	843fffc4 	addi	r16,r16,-1
 700bd20:	dfc00c15 	stw	ra,48(sp)
 700bd24:	df000b15 	stw	fp,44(sp)
 700bd28:	ddc00a15 	stw	r23,40(sp)
 700bd2c:	dd000715 	stw	r20,28(sp)
 700bd30:	dcc00615 	stw	r19,24(sp)
 700bd34:	dc400415 	stw	r17,16(sp)
 700bd38:	1481ffcc 	andi	r18,r2,2047
 700bd3c:	2c20703a 	and	r16,r5,r16
 700bd40:	b02b883a 	mov	r21,r22
 700bd44:	b2403fcc 	andi	r9,r22,255
 700bd48:	90006026 	beq	r18,zero,700becc <__muldf3+0x1d0>
 700bd4c:	0081ffc4 	movi	r2,2047
 700bd50:	2029883a 	mov	r20,r4
 700bd54:	90803626 	beq	r18,r2,700be30 <__muldf3+0x134>
 700bd58:	80800434 	orhi	r2,r16,16
 700bd5c:	100490fa 	slli	r2,r2,3
 700bd60:	2020d77a 	srli	r16,r4,29
 700bd64:	202890fa 	slli	r20,r4,3
 700bd68:	94bf0044 	addi	r18,r18,-1023
 700bd6c:	80a0b03a 	or	r16,r16,r2
 700bd70:	0027883a 	mov	r19,zero
 700bd74:	0039883a 	mov	fp,zero
 700bd78:	3804d53a 	srli	r2,r7,20
 700bd7c:	382ed7fa 	srli	r23,r7,31
 700bd80:	04400434 	movhi	r17,16
 700bd84:	8c7fffc4 	addi	r17,r17,-1
 700bd88:	1081ffcc 	andi	r2,r2,2047
 700bd8c:	3011883a 	mov	r8,r6
 700bd90:	3c62703a 	and	r17,r7,r17
 700bd94:	ba803fcc 	andi	r10,r23,255
 700bd98:	10006d26 	beq	r2,zero,700bf50 <__muldf3+0x254>
 700bd9c:	00c1ffc4 	movi	r3,2047
 700bda0:	10c06526 	beq	r2,r3,700bf38 <__muldf3+0x23c>
 700bda4:	88c00434 	orhi	r3,r17,16
 700bda8:	180690fa 	slli	r3,r3,3
 700bdac:	3022d77a 	srli	r17,r6,29
 700bdb0:	301090fa 	slli	r8,r6,3
 700bdb4:	10bf0044 	addi	r2,r2,-1023
 700bdb8:	88e2b03a 	or	r17,r17,r3
 700bdbc:	000b883a 	mov	r5,zero
 700bdc0:	9085883a 	add	r2,r18,r2
 700bdc4:	2cc8b03a 	or	r4,r5,r19
 700bdc8:	00c003c4 	movi	r3,15
 700bdcc:	bdacf03a 	xor	r22,r23,r22
 700bdd0:	12c00044 	addi	r11,r2,1
 700bdd4:	19009936 	bltu	r3,r4,700c03c <__muldf3+0x340>
 700bdd8:	200890ba 	slli	r4,r4,2
 700bddc:	00c1c074 	movhi	r3,1793
 700bde0:	18ef7c04 	addi	r3,r3,-16912
 700bde4:	20c9883a 	add	r4,r4,r3
 700bde8:	20c00017 	ldw	r3,0(r4)
 700bdec:	1800683a 	jmp	r3
 700bdf0:	0700c03c 	xorhi	fp,zero,768
 700bdf4:	0700be50 	cmplti	fp,zero,761
 700bdf8:	0700be50 	cmplti	fp,zero,761
 700bdfc:	0700be4c 	andi	fp,zero,761
 700be00:	0700c018 	cmpnei	fp,zero,768
 700be04:	0700c018 	cmpnei	fp,zero,768
 700be08:	0700c000 	call	700c00 <__alt_mem_sdram-0x38ff400>
 700be0c:	0700be4c 	andi	fp,zero,761
 700be10:	0700c018 	cmpnei	fp,zero,768
 700be14:	0700c000 	call	700c00 <__alt_mem_sdram-0x38ff400>
 700be18:	0700c018 	cmpnei	fp,zero,768
 700be1c:	0700be4c 	andi	fp,zero,761
 700be20:	0700c028 	cmpgeui	fp,zero,768
 700be24:	0700c028 	cmpgeui	fp,zero,768
 700be28:	0700c028 	cmpgeui	fp,zero,768
 700be2c:	0700c244 	movi	fp,777
 700be30:	2404b03a 	or	r2,r4,r16
 700be34:	10006f1e 	bne	r2,zero,700bff4 <__muldf3+0x2f8>
 700be38:	04c00204 	movi	r19,8
 700be3c:	0021883a 	mov	r16,zero
 700be40:	0029883a 	mov	r20,zero
 700be44:	07000084 	movi	fp,2
 700be48:	003fcb06 	br	700bd78 <__alt_data_end+0xff00bd78>
 700be4c:	502d883a 	mov	r22,r10
 700be50:	00800084 	movi	r2,2
 700be54:	28805726 	beq	r5,r2,700bfb4 <__muldf3+0x2b8>
 700be58:	008000c4 	movi	r2,3
 700be5c:	28816626 	beq	r5,r2,700c3f8 <__muldf3+0x6fc>
 700be60:	00800044 	movi	r2,1
 700be64:	2881411e 	bne	r5,r2,700c36c <__muldf3+0x670>
 700be68:	b02b883a 	mov	r21,r22
 700be6c:	0005883a 	mov	r2,zero
 700be70:	000b883a 	mov	r5,zero
 700be74:	0029883a 	mov	r20,zero
 700be78:	1004953a 	slli	r2,r2,20
 700be7c:	a8c03fcc 	andi	r3,r21,255
 700be80:	04400434 	movhi	r17,16
 700be84:	8c7fffc4 	addi	r17,r17,-1
 700be88:	180697fa 	slli	r3,r3,31
 700be8c:	2c4a703a 	and	r5,r5,r17
 700be90:	288ab03a 	or	r5,r5,r2
 700be94:	28c6b03a 	or	r3,r5,r3
 700be98:	a005883a 	mov	r2,r20
 700be9c:	dfc00c17 	ldw	ra,48(sp)
 700bea0:	df000b17 	ldw	fp,44(sp)
 700bea4:	ddc00a17 	ldw	r23,40(sp)
 700bea8:	dd800917 	ldw	r22,36(sp)
 700beac:	dd400817 	ldw	r21,32(sp)
 700beb0:	dd000717 	ldw	r20,28(sp)
 700beb4:	dcc00617 	ldw	r19,24(sp)
 700beb8:	dc800517 	ldw	r18,20(sp)
 700bebc:	dc400417 	ldw	r17,16(sp)
 700bec0:	dc000317 	ldw	r16,12(sp)
 700bec4:	dec00d04 	addi	sp,sp,52
 700bec8:	f800283a 	ret
 700becc:	2404b03a 	or	r2,r4,r16
 700bed0:	2027883a 	mov	r19,r4
 700bed4:	10004226 	beq	r2,zero,700bfe0 <__muldf3+0x2e4>
 700bed8:	8000fc26 	beq	r16,zero,700c2cc <__muldf3+0x5d0>
 700bedc:	8009883a 	mov	r4,r16
 700bee0:	d9800215 	stw	r6,8(sp)
 700bee4:	d9c00015 	stw	r7,0(sp)
 700bee8:	da400115 	stw	r9,4(sp)
 700beec:	700cf140 	call	700cf14 <__clzsi2>
 700bef0:	d9800217 	ldw	r6,8(sp)
 700bef4:	d9c00017 	ldw	r7,0(sp)
 700bef8:	da400117 	ldw	r9,4(sp)
 700befc:	113ffd44 	addi	r4,r2,-11
 700bf00:	00c00704 	movi	r3,28
 700bf04:	1900ed16 	blt	r3,r4,700c2bc <__muldf3+0x5c0>
 700bf08:	00c00744 	movi	r3,29
 700bf0c:	147ffe04 	addi	r17,r2,-8
 700bf10:	1907c83a 	sub	r3,r3,r4
 700bf14:	8460983a 	sll	r16,r16,r17
 700bf18:	98c6d83a 	srl	r3,r19,r3
 700bf1c:	9c68983a 	sll	r20,r19,r17
 700bf20:	1c20b03a 	or	r16,r3,r16
 700bf24:	1080fcc4 	addi	r2,r2,1011
 700bf28:	00a5c83a 	sub	r18,zero,r2
 700bf2c:	0027883a 	mov	r19,zero
 700bf30:	0039883a 	mov	fp,zero
 700bf34:	003f9006 	br	700bd78 <__alt_data_end+0xff00bd78>
 700bf38:	3446b03a 	or	r3,r6,r17
 700bf3c:	1800261e 	bne	r3,zero,700bfd8 <__muldf3+0x2dc>
 700bf40:	0023883a 	mov	r17,zero
 700bf44:	0011883a 	mov	r8,zero
 700bf48:	01400084 	movi	r5,2
 700bf4c:	003f9c06 	br	700bdc0 <__alt_data_end+0xff00bdc0>
 700bf50:	3446b03a 	or	r3,r6,r17
 700bf54:	18001c26 	beq	r3,zero,700bfc8 <__muldf3+0x2cc>
 700bf58:	8800ce26 	beq	r17,zero,700c294 <__muldf3+0x598>
 700bf5c:	8809883a 	mov	r4,r17
 700bf60:	d9800215 	stw	r6,8(sp)
 700bf64:	da400115 	stw	r9,4(sp)
 700bf68:	da800015 	stw	r10,0(sp)
 700bf6c:	700cf140 	call	700cf14 <__clzsi2>
 700bf70:	d9800217 	ldw	r6,8(sp)
 700bf74:	da400117 	ldw	r9,4(sp)
 700bf78:	da800017 	ldw	r10,0(sp)
 700bf7c:	113ffd44 	addi	r4,r2,-11
 700bf80:	00c00704 	movi	r3,28
 700bf84:	1900bf16 	blt	r3,r4,700c284 <__muldf3+0x588>
 700bf88:	00c00744 	movi	r3,29
 700bf8c:	123ffe04 	addi	r8,r2,-8
 700bf90:	1907c83a 	sub	r3,r3,r4
 700bf94:	8a22983a 	sll	r17,r17,r8
 700bf98:	30c6d83a 	srl	r3,r6,r3
 700bf9c:	3210983a 	sll	r8,r6,r8
 700bfa0:	1c62b03a 	or	r17,r3,r17
 700bfa4:	1080fcc4 	addi	r2,r2,1011
 700bfa8:	0085c83a 	sub	r2,zero,r2
 700bfac:	000b883a 	mov	r5,zero
 700bfb0:	003f8306 	br	700bdc0 <__alt_data_end+0xff00bdc0>
 700bfb4:	b02b883a 	mov	r21,r22
 700bfb8:	0081ffc4 	movi	r2,2047
 700bfbc:	000b883a 	mov	r5,zero
 700bfc0:	0029883a 	mov	r20,zero
 700bfc4:	003fac06 	br	700be78 <__alt_data_end+0xff00be78>
 700bfc8:	0023883a 	mov	r17,zero
 700bfcc:	0011883a 	mov	r8,zero
 700bfd0:	01400044 	movi	r5,1
 700bfd4:	003f7a06 	br	700bdc0 <__alt_data_end+0xff00bdc0>
 700bfd8:	014000c4 	movi	r5,3
 700bfdc:	003f7806 	br	700bdc0 <__alt_data_end+0xff00bdc0>
 700bfe0:	04c00104 	movi	r19,4
 700bfe4:	0021883a 	mov	r16,zero
 700bfe8:	0029883a 	mov	r20,zero
 700bfec:	07000044 	movi	fp,1
 700bff0:	003f6106 	br	700bd78 <__alt_data_end+0xff00bd78>
 700bff4:	04c00304 	movi	r19,12
 700bff8:	070000c4 	movi	fp,3
 700bffc:	003f5e06 	br	700bd78 <__alt_data_end+0xff00bd78>
 700c000:	01400434 	movhi	r5,16
 700c004:	002b883a 	mov	r21,zero
 700c008:	297fffc4 	addi	r5,r5,-1
 700c00c:	053fffc4 	movi	r20,-1
 700c010:	0081ffc4 	movi	r2,2047
 700c014:	003f9806 	br	700be78 <__alt_data_end+0xff00be78>
 700c018:	8023883a 	mov	r17,r16
 700c01c:	a011883a 	mov	r8,r20
 700c020:	e00b883a 	mov	r5,fp
 700c024:	003f8a06 	br	700be50 <__alt_data_end+0xff00be50>
 700c028:	8023883a 	mov	r17,r16
 700c02c:	a011883a 	mov	r8,r20
 700c030:	482d883a 	mov	r22,r9
 700c034:	e00b883a 	mov	r5,fp
 700c038:	003f8506 	br	700be50 <__alt_data_end+0xff00be50>
 700c03c:	a00ad43a 	srli	r5,r20,16
 700c040:	401ad43a 	srli	r13,r8,16
 700c044:	a53fffcc 	andi	r20,r20,65535
 700c048:	423fffcc 	andi	r8,r8,65535
 700c04c:	4519383a 	mul	r12,r8,r20
 700c050:	4147383a 	mul	r3,r8,r5
 700c054:	6d09383a 	mul	r4,r13,r20
 700c058:	600cd43a 	srli	r6,r12,16
 700c05c:	2b5d383a 	mul	r14,r5,r13
 700c060:	20c9883a 	add	r4,r4,r3
 700c064:	310d883a 	add	r6,r6,r4
 700c068:	30c0022e 	bgeu	r6,r3,700c074 <__muldf3+0x378>
 700c06c:	00c00074 	movhi	r3,1
 700c070:	70dd883a 	add	r14,r14,r3
 700c074:	8826d43a 	srli	r19,r17,16
 700c078:	8bffffcc 	andi	r15,r17,65535
 700c07c:	7d23383a 	mul	r17,r15,r20
 700c080:	7949383a 	mul	r4,r15,r5
 700c084:	9d29383a 	mul	r20,r19,r20
 700c088:	8814d43a 	srli	r10,r17,16
 700c08c:	3012943a 	slli	r9,r6,16
 700c090:	a129883a 	add	r20,r20,r4
 700c094:	633fffcc 	andi	r12,r12,65535
 700c098:	5515883a 	add	r10,r10,r20
 700c09c:	3006d43a 	srli	r3,r6,16
 700c0a0:	4b13883a 	add	r9,r9,r12
 700c0a4:	2ccb383a 	mul	r5,r5,r19
 700c0a8:	5100022e 	bgeu	r10,r4,700c0b4 <__muldf3+0x3b8>
 700c0ac:	01000074 	movhi	r4,1
 700c0b0:	290b883a 	add	r5,r5,r4
 700c0b4:	802ad43a 	srli	r21,r16,16
 700c0b8:	843fffcc 	andi	r16,r16,65535
 700c0bc:	440d383a 	mul	r6,r8,r16
 700c0c0:	4565383a 	mul	r18,r8,r21
 700c0c4:	8349383a 	mul	r4,r16,r13
 700c0c8:	500e943a 	slli	r7,r10,16
 700c0cc:	3010d43a 	srli	r8,r6,16
 700c0d0:	5028d43a 	srli	r20,r10,16
 700c0d4:	2489883a 	add	r4,r4,r18
 700c0d8:	8abfffcc 	andi	r10,r17,65535
 700c0dc:	3a95883a 	add	r10,r7,r10
 700c0e0:	4119883a 	add	r12,r8,r4
 700c0e4:	a169883a 	add	r20,r20,r5
 700c0e8:	1a87883a 	add	r3,r3,r10
 700c0ec:	6d5b383a 	mul	r13,r13,r21
 700c0f0:	6480022e 	bgeu	r12,r18,700c0fc <__muldf3+0x400>
 700c0f4:	01000074 	movhi	r4,1
 700c0f8:	691b883a 	add	r13,r13,r4
 700c0fc:	7c25383a 	mul	r18,r15,r16
 700c100:	7d4b383a 	mul	r5,r15,r21
 700c104:	84cf383a 	mul	r7,r16,r19
 700c108:	901ed43a 	srli	r15,r18,16
 700c10c:	6008d43a 	srli	r4,r12,16
 700c110:	6010943a 	slli	r8,r12,16
 700c114:	394f883a 	add	r7,r7,r5
 700c118:	333fffcc 	andi	r12,r6,65535
 700c11c:	79df883a 	add	r15,r15,r7
 700c120:	235b883a 	add	r13,r4,r13
 700c124:	9d63383a 	mul	r17,r19,r21
 700c128:	4309883a 	add	r4,r8,r12
 700c12c:	7940022e 	bgeu	r15,r5,700c138 <__muldf3+0x43c>
 700c130:	01400074 	movhi	r5,1
 700c134:	8963883a 	add	r17,r17,r5
 700c138:	780a943a 	slli	r5,r15,16
 700c13c:	91bfffcc 	andi	r6,r18,65535
 700c140:	70c7883a 	add	r3,r14,r3
 700c144:	298d883a 	add	r6,r5,r6
 700c148:	1a8f803a 	cmpltu	r7,r3,r10
 700c14c:	350b883a 	add	r5,r6,r20
 700c150:	20c7883a 	add	r3,r4,r3
 700c154:	3955883a 	add	r10,r7,r5
 700c158:	1909803a 	cmpltu	r4,r3,r4
 700c15c:	6a91883a 	add	r8,r13,r10
 700c160:	780cd43a 	srli	r6,r15,16
 700c164:	2219883a 	add	r12,r4,r8
 700c168:	2d0b803a 	cmpltu	r5,r5,r20
 700c16c:	51cf803a 	cmpltu	r7,r10,r7
 700c170:	29ceb03a 	or	r7,r5,r7
 700c174:	4351803a 	cmpltu	r8,r8,r13
 700c178:	610b803a 	cmpltu	r5,r12,r4
 700c17c:	4148b03a 	or	r4,r8,r5
 700c180:	398f883a 	add	r7,r7,r6
 700c184:	3909883a 	add	r4,r7,r4
 700c188:	1810927a 	slli	r8,r3,9
 700c18c:	2449883a 	add	r4,r4,r17
 700c190:	2008927a 	slli	r4,r4,9
 700c194:	6022d5fa 	srli	r17,r12,23
 700c198:	1806d5fa 	srli	r3,r3,23
 700c19c:	4252b03a 	or	r9,r8,r9
 700c1a0:	600a927a 	slli	r5,r12,9
 700c1a4:	4810c03a 	cmpne	r8,r9,zero
 700c1a8:	2462b03a 	or	r17,r4,r17
 700c1ac:	40c6b03a 	or	r3,r8,r3
 700c1b0:	8900402c 	andhi	r4,r17,256
 700c1b4:	1950b03a 	or	r8,r3,r5
 700c1b8:	20000726 	beq	r4,zero,700c1d8 <__muldf3+0x4dc>
 700c1bc:	4006d07a 	srli	r3,r8,1
 700c1c0:	880497fa 	slli	r2,r17,31
 700c1c4:	4200004c 	andi	r8,r8,1
 700c1c8:	8822d07a 	srli	r17,r17,1
 700c1cc:	1a10b03a 	or	r8,r3,r8
 700c1d0:	1210b03a 	or	r8,r2,r8
 700c1d4:	5805883a 	mov	r2,r11
 700c1d8:	1140ffc4 	addi	r5,r2,1023
 700c1dc:	0140440e 	bge	zero,r5,700c2f0 <__muldf3+0x5f4>
 700c1e0:	40c001cc 	andi	r3,r8,7
 700c1e4:	18000726 	beq	r3,zero,700c204 <__muldf3+0x508>
 700c1e8:	40c003cc 	andi	r3,r8,15
 700c1ec:	01000104 	movi	r4,4
 700c1f0:	19000426 	beq	r3,r4,700c204 <__muldf3+0x508>
 700c1f4:	4107883a 	add	r3,r8,r4
 700c1f8:	1a11803a 	cmpltu	r8,r3,r8
 700c1fc:	8a23883a 	add	r17,r17,r8
 700c200:	1811883a 	mov	r8,r3
 700c204:	88c0402c 	andhi	r3,r17,256
 700c208:	18000426 	beq	r3,zero,700c21c <__muldf3+0x520>
 700c20c:	11410004 	addi	r5,r2,1024
 700c210:	00bfc034 	movhi	r2,65280
 700c214:	10bfffc4 	addi	r2,r2,-1
 700c218:	88a2703a 	and	r17,r17,r2
 700c21c:	0081ff84 	movi	r2,2046
 700c220:	117f6416 	blt	r2,r5,700bfb4 <__alt_data_end+0xff00bfb4>
 700c224:	8828977a 	slli	r20,r17,29
 700c228:	4010d0fa 	srli	r8,r8,3
 700c22c:	8822927a 	slli	r17,r17,9
 700c230:	2881ffcc 	andi	r2,r5,2047
 700c234:	a228b03a 	or	r20,r20,r8
 700c238:	880ad33a 	srli	r5,r17,12
 700c23c:	b02b883a 	mov	r21,r22
 700c240:	003f0d06 	br	700be78 <__alt_data_end+0xff00be78>
 700c244:	8080022c 	andhi	r2,r16,8
 700c248:	10000926 	beq	r2,zero,700c270 <__muldf3+0x574>
 700c24c:	8880022c 	andhi	r2,r17,8
 700c250:	1000071e 	bne	r2,zero,700c270 <__muldf3+0x574>
 700c254:	00800434 	movhi	r2,16
 700c258:	89400234 	orhi	r5,r17,8
 700c25c:	10bfffc4 	addi	r2,r2,-1
 700c260:	b82b883a 	mov	r21,r23
 700c264:	288a703a 	and	r5,r5,r2
 700c268:	4029883a 	mov	r20,r8
 700c26c:	003f6806 	br	700c010 <__alt_data_end+0xff00c010>
 700c270:	00800434 	movhi	r2,16
 700c274:	81400234 	orhi	r5,r16,8
 700c278:	10bfffc4 	addi	r2,r2,-1
 700c27c:	288a703a 	and	r5,r5,r2
 700c280:	003f6306 	br	700c010 <__alt_data_end+0xff00c010>
 700c284:	147ff604 	addi	r17,r2,-40
 700c288:	3462983a 	sll	r17,r6,r17
 700c28c:	0011883a 	mov	r8,zero
 700c290:	003f4406 	br	700bfa4 <__alt_data_end+0xff00bfa4>
 700c294:	3009883a 	mov	r4,r6
 700c298:	d9800215 	stw	r6,8(sp)
 700c29c:	da400115 	stw	r9,4(sp)
 700c2a0:	da800015 	stw	r10,0(sp)
 700c2a4:	700cf140 	call	700cf14 <__clzsi2>
 700c2a8:	10800804 	addi	r2,r2,32
 700c2ac:	da800017 	ldw	r10,0(sp)
 700c2b0:	da400117 	ldw	r9,4(sp)
 700c2b4:	d9800217 	ldw	r6,8(sp)
 700c2b8:	003f3006 	br	700bf7c <__alt_data_end+0xff00bf7c>
 700c2bc:	143ff604 	addi	r16,r2,-40
 700c2c0:	9c20983a 	sll	r16,r19,r16
 700c2c4:	0029883a 	mov	r20,zero
 700c2c8:	003f1606 	br	700bf24 <__alt_data_end+0xff00bf24>
 700c2cc:	d9800215 	stw	r6,8(sp)
 700c2d0:	d9c00015 	stw	r7,0(sp)
 700c2d4:	da400115 	stw	r9,4(sp)
 700c2d8:	700cf140 	call	700cf14 <__clzsi2>
 700c2dc:	10800804 	addi	r2,r2,32
 700c2e0:	da400117 	ldw	r9,4(sp)
 700c2e4:	d9c00017 	ldw	r7,0(sp)
 700c2e8:	d9800217 	ldw	r6,8(sp)
 700c2ec:	003f0306 	br	700befc <__alt_data_end+0xff00befc>
 700c2f0:	00c00044 	movi	r3,1
 700c2f4:	1947c83a 	sub	r3,r3,r5
 700c2f8:	00800e04 	movi	r2,56
 700c2fc:	10feda16 	blt	r2,r3,700be68 <__alt_data_end+0xff00be68>
 700c300:	008007c4 	movi	r2,31
 700c304:	10c01b16 	blt	r2,r3,700c374 <__muldf3+0x678>
 700c308:	00800804 	movi	r2,32
 700c30c:	10c5c83a 	sub	r2,r2,r3
 700c310:	888a983a 	sll	r5,r17,r2
 700c314:	40c8d83a 	srl	r4,r8,r3
 700c318:	4084983a 	sll	r2,r8,r2
 700c31c:	88e2d83a 	srl	r17,r17,r3
 700c320:	2906b03a 	or	r3,r5,r4
 700c324:	1004c03a 	cmpne	r2,r2,zero
 700c328:	1886b03a 	or	r3,r3,r2
 700c32c:	188001cc 	andi	r2,r3,7
 700c330:	10000726 	beq	r2,zero,700c350 <__muldf3+0x654>
 700c334:	188003cc 	andi	r2,r3,15
 700c338:	01000104 	movi	r4,4
 700c33c:	11000426 	beq	r2,r4,700c350 <__muldf3+0x654>
 700c340:	1805883a 	mov	r2,r3
 700c344:	10c00104 	addi	r3,r2,4
 700c348:	1885803a 	cmpltu	r2,r3,r2
 700c34c:	88a3883a 	add	r17,r17,r2
 700c350:	8880202c 	andhi	r2,r17,128
 700c354:	10001c26 	beq	r2,zero,700c3c8 <__muldf3+0x6cc>
 700c358:	b02b883a 	mov	r21,r22
 700c35c:	00800044 	movi	r2,1
 700c360:	000b883a 	mov	r5,zero
 700c364:	0029883a 	mov	r20,zero
 700c368:	003ec306 	br	700be78 <__alt_data_end+0xff00be78>
 700c36c:	5805883a 	mov	r2,r11
 700c370:	003f9906 	br	700c1d8 <__alt_data_end+0xff00c1d8>
 700c374:	00bff844 	movi	r2,-31
 700c378:	1145c83a 	sub	r2,r2,r5
 700c37c:	8888d83a 	srl	r4,r17,r2
 700c380:	00800804 	movi	r2,32
 700c384:	18801a26 	beq	r3,r2,700c3f0 <__muldf3+0x6f4>
 700c388:	00801004 	movi	r2,64
 700c38c:	10c5c83a 	sub	r2,r2,r3
 700c390:	8884983a 	sll	r2,r17,r2
 700c394:	1204b03a 	or	r2,r2,r8
 700c398:	1004c03a 	cmpne	r2,r2,zero
 700c39c:	2084b03a 	or	r2,r4,r2
 700c3a0:	144001cc 	andi	r17,r2,7
 700c3a4:	88000d1e 	bne	r17,zero,700c3dc <__muldf3+0x6e0>
 700c3a8:	000b883a 	mov	r5,zero
 700c3ac:	1028d0fa 	srli	r20,r2,3
 700c3b0:	b02b883a 	mov	r21,r22
 700c3b4:	0005883a 	mov	r2,zero
 700c3b8:	a468b03a 	or	r20,r20,r17
 700c3bc:	003eae06 	br	700be78 <__alt_data_end+0xff00be78>
 700c3c0:	1007883a 	mov	r3,r2
 700c3c4:	0023883a 	mov	r17,zero
 700c3c8:	880a927a 	slli	r5,r17,9
 700c3cc:	1805883a 	mov	r2,r3
 700c3d0:	8822977a 	slli	r17,r17,29
 700c3d4:	280ad33a 	srli	r5,r5,12
 700c3d8:	003ff406 	br	700c3ac <__alt_data_end+0xff00c3ac>
 700c3dc:	10c003cc 	andi	r3,r2,15
 700c3e0:	01000104 	movi	r4,4
 700c3e4:	193ff626 	beq	r3,r4,700c3c0 <__alt_data_end+0xff00c3c0>
 700c3e8:	0023883a 	mov	r17,zero
 700c3ec:	003fd506 	br	700c344 <__alt_data_end+0xff00c344>
 700c3f0:	0005883a 	mov	r2,zero
 700c3f4:	003fe706 	br	700c394 <__alt_data_end+0xff00c394>
 700c3f8:	00800434 	movhi	r2,16
 700c3fc:	89400234 	orhi	r5,r17,8
 700c400:	10bfffc4 	addi	r2,r2,-1
 700c404:	b02b883a 	mov	r21,r22
 700c408:	288a703a 	and	r5,r5,r2
 700c40c:	4029883a 	mov	r20,r8
 700c410:	003eff06 	br	700c010 <__alt_data_end+0xff00c010>

0700c414 <__subdf3>:
 700c414:	02000434 	movhi	r8,16
 700c418:	423fffc4 	addi	r8,r8,-1
 700c41c:	defffb04 	addi	sp,sp,-20
 700c420:	2a14703a 	and	r10,r5,r8
 700c424:	3812d53a 	srli	r9,r7,20
 700c428:	3a10703a 	and	r8,r7,r8
 700c42c:	2006d77a 	srli	r3,r4,29
 700c430:	3004d77a 	srli	r2,r6,29
 700c434:	dc000015 	stw	r16,0(sp)
 700c438:	501490fa 	slli	r10,r10,3
 700c43c:	2820d53a 	srli	r16,r5,20
 700c440:	401090fa 	slli	r8,r8,3
 700c444:	dc800215 	stw	r18,8(sp)
 700c448:	dc400115 	stw	r17,4(sp)
 700c44c:	dfc00415 	stw	ra,16(sp)
 700c450:	202290fa 	slli	r17,r4,3
 700c454:	dcc00315 	stw	r19,12(sp)
 700c458:	4a41ffcc 	andi	r9,r9,2047
 700c45c:	0101ffc4 	movi	r4,2047
 700c460:	2824d7fa 	srli	r18,r5,31
 700c464:	8401ffcc 	andi	r16,r16,2047
 700c468:	50c6b03a 	or	r3,r10,r3
 700c46c:	380ed7fa 	srli	r7,r7,31
 700c470:	408ab03a 	or	r5,r8,r2
 700c474:	300c90fa 	slli	r6,r6,3
 700c478:	49009626 	beq	r9,r4,700c6d4 <__subdf3+0x2c0>
 700c47c:	39c0005c 	xori	r7,r7,1
 700c480:	8245c83a 	sub	r2,r16,r9
 700c484:	3c807426 	beq	r7,r18,700c658 <__subdf3+0x244>
 700c488:	0080af0e 	bge	zero,r2,700c748 <__subdf3+0x334>
 700c48c:	48002a1e 	bne	r9,zero,700c538 <__subdf3+0x124>
 700c490:	2988b03a 	or	r4,r5,r6
 700c494:	20009a1e 	bne	r4,zero,700c700 <__subdf3+0x2ec>
 700c498:	888001cc 	andi	r2,r17,7
 700c49c:	10000726 	beq	r2,zero,700c4bc <__subdf3+0xa8>
 700c4a0:	888003cc 	andi	r2,r17,15
 700c4a4:	01000104 	movi	r4,4
 700c4a8:	11000426 	beq	r2,r4,700c4bc <__subdf3+0xa8>
 700c4ac:	890b883a 	add	r5,r17,r4
 700c4b0:	2c63803a 	cmpltu	r17,r5,r17
 700c4b4:	1c47883a 	add	r3,r3,r17
 700c4b8:	2823883a 	mov	r17,r5
 700c4bc:	1880202c 	andhi	r2,r3,128
 700c4c0:	10005926 	beq	r2,zero,700c628 <__subdf3+0x214>
 700c4c4:	84000044 	addi	r16,r16,1
 700c4c8:	0081ffc4 	movi	r2,2047
 700c4cc:	8080be26 	beq	r16,r2,700c7c8 <__subdf3+0x3b4>
 700c4d0:	017fe034 	movhi	r5,65408
 700c4d4:	297fffc4 	addi	r5,r5,-1
 700c4d8:	1946703a 	and	r3,r3,r5
 700c4dc:	1804977a 	slli	r2,r3,29
 700c4e0:	1806927a 	slli	r3,r3,9
 700c4e4:	8822d0fa 	srli	r17,r17,3
 700c4e8:	8401ffcc 	andi	r16,r16,2047
 700c4ec:	180ad33a 	srli	r5,r3,12
 700c4f0:	9100004c 	andi	r4,r18,1
 700c4f4:	1444b03a 	or	r2,r2,r17
 700c4f8:	80c1ffcc 	andi	r3,r16,2047
 700c4fc:	1820953a 	slli	r16,r3,20
 700c500:	20c03fcc 	andi	r3,r4,255
 700c504:	180897fa 	slli	r4,r3,31
 700c508:	00c00434 	movhi	r3,16
 700c50c:	18ffffc4 	addi	r3,r3,-1
 700c510:	28c6703a 	and	r3,r5,r3
 700c514:	1c06b03a 	or	r3,r3,r16
 700c518:	1906b03a 	or	r3,r3,r4
 700c51c:	dfc00417 	ldw	ra,16(sp)
 700c520:	dcc00317 	ldw	r19,12(sp)
 700c524:	dc800217 	ldw	r18,8(sp)
 700c528:	dc400117 	ldw	r17,4(sp)
 700c52c:	dc000017 	ldw	r16,0(sp)
 700c530:	dec00504 	addi	sp,sp,20
 700c534:	f800283a 	ret
 700c538:	0101ffc4 	movi	r4,2047
 700c53c:	813fd626 	beq	r16,r4,700c498 <__alt_data_end+0xff00c498>
 700c540:	29402034 	orhi	r5,r5,128
 700c544:	01000e04 	movi	r4,56
 700c548:	2080a316 	blt	r4,r2,700c7d8 <__subdf3+0x3c4>
 700c54c:	010007c4 	movi	r4,31
 700c550:	2080c616 	blt	r4,r2,700c86c <__subdf3+0x458>
 700c554:	01000804 	movi	r4,32
 700c558:	2089c83a 	sub	r4,r4,r2
 700c55c:	2910983a 	sll	r8,r5,r4
 700c560:	308ed83a 	srl	r7,r6,r2
 700c564:	3108983a 	sll	r4,r6,r4
 700c568:	2884d83a 	srl	r2,r5,r2
 700c56c:	41ccb03a 	or	r6,r8,r7
 700c570:	2008c03a 	cmpne	r4,r4,zero
 700c574:	310cb03a 	or	r6,r6,r4
 700c578:	898dc83a 	sub	r6,r17,r6
 700c57c:	89a3803a 	cmpltu	r17,r17,r6
 700c580:	1887c83a 	sub	r3,r3,r2
 700c584:	1c47c83a 	sub	r3,r3,r17
 700c588:	3023883a 	mov	r17,r6
 700c58c:	1880202c 	andhi	r2,r3,128
 700c590:	10002326 	beq	r2,zero,700c620 <__subdf3+0x20c>
 700c594:	04c02034 	movhi	r19,128
 700c598:	9cffffc4 	addi	r19,r19,-1
 700c59c:	1ce6703a 	and	r19,r3,r19
 700c5a0:	98007a26 	beq	r19,zero,700c78c <__subdf3+0x378>
 700c5a4:	9809883a 	mov	r4,r19
 700c5a8:	700cf140 	call	700cf14 <__clzsi2>
 700c5ac:	113ffe04 	addi	r4,r2,-8
 700c5b0:	00c007c4 	movi	r3,31
 700c5b4:	19007b16 	blt	r3,r4,700c7a4 <__subdf3+0x390>
 700c5b8:	00800804 	movi	r2,32
 700c5bc:	1105c83a 	sub	r2,r2,r4
 700c5c0:	8884d83a 	srl	r2,r17,r2
 700c5c4:	9906983a 	sll	r3,r19,r4
 700c5c8:	8922983a 	sll	r17,r17,r4
 700c5cc:	10c4b03a 	or	r2,r2,r3
 700c5d0:	24007816 	blt	r4,r16,700c7b4 <__subdf3+0x3a0>
 700c5d4:	2421c83a 	sub	r16,r4,r16
 700c5d8:	80c00044 	addi	r3,r16,1
 700c5dc:	010007c4 	movi	r4,31
 700c5e0:	20c09516 	blt	r4,r3,700c838 <__subdf3+0x424>
 700c5e4:	01400804 	movi	r5,32
 700c5e8:	28cbc83a 	sub	r5,r5,r3
 700c5ec:	88c8d83a 	srl	r4,r17,r3
 700c5f0:	8962983a 	sll	r17,r17,r5
 700c5f4:	114a983a 	sll	r5,r2,r5
 700c5f8:	10c6d83a 	srl	r3,r2,r3
 700c5fc:	8804c03a 	cmpne	r2,r17,zero
 700c600:	290ab03a 	or	r5,r5,r4
 700c604:	28a2b03a 	or	r17,r5,r2
 700c608:	0021883a 	mov	r16,zero
 700c60c:	003fa206 	br	700c498 <__alt_data_end+0xff00c498>
 700c610:	2090b03a 	or	r8,r4,r2
 700c614:	40018e26 	beq	r8,zero,700cc50 <__subdf3+0x83c>
 700c618:	1007883a 	mov	r3,r2
 700c61c:	2023883a 	mov	r17,r4
 700c620:	888001cc 	andi	r2,r17,7
 700c624:	103f9e1e 	bne	r2,zero,700c4a0 <__alt_data_end+0xff00c4a0>
 700c628:	1804977a 	slli	r2,r3,29
 700c62c:	8822d0fa 	srli	r17,r17,3
 700c630:	1810d0fa 	srli	r8,r3,3
 700c634:	9100004c 	andi	r4,r18,1
 700c638:	1444b03a 	or	r2,r2,r17
 700c63c:	00c1ffc4 	movi	r3,2047
 700c640:	80c02826 	beq	r16,r3,700c6e4 <__subdf3+0x2d0>
 700c644:	01400434 	movhi	r5,16
 700c648:	297fffc4 	addi	r5,r5,-1
 700c64c:	80e0703a 	and	r16,r16,r3
 700c650:	414a703a 	and	r5,r8,r5
 700c654:	003fa806 	br	700c4f8 <__alt_data_end+0xff00c4f8>
 700c658:	0080630e 	bge	zero,r2,700c7e8 <__subdf3+0x3d4>
 700c65c:	48003026 	beq	r9,zero,700c720 <__subdf3+0x30c>
 700c660:	0101ffc4 	movi	r4,2047
 700c664:	813f8c26 	beq	r16,r4,700c498 <__alt_data_end+0xff00c498>
 700c668:	29402034 	orhi	r5,r5,128
 700c66c:	01000e04 	movi	r4,56
 700c670:	2080a90e 	bge	r4,r2,700c918 <__subdf3+0x504>
 700c674:	298cb03a 	or	r6,r5,r6
 700c678:	3012c03a 	cmpne	r9,r6,zero
 700c67c:	0005883a 	mov	r2,zero
 700c680:	4c53883a 	add	r9,r9,r17
 700c684:	4c63803a 	cmpltu	r17,r9,r17
 700c688:	10c7883a 	add	r3,r2,r3
 700c68c:	88c7883a 	add	r3,r17,r3
 700c690:	4823883a 	mov	r17,r9
 700c694:	1880202c 	andhi	r2,r3,128
 700c698:	1000d026 	beq	r2,zero,700c9dc <__subdf3+0x5c8>
 700c69c:	84000044 	addi	r16,r16,1
 700c6a0:	0081ffc4 	movi	r2,2047
 700c6a4:	8080fe26 	beq	r16,r2,700caa0 <__subdf3+0x68c>
 700c6a8:	00bfe034 	movhi	r2,65408
 700c6ac:	10bfffc4 	addi	r2,r2,-1
 700c6b0:	1886703a 	and	r3,r3,r2
 700c6b4:	880ad07a 	srli	r5,r17,1
 700c6b8:	180497fa 	slli	r2,r3,31
 700c6bc:	8900004c 	andi	r4,r17,1
 700c6c0:	2922b03a 	or	r17,r5,r4
 700c6c4:	1806d07a 	srli	r3,r3,1
 700c6c8:	1462b03a 	or	r17,r2,r17
 700c6cc:	3825883a 	mov	r18,r7
 700c6d0:	003f7106 	br	700c498 <__alt_data_end+0xff00c498>
 700c6d4:	2984b03a 	or	r2,r5,r6
 700c6d8:	103f6826 	beq	r2,zero,700c47c <__alt_data_end+0xff00c47c>
 700c6dc:	39c03fcc 	andi	r7,r7,255
 700c6e0:	003f6706 	br	700c480 <__alt_data_end+0xff00c480>
 700c6e4:	4086b03a 	or	r3,r8,r2
 700c6e8:	18015226 	beq	r3,zero,700cc34 <__subdf3+0x820>
 700c6ec:	00c00434 	movhi	r3,16
 700c6f0:	41400234 	orhi	r5,r8,8
 700c6f4:	18ffffc4 	addi	r3,r3,-1
 700c6f8:	28ca703a 	and	r5,r5,r3
 700c6fc:	003f7e06 	br	700c4f8 <__alt_data_end+0xff00c4f8>
 700c700:	10bfffc4 	addi	r2,r2,-1
 700c704:	1000491e 	bne	r2,zero,700c82c <__subdf3+0x418>
 700c708:	898fc83a 	sub	r7,r17,r6
 700c70c:	89e3803a 	cmpltu	r17,r17,r7
 700c710:	1947c83a 	sub	r3,r3,r5
 700c714:	1c47c83a 	sub	r3,r3,r17
 700c718:	3823883a 	mov	r17,r7
 700c71c:	003f9b06 	br	700c58c <__alt_data_end+0xff00c58c>
 700c720:	2988b03a 	or	r4,r5,r6
 700c724:	203f5c26 	beq	r4,zero,700c498 <__alt_data_end+0xff00c498>
 700c728:	10bfffc4 	addi	r2,r2,-1
 700c72c:	1000931e 	bne	r2,zero,700c97c <__subdf3+0x568>
 700c730:	898d883a 	add	r6,r17,r6
 700c734:	3463803a 	cmpltu	r17,r6,r17
 700c738:	1947883a 	add	r3,r3,r5
 700c73c:	88c7883a 	add	r3,r17,r3
 700c740:	3023883a 	mov	r17,r6
 700c744:	003fd306 	br	700c694 <__alt_data_end+0xff00c694>
 700c748:	1000541e 	bne	r2,zero,700c89c <__subdf3+0x488>
 700c74c:	80800044 	addi	r2,r16,1
 700c750:	1081ffcc 	andi	r2,r2,2047
 700c754:	01000044 	movi	r4,1
 700c758:	2080a20e 	bge	r4,r2,700c9e4 <__subdf3+0x5d0>
 700c75c:	8989c83a 	sub	r4,r17,r6
 700c760:	8905803a 	cmpltu	r2,r17,r4
 700c764:	1967c83a 	sub	r19,r3,r5
 700c768:	98a7c83a 	sub	r19,r19,r2
 700c76c:	9880202c 	andhi	r2,r19,128
 700c770:	10006326 	beq	r2,zero,700c900 <__subdf3+0x4ec>
 700c774:	3463c83a 	sub	r17,r6,r17
 700c778:	28c7c83a 	sub	r3,r5,r3
 700c77c:	344d803a 	cmpltu	r6,r6,r17
 700c780:	19a7c83a 	sub	r19,r3,r6
 700c784:	3825883a 	mov	r18,r7
 700c788:	983f861e 	bne	r19,zero,700c5a4 <__alt_data_end+0xff00c5a4>
 700c78c:	8809883a 	mov	r4,r17
 700c790:	700cf140 	call	700cf14 <__clzsi2>
 700c794:	10800804 	addi	r2,r2,32
 700c798:	113ffe04 	addi	r4,r2,-8
 700c79c:	00c007c4 	movi	r3,31
 700c7a0:	193f850e 	bge	r3,r4,700c5b8 <__alt_data_end+0xff00c5b8>
 700c7a4:	10bff604 	addi	r2,r2,-40
 700c7a8:	8884983a 	sll	r2,r17,r2
 700c7ac:	0023883a 	mov	r17,zero
 700c7b0:	243f880e 	bge	r4,r16,700c5d4 <__alt_data_end+0xff00c5d4>
 700c7b4:	00ffe034 	movhi	r3,65408
 700c7b8:	18ffffc4 	addi	r3,r3,-1
 700c7bc:	8121c83a 	sub	r16,r16,r4
 700c7c0:	10c6703a 	and	r3,r2,r3
 700c7c4:	003f3406 	br	700c498 <__alt_data_end+0xff00c498>
 700c7c8:	9100004c 	andi	r4,r18,1
 700c7cc:	000b883a 	mov	r5,zero
 700c7d0:	0005883a 	mov	r2,zero
 700c7d4:	003f4806 	br	700c4f8 <__alt_data_end+0xff00c4f8>
 700c7d8:	298cb03a 	or	r6,r5,r6
 700c7dc:	300cc03a 	cmpne	r6,r6,zero
 700c7e0:	0005883a 	mov	r2,zero
 700c7e4:	003f6406 	br	700c578 <__alt_data_end+0xff00c578>
 700c7e8:	10009a1e 	bne	r2,zero,700ca54 <__subdf3+0x640>
 700c7ec:	82400044 	addi	r9,r16,1
 700c7f0:	4881ffcc 	andi	r2,r9,2047
 700c7f4:	02800044 	movi	r10,1
 700c7f8:	5080670e 	bge	r10,r2,700c998 <__subdf3+0x584>
 700c7fc:	0081ffc4 	movi	r2,2047
 700c800:	4880af26 	beq	r9,r2,700cac0 <__subdf3+0x6ac>
 700c804:	898d883a 	add	r6,r17,r6
 700c808:	1945883a 	add	r2,r3,r5
 700c80c:	3447803a 	cmpltu	r3,r6,r17
 700c810:	1887883a 	add	r3,r3,r2
 700c814:	182297fa 	slli	r17,r3,31
 700c818:	300cd07a 	srli	r6,r6,1
 700c81c:	1806d07a 	srli	r3,r3,1
 700c820:	4821883a 	mov	r16,r9
 700c824:	89a2b03a 	or	r17,r17,r6
 700c828:	003f1b06 	br	700c498 <__alt_data_end+0xff00c498>
 700c82c:	0101ffc4 	movi	r4,2047
 700c830:	813f441e 	bne	r16,r4,700c544 <__alt_data_end+0xff00c544>
 700c834:	003f1806 	br	700c498 <__alt_data_end+0xff00c498>
 700c838:	843ff844 	addi	r16,r16,-31
 700c83c:	01400804 	movi	r5,32
 700c840:	1408d83a 	srl	r4,r2,r16
 700c844:	19405026 	beq	r3,r5,700c988 <__subdf3+0x574>
 700c848:	01401004 	movi	r5,64
 700c84c:	28c7c83a 	sub	r3,r5,r3
 700c850:	10c4983a 	sll	r2,r2,r3
 700c854:	88a2b03a 	or	r17,r17,r2
 700c858:	8822c03a 	cmpne	r17,r17,zero
 700c85c:	2462b03a 	or	r17,r4,r17
 700c860:	0007883a 	mov	r3,zero
 700c864:	0021883a 	mov	r16,zero
 700c868:	003f6d06 	br	700c620 <__alt_data_end+0xff00c620>
 700c86c:	11fff804 	addi	r7,r2,-32
 700c870:	01000804 	movi	r4,32
 700c874:	29ced83a 	srl	r7,r5,r7
 700c878:	11004526 	beq	r2,r4,700c990 <__subdf3+0x57c>
 700c87c:	01001004 	movi	r4,64
 700c880:	2089c83a 	sub	r4,r4,r2
 700c884:	2904983a 	sll	r2,r5,r4
 700c888:	118cb03a 	or	r6,r2,r6
 700c88c:	300cc03a 	cmpne	r6,r6,zero
 700c890:	398cb03a 	or	r6,r7,r6
 700c894:	0005883a 	mov	r2,zero
 700c898:	003f3706 	br	700c578 <__alt_data_end+0xff00c578>
 700c89c:	80002a26 	beq	r16,zero,700c948 <__subdf3+0x534>
 700c8a0:	0101ffc4 	movi	r4,2047
 700c8a4:	49006626 	beq	r9,r4,700ca40 <__subdf3+0x62c>
 700c8a8:	0085c83a 	sub	r2,zero,r2
 700c8ac:	18c02034 	orhi	r3,r3,128
 700c8b0:	01000e04 	movi	r4,56
 700c8b4:	20807e16 	blt	r4,r2,700cab0 <__subdf3+0x69c>
 700c8b8:	010007c4 	movi	r4,31
 700c8bc:	2080e716 	blt	r4,r2,700cc5c <__subdf3+0x848>
 700c8c0:	01000804 	movi	r4,32
 700c8c4:	2089c83a 	sub	r4,r4,r2
 700c8c8:	1914983a 	sll	r10,r3,r4
 700c8cc:	8890d83a 	srl	r8,r17,r2
 700c8d0:	8908983a 	sll	r4,r17,r4
 700c8d4:	1884d83a 	srl	r2,r3,r2
 700c8d8:	5222b03a 	or	r17,r10,r8
 700c8dc:	2006c03a 	cmpne	r3,r4,zero
 700c8e0:	88e2b03a 	or	r17,r17,r3
 700c8e4:	3463c83a 	sub	r17,r6,r17
 700c8e8:	2885c83a 	sub	r2,r5,r2
 700c8ec:	344d803a 	cmpltu	r6,r6,r17
 700c8f0:	1187c83a 	sub	r3,r2,r6
 700c8f4:	4821883a 	mov	r16,r9
 700c8f8:	3825883a 	mov	r18,r7
 700c8fc:	003f2306 	br	700c58c <__alt_data_end+0xff00c58c>
 700c900:	24d0b03a 	or	r8,r4,r19
 700c904:	40001b1e 	bne	r8,zero,700c974 <__subdf3+0x560>
 700c908:	0005883a 	mov	r2,zero
 700c90c:	0009883a 	mov	r4,zero
 700c910:	0021883a 	mov	r16,zero
 700c914:	003f4906 	br	700c63c <__alt_data_end+0xff00c63c>
 700c918:	010007c4 	movi	r4,31
 700c91c:	20803a16 	blt	r4,r2,700ca08 <__subdf3+0x5f4>
 700c920:	01000804 	movi	r4,32
 700c924:	2089c83a 	sub	r4,r4,r2
 700c928:	2912983a 	sll	r9,r5,r4
 700c92c:	3090d83a 	srl	r8,r6,r2
 700c930:	3108983a 	sll	r4,r6,r4
 700c934:	2884d83a 	srl	r2,r5,r2
 700c938:	4a12b03a 	or	r9,r9,r8
 700c93c:	2008c03a 	cmpne	r4,r4,zero
 700c940:	4912b03a 	or	r9,r9,r4
 700c944:	003f4e06 	br	700c680 <__alt_data_end+0xff00c680>
 700c948:	1c48b03a 	or	r4,r3,r17
 700c94c:	20003c26 	beq	r4,zero,700ca40 <__subdf3+0x62c>
 700c950:	0084303a 	nor	r2,zero,r2
 700c954:	1000381e 	bne	r2,zero,700ca38 <__subdf3+0x624>
 700c958:	3463c83a 	sub	r17,r6,r17
 700c95c:	28c5c83a 	sub	r2,r5,r3
 700c960:	344d803a 	cmpltu	r6,r6,r17
 700c964:	1187c83a 	sub	r3,r2,r6
 700c968:	4821883a 	mov	r16,r9
 700c96c:	3825883a 	mov	r18,r7
 700c970:	003f0606 	br	700c58c <__alt_data_end+0xff00c58c>
 700c974:	2023883a 	mov	r17,r4
 700c978:	003f0906 	br	700c5a0 <__alt_data_end+0xff00c5a0>
 700c97c:	0101ffc4 	movi	r4,2047
 700c980:	813f3a1e 	bne	r16,r4,700c66c <__alt_data_end+0xff00c66c>
 700c984:	003ec406 	br	700c498 <__alt_data_end+0xff00c498>
 700c988:	0005883a 	mov	r2,zero
 700c98c:	003fb106 	br	700c854 <__alt_data_end+0xff00c854>
 700c990:	0005883a 	mov	r2,zero
 700c994:	003fbc06 	br	700c888 <__alt_data_end+0xff00c888>
 700c998:	1c44b03a 	or	r2,r3,r17
 700c99c:	80008e1e 	bne	r16,zero,700cbd8 <__subdf3+0x7c4>
 700c9a0:	1000c826 	beq	r2,zero,700ccc4 <__subdf3+0x8b0>
 700c9a4:	2984b03a 	or	r2,r5,r6
 700c9a8:	103ebb26 	beq	r2,zero,700c498 <__alt_data_end+0xff00c498>
 700c9ac:	8989883a 	add	r4,r17,r6
 700c9b0:	1945883a 	add	r2,r3,r5
 700c9b4:	2447803a 	cmpltu	r3,r4,r17
 700c9b8:	1887883a 	add	r3,r3,r2
 700c9bc:	1880202c 	andhi	r2,r3,128
 700c9c0:	2023883a 	mov	r17,r4
 700c9c4:	103f1626 	beq	r2,zero,700c620 <__alt_data_end+0xff00c620>
 700c9c8:	00bfe034 	movhi	r2,65408
 700c9cc:	10bfffc4 	addi	r2,r2,-1
 700c9d0:	5021883a 	mov	r16,r10
 700c9d4:	1886703a 	and	r3,r3,r2
 700c9d8:	003eaf06 	br	700c498 <__alt_data_end+0xff00c498>
 700c9dc:	3825883a 	mov	r18,r7
 700c9e0:	003f0f06 	br	700c620 <__alt_data_end+0xff00c620>
 700c9e4:	1c44b03a 	or	r2,r3,r17
 700c9e8:	8000251e 	bne	r16,zero,700ca80 <__subdf3+0x66c>
 700c9ec:	1000661e 	bne	r2,zero,700cb88 <__subdf3+0x774>
 700c9f0:	2990b03a 	or	r8,r5,r6
 700c9f4:	40009626 	beq	r8,zero,700cc50 <__subdf3+0x83c>
 700c9f8:	2807883a 	mov	r3,r5
 700c9fc:	3023883a 	mov	r17,r6
 700ca00:	3825883a 	mov	r18,r7
 700ca04:	003ea406 	br	700c498 <__alt_data_end+0xff00c498>
 700ca08:	127ff804 	addi	r9,r2,-32
 700ca0c:	01000804 	movi	r4,32
 700ca10:	2a52d83a 	srl	r9,r5,r9
 700ca14:	11008c26 	beq	r2,r4,700cc48 <__subdf3+0x834>
 700ca18:	01001004 	movi	r4,64
 700ca1c:	2085c83a 	sub	r2,r4,r2
 700ca20:	2884983a 	sll	r2,r5,r2
 700ca24:	118cb03a 	or	r6,r2,r6
 700ca28:	300cc03a 	cmpne	r6,r6,zero
 700ca2c:	4992b03a 	or	r9,r9,r6
 700ca30:	0005883a 	mov	r2,zero
 700ca34:	003f1206 	br	700c680 <__alt_data_end+0xff00c680>
 700ca38:	0101ffc4 	movi	r4,2047
 700ca3c:	493f9c1e 	bne	r9,r4,700c8b0 <__alt_data_end+0xff00c8b0>
 700ca40:	2807883a 	mov	r3,r5
 700ca44:	3023883a 	mov	r17,r6
 700ca48:	4821883a 	mov	r16,r9
 700ca4c:	3825883a 	mov	r18,r7
 700ca50:	003e9106 	br	700c498 <__alt_data_end+0xff00c498>
 700ca54:	80001f1e 	bne	r16,zero,700cad4 <__subdf3+0x6c0>
 700ca58:	1c48b03a 	or	r4,r3,r17
 700ca5c:	20005a26 	beq	r4,zero,700cbc8 <__subdf3+0x7b4>
 700ca60:	0084303a 	nor	r2,zero,r2
 700ca64:	1000561e 	bne	r2,zero,700cbc0 <__subdf3+0x7ac>
 700ca68:	89a3883a 	add	r17,r17,r6
 700ca6c:	1945883a 	add	r2,r3,r5
 700ca70:	898d803a 	cmpltu	r6,r17,r6
 700ca74:	3087883a 	add	r3,r6,r2
 700ca78:	4821883a 	mov	r16,r9
 700ca7c:	003f0506 	br	700c694 <__alt_data_end+0xff00c694>
 700ca80:	10002b1e 	bne	r2,zero,700cb30 <__subdf3+0x71c>
 700ca84:	2984b03a 	or	r2,r5,r6
 700ca88:	10008026 	beq	r2,zero,700cc8c <__subdf3+0x878>
 700ca8c:	2807883a 	mov	r3,r5
 700ca90:	3023883a 	mov	r17,r6
 700ca94:	3825883a 	mov	r18,r7
 700ca98:	0401ffc4 	movi	r16,2047
 700ca9c:	003e7e06 	br	700c498 <__alt_data_end+0xff00c498>
 700caa0:	3809883a 	mov	r4,r7
 700caa4:	0011883a 	mov	r8,zero
 700caa8:	0005883a 	mov	r2,zero
 700caac:	003ee306 	br	700c63c <__alt_data_end+0xff00c63c>
 700cab0:	1c62b03a 	or	r17,r3,r17
 700cab4:	8822c03a 	cmpne	r17,r17,zero
 700cab8:	0005883a 	mov	r2,zero
 700cabc:	003f8906 	br	700c8e4 <__alt_data_end+0xff00c8e4>
 700cac0:	3809883a 	mov	r4,r7
 700cac4:	4821883a 	mov	r16,r9
 700cac8:	0011883a 	mov	r8,zero
 700cacc:	0005883a 	mov	r2,zero
 700cad0:	003eda06 	br	700c63c <__alt_data_end+0xff00c63c>
 700cad4:	0101ffc4 	movi	r4,2047
 700cad8:	49003b26 	beq	r9,r4,700cbc8 <__subdf3+0x7b4>
 700cadc:	0085c83a 	sub	r2,zero,r2
 700cae0:	18c02034 	orhi	r3,r3,128
 700cae4:	01000e04 	movi	r4,56
 700cae8:	20806e16 	blt	r4,r2,700cca4 <__subdf3+0x890>
 700caec:	010007c4 	movi	r4,31
 700caf0:	20807716 	blt	r4,r2,700ccd0 <__subdf3+0x8bc>
 700caf4:	01000804 	movi	r4,32
 700caf8:	2089c83a 	sub	r4,r4,r2
 700cafc:	1914983a 	sll	r10,r3,r4
 700cb00:	8890d83a 	srl	r8,r17,r2
 700cb04:	8908983a 	sll	r4,r17,r4
 700cb08:	1884d83a 	srl	r2,r3,r2
 700cb0c:	5222b03a 	or	r17,r10,r8
 700cb10:	2006c03a 	cmpne	r3,r4,zero
 700cb14:	88e2b03a 	or	r17,r17,r3
 700cb18:	89a3883a 	add	r17,r17,r6
 700cb1c:	1145883a 	add	r2,r2,r5
 700cb20:	898d803a 	cmpltu	r6,r17,r6
 700cb24:	3087883a 	add	r3,r6,r2
 700cb28:	4821883a 	mov	r16,r9
 700cb2c:	003ed906 	br	700c694 <__alt_data_end+0xff00c694>
 700cb30:	2984b03a 	or	r2,r5,r6
 700cb34:	10004226 	beq	r2,zero,700cc40 <__subdf3+0x82c>
 700cb38:	1808d0fa 	srli	r4,r3,3
 700cb3c:	8822d0fa 	srli	r17,r17,3
 700cb40:	1806977a 	slli	r3,r3,29
 700cb44:	2080022c 	andhi	r2,r4,8
 700cb48:	1c62b03a 	or	r17,r3,r17
 700cb4c:	10000826 	beq	r2,zero,700cb70 <__subdf3+0x75c>
 700cb50:	2812d0fa 	srli	r9,r5,3
 700cb54:	4880022c 	andhi	r2,r9,8
 700cb58:	1000051e 	bne	r2,zero,700cb70 <__subdf3+0x75c>
 700cb5c:	300cd0fa 	srli	r6,r6,3
 700cb60:	2804977a 	slli	r2,r5,29
 700cb64:	4809883a 	mov	r4,r9
 700cb68:	3825883a 	mov	r18,r7
 700cb6c:	11a2b03a 	or	r17,r2,r6
 700cb70:	8806d77a 	srli	r3,r17,29
 700cb74:	200890fa 	slli	r4,r4,3
 700cb78:	882290fa 	slli	r17,r17,3
 700cb7c:	0401ffc4 	movi	r16,2047
 700cb80:	1906b03a 	or	r3,r3,r4
 700cb84:	003e4406 	br	700c498 <__alt_data_end+0xff00c498>
 700cb88:	2984b03a 	or	r2,r5,r6
 700cb8c:	103e4226 	beq	r2,zero,700c498 <__alt_data_end+0xff00c498>
 700cb90:	8989c83a 	sub	r4,r17,r6
 700cb94:	8911803a 	cmpltu	r8,r17,r4
 700cb98:	1945c83a 	sub	r2,r3,r5
 700cb9c:	1205c83a 	sub	r2,r2,r8
 700cba0:	1200202c 	andhi	r8,r2,128
 700cba4:	403e9a26 	beq	r8,zero,700c610 <__alt_data_end+0xff00c610>
 700cba8:	3463c83a 	sub	r17,r6,r17
 700cbac:	28c5c83a 	sub	r2,r5,r3
 700cbb0:	344d803a 	cmpltu	r6,r6,r17
 700cbb4:	1187c83a 	sub	r3,r2,r6
 700cbb8:	3825883a 	mov	r18,r7
 700cbbc:	003e3606 	br	700c498 <__alt_data_end+0xff00c498>
 700cbc0:	0101ffc4 	movi	r4,2047
 700cbc4:	493fc71e 	bne	r9,r4,700cae4 <__alt_data_end+0xff00cae4>
 700cbc8:	2807883a 	mov	r3,r5
 700cbcc:	3023883a 	mov	r17,r6
 700cbd0:	4821883a 	mov	r16,r9
 700cbd4:	003e3006 	br	700c498 <__alt_data_end+0xff00c498>
 700cbd8:	10003626 	beq	r2,zero,700ccb4 <__subdf3+0x8a0>
 700cbdc:	2984b03a 	or	r2,r5,r6
 700cbe0:	10001726 	beq	r2,zero,700cc40 <__subdf3+0x82c>
 700cbe4:	1808d0fa 	srli	r4,r3,3
 700cbe8:	8822d0fa 	srli	r17,r17,3
 700cbec:	1806977a 	slli	r3,r3,29
 700cbf0:	2080022c 	andhi	r2,r4,8
 700cbf4:	1c62b03a 	or	r17,r3,r17
 700cbf8:	10000726 	beq	r2,zero,700cc18 <__subdf3+0x804>
 700cbfc:	2812d0fa 	srli	r9,r5,3
 700cc00:	4880022c 	andhi	r2,r9,8
 700cc04:	1000041e 	bne	r2,zero,700cc18 <__subdf3+0x804>
 700cc08:	300cd0fa 	srli	r6,r6,3
 700cc0c:	2804977a 	slli	r2,r5,29
 700cc10:	4809883a 	mov	r4,r9
 700cc14:	11a2b03a 	or	r17,r2,r6
 700cc18:	8806d77a 	srli	r3,r17,29
 700cc1c:	200890fa 	slli	r4,r4,3
 700cc20:	882290fa 	slli	r17,r17,3
 700cc24:	3825883a 	mov	r18,r7
 700cc28:	1906b03a 	or	r3,r3,r4
 700cc2c:	0401ffc4 	movi	r16,2047
 700cc30:	003e1906 	br	700c498 <__alt_data_end+0xff00c498>
 700cc34:	000b883a 	mov	r5,zero
 700cc38:	0005883a 	mov	r2,zero
 700cc3c:	003e2e06 	br	700c4f8 <__alt_data_end+0xff00c4f8>
 700cc40:	0401ffc4 	movi	r16,2047
 700cc44:	003e1406 	br	700c498 <__alt_data_end+0xff00c498>
 700cc48:	0005883a 	mov	r2,zero
 700cc4c:	003f7506 	br	700ca24 <__alt_data_end+0xff00ca24>
 700cc50:	0005883a 	mov	r2,zero
 700cc54:	0009883a 	mov	r4,zero
 700cc58:	003e7806 	br	700c63c <__alt_data_end+0xff00c63c>
 700cc5c:	123ff804 	addi	r8,r2,-32
 700cc60:	01000804 	movi	r4,32
 700cc64:	1a10d83a 	srl	r8,r3,r8
 700cc68:	11002526 	beq	r2,r4,700cd00 <__subdf3+0x8ec>
 700cc6c:	01001004 	movi	r4,64
 700cc70:	2085c83a 	sub	r2,r4,r2
 700cc74:	1884983a 	sll	r2,r3,r2
 700cc78:	1444b03a 	or	r2,r2,r17
 700cc7c:	1004c03a 	cmpne	r2,r2,zero
 700cc80:	40a2b03a 	or	r17,r8,r2
 700cc84:	0005883a 	mov	r2,zero
 700cc88:	003f1606 	br	700c8e4 <__alt_data_end+0xff00c8e4>
 700cc8c:	02000434 	movhi	r8,16
 700cc90:	0009883a 	mov	r4,zero
 700cc94:	423fffc4 	addi	r8,r8,-1
 700cc98:	00bfffc4 	movi	r2,-1
 700cc9c:	0401ffc4 	movi	r16,2047
 700cca0:	003e6606 	br	700c63c <__alt_data_end+0xff00c63c>
 700cca4:	1c62b03a 	or	r17,r3,r17
 700cca8:	8822c03a 	cmpne	r17,r17,zero
 700ccac:	0005883a 	mov	r2,zero
 700ccb0:	003f9906 	br	700cb18 <__alt_data_end+0xff00cb18>
 700ccb4:	2807883a 	mov	r3,r5
 700ccb8:	3023883a 	mov	r17,r6
 700ccbc:	0401ffc4 	movi	r16,2047
 700ccc0:	003df506 	br	700c498 <__alt_data_end+0xff00c498>
 700ccc4:	2807883a 	mov	r3,r5
 700ccc8:	3023883a 	mov	r17,r6
 700cccc:	003df206 	br	700c498 <__alt_data_end+0xff00c498>
 700ccd0:	123ff804 	addi	r8,r2,-32
 700ccd4:	01000804 	movi	r4,32
 700ccd8:	1a10d83a 	srl	r8,r3,r8
 700ccdc:	11000a26 	beq	r2,r4,700cd08 <__subdf3+0x8f4>
 700cce0:	01001004 	movi	r4,64
 700cce4:	2085c83a 	sub	r2,r4,r2
 700cce8:	1884983a 	sll	r2,r3,r2
 700ccec:	1444b03a 	or	r2,r2,r17
 700ccf0:	1004c03a 	cmpne	r2,r2,zero
 700ccf4:	40a2b03a 	or	r17,r8,r2
 700ccf8:	0005883a 	mov	r2,zero
 700ccfc:	003f8606 	br	700cb18 <__alt_data_end+0xff00cb18>
 700cd00:	0005883a 	mov	r2,zero
 700cd04:	003fdc06 	br	700cc78 <__alt_data_end+0xff00cc78>
 700cd08:	0005883a 	mov	r2,zero
 700cd0c:	003ff706 	br	700ccec <__alt_data_end+0xff00ccec>

0700cd10 <__fixdfsi>:
 700cd10:	280cd53a 	srli	r6,r5,20
 700cd14:	00c00434 	movhi	r3,16
 700cd18:	18ffffc4 	addi	r3,r3,-1
 700cd1c:	3181ffcc 	andi	r6,r6,2047
 700cd20:	01c0ff84 	movi	r7,1022
 700cd24:	28c6703a 	and	r3,r5,r3
 700cd28:	280ad7fa 	srli	r5,r5,31
 700cd2c:	3980120e 	bge	r7,r6,700cd78 <__fixdfsi+0x68>
 700cd30:	00810744 	movi	r2,1053
 700cd34:	11800c16 	blt	r2,r6,700cd68 <__fixdfsi+0x58>
 700cd38:	00810cc4 	movi	r2,1075
 700cd3c:	1185c83a 	sub	r2,r2,r6
 700cd40:	01c007c4 	movi	r7,31
 700cd44:	18c00434 	orhi	r3,r3,16
 700cd48:	38800d16 	blt	r7,r2,700cd80 <__fixdfsi+0x70>
 700cd4c:	31befb44 	addi	r6,r6,-1043
 700cd50:	2084d83a 	srl	r2,r4,r2
 700cd54:	1986983a 	sll	r3,r3,r6
 700cd58:	1884b03a 	or	r2,r3,r2
 700cd5c:	28000726 	beq	r5,zero,700cd7c <__fixdfsi+0x6c>
 700cd60:	0085c83a 	sub	r2,zero,r2
 700cd64:	f800283a 	ret
 700cd68:	00a00034 	movhi	r2,32768
 700cd6c:	10bfffc4 	addi	r2,r2,-1
 700cd70:	2885883a 	add	r2,r5,r2
 700cd74:	f800283a 	ret
 700cd78:	0005883a 	mov	r2,zero
 700cd7c:	f800283a 	ret
 700cd80:	008104c4 	movi	r2,1043
 700cd84:	1185c83a 	sub	r2,r2,r6
 700cd88:	1884d83a 	srl	r2,r3,r2
 700cd8c:	003ff306 	br	700cd5c <__alt_data_end+0xff00cd5c>

0700cd90 <__floatsidf>:
 700cd90:	defffd04 	addi	sp,sp,-12
 700cd94:	dfc00215 	stw	ra,8(sp)
 700cd98:	dc400115 	stw	r17,4(sp)
 700cd9c:	dc000015 	stw	r16,0(sp)
 700cda0:	20002b26 	beq	r4,zero,700ce50 <__floatsidf+0xc0>
 700cda4:	2023883a 	mov	r17,r4
 700cda8:	2020d7fa 	srli	r16,r4,31
 700cdac:	20002d16 	blt	r4,zero,700ce64 <__floatsidf+0xd4>
 700cdb0:	8809883a 	mov	r4,r17
 700cdb4:	700cf140 	call	700cf14 <__clzsi2>
 700cdb8:	01410784 	movi	r5,1054
 700cdbc:	288bc83a 	sub	r5,r5,r2
 700cdc0:	01010cc4 	movi	r4,1075
 700cdc4:	2149c83a 	sub	r4,r4,r5
 700cdc8:	00c007c4 	movi	r3,31
 700cdcc:	1900160e 	bge	r3,r4,700ce28 <__floatsidf+0x98>
 700cdd0:	00c104c4 	movi	r3,1043
 700cdd4:	1947c83a 	sub	r3,r3,r5
 700cdd8:	88c6983a 	sll	r3,r17,r3
 700cddc:	00800434 	movhi	r2,16
 700cde0:	10bfffc4 	addi	r2,r2,-1
 700cde4:	1886703a 	and	r3,r3,r2
 700cde8:	2941ffcc 	andi	r5,r5,2047
 700cdec:	800d883a 	mov	r6,r16
 700cdf0:	0005883a 	mov	r2,zero
 700cdf4:	280a953a 	slli	r5,r5,20
 700cdf8:	31803fcc 	andi	r6,r6,255
 700cdfc:	01000434 	movhi	r4,16
 700ce00:	300c97fa 	slli	r6,r6,31
 700ce04:	213fffc4 	addi	r4,r4,-1
 700ce08:	1906703a 	and	r3,r3,r4
 700ce0c:	1946b03a 	or	r3,r3,r5
 700ce10:	1986b03a 	or	r3,r3,r6
 700ce14:	dfc00217 	ldw	ra,8(sp)
 700ce18:	dc400117 	ldw	r17,4(sp)
 700ce1c:	dc000017 	ldw	r16,0(sp)
 700ce20:	dec00304 	addi	sp,sp,12
 700ce24:	f800283a 	ret
 700ce28:	00c002c4 	movi	r3,11
 700ce2c:	1887c83a 	sub	r3,r3,r2
 700ce30:	88c6d83a 	srl	r3,r17,r3
 700ce34:	8904983a 	sll	r2,r17,r4
 700ce38:	01000434 	movhi	r4,16
 700ce3c:	213fffc4 	addi	r4,r4,-1
 700ce40:	2941ffcc 	andi	r5,r5,2047
 700ce44:	1906703a 	and	r3,r3,r4
 700ce48:	800d883a 	mov	r6,r16
 700ce4c:	003fe906 	br	700cdf4 <__alt_data_end+0xff00cdf4>
 700ce50:	000d883a 	mov	r6,zero
 700ce54:	000b883a 	mov	r5,zero
 700ce58:	0007883a 	mov	r3,zero
 700ce5c:	0005883a 	mov	r2,zero
 700ce60:	003fe406 	br	700cdf4 <__alt_data_end+0xff00cdf4>
 700ce64:	0123c83a 	sub	r17,zero,r4
 700ce68:	003fd106 	br	700cdb0 <__alt_data_end+0xff00cdb0>

0700ce6c <__floatunsidf>:
 700ce6c:	defffe04 	addi	sp,sp,-8
 700ce70:	dc000015 	stw	r16,0(sp)
 700ce74:	dfc00115 	stw	ra,4(sp)
 700ce78:	2021883a 	mov	r16,r4
 700ce7c:	20002226 	beq	r4,zero,700cf08 <__floatunsidf+0x9c>
 700ce80:	700cf140 	call	700cf14 <__clzsi2>
 700ce84:	01010784 	movi	r4,1054
 700ce88:	2089c83a 	sub	r4,r4,r2
 700ce8c:	01810cc4 	movi	r6,1075
 700ce90:	310dc83a 	sub	r6,r6,r4
 700ce94:	00c007c4 	movi	r3,31
 700ce98:	1980120e 	bge	r3,r6,700cee4 <__floatunsidf+0x78>
 700ce9c:	00c104c4 	movi	r3,1043
 700cea0:	1907c83a 	sub	r3,r3,r4
 700cea4:	80ca983a 	sll	r5,r16,r3
 700cea8:	00800434 	movhi	r2,16
 700ceac:	10bfffc4 	addi	r2,r2,-1
 700ceb0:	2101ffcc 	andi	r4,r4,2047
 700ceb4:	0021883a 	mov	r16,zero
 700ceb8:	288a703a 	and	r5,r5,r2
 700cebc:	2008953a 	slli	r4,r4,20
 700cec0:	00c00434 	movhi	r3,16
 700cec4:	18ffffc4 	addi	r3,r3,-1
 700cec8:	28c6703a 	and	r3,r5,r3
 700cecc:	8005883a 	mov	r2,r16
 700ced0:	1906b03a 	or	r3,r3,r4
 700ced4:	dfc00117 	ldw	ra,4(sp)
 700ced8:	dc000017 	ldw	r16,0(sp)
 700cedc:	dec00204 	addi	sp,sp,8
 700cee0:	f800283a 	ret
 700cee4:	00c002c4 	movi	r3,11
 700cee8:	188bc83a 	sub	r5,r3,r2
 700ceec:	814ad83a 	srl	r5,r16,r5
 700cef0:	00c00434 	movhi	r3,16
 700cef4:	18ffffc4 	addi	r3,r3,-1
 700cef8:	81a0983a 	sll	r16,r16,r6
 700cefc:	2101ffcc 	andi	r4,r4,2047
 700cf00:	28ca703a 	and	r5,r5,r3
 700cf04:	003fed06 	br	700cebc <__alt_data_end+0xff00cebc>
 700cf08:	0009883a 	mov	r4,zero
 700cf0c:	000b883a 	mov	r5,zero
 700cf10:	003fea06 	br	700cebc <__alt_data_end+0xff00cebc>

0700cf14 <__clzsi2>:
 700cf14:	00bfffd4 	movui	r2,65535
 700cf18:	11000536 	bltu	r2,r4,700cf30 <__clzsi2+0x1c>
 700cf1c:	00803fc4 	movi	r2,255
 700cf20:	11000f36 	bltu	r2,r4,700cf60 <__clzsi2+0x4c>
 700cf24:	00800804 	movi	r2,32
 700cf28:	0007883a 	mov	r3,zero
 700cf2c:	00000506 	br	700cf44 <__clzsi2+0x30>
 700cf30:	00804034 	movhi	r2,256
 700cf34:	10bfffc4 	addi	r2,r2,-1
 700cf38:	11000c2e 	bgeu	r2,r4,700cf6c <__clzsi2+0x58>
 700cf3c:	00800204 	movi	r2,8
 700cf40:	00c00604 	movi	r3,24
 700cf44:	20c8d83a 	srl	r4,r4,r3
 700cf48:	00c1c074 	movhi	r3,1793
 700cf4c:	18ff4904 	addi	r3,r3,-732
 700cf50:	1909883a 	add	r4,r3,r4
 700cf54:	20c00003 	ldbu	r3,0(r4)
 700cf58:	10c5c83a 	sub	r2,r2,r3
 700cf5c:	f800283a 	ret
 700cf60:	00800604 	movi	r2,24
 700cf64:	00c00204 	movi	r3,8
 700cf68:	003ff606 	br	700cf44 <__alt_data_end+0xff00cf44>
 700cf6c:	00800404 	movi	r2,16
 700cf70:	1007883a 	mov	r3,r2
 700cf74:	003ff306 	br	700cf44 <__alt_data_end+0xff00cf44>

0700cf78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700cf78:	defffe04 	addi	sp,sp,-8
 700cf7c:	dfc00115 	stw	ra,4(sp)
 700cf80:	df000015 	stw	fp,0(sp)
 700cf84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700cf88:	d0a00e17 	ldw	r2,-32712(gp)
 700cf8c:	10000326 	beq	r2,zero,700cf9c <alt_get_errno+0x24>
 700cf90:	d0a00e17 	ldw	r2,-32712(gp)
 700cf94:	103ee83a 	callr	r2
 700cf98:	00000106 	br	700cfa0 <alt_get_errno+0x28>
 700cf9c:	d0a6df04 	addi	r2,gp,-25732
}
 700cfa0:	e037883a 	mov	sp,fp
 700cfa4:	dfc00117 	ldw	ra,4(sp)
 700cfa8:	df000017 	ldw	fp,0(sp)
 700cfac:	dec00204 	addi	sp,sp,8
 700cfb0:	f800283a 	ret

0700cfb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 700cfb4:	defffb04 	addi	sp,sp,-20
 700cfb8:	dfc00415 	stw	ra,16(sp)
 700cfbc:	df000315 	stw	fp,12(sp)
 700cfc0:	df000304 	addi	fp,sp,12
 700cfc4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 700cfc8:	e0bfff17 	ldw	r2,-4(fp)
 700cfcc:	10000616 	blt	r2,zero,700cfe8 <close+0x34>
 700cfd0:	e0bfff17 	ldw	r2,-4(fp)
 700cfd4:	10c00324 	muli	r3,r2,12
 700cfd8:	0081c074 	movhi	r2,1793
 700cfdc:	1081ca04 	addi	r2,r2,1832
 700cfe0:	1885883a 	add	r2,r3,r2
 700cfe4:	00000106 	br	700cfec <close+0x38>
 700cfe8:	0005883a 	mov	r2,zero
 700cfec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 700cff0:	e0bffd17 	ldw	r2,-12(fp)
 700cff4:	10001926 	beq	r2,zero,700d05c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 700cff8:	e0bffd17 	ldw	r2,-12(fp)
 700cffc:	10800017 	ldw	r2,0(r2)
 700d000:	10800417 	ldw	r2,16(r2)
 700d004:	10000626 	beq	r2,zero,700d020 <close+0x6c>
 700d008:	e0bffd17 	ldw	r2,-12(fp)
 700d00c:	10800017 	ldw	r2,0(r2)
 700d010:	10800417 	ldw	r2,16(r2)
 700d014:	e13ffd17 	ldw	r4,-12(fp)
 700d018:	103ee83a 	callr	r2
 700d01c:	00000106 	br	700d024 <close+0x70>
 700d020:	0005883a 	mov	r2,zero
 700d024:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 700d028:	e13fff17 	ldw	r4,-4(fp)
 700d02c:	700d6bc0 	call	700d6bc <alt_release_fd>
    if (rval < 0)
 700d030:	e0bffe17 	ldw	r2,-8(fp)
 700d034:	1000070e 	bge	r2,zero,700d054 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 700d038:	700cf780 	call	700cf78 <alt_get_errno>
 700d03c:	1007883a 	mov	r3,r2
 700d040:	e0bffe17 	ldw	r2,-8(fp)
 700d044:	0085c83a 	sub	r2,zero,r2
 700d048:	18800015 	stw	r2,0(r3)
      return -1;
 700d04c:	00bfffc4 	movi	r2,-1
 700d050:	00000706 	br	700d070 <close+0xbc>
    }
    return 0;
 700d054:	0005883a 	mov	r2,zero
 700d058:	00000506 	br	700d070 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 700d05c:	700cf780 	call	700cf78 <alt_get_errno>
 700d060:	1007883a 	mov	r3,r2
 700d064:	00801444 	movi	r2,81
 700d068:	18800015 	stw	r2,0(r3)
    return -1;
 700d06c:	00bfffc4 	movi	r2,-1
  }
}
 700d070:	e037883a 	mov	sp,fp
 700d074:	dfc00117 	ldw	ra,4(sp)
 700d078:	df000017 	ldw	fp,0(sp)
 700d07c:	dec00204 	addi	sp,sp,8
 700d080:	f800283a 	ret

0700d084 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 700d084:	defffe04 	addi	sp,sp,-8
 700d088:	df000115 	stw	fp,4(sp)
 700d08c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 700d090:	e03fff15 	stw	zero,-4(fp)
 700d094:	00000506 	br	700d0ac <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 700d098:	e0bfff17 	ldw	r2,-4(fp)
 700d09c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 700d0a0:	e0bfff17 	ldw	r2,-4(fp)
 700d0a4:	10800804 	addi	r2,r2,32
 700d0a8:	e0bfff15 	stw	r2,-4(fp)
 700d0ac:	e0bfff17 	ldw	r2,-4(fp)
 700d0b0:	10820030 	cmpltui	r2,r2,2048
 700d0b4:	103ff81e 	bne	r2,zero,700d098 <__alt_data_end+0xff00d098>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 700d0b8:	0001883a 	nop
 700d0bc:	e037883a 	mov	sp,fp
 700d0c0:	df000017 	ldw	fp,0(sp)
 700d0c4:	dec00104 	addi	sp,sp,4
 700d0c8:	f800283a 	ret

0700d0cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 700d0cc:	defffc04 	addi	sp,sp,-16
 700d0d0:	df000315 	stw	fp,12(sp)
 700d0d4:	df000304 	addi	fp,sp,12
 700d0d8:	e13ffd15 	stw	r4,-12(fp)
 700d0dc:	e17ffe15 	stw	r5,-8(fp)
 700d0e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 700d0e4:	e0bfff17 	ldw	r2,-4(fp)
}
 700d0e8:	e037883a 	mov	sp,fp
 700d0ec:	df000017 	ldw	fp,0(sp)
 700d0f0:	dec00104 	addi	sp,sp,4
 700d0f4:	f800283a 	ret

0700d0f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700d0f8:	defffe04 	addi	sp,sp,-8
 700d0fc:	dfc00115 	stw	ra,4(sp)
 700d100:	df000015 	stw	fp,0(sp)
 700d104:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700d108:	d0a00e17 	ldw	r2,-32712(gp)
 700d10c:	10000326 	beq	r2,zero,700d11c <alt_get_errno+0x24>
 700d110:	d0a00e17 	ldw	r2,-32712(gp)
 700d114:	103ee83a 	callr	r2
 700d118:	00000106 	br	700d120 <alt_get_errno+0x28>
 700d11c:	d0a6df04 	addi	r2,gp,-25732
}
 700d120:	e037883a 	mov	sp,fp
 700d124:	dfc00117 	ldw	ra,4(sp)
 700d128:	df000017 	ldw	fp,0(sp)
 700d12c:	dec00204 	addi	sp,sp,8
 700d130:	f800283a 	ret

0700d134 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 700d134:	defffb04 	addi	sp,sp,-20
 700d138:	dfc00415 	stw	ra,16(sp)
 700d13c:	df000315 	stw	fp,12(sp)
 700d140:	df000304 	addi	fp,sp,12
 700d144:	e13ffe15 	stw	r4,-8(fp)
 700d148:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 700d14c:	e0bffe17 	ldw	r2,-8(fp)
 700d150:	10000616 	blt	r2,zero,700d16c <fstat+0x38>
 700d154:	e0bffe17 	ldw	r2,-8(fp)
 700d158:	10c00324 	muli	r3,r2,12
 700d15c:	0081c074 	movhi	r2,1793
 700d160:	1081ca04 	addi	r2,r2,1832
 700d164:	1885883a 	add	r2,r3,r2
 700d168:	00000106 	br	700d170 <fstat+0x3c>
 700d16c:	0005883a 	mov	r2,zero
 700d170:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 700d174:	e0bffd17 	ldw	r2,-12(fp)
 700d178:	10001026 	beq	r2,zero,700d1bc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 700d17c:	e0bffd17 	ldw	r2,-12(fp)
 700d180:	10800017 	ldw	r2,0(r2)
 700d184:	10800817 	ldw	r2,32(r2)
 700d188:	10000726 	beq	r2,zero,700d1a8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 700d18c:	e0bffd17 	ldw	r2,-12(fp)
 700d190:	10800017 	ldw	r2,0(r2)
 700d194:	10800817 	ldw	r2,32(r2)
 700d198:	e17fff17 	ldw	r5,-4(fp)
 700d19c:	e13ffd17 	ldw	r4,-12(fp)
 700d1a0:	103ee83a 	callr	r2
 700d1a4:	00000a06 	br	700d1d0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 700d1a8:	e0bfff17 	ldw	r2,-4(fp)
 700d1ac:	00c80004 	movi	r3,8192
 700d1b0:	10c00115 	stw	r3,4(r2)
      return 0;
 700d1b4:	0005883a 	mov	r2,zero
 700d1b8:	00000506 	br	700d1d0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 700d1bc:	700d0f80 	call	700d0f8 <alt_get_errno>
 700d1c0:	1007883a 	mov	r3,r2
 700d1c4:	00801444 	movi	r2,81
 700d1c8:	18800015 	stw	r2,0(r3)
    return -1;
 700d1cc:	00bfffc4 	movi	r2,-1
  }
}
 700d1d0:	e037883a 	mov	sp,fp
 700d1d4:	dfc00117 	ldw	ra,4(sp)
 700d1d8:	df000017 	ldw	fp,0(sp)
 700d1dc:	dec00204 	addi	sp,sp,8
 700d1e0:	f800283a 	ret

0700d1e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700d1e4:	defffe04 	addi	sp,sp,-8
 700d1e8:	dfc00115 	stw	ra,4(sp)
 700d1ec:	df000015 	stw	fp,0(sp)
 700d1f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700d1f4:	d0a00e17 	ldw	r2,-32712(gp)
 700d1f8:	10000326 	beq	r2,zero,700d208 <alt_get_errno+0x24>
 700d1fc:	d0a00e17 	ldw	r2,-32712(gp)
 700d200:	103ee83a 	callr	r2
 700d204:	00000106 	br	700d20c <alt_get_errno+0x28>
 700d208:	d0a6df04 	addi	r2,gp,-25732
}
 700d20c:	e037883a 	mov	sp,fp
 700d210:	dfc00117 	ldw	ra,4(sp)
 700d214:	df000017 	ldw	fp,0(sp)
 700d218:	dec00204 	addi	sp,sp,8
 700d21c:	f800283a 	ret

0700d220 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 700d220:	deffed04 	addi	sp,sp,-76
 700d224:	dfc01215 	stw	ra,72(sp)
 700d228:	df001115 	stw	fp,68(sp)
 700d22c:	df001104 	addi	fp,sp,68
 700d230:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 700d234:	e0bfff17 	ldw	r2,-4(fp)
 700d238:	10000616 	blt	r2,zero,700d254 <isatty+0x34>
 700d23c:	e0bfff17 	ldw	r2,-4(fp)
 700d240:	10c00324 	muli	r3,r2,12
 700d244:	0081c074 	movhi	r2,1793
 700d248:	1081ca04 	addi	r2,r2,1832
 700d24c:	1885883a 	add	r2,r3,r2
 700d250:	00000106 	br	700d258 <isatty+0x38>
 700d254:	0005883a 	mov	r2,zero
 700d258:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 700d25c:	e0bfef17 	ldw	r2,-68(fp)
 700d260:	10000e26 	beq	r2,zero,700d29c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 700d264:	e0bfef17 	ldw	r2,-68(fp)
 700d268:	10800017 	ldw	r2,0(r2)
 700d26c:	10800817 	ldw	r2,32(r2)
 700d270:	1000021e 	bne	r2,zero,700d27c <isatty+0x5c>
    {
      return 1;
 700d274:	00800044 	movi	r2,1
 700d278:	00000d06 	br	700d2b0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 700d27c:	e0bff004 	addi	r2,fp,-64
 700d280:	100b883a 	mov	r5,r2
 700d284:	e13fff17 	ldw	r4,-4(fp)
 700d288:	700d1340 	call	700d134 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 700d28c:	e0bff117 	ldw	r2,-60(fp)
 700d290:	10880020 	cmpeqi	r2,r2,8192
 700d294:	10803fcc 	andi	r2,r2,255
 700d298:	00000506 	br	700d2b0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 700d29c:	700d1e40 	call	700d1e4 <alt_get_errno>
 700d2a0:	1007883a 	mov	r3,r2
 700d2a4:	00801444 	movi	r2,81
 700d2a8:	18800015 	stw	r2,0(r3)
    return 0;
 700d2ac:	0005883a 	mov	r2,zero
  }
}
 700d2b0:	e037883a 	mov	sp,fp
 700d2b4:	dfc00117 	ldw	ra,4(sp)
 700d2b8:	df000017 	ldw	fp,0(sp)
 700d2bc:	dec00204 	addi	sp,sp,8
 700d2c0:	f800283a 	ret

0700d2c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 700d2c4:	defffc04 	addi	sp,sp,-16
 700d2c8:	df000315 	stw	fp,12(sp)
 700d2cc:	df000304 	addi	fp,sp,12
 700d2d0:	e13ffd15 	stw	r4,-12(fp)
 700d2d4:	e17ffe15 	stw	r5,-8(fp)
 700d2d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 700d2dc:	e0fffe17 	ldw	r3,-8(fp)
 700d2e0:	e0bffd17 	ldw	r2,-12(fp)
 700d2e4:	18800c26 	beq	r3,r2,700d318 <alt_load_section+0x54>
  {
    while( to != end )
 700d2e8:	00000806 	br	700d30c <alt_load_section+0x48>
    {
      *to++ = *from++;
 700d2ec:	e0bffe17 	ldw	r2,-8(fp)
 700d2f0:	10c00104 	addi	r3,r2,4
 700d2f4:	e0fffe15 	stw	r3,-8(fp)
 700d2f8:	e0fffd17 	ldw	r3,-12(fp)
 700d2fc:	19000104 	addi	r4,r3,4
 700d300:	e13ffd15 	stw	r4,-12(fp)
 700d304:	18c00017 	ldw	r3,0(r3)
 700d308:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 700d30c:	e0fffe17 	ldw	r3,-8(fp)
 700d310:	e0bfff17 	ldw	r2,-4(fp)
 700d314:	18bff51e 	bne	r3,r2,700d2ec <__alt_data_end+0xff00d2ec>
    {
      *to++ = *from++;
    }
  }
}
 700d318:	0001883a 	nop
 700d31c:	e037883a 	mov	sp,fp
 700d320:	df000017 	ldw	fp,0(sp)
 700d324:	dec00104 	addi	sp,sp,4
 700d328:	f800283a 	ret

0700d32c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 700d32c:	defffe04 	addi	sp,sp,-8
 700d330:	dfc00115 	stw	ra,4(sp)
 700d334:	df000015 	stw	fp,0(sp)
 700d338:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 700d33c:	0181c074 	movhi	r6,1793
 700d340:	31865b04 	addi	r6,r6,6508
 700d344:	0141c074 	movhi	r5,1793
 700d348:	297f9704 	addi	r5,r5,-420
 700d34c:	0101c074 	movhi	r4,1793
 700d350:	21065b04 	addi	r4,r4,6508
 700d354:	700d2c40 	call	700d2c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 700d358:	0181c034 	movhi	r6,1792
 700d35c:	31809104 	addi	r6,r6,580
 700d360:	0141c034 	movhi	r5,1792
 700d364:	29400804 	addi	r5,r5,32
 700d368:	0101c034 	movhi	r4,1792
 700d36c:	21000804 	addi	r4,r4,32
 700d370:	700d2c40 	call	700d2c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 700d374:	0181c074 	movhi	r6,1793
 700d378:	31bf9704 	addi	r6,r6,-420
 700d37c:	0141c074 	movhi	r5,1793
 700d380:	297ea704 	addi	r5,r5,-1380
 700d384:	0101c074 	movhi	r4,1793
 700d388:	213ea704 	addi	r4,r4,-1380
 700d38c:	700d2c40 	call	700d2c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 700d390:	700d0840 	call	700d084 <alt_dcache_flush_all>
  alt_icache_flush_all();
 700d394:	700ec000 	call	700ec00 <alt_icache_flush_all>
}
 700d398:	0001883a 	nop
 700d39c:	e037883a 	mov	sp,fp
 700d3a0:	dfc00117 	ldw	ra,4(sp)
 700d3a4:	df000017 	ldw	fp,0(sp)
 700d3a8:	dec00204 	addi	sp,sp,8
 700d3ac:	f800283a 	ret

0700d3b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700d3b0:	defffe04 	addi	sp,sp,-8
 700d3b4:	dfc00115 	stw	ra,4(sp)
 700d3b8:	df000015 	stw	fp,0(sp)
 700d3bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700d3c0:	d0a00e17 	ldw	r2,-32712(gp)
 700d3c4:	10000326 	beq	r2,zero,700d3d4 <alt_get_errno+0x24>
 700d3c8:	d0a00e17 	ldw	r2,-32712(gp)
 700d3cc:	103ee83a 	callr	r2
 700d3d0:	00000106 	br	700d3d8 <alt_get_errno+0x28>
 700d3d4:	d0a6df04 	addi	r2,gp,-25732
}
 700d3d8:	e037883a 	mov	sp,fp
 700d3dc:	dfc00117 	ldw	ra,4(sp)
 700d3e0:	df000017 	ldw	fp,0(sp)
 700d3e4:	dec00204 	addi	sp,sp,8
 700d3e8:	f800283a 	ret

0700d3ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 700d3ec:	defff904 	addi	sp,sp,-28
 700d3f0:	dfc00615 	stw	ra,24(sp)
 700d3f4:	df000515 	stw	fp,20(sp)
 700d3f8:	df000504 	addi	fp,sp,20
 700d3fc:	e13ffd15 	stw	r4,-12(fp)
 700d400:	e17ffe15 	stw	r5,-8(fp)
 700d404:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 700d408:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 700d40c:	e0bffd17 	ldw	r2,-12(fp)
 700d410:	10000616 	blt	r2,zero,700d42c <lseek+0x40>
 700d414:	e0bffd17 	ldw	r2,-12(fp)
 700d418:	10c00324 	muli	r3,r2,12
 700d41c:	0081c074 	movhi	r2,1793
 700d420:	1081ca04 	addi	r2,r2,1832
 700d424:	1885883a 	add	r2,r3,r2
 700d428:	00000106 	br	700d430 <lseek+0x44>
 700d42c:	0005883a 	mov	r2,zero
 700d430:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 700d434:	e0bffc17 	ldw	r2,-16(fp)
 700d438:	10001026 	beq	r2,zero,700d47c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 700d43c:	e0bffc17 	ldw	r2,-16(fp)
 700d440:	10800017 	ldw	r2,0(r2)
 700d444:	10800717 	ldw	r2,28(r2)
 700d448:	10000926 	beq	r2,zero,700d470 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 700d44c:	e0bffc17 	ldw	r2,-16(fp)
 700d450:	10800017 	ldw	r2,0(r2)
 700d454:	10800717 	ldw	r2,28(r2)
 700d458:	e1bfff17 	ldw	r6,-4(fp)
 700d45c:	e17ffe17 	ldw	r5,-8(fp)
 700d460:	e13ffc17 	ldw	r4,-16(fp)
 700d464:	103ee83a 	callr	r2
 700d468:	e0bffb15 	stw	r2,-20(fp)
 700d46c:	00000506 	br	700d484 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 700d470:	00bfde84 	movi	r2,-134
 700d474:	e0bffb15 	stw	r2,-20(fp)
 700d478:	00000206 	br	700d484 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 700d47c:	00bfebc4 	movi	r2,-81
 700d480:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 700d484:	e0bffb17 	ldw	r2,-20(fp)
 700d488:	1000070e 	bge	r2,zero,700d4a8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 700d48c:	700d3b00 	call	700d3b0 <alt_get_errno>
 700d490:	1007883a 	mov	r3,r2
 700d494:	e0bffb17 	ldw	r2,-20(fp)
 700d498:	0085c83a 	sub	r2,zero,r2
 700d49c:	18800015 	stw	r2,0(r3)
    rc = -1;
 700d4a0:	00bfffc4 	movi	r2,-1
 700d4a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 700d4a8:	e0bffb17 	ldw	r2,-20(fp)
}
 700d4ac:	e037883a 	mov	sp,fp
 700d4b0:	dfc00117 	ldw	ra,4(sp)
 700d4b4:	df000017 	ldw	fp,0(sp)
 700d4b8:	dec00204 	addi	sp,sp,8
 700d4bc:	f800283a 	ret

0700d4c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 700d4c0:	defffd04 	addi	sp,sp,-12
 700d4c4:	dfc00215 	stw	ra,8(sp)
 700d4c8:	df000115 	stw	fp,4(sp)
 700d4cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 700d4d0:	0009883a 	mov	r4,zero
 700d4d4:	700d9dc0 	call	700d9dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 700d4d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 700d4dc:	700da140 	call	700da14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 700d4e0:	0181c074 	movhi	r6,1793
 700d4e4:	31bf8c04 	addi	r6,r6,-464
 700d4e8:	0141c074 	movhi	r5,1793
 700d4ec:	297f8c04 	addi	r5,r5,-464
 700d4f0:	0101c074 	movhi	r4,1793
 700d4f4:	213f8c04 	addi	r4,r4,-464
 700d4f8:	700ef980 	call	700ef98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 700d4fc:	700eab00 	call	700eab0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 700d500:	0101c074 	movhi	r4,1793
 700d504:	213ac404 	addi	r4,r4,-5360
 700d508:	700f7080 	call	700f708 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 700d50c:	d0a6e017 	ldw	r2,-25728(gp)
 700d510:	d0e6e117 	ldw	r3,-25724(gp)
 700d514:	d126e217 	ldw	r4,-25720(gp)
 700d518:	200d883a 	mov	r6,r4
 700d51c:	180b883a 	mov	r5,r3
 700d520:	1009883a 	mov	r4,r2
 700d524:	70004580 	call	7000458 <main>
 700d528:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 700d52c:	01000044 	movi	r4,1
 700d530:	700cfb40 	call	700cfb4 <close>
  exit (result);
 700d534:	e13fff17 	ldw	r4,-4(fp)
 700d538:	700f71c0 	call	700f71c <exit>

0700d53c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 700d53c:	defffe04 	addi	sp,sp,-8
 700d540:	df000115 	stw	fp,4(sp)
 700d544:	df000104 	addi	fp,sp,4
 700d548:	e13fff15 	stw	r4,-4(fp)
}
 700d54c:	0001883a 	nop
 700d550:	e037883a 	mov	sp,fp
 700d554:	df000017 	ldw	fp,0(sp)
 700d558:	dec00104 	addi	sp,sp,4
 700d55c:	f800283a 	ret

0700d560 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 700d560:	defffe04 	addi	sp,sp,-8
 700d564:	df000115 	stw	fp,4(sp)
 700d568:	df000104 	addi	fp,sp,4
 700d56c:	e13fff15 	stw	r4,-4(fp)
}
 700d570:	0001883a 	nop
 700d574:	e037883a 	mov	sp,fp
 700d578:	df000017 	ldw	fp,0(sp)
 700d57c:	dec00104 	addi	sp,sp,4
 700d580:	f800283a 	ret

0700d584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700d584:	defffe04 	addi	sp,sp,-8
 700d588:	dfc00115 	stw	ra,4(sp)
 700d58c:	df000015 	stw	fp,0(sp)
 700d590:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700d594:	d0a00e17 	ldw	r2,-32712(gp)
 700d598:	10000326 	beq	r2,zero,700d5a8 <alt_get_errno+0x24>
 700d59c:	d0a00e17 	ldw	r2,-32712(gp)
 700d5a0:	103ee83a 	callr	r2
 700d5a4:	00000106 	br	700d5ac <alt_get_errno+0x28>
 700d5a8:	d0a6df04 	addi	r2,gp,-25732
}
 700d5ac:	e037883a 	mov	sp,fp
 700d5b0:	dfc00117 	ldw	ra,4(sp)
 700d5b4:	df000017 	ldw	fp,0(sp)
 700d5b8:	dec00204 	addi	sp,sp,8
 700d5bc:	f800283a 	ret

0700d5c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 700d5c0:	defff904 	addi	sp,sp,-28
 700d5c4:	dfc00615 	stw	ra,24(sp)
 700d5c8:	df000515 	stw	fp,20(sp)
 700d5cc:	df000504 	addi	fp,sp,20
 700d5d0:	e13ffd15 	stw	r4,-12(fp)
 700d5d4:	e17ffe15 	stw	r5,-8(fp)
 700d5d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 700d5dc:	e0bffd17 	ldw	r2,-12(fp)
 700d5e0:	10000616 	blt	r2,zero,700d5fc <read+0x3c>
 700d5e4:	e0bffd17 	ldw	r2,-12(fp)
 700d5e8:	10c00324 	muli	r3,r2,12
 700d5ec:	0081c074 	movhi	r2,1793
 700d5f0:	1081ca04 	addi	r2,r2,1832
 700d5f4:	1885883a 	add	r2,r3,r2
 700d5f8:	00000106 	br	700d600 <read+0x40>
 700d5fc:	0005883a 	mov	r2,zero
 700d600:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 700d604:	e0bffb17 	ldw	r2,-20(fp)
 700d608:	10002226 	beq	r2,zero,700d694 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 700d60c:	e0bffb17 	ldw	r2,-20(fp)
 700d610:	10800217 	ldw	r2,8(r2)
 700d614:	108000cc 	andi	r2,r2,3
 700d618:	10800060 	cmpeqi	r2,r2,1
 700d61c:	1000181e 	bne	r2,zero,700d680 <read+0xc0>
        (fd->dev->read))
 700d620:	e0bffb17 	ldw	r2,-20(fp)
 700d624:	10800017 	ldw	r2,0(r2)
 700d628:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 700d62c:	10001426 	beq	r2,zero,700d680 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 700d630:	e0bffb17 	ldw	r2,-20(fp)
 700d634:	10800017 	ldw	r2,0(r2)
 700d638:	10800517 	ldw	r2,20(r2)
 700d63c:	e0ffff17 	ldw	r3,-4(fp)
 700d640:	180d883a 	mov	r6,r3
 700d644:	e17ffe17 	ldw	r5,-8(fp)
 700d648:	e13ffb17 	ldw	r4,-20(fp)
 700d64c:	103ee83a 	callr	r2
 700d650:	e0bffc15 	stw	r2,-16(fp)
 700d654:	e0bffc17 	ldw	r2,-16(fp)
 700d658:	1000070e 	bge	r2,zero,700d678 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 700d65c:	700d5840 	call	700d584 <alt_get_errno>
 700d660:	1007883a 	mov	r3,r2
 700d664:	e0bffc17 	ldw	r2,-16(fp)
 700d668:	0085c83a 	sub	r2,zero,r2
 700d66c:	18800015 	stw	r2,0(r3)
          return -1;
 700d670:	00bfffc4 	movi	r2,-1
 700d674:	00000c06 	br	700d6a8 <read+0xe8>
        }
        return rval;
 700d678:	e0bffc17 	ldw	r2,-16(fp)
 700d67c:	00000a06 	br	700d6a8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 700d680:	700d5840 	call	700d584 <alt_get_errno>
 700d684:	1007883a 	mov	r3,r2
 700d688:	00800344 	movi	r2,13
 700d68c:	18800015 	stw	r2,0(r3)
 700d690:	00000406 	br	700d6a4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 700d694:	700d5840 	call	700d584 <alt_get_errno>
 700d698:	1007883a 	mov	r3,r2
 700d69c:	00801444 	movi	r2,81
 700d6a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 700d6a4:	00bfffc4 	movi	r2,-1
}
 700d6a8:	e037883a 	mov	sp,fp
 700d6ac:	dfc00117 	ldw	ra,4(sp)
 700d6b0:	df000017 	ldw	fp,0(sp)
 700d6b4:	dec00204 	addi	sp,sp,8
 700d6b8:	f800283a 	ret

0700d6bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 700d6bc:	defffe04 	addi	sp,sp,-8
 700d6c0:	df000115 	stw	fp,4(sp)
 700d6c4:	df000104 	addi	fp,sp,4
 700d6c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 700d6cc:	e0bfff17 	ldw	r2,-4(fp)
 700d6d0:	108000d0 	cmplti	r2,r2,3
 700d6d4:	10000d1e 	bne	r2,zero,700d70c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 700d6d8:	0081c074 	movhi	r2,1793
 700d6dc:	1081ca04 	addi	r2,r2,1832
 700d6e0:	e0ffff17 	ldw	r3,-4(fp)
 700d6e4:	18c00324 	muli	r3,r3,12
 700d6e8:	10c5883a 	add	r2,r2,r3
 700d6ec:	10800204 	addi	r2,r2,8
 700d6f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 700d6f4:	0081c074 	movhi	r2,1793
 700d6f8:	1081ca04 	addi	r2,r2,1832
 700d6fc:	e0ffff17 	ldw	r3,-4(fp)
 700d700:	18c00324 	muli	r3,r3,12
 700d704:	10c5883a 	add	r2,r2,r3
 700d708:	10000015 	stw	zero,0(r2)
  }
}
 700d70c:	0001883a 	nop
 700d710:	e037883a 	mov	sp,fp
 700d714:	df000017 	ldw	fp,0(sp)
 700d718:	dec00104 	addi	sp,sp,4
 700d71c:	f800283a 	ret

0700d720 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 700d720:	defff904 	addi	sp,sp,-28
 700d724:	df000615 	stw	fp,24(sp)
 700d728:	df000604 	addi	fp,sp,24
 700d72c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700d730:	0005303a 	rdctl	r2,status
 700d734:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700d738:	e0fffe17 	ldw	r3,-8(fp)
 700d73c:	00bfff84 	movi	r2,-2
 700d740:	1884703a 	and	r2,r3,r2
 700d744:	1001703a 	wrctl	status,r2
  
  return context;
 700d748:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 700d74c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 700d750:	d0a00f17 	ldw	r2,-32708(gp)
 700d754:	10c000c4 	addi	r3,r2,3
 700d758:	00bfff04 	movi	r2,-4
 700d75c:	1884703a 	and	r2,r3,r2
 700d760:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 700d764:	d0e00f17 	ldw	r3,-32708(gp)
 700d768:	e0bfff17 	ldw	r2,-4(fp)
 700d76c:	1887883a 	add	r3,r3,r2
 700d770:	00820034 	movhi	r2,2048
 700d774:	10800004 	addi	r2,r2,0
 700d778:	10c0062e 	bgeu	r2,r3,700d794 <sbrk+0x74>
 700d77c:	e0bffb17 	ldw	r2,-20(fp)
 700d780:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700d784:	e0bffa17 	ldw	r2,-24(fp)
 700d788:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 700d78c:	00bfffc4 	movi	r2,-1
 700d790:	00000b06 	br	700d7c0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 700d794:	d0a00f17 	ldw	r2,-32708(gp)
 700d798:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 700d79c:	d0e00f17 	ldw	r3,-32708(gp)
 700d7a0:	e0bfff17 	ldw	r2,-4(fp)
 700d7a4:	1885883a 	add	r2,r3,r2
 700d7a8:	d0a00f15 	stw	r2,-32708(gp)
 700d7ac:	e0bffb17 	ldw	r2,-20(fp)
 700d7b0:	e0bffc15 	stw	r2,-16(fp)
 700d7b4:	e0bffc17 	ldw	r2,-16(fp)
 700d7b8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 700d7bc:	e0bffd17 	ldw	r2,-12(fp)
} 
 700d7c0:	e037883a 	mov	sp,fp
 700d7c4:	df000017 	ldw	fp,0(sp)
 700d7c8:	dec00104 	addi	sp,sp,4
 700d7cc:	f800283a 	ret

0700d7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700d7d0:	defffe04 	addi	sp,sp,-8
 700d7d4:	dfc00115 	stw	ra,4(sp)
 700d7d8:	df000015 	stw	fp,0(sp)
 700d7dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700d7e0:	d0a00e17 	ldw	r2,-32712(gp)
 700d7e4:	10000326 	beq	r2,zero,700d7f4 <alt_get_errno+0x24>
 700d7e8:	d0a00e17 	ldw	r2,-32712(gp)
 700d7ec:	103ee83a 	callr	r2
 700d7f0:	00000106 	br	700d7f8 <alt_get_errno+0x28>
 700d7f4:	d0a6df04 	addi	r2,gp,-25732
}
 700d7f8:	e037883a 	mov	sp,fp
 700d7fc:	dfc00117 	ldw	ra,4(sp)
 700d800:	df000017 	ldw	fp,0(sp)
 700d804:	dec00204 	addi	sp,sp,8
 700d808:	f800283a 	ret

0700d80c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 700d80c:	defff904 	addi	sp,sp,-28
 700d810:	dfc00615 	stw	ra,24(sp)
 700d814:	df000515 	stw	fp,20(sp)
 700d818:	df000504 	addi	fp,sp,20
 700d81c:	e13ffd15 	stw	r4,-12(fp)
 700d820:	e17ffe15 	stw	r5,-8(fp)
 700d824:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 700d828:	e0bffd17 	ldw	r2,-12(fp)
 700d82c:	10000616 	blt	r2,zero,700d848 <write+0x3c>
 700d830:	e0bffd17 	ldw	r2,-12(fp)
 700d834:	10c00324 	muli	r3,r2,12
 700d838:	0081c074 	movhi	r2,1793
 700d83c:	1081ca04 	addi	r2,r2,1832
 700d840:	1885883a 	add	r2,r3,r2
 700d844:	00000106 	br	700d84c <write+0x40>
 700d848:	0005883a 	mov	r2,zero
 700d84c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 700d850:	e0bffb17 	ldw	r2,-20(fp)
 700d854:	10002126 	beq	r2,zero,700d8dc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 700d858:	e0bffb17 	ldw	r2,-20(fp)
 700d85c:	10800217 	ldw	r2,8(r2)
 700d860:	108000cc 	andi	r2,r2,3
 700d864:	10001826 	beq	r2,zero,700d8c8 <write+0xbc>
 700d868:	e0bffb17 	ldw	r2,-20(fp)
 700d86c:	10800017 	ldw	r2,0(r2)
 700d870:	10800617 	ldw	r2,24(r2)
 700d874:	10001426 	beq	r2,zero,700d8c8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 700d878:	e0bffb17 	ldw	r2,-20(fp)
 700d87c:	10800017 	ldw	r2,0(r2)
 700d880:	10800617 	ldw	r2,24(r2)
 700d884:	e0ffff17 	ldw	r3,-4(fp)
 700d888:	180d883a 	mov	r6,r3
 700d88c:	e17ffe17 	ldw	r5,-8(fp)
 700d890:	e13ffb17 	ldw	r4,-20(fp)
 700d894:	103ee83a 	callr	r2
 700d898:	e0bffc15 	stw	r2,-16(fp)
 700d89c:	e0bffc17 	ldw	r2,-16(fp)
 700d8a0:	1000070e 	bge	r2,zero,700d8c0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 700d8a4:	700d7d00 	call	700d7d0 <alt_get_errno>
 700d8a8:	1007883a 	mov	r3,r2
 700d8ac:	e0bffc17 	ldw	r2,-16(fp)
 700d8b0:	0085c83a 	sub	r2,zero,r2
 700d8b4:	18800015 	stw	r2,0(r3)
        return -1;
 700d8b8:	00bfffc4 	movi	r2,-1
 700d8bc:	00000c06 	br	700d8f0 <write+0xe4>
      }
      return rval;
 700d8c0:	e0bffc17 	ldw	r2,-16(fp)
 700d8c4:	00000a06 	br	700d8f0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 700d8c8:	700d7d00 	call	700d7d0 <alt_get_errno>
 700d8cc:	1007883a 	mov	r3,r2
 700d8d0:	00800344 	movi	r2,13
 700d8d4:	18800015 	stw	r2,0(r3)
 700d8d8:	00000406 	br	700d8ec <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 700d8dc:	700d7d00 	call	700d7d0 <alt_get_errno>
 700d8e0:	1007883a 	mov	r3,r2
 700d8e4:	00801444 	movi	r2,81
 700d8e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 700d8ec:	00bfffc4 	movi	r2,-1
}
 700d8f0:	e037883a 	mov	sp,fp
 700d8f4:	dfc00117 	ldw	ra,4(sp)
 700d8f8:	df000017 	ldw	fp,0(sp)
 700d8fc:	dec00204 	addi	sp,sp,8
 700d900:	f800283a 	ret

0700d904 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 700d904:	defffd04 	addi	sp,sp,-12
 700d908:	dfc00215 	stw	ra,8(sp)
 700d90c:	df000115 	stw	fp,4(sp)
 700d910:	df000104 	addi	fp,sp,4
 700d914:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 700d918:	d1600b04 	addi	r5,gp,-32724
 700d91c:	e13fff17 	ldw	r4,-4(fp)
 700d920:	700ea0c0 	call	700ea0c <alt_dev_llist_insert>
}
 700d924:	e037883a 	mov	sp,fp
 700d928:	dfc00117 	ldw	ra,4(sp)
 700d92c:	df000017 	ldw	fp,0(sp)
 700d930:	dec00204 	addi	sp,sp,8
 700d934:	f800283a 	ret

0700d938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700d938:	defffe04 	addi	sp,sp,-8
 700d93c:	dfc00115 	stw	ra,4(sp)
 700d940:	df000015 	stw	fp,0(sp)
 700d944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700d948:	d0a00e17 	ldw	r2,-32712(gp)
 700d94c:	10000326 	beq	r2,zero,700d95c <alt_get_errno+0x24>
 700d950:	d0a00e17 	ldw	r2,-32712(gp)
 700d954:	103ee83a 	callr	r2
 700d958:	00000106 	br	700d960 <alt_get_errno+0x28>
 700d95c:	d0a6df04 	addi	r2,gp,-25732
}
 700d960:	e037883a 	mov	sp,fp
 700d964:	dfc00117 	ldw	ra,4(sp)
 700d968:	df000017 	ldw	fp,0(sp)
 700d96c:	dec00204 	addi	sp,sp,8
 700d970:	f800283a 	ret

0700d974 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 700d974:	defffc04 	addi	sp,sp,-16
 700d978:	dfc00315 	stw	ra,12(sp)
 700d97c:	df000215 	stw	fp,8(sp)
 700d980:	df000204 	addi	fp,sp,8
 700d984:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 700d988:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 700d98c:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 700d990:	e0bffe17 	ldw	r2,-8(fp)
 700d994:	1000051e 	bne	r2,zero,700d9ac <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 700d998:	d1601004 	addi	r5,gp,-32704
 700d99c:	e13fff17 	ldw	r4,-4(fp)
 700d9a0:	700ea0c0 	call	700ea0c <alt_dev_llist_insert>
 700d9a4:	e0bffe15 	stw	r2,-8(fp)
 700d9a8:	00000606 	br	700d9c4 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 700d9ac:	700d9380 	call	700d938 <alt_get_errno>
 700d9b0:	1007883a 	mov	r3,r2
 700d9b4:	00800304 	movi	r2,12
 700d9b8:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 700d9bc:	00bffd04 	movi	r2,-12
 700d9c0:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 700d9c4:	e0bffe17 	ldw	r2,-8(fp)
}
 700d9c8:	e037883a 	mov	sp,fp
 700d9cc:	dfc00117 	ldw	ra,4(sp)
 700d9d0:	df000017 	ldw	fp,0(sp)
 700d9d4:	dec00204 	addi	sp,sp,8
 700d9d8:	f800283a 	ret

0700d9dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 700d9dc:	defffd04 	addi	sp,sp,-12
 700d9e0:	dfc00215 	stw	ra,8(sp)
 700d9e4:	df000115 	stw	fp,4(sp)
 700d9e8:	df000104 	addi	fp,sp,4
 700d9ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_3, cpu_3);
 700d9f0:	700f40c0 	call	700f40c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 700d9f4:	00800044 	movi	r2,1
 700d9f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 700d9fc:	0001883a 	nop
 700da00:	e037883a 	mov	sp,fp
 700da04:	dfc00117 	ldw	ra,4(sp)
 700da08:	df000017 	ldw	fp,0(sp)
 700da0c:	dec00204 	addi	sp,sp,8
 700da10:	f800283a 	ret

0700da14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 700da14:	defffe04 	addi	sp,sp,-8
 700da18:	dfc00115 	stw	ra,4(sp)
 700da1c:	df000015 	stw	fp,0(sp)
 700da20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_3, timer_3);
 700da24:	01c01904 	movi	r7,100
 700da28:	000d883a 	mov	r6,zero
 700da2c:	000b883a 	mov	r5,zero
 700da30:	01040004 	movi	r4,4096
 700da34:	700e8280 	call	700e828 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART3, jtag_uart3);
 700da38:	01800044 	movi	r6,1
 700da3c:	000b883a 	mov	r5,zero
 700da40:	0101c074 	movhi	r4,1793
 700da44:	21023404 	addi	r4,r4,2256
 700da48:	700dbe00 	call	700dbe0 <altera_avalon_jtag_uart_init>
 700da4c:	0101c074 	movhi	r4,1793
 700da50:	21022a04 	addi	r4,r4,2216
 700da54:	700d9040 	call	700d904 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX, mutex);
 700da58:	0101c074 	movhi	r4,1793
 700da5c:	21064204 	addi	r4,r4,6408
 700da60:	700d9740 	call	700d974 <alt_avalon_mutex_reg>
}
 700da64:	0001883a 	nop
 700da68:	e037883a 	mov	sp,fp
 700da6c:	dfc00117 	ldw	ra,4(sp)
 700da70:	df000017 	ldw	fp,0(sp)
 700da74:	dec00204 	addi	sp,sp,8
 700da78:	f800283a 	ret

0700da7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 700da7c:	defffa04 	addi	sp,sp,-24
 700da80:	dfc00515 	stw	ra,20(sp)
 700da84:	df000415 	stw	fp,16(sp)
 700da88:	df000404 	addi	fp,sp,16
 700da8c:	e13ffd15 	stw	r4,-12(fp)
 700da90:	e17ffe15 	stw	r5,-8(fp)
 700da94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 700da98:	e0bffd17 	ldw	r2,-12(fp)
 700da9c:	10800017 	ldw	r2,0(r2)
 700daa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 700daa4:	e0bffc17 	ldw	r2,-16(fp)
 700daa8:	10c00a04 	addi	r3,r2,40
 700daac:	e0bffd17 	ldw	r2,-12(fp)
 700dab0:	10800217 	ldw	r2,8(r2)
 700dab4:	100f883a 	mov	r7,r2
 700dab8:	e1bfff17 	ldw	r6,-4(fp)
 700dabc:	e17ffe17 	ldw	r5,-8(fp)
 700dac0:	1809883a 	mov	r4,r3
 700dac4:	700e0a40 	call	700e0a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 700dac8:	e037883a 	mov	sp,fp
 700dacc:	dfc00117 	ldw	ra,4(sp)
 700dad0:	df000017 	ldw	fp,0(sp)
 700dad4:	dec00204 	addi	sp,sp,8
 700dad8:	f800283a 	ret

0700dadc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 700dadc:	defffa04 	addi	sp,sp,-24
 700dae0:	dfc00515 	stw	ra,20(sp)
 700dae4:	df000415 	stw	fp,16(sp)
 700dae8:	df000404 	addi	fp,sp,16
 700daec:	e13ffd15 	stw	r4,-12(fp)
 700daf0:	e17ffe15 	stw	r5,-8(fp)
 700daf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 700daf8:	e0bffd17 	ldw	r2,-12(fp)
 700dafc:	10800017 	ldw	r2,0(r2)
 700db00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 700db04:	e0bffc17 	ldw	r2,-16(fp)
 700db08:	10c00a04 	addi	r3,r2,40
 700db0c:	e0bffd17 	ldw	r2,-12(fp)
 700db10:	10800217 	ldw	r2,8(r2)
 700db14:	100f883a 	mov	r7,r2
 700db18:	e1bfff17 	ldw	r6,-4(fp)
 700db1c:	e17ffe17 	ldw	r5,-8(fp)
 700db20:	1809883a 	mov	r4,r3
 700db24:	700e2c00 	call	700e2c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 700db28:	e037883a 	mov	sp,fp
 700db2c:	dfc00117 	ldw	ra,4(sp)
 700db30:	df000017 	ldw	fp,0(sp)
 700db34:	dec00204 	addi	sp,sp,8
 700db38:	f800283a 	ret

0700db3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 700db3c:	defffc04 	addi	sp,sp,-16
 700db40:	dfc00315 	stw	ra,12(sp)
 700db44:	df000215 	stw	fp,8(sp)
 700db48:	df000204 	addi	fp,sp,8
 700db4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 700db50:	e0bfff17 	ldw	r2,-4(fp)
 700db54:	10800017 	ldw	r2,0(r2)
 700db58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 700db5c:	e0bffe17 	ldw	r2,-8(fp)
 700db60:	10c00a04 	addi	r3,r2,40
 700db64:	e0bfff17 	ldw	r2,-4(fp)
 700db68:	10800217 	ldw	r2,8(r2)
 700db6c:	100b883a 	mov	r5,r2
 700db70:	1809883a 	mov	r4,r3
 700db74:	700df4c0 	call	700df4c <altera_avalon_jtag_uart_close>
}
 700db78:	e037883a 	mov	sp,fp
 700db7c:	dfc00117 	ldw	ra,4(sp)
 700db80:	df000017 	ldw	fp,0(sp)
 700db84:	dec00204 	addi	sp,sp,8
 700db88:	f800283a 	ret

0700db8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 700db8c:	defffa04 	addi	sp,sp,-24
 700db90:	dfc00515 	stw	ra,20(sp)
 700db94:	df000415 	stw	fp,16(sp)
 700db98:	df000404 	addi	fp,sp,16
 700db9c:	e13ffd15 	stw	r4,-12(fp)
 700dba0:	e17ffe15 	stw	r5,-8(fp)
 700dba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 700dba8:	e0bffd17 	ldw	r2,-12(fp)
 700dbac:	10800017 	ldw	r2,0(r2)
 700dbb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 700dbb4:	e0bffc17 	ldw	r2,-16(fp)
 700dbb8:	10800a04 	addi	r2,r2,40
 700dbbc:	e1bfff17 	ldw	r6,-4(fp)
 700dbc0:	e17ffe17 	ldw	r5,-8(fp)
 700dbc4:	1009883a 	mov	r4,r2
 700dbc8:	700dfb40 	call	700dfb4 <altera_avalon_jtag_uart_ioctl>
}
 700dbcc:	e037883a 	mov	sp,fp
 700dbd0:	dfc00117 	ldw	ra,4(sp)
 700dbd4:	df000017 	ldw	fp,0(sp)
 700dbd8:	dec00204 	addi	sp,sp,8
 700dbdc:	f800283a 	ret

0700dbe0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 700dbe0:	defffa04 	addi	sp,sp,-24
 700dbe4:	dfc00515 	stw	ra,20(sp)
 700dbe8:	df000415 	stw	fp,16(sp)
 700dbec:	df000404 	addi	fp,sp,16
 700dbf0:	e13ffd15 	stw	r4,-12(fp)
 700dbf4:	e17ffe15 	stw	r5,-8(fp)
 700dbf8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 700dbfc:	e0bffd17 	ldw	r2,-12(fp)
 700dc00:	00c00044 	movi	r3,1
 700dc04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 700dc08:	e0bffd17 	ldw	r2,-12(fp)
 700dc0c:	10800017 	ldw	r2,0(r2)
 700dc10:	10800104 	addi	r2,r2,4
 700dc14:	1007883a 	mov	r3,r2
 700dc18:	e0bffd17 	ldw	r2,-12(fp)
 700dc1c:	10800817 	ldw	r2,32(r2)
 700dc20:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 700dc24:	e0bffe17 	ldw	r2,-8(fp)
 700dc28:	e0ffff17 	ldw	r3,-4(fp)
 700dc2c:	d8000015 	stw	zero,0(sp)
 700dc30:	e1fffd17 	ldw	r7,-12(fp)
 700dc34:	0181c074 	movhi	r6,1793
 700dc38:	31b72804 	addi	r6,r6,-9056
 700dc3c:	180b883a 	mov	r5,r3
 700dc40:	1009883a 	mov	r4,r2
 700dc44:	700ec340 	call	700ec34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 700dc48:	e0bffd17 	ldw	r2,-12(fp)
 700dc4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 700dc50:	e0bffd17 	ldw	r2,-12(fp)
 700dc54:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 700dc58:	d0e6e417 	ldw	r3,-25712(gp)
 700dc5c:	e1fffd17 	ldw	r7,-12(fp)
 700dc60:	0181c074 	movhi	r6,1793
 700dc64:	31b7ab04 	addi	r6,r6,-8532
 700dc68:	180b883a 	mov	r5,r3
 700dc6c:	1009883a 	mov	r4,r2
 700dc70:	700e8a40 	call	700e8a4 <alt_alarm_start>
 700dc74:	1000040e 	bge	r2,zero,700dc88 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 700dc78:	e0fffd17 	ldw	r3,-12(fp)
 700dc7c:	00a00034 	movhi	r2,32768
 700dc80:	10bfffc4 	addi	r2,r2,-1
 700dc84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 700dc88:	0001883a 	nop
 700dc8c:	e037883a 	mov	sp,fp
 700dc90:	dfc00117 	ldw	ra,4(sp)
 700dc94:	df000017 	ldw	fp,0(sp)
 700dc98:	dec00204 	addi	sp,sp,8
 700dc9c:	f800283a 	ret

0700dca0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 700dca0:	defff804 	addi	sp,sp,-32
 700dca4:	df000715 	stw	fp,28(sp)
 700dca8:	df000704 	addi	fp,sp,28
 700dcac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 700dcb0:	e0bfff17 	ldw	r2,-4(fp)
 700dcb4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 700dcb8:	e0bffb17 	ldw	r2,-20(fp)
 700dcbc:	10800017 	ldw	r2,0(r2)
 700dcc0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 700dcc4:	e0bffc17 	ldw	r2,-16(fp)
 700dcc8:	10800104 	addi	r2,r2,4
 700dccc:	10800037 	ldwio	r2,0(r2)
 700dcd0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 700dcd4:	e0bffd17 	ldw	r2,-12(fp)
 700dcd8:	1080c00c 	andi	r2,r2,768
 700dcdc:	10006d26 	beq	r2,zero,700de94 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 700dce0:	e0bffd17 	ldw	r2,-12(fp)
 700dce4:	1080400c 	andi	r2,r2,256
 700dce8:	10003526 	beq	r2,zero,700ddc0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 700dcec:	00800074 	movhi	r2,1
 700dcf0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 700dcf4:	e0bffb17 	ldw	r2,-20(fp)
 700dcf8:	10800a17 	ldw	r2,40(r2)
 700dcfc:	10800044 	addi	r2,r2,1
 700dd00:	1081ffcc 	andi	r2,r2,2047
 700dd04:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 700dd08:	e0bffb17 	ldw	r2,-20(fp)
 700dd0c:	10c00b17 	ldw	r3,44(r2)
 700dd10:	e0bffe17 	ldw	r2,-8(fp)
 700dd14:	18801526 	beq	r3,r2,700dd6c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 700dd18:	e0bffc17 	ldw	r2,-16(fp)
 700dd1c:	10800037 	ldwio	r2,0(r2)
 700dd20:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 700dd24:	e0bff917 	ldw	r2,-28(fp)
 700dd28:	10a0000c 	andi	r2,r2,32768
 700dd2c:	10001126 	beq	r2,zero,700dd74 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 700dd30:	e0bffb17 	ldw	r2,-20(fp)
 700dd34:	10800a17 	ldw	r2,40(r2)
 700dd38:	e0fff917 	ldw	r3,-28(fp)
 700dd3c:	1809883a 	mov	r4,r3
 700dd40:	e0fffb17 	ldw	r3,-20(fp)
 700dd44:	1885883a 	add	r2,r3,r2
 700dd48:	10800e04 	addi	r2,r2,56
 700dd4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 700dd50:	e0bffb17 	ldw	r2,-20(fp)
 700dd54:	10800a17 	ldw	r2,40(r2)
 700dd58:	10800044 	addi	r2,r2,1
 700dd5c:	10c1ffcc 	andi	r3,r2,2047
 700dd60:	e0bffb17 	ldw	r2,-20(fp)
 700dd64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 700dd68:	003fe206 	br	700dcf4 <__alt_data_end+0xff00dcf4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 700dd6c:	0001883a 	nop
 700dd70:	00000106 	br	700dd78 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 700dd74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 700dd78:	e0bff917 	ldw	r2,-28(fp)
 700dd7c:	10bfffec 	andhi	r2,r2,65535
 700dd80:	10000f26 	beq	r2,zero,700ddc0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 700dd84:	e0bffb17 	ldw	r2,-20(fp)
 700dd88:	10c00817 	ldw	r3,32(r2)
 700dd8c:	00bfff84 	movi	r2,-2
 700dd90:	1886703a 	and	r3,r3,r2
 700dd94:	e0bffb17 	ldw	r2,-20(fp)
 700dd98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 700dd9c:	e0bffc17 	ldw	r2,-16(fp)
 700dda0:	10800104 	addi	r2,r2,4
 700dda4:	1007883a 	mov	r3,r2
 700dda8:	e0bffb17 	ldw	r2,-20(fp)
 700ddac:	10800817 	ldw	r2,32(r2)
 700ddb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 700ddb4:	e0bffc17 	ldw	r2,-16(fp)
 700ddb8:	10800104 	addi	r2,r2,4
 700ddbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 700ddc0:	e0bffd17 	ldw	r2,-12(fp)
 700ddc4:	1080800c 	andi	r2,r2,512
 700ddc8:	103fbe26 	beq	r2,zero,700dcc4 <__alt_data_end+0xff00dcc4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 700ddcc:	e0bffd17 	ldw	r2,-12(fp)
 700ddd0:	1004d43a 	srli	r2,r2,16
 700ddd4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 700ddd8:	00001406 	br	700de2c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 700dddc:	e0bffc17 	ldw	r2,-16(fp)
 700dde0:	e0fffb17 	ldw	r3,-20(fp)
 700dde4:	18c00d17 	ldw	r3,52(r3)
 700dde8:	e13ffb17 	ldw	r4,-20(fp)
 700ddec:	20c7883a 	add	r3,r4,r3
 700ddf0:	18c20e04 	addi	r3,r3,2104
 700ddf4:	18c00003 	ldbu	r3,0(r3)
 700ddf8:	18c03fcc 	andi	r3,r3,255
 700ddfc:	18c0201c 	xori	r3,r3,128
 700de00:	18ffe004 	addi	r3,r3,-128
 700de04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 700de08:	e0bffb17 	ldw	r2,-20(fp)
 700de0c:	10800d17 	ldw	r2,52(r2)
 700de10:	10800044 	addi	r2,r2,1
 700de14:	10c1ffcc 	andi	r3,r2,2047
 700de18:	e0bffb17 	ldw	r2,-20(fp)
 700de1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 700de20:	e0bffa17 	ldw	r2,-24(fp)
 700de24:	10bfffc4 	addi	r2,r2,-1
 700de28:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 700de2c:	e0bffa17 	ldw	r2,-24(fp)
 700de30:	10000526 	beq	r2,zero,700de48 <altera_avalon_jtag_uart_irq+0x1a8>
 700de34:	e0bffb17 	ldw	r2,-20(fp)
 700de38:	10c00d17 	ldw	r3,52(r2)
 700de3c:	e0bffb17 	ldw	r2,-20(fp)
 700de40:	10800c17 	ldw	r2,48(r2)
 700de44:	18bfe51e 	bne	r3,r2,700dddc <__alt_data_end+0xff00dddc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 700de48:	e0bffa17 	ldw	r2,-24(fp)
 700de4c:	103f9d26 	beq	r2,zero,700dcc4 <__alt_data_end+0xff00dcc4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 700de50:	e0bffb17 	ldw	r2,-20(fp)
 700de54:	10c00817 	ldw	r3,32(r2)
 700de58:	00bfff44 	movi	r2,-3
 700de5c:	1886703a 	and	r3,r3,r2
 700de60:	e0bffb17 	ldw	r2,-20(fp)
 700de64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 700de68:	e0bffb17 	ldw	r2,-20(fp)
 700de6c:	10800017 	ldw	r2,0(r2)
 700de70:	10800104 	addi	r2,r2,4
 700de74:	1007883a 	mov	r3,r2
 700de78:	e0bffb17 	ldw	r2,-20(fp)
 700de7c:	10800817 	ldw	r2,32(r2)
 700de80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 700de84:	e0bffc17 	ldw	r2,-16(fp)
 700de88:	10800104 	addi	r2,r2,4
 700de8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 700de90:	003f8c06 	br	700dcc4 <__alt_data_end+0xff00dcc4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 700de94:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 700de98:	0001883a 	nop
 700de9c:	e037883a 	mov	sp,fp
 700dea0:	df000017 	ldw	fp,0(sp)
 700dea4:	dec00104 	addi	sp,sp,4
 700dea8:	f800283a 	ret

0700deac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 700deac:	defff804 	addi	sp,sp,-32
 700deb0:	df000715 	stw	fp,28(sp)
 700deb4:	df000704 	addi	fp,sp,28
 700deb8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 700debc:	e0bffb17 	ldw	r2,-20(fp)
 700dec0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 700dec4:	e0bff917 	ldw	r2,-28(fp)
 700dec8:	10800017 	ldw	r2,0(r2)
 700decc:	10800104 	addi	r2,r2,4
 700ded0:	10800037 	ldwio	r2,0(r2)
 700ded4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 700ded8:	e0bffa17 	ldw	r2,-24(fp)
 700dedc:	1081000c 	andi	r2,r2,1024
 700dee0:	10000b26 	beq	r2,zero,700df10 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 700dee4:	e0bff917 	ldw	r2,-28(fp)
 700dee8:	10800017 	ldw	r2,0(r2)
 700deec:	10800104 	addi	r2,r2,4
 700def0:	1007883a 	mov	r3,r2
 700def4:	e0bff917 	ldw	r2,-28(fp)
 700def8:	10800817 	ldw	r2,32(r2)
 700defc:	10810014 	ori	r2,r2,1024
 700df00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 700df04:	e0bff917 	ldw	r2,-28(fp)
 700df08:	10000915 	stw	zero,36(r2)
 700df0c:	00000a06 	br	700df38 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 700df10:	e0bff917 	ldw	r2,-28(fp)
 700df14:	10c00917 	ldw	r3,36(r2)
 700df18:	00a00034 	movhi	r2,32768
 700df1c:	10bfff04 	addi	r2,r2,-4
 700df20:	10c00536 	bltu	r2,r3,700df38 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 700df24:	e0bff917 	ldw	r2,-28(fp)
 700df28:	10800917 	ldw	r2,36(r2)
 700df2c:	10c00044 	addi	r3,r2,1
 700df30:	e0bff917 	ldw	r2,-28(fp)
 700df34:	10c00915 	stw	r3,36(r2)
 700df38:	d0a6e417 	ldw	r2,-25712(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 700df3c:	e037883a 	mov	sp,fp
 700df40:	df000017 	ldw	fp,0(sp)
 700df44:	dec00104 	addi	sp,sp,4
 700df48:	f800283a 	ret

0700df4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 700df4c:	defffd04 	addi	sp,sp,-12
 700df50:	df000215 	stw	fp,8(sp)
 700df54:	df000204 	addi	fp,sp,8
 700df58:	e13ffe15 	stw	r4,-8(fp)
 700df5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 700df60:	00000506 	br	700df78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 700df64:	e0bfff17 	ldw	r2,-4(fp)
 700df68:	1090000c 	andi	r2,r2,16384
 700df6c:	10000226 	beq	r2,zero,700df78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 700df70:	00bffd44 	movi	r2,-11
 700df74:	00000b06 	br	700dfa4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 700df78:	e0bffe17 	ldw	r2,-8(fp)
 700df7c:	10c00d17 	ldw	r3,52(r2)
 700df80:	e0bffe17 	ldw	r2,-8(fp)
 700df84:	10800c17 	ldw	r2,48(r2)
 700df88:	18800526 	beq	r3,r2,700dfa0 <altera_avalon_jtag_uart_close+0x54>
 700df8c:	e0bffe17 	ldw	r2,-8(fp)
 700df90:	10c00917 	ldw	r3,36(r2)
 700df94:	e0bffe17 	ldw	r2,-8(fp)
 700df98:	10800117 	ldw	r2,4(r2)
 700df9c:	18bff136 	bltu	r3,r2,700df64 <__alt_data_end+0xff00df64>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 700dfa0:	0005883a 	mov	r2,zero
}
 700dfa4:	e037883a 	mov	sp,fp
 700dfa8:	df000017 	ldw	fp,0(sp)
 700dfac:	dec00104 	addi	sp,sp,4
 700dfb0:	f800283a 	ret

0700dfb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 700dfb4:	defffa04 	addi	sp,sp,-24
 700dfb8:	df000515 	stw	fp,20(sp)
 700dfbc:	df000504 	addi	fp,sp,20
 700dfc0:	e13ffd15 	stw	r4,-12(fp)
 700dfc4:	e17ffe15 	stw	r5,-8(fp)
 700dfc8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 700dfcc:	00bff9c4 	movi	r2,-25
 700dfd0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 700dfd4:	e0bffe17 	ldw	r2,-8(fp)
 700dfd8:	10da8060 	cmpeqi	r3,r2,27137
 700dfdc:	1800031e 	bne	r3,zero,700dfec <altera_avalon_jtag_uart_ioctl+0x38>
 700dfe0:	109a80a0 	cmpeqi	r2,r2,27138
 700dfe4:	1000181e 	bne	r2,zero,700e048 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 700dfe8:	00002906 	br	700e090 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 700dfec:	e0bffd17 	ldw	r2,-12(fp)
 700dff0:	10c00117 	ldw	r3,4(r2)
 700dff4:	00a00034 	movhi	r2,32768
 700dff8:	10bfffc4 	addi	r2,r2,-1
 700dffc:	18802126 	beq	r3,r2,700e084 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 700e000:	e0bfff17 	ldw	r2,-4(fp)
 700e004:	10800017 	ldw	r2,0(r2)
 700e008:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 700e00c:	e0bffc17 	ldw	r2,-16(fp)
 700e010:	10800090 	cmplti	r2,r2,2
 700e014:	1000061e 	bne	r2,zero,700e030 <altera_avalon_jtag_uart_ioctl+0x7c>
 700e018:	e0fffc17 	ldw	r3,-16(fp)
 700e01c:	00a00034 	movhi	r2,32768
 700e020:	10bfffc4 	addi	r2,r2,-1
 700e024:	18800226 	beq	r3,r2,700e030 <altera_avalon_jtag_uart_ioctl+0x7c>
 700e028:	e0bffc17 	ldw	r2,-16(fp)
 700e02c:	00000206 	br	700e038 <altera_avalon_jtag_uart_ioctl+0x84>
 700e030:	00a00034 	movhi	r2,32768
 700e034:	10bfff84 	addi	r2,r2,-2
 700e038:	e0fffd17 	ldw	r3,-12(fp)
 700e03c:	18800115 	stw	r2,4(r3)
      rc = 0;
 700e040:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 700e044:	00000f06 	br	700e084 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 700e048:	e0bffd17 	ldw	r2,-12(fp)
 700e04c:	10c00117 	ldw	r3,4(r2)
 700e050:	00a00034 	movhi	r2,32768
 700e054:	10bfffc4 	addi	r2,r2,-1
 700e058:	18800c26 	beq	r3,r2,700e08c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 700e05c:	e0bffd17 	ldw	r2,-12(fp)
 700e060:	10c00917 	ldw	r3,36(r2)
 700e064:	e0bffd17 	ldw	r2,-12(fp)
 700e068:	10800117 	ldw	r2,4(r2)
 700e06c:	1885803a 	cmpltu	r2,r3,r2
 700e070:	10c03fcc 	andi	r3,r2,255
 700e074:	e0bfff17 	ldw	r2,-4(fp)
 700e078:	10c00015 	stw	r3,0(r2)
      rc = 0;
 700e07c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 700e080:	00000206 	br	700e08c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 700e084:	0001883a 	nop
 700e088:	00000106 	br	700e090 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 700e08c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 700e090:	e0bffb17 	ldw	r2,-20(fp)
}
 700e094:	e037883a 	mov	sp,fp
 700e098:	df000017 	ldw	fp,0(sp)
 700e09c:	dec00104 	addi	sp,sp,4
 700e0a0:	f800283a 	ret

0700e0a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 700e0a4:	defff304 	addi	sp,sp,-52
 700e0a8:	dfc00c15 	stw	ra,48(sp)
 700e0ac:	df000b15 	stw	fp,44(sp)
 700e0b0:	df000b04 	addi	fp,sp,44
 700e0b4:	e13ffc15 	stw	r4,-16(fp)
 700e0b8:	e17ffd15 	stw	r5,-12(fp)
 700e0bc:	e1bffe15 	stw	r6,-8(fp)
 700e0c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 700e0c4:	e0bffd17 	ldw	r2,-12(fp)
 700e0c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 700e0cc:	00004706 	br	700e1ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 700e0d0:	e0bffc17 	ldw	r2,-16(fp)
 700e0d4:	10800a17 	ldw	r2,40(r2)
 700e0d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 700e0dc:	e0bffc17 	ldw	r2,-16(fp)
 700e0e0:	10800b17 	ldw	r2,44(r2)
 700e0e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 700e0e8:	e0fff717 	ldw	r3,-36(fp)
 700e0ec:	e0bff817 	ldw	r2,-32(fp)
 700e0f0:	18800536 	bltu	r3,r2,700e108 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 700e0f4:	e0fff717 	ldw	r3,-36(fp)
 700e0f8:	e0bff817 	ldw	r2,-32(fp)
 700e0fc:	1885c83a 	sub	r2,r3,r2
 700e100:	e0bff615 	stw	r2,-40(fp)
 700e104:	00000406 	br	700e118 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 700e108:	00c20004 	movi	r3,2048
 700e10c:	e0bff817 	ldw	r2,-32(fp)
 700e110:	1885c83a 	sub	r2,r3,r2
 700e114:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 700e118:	e0bff617 	ldw	r2,-40(fp)
 700e11c:	10001e26 	beq	r2,zero,700e198 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 700e120:	e0fffe17 	ldw	r3,-8(fp)
 700e124:	e0bff617 	ldw	r2,-40(fp)
 700e128:	1880022e 	bgeu	r3,r2,700e134 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 700e12c:	e0bffe17 	ldw	r2,-8(fp)
 700e130:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 700e134:	e0bffc17 	ldw	r2,-16(fp)
 700e138:	10c00e04 	addi	r3,r2,56
 700e13c:	e0bff817 	ldw	r2,-32(fp)
 700e140:	1885883a 	add	r2,r3,r2
 700e144:	e1bff617 	ldw	r6,-40(fp)
 700e148:	100b883a 	mov	r5,r2
 700e14c:	e13ff517 	ldw	r4,-44(fp)
 700e150:	7005fbc0 	call	7005fbc <memcpy>
      ptr   += n;
 700e154:	e0fff517 	ldw	r3,-44(fp)
 700e158:	e0bff617 	ldw	r2,-40(fp)
 700e15c:	1885883a 	add	r2,r3,r2
 700e160:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 700e164:	e0fffe17 	ldw	r3,-8(fp)
 700e168:	e0bff617 	ldw	r2,-40(fp)
 700e16c:	1885c83a 	sub	r2,r3,r2
 700e170:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 700e174:	e0fff817 	ldw	r3,-32(fp)
 700e178:	e0bff617 	ldw	r2,-40(fp)
 700e17c:	1885883a 	add	r2,r3,r2
 700e180:	10c1ffcc 	andi	r3,r2,2047
 700e184:	e0bffc17 	ldw	r2,-16(fp)
 700e188:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 700e18c:	e0bffe17 	ldw	r2,-8(fp)
 700e190:	00bfcf16 	blt	zero,r2,700e0d0 <__alt_data_end+0xff00e0d0>
 700e194:	00000106 	br	700e19c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 700e198:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 700e19c:	e0fff517 	ldw	r3,-44(fp)
 700e1a0:	e0bffd17 	ldw	r2,-12(fp)
 700e1a4:	1880141e 	bne	r3,r2,700e1f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 700e1a8:	e0bfff17 	ldw	r2,-4(fp)
 700e1ac:	1090000c 	andi	r2,r2,16384
 700e1b0:	1000131e 	bne	r2,zero,700e200 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 700e1b4:	0001883a 	nop
 700e1b8:	e0bffc17 	ldw	r2,-16(fp)
 700e1bc:	10c00a17 	ldw	r3,40(r2)
 700e1c0:	e0bff717 	ldw	r2,-36(fp)
 700e1c4:	1880051e 	bne	r3,r2,700e1dc <altera_avalon_jtag_uart_read+0x138>
 700e1c8:	e0bffc17 	ldw	r2,-16(fp)
 700e1cc:	10c00917 	ldw	r3,36(r2)
 700e1d0:	e0bffc17 	ldw	r2,-16(fp)
 700e1d4:	10800117 	ldw	r2,4(r2)
 700e1d8:	18bff736 	bltu	r3,r2,700e1b8 <__alt_data_end+0xff00e1b8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 700e1dc:	e0bffc17 	ldw	r2,-16(fp)
 700e1e0:	10c00a17 	ldw	r3,40(r2)
 700e1e4:	e0bff717 	ldw	r2,-36(fp)
 700e1e8:	18800726 	beq	r3,r2,700e208 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 700e1ec:	e0bffe17 	ldw	r2,-8(fp)
 700e1f0:	00bfb716 	blt	zero,r2,700e0d0 <__alt_data_end+0xff00e0d0>
 700e1f4:	00000506 	br	700e20c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 700e1f8:	0001883a 	nop
 700e1fc:	00000306 	br	700e20c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 700e200:	0001883a 	nop
 700e204:	00000106 	br	700e20c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 700e208:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 700e20c:	e0fff517 	ldw	r3,-44(fp)
 700e210:	e0bffd17 	ldw	r2,-12(fp)
 700e214:	18801826 	beq	r3,r2,700e278 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700e218:	0005303a 	rdctl	r2,status
 700e21c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700e220:	e0fffb17 	ldw	r3,-20(fp)
 700e224:	00bfff84 	movi	r2,-2
 700e228:	1884703a 	and	r2,r3,r2
 700e22c:	1001703a 	wrctl	status,r2
  
  return context;
 700e230:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 700e234:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 700e238:	e0bffc17 	ldw	r2,-16(fp)
 700e23c:	10800817 	ldw	r2,32(r2)
 700e240:	10c00054 	ori	r3,r2,1
 700e244:	e0bffc17 	ldw	r2,-16(fp)
 700e248:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 700e24c:	e0bffc17 	ldw	r2,-16(fp)
 700e250:	10800017 	ldw	r2,0(r2)
 700e254:	10800104 	addi	r2,r2,4
 700e258:	1007883a 	mov	r3,r2
 700e25c:	e0bffc17 	ldw	r2,-16(fp)
 700e260:	10800817 	ldw	r2,32(r2)
 700e264:	18800035 	stwio	r2,0(r3)
 700e268:	e0bffa17 	ldw	r2,-24(fp)
 700e26c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700e270:	e0bff917 	ldw	r2,-28(fp)
 700e274:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 700e278:	e0fff517 	ldw	r3,-44(fp)
 700e27c:	e0bffd17 	ldw	r2,-12(fp)
 700e280:	18800426 	beq	r3,r2,700e294 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 700e284:	e0fff517 	ldw	r3,-44(fp)
 700e288:	e0bffd17 	ldw	r2,-12(fp)
 700e28c:	1885c83a 	sub	r2,r3,r2
 700e290:	00000606 	br	700e2ac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 700e294:	e0bfff17 	ldw	r2,-4(fp)
 700e298:	1090000c 	andi	r2,r2,16384
 700e29c:	10000226 	beq	r2,zero,700e2a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 700e2a0:	00bffd44 	movi	r2,-11
 700e2a4:	00000106 	br	700e2ac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 700e2a8:	00bffec4 	movi	r2,-5
}
 700e2ac:	e037883a 	mov	sp,fp
 700e2b0:	dfc00117 	ldw	ra,4(sp)
 700e2b4:	df000017 	ldw	fp,0(sp)
 700e2b8:	dec00204 	addi	sp,sp,8
 700e2bc:	f800283a 	ret

0700e2c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 700e2c0:	defff304 	addi	sp,sp,-52
 700e2c4:	dfc00c15 	stw	ra,48(sp)
 700e2c8:	df000b15 	stw	fp,44(sp)
 700e2cc:	df000b04 	addi	fp,sp,44
 700e2d0:	e13ffc15 	stw	r4,-16(fp)
 700e2d4:	e17ffd15 	stw	r5,-12(fp)
 700e2d8:	e1bffe15 	stw	r6,-8(fp)
 700e2dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 700e2e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 700e2e4:	e0bffd17 	ldw	r2,-12(fp)
 700e2e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 700e2ec:	00003706 	br	700e3cc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 700e2f0:	e0bffc17 	ldw	r2,-16(fp)
 700e2f4:	10800c17 	ldw	r2,48(r2)
 700e2f8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 700e2fc:	e0bffc17 	ldw	r2,-16(fp)
 700e300:	10800d17 	ldw	r2,52(r2)
 700e304:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 700e308:	e0fff917 	ldw	r3,-28(fp)
 700e30c:	e0bff517 	ldw	r2,-44(fp)
 700e310:	1880062e 	bgeu	r3,r2,700e32c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 700e314:	e0fff517 	ldw	r3,-44(fp)
 700e318:	e0bff917 	ldw	r2,-28(fp)
 700e31c:	1885c83a 	sub	r2,r3,r2
 700e320:	10bfffc4 	addi	r2,r2,-1
 700e324:	e0bff615 	stw	r2,-40(fp)
 700e328:	00000b06 	br	700e358 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 700e32c:	e0bff517 	ldw	r2,-44(fp)
 700e330:	10000526 	beq	r2,zero,700e348 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 700e334:	00c20004 	movi	r3,2048
 700e338:	e0bff917 	ldw	r2,-28(fp)
 700e33c:	1885c83a 	sub	r2,r3,r2
 700e340:	e0bff615 	stw	r2,-40(fp)
 700e344:	00000406 	br	700e358 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 700e348:	00c1ffc4 	movi	r3,2047
 700e34c:	e0bff917 	ldw	r2,-28(fp)
 700e350:	1885c83a 	sub	r2,r3,r2
 700e354:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 700e358:	e0bff617 	ldw	r2,-40(fp)
 700e35c:	10001e26 	beq	r2,zero,700e3d8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 700e360:	e0fffe17 	ldw	r3,-8(fp)
 700e364:	e0bff617 	ldw	r2,-40(fp)
 700e368:	1880022e 	bgeu	r3,r2,700e374 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 700e36c:	e0bffe17 	ldw	r2,-8(fp)
 700e370:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 700e374:	e0bffc17 	ldw	r2,-16(fp)
 700e378:	10c20e04 	addi	r3,r2,2104
 700e37c:	e0bff917 	ldw	r2,-28(fp)
 700e380:	1885883a 	add	r2,r3,r2
 700e384:	e1bff617 	ldw	r6,-40(fp)
 700e388:	e17ffd17 	ldw	r5,-12(fp)
 700e38c:	1009883a 	mov	r4,r2
 700e390:	7005fbc0 	call	7005fbc <memcpy>
      ptr   += n;
 700e394:	e0fffd17 	ldw	r3,-12(fp)
 700e398:	e0bff617 	ldw	r2,-40(fp)
 700e39c:	1885883a 	add	r2,r3,r2
 700e3a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 700e3a4:	e0fffe17 	ldw	r3,-8(fp)
 700e3a8:	e0bff617 	ldw	r2,-40(fp)
 700e3ac:	1885c83a 	sub	r2,r3,r2
 700e3b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 700e3b4:	e0fff917 	ldw	r3,-28(fp)
 700e3b8:	e0bff617 	ldw	r2,-40(fp)
 700e3bc:	1885883a 	add	r2,r3,r2
 700e3c0:	10c1ffcc 	andi	r3,r2,2047
 700e3c4:	e0bffc17 	ldw	r2,-16(fp)
 700e3c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 700e3cc:	e0bffe17 	ldw	r2,-8(fp)
 700e3d0:	00bfc716 	blt	zero,r2,700e2f0 <__alt_data_end+0xff00e2f0>
 700e3d4:	00000106 	br	700e3dc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 700e3d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700e3dc:	0005303a 	rdctl	r2,status
 700e3e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700e3e4:	e0fffb17 	ldw	r3,-20(fp)
 700e3e8:	00bfff84 	movi	r2,-2
 700e3ec:	1884703a 	and	r2,r3,r2
 700e3f0:	1001703a 	wrctl	status,r2
  
  return context;
 700e3f4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 700e3f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 700e3fc:	e0bffc17 	ldw	r2,-16(fp)
 700e400:	10800817 	ldw	r2,32(r2)
 700e404:	10c00094 	ori	r3,r2,2
 700e408:	e0bffc17 	ldw	r2,-16(fp)
 700e40c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 700e410:	e0bffc17 	ldw	r2,-16(fp)
 700e414:	10800017 	ldw	r2,0(r2)
 700e418:	10800104 	addi	r2,r2,4
 700e41c:	1007883a 	mov	r3,r2
 700e420:	e0bffc17 	ldw	r2,-16(fp)
 700e424:	10800817 	ldw	r2,32(r2)
 700e428:	18800035 	stwio	r2,0(r3)
 700e42c:	e0bffa17 	ldw	r2,-24(fp)
 700e430:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700e434:	e0bff817 	ldw	r2,-32(fp)
 700e438:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 700e43c:	e0bffe17 	ldw	r2,-8(fp)
 700e440:	0080100e 	bge	zero,r2,700e484 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 700e444:	e0bfff17 	ldw	r2,-4(fp)
 700e448:	1090000c 	andi	r2,r2,16384
 700e44c:	1000101e 	bne	r2,zero,700e490 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 700e450:	0001883a 	nop
 700e454:	e0bffc17 	ldw	r2,-16(fp)
 700e458:	10c00d17 	ldw	r3,52(r2)
 700e45c:	e0bff517 	ldw	r2,-44(fp)
 700e460:	1880051e 	bne	r3,r2,700e478 <altera_avalon_jtag_uart_write+0x1b8>
 700e464:	e0bffc17 	ldw	r2,-16(fp)
 700e468:	10c00917 	ldw	r3,36(r2)
 700e46c:	e0bffc17 	ldw	r2,-16(fp)
 700e470:	10800117 	ldw	r2,4(r2)
 700e474:	18bff736 	bltu	r3,r2,700e454 <__alt_data_end+0xff00e454>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 700e478:	e0bffc17 	ldw	r2,-16(fp)
 700e47c:	10800917 	ldw	r2,36(r2)
 700e480:	1000051e 	bne	r2,zero,700e498 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 700e484:	e0bffe17 	ldw	r2,-8(fp)
 700e488:	00bfd016 	blt	zero,r2,700e3cc <__alt_data_end+0xff00e3cc>
 700e48c:	00000306 	br	700e49c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 700e490:	0001883a 	nop
 700e494:	00000106 	br	700e49c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 700e498:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 700e49c:	e0fffd17 	ldw	r3,-12(fp)
 700e4a0:	e0bff717 	ldw	r2,-36(fp)
 700e4a4:	18800426 	beq	r3,r2,700e4b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 700e4a8:	e0fffd17 	ldw	r3,-12(fp)
 700e4ac:	e0bff717 	ldw	r2,-36(fp)
 700e4b0:	1885c83a 	sub	r2,r3,r2
 700e4b4:	00000606 	br	700e4d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 700e4b8:	e0bfff17 	ldw	r2,-4(fp)
 700e4bc:	1090000c 	andi	r2,r2,16384
 700e4c0:	10000226 	beq	r2,zero,700e4cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 700e4c4:	00bffd44 	movi	r2,-11
 700e4c8:	00000106 	br	700e4d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 700e4cc:	00bffec4 	movi	r2,-5
}
 700e4d0:	e037883a 	mov	sp,fp
 700e4d4:	dfc00117 	ldw	ra,4(sp)
 700e4d8:	df000017 	ldw	fp,0(sp)
 700e4dc:	dec00204 	addi	sp,sp,8
 700e4e0:	f800283a 	ret

0700e4e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700e4e4:	defffe04 	addi	sp,sp,-8
 700e4e8:	dfc00115 	stw	ra,4(sp)
 700e4ec:	df000015 	stw	fp,0(sp)
 700e4f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700e4f4:	d0a00e17 	ldw	r2,-32712(gp)
 700e4f8:	10000326 	beq	r2,zero,700e508 <alt_get_errno+0x24>
 700e4fc:	d0a00e17 	ldw	r2,-32712(gp)
 700e500:	103ee83a 	callr	r2
 700e504:	00000106 	br	700e50c <alt_get_errno+0x28>
 700e508:	d0a6df04 	addi	r2,gp,-25732
}
 700e50c:	e037883a 	mov	sp,fp
 700e510:	dfc00117 	ldw	ra,4(sp)
 700e514:	df000017 	ldw	fp,0(sp)
 700e518:	dec00204 	addi	sp,sp,8
 700e51c:	f800283a 	ret

0700e520 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 700e520:	defff904 	addi	sp,sp,-28
 700e524:	df000615 	stw	fp,24(sp)
 700e528:	df000604 	addi	fp,sp,24
 700e52c:	e13ffe15 	stw	r4,-8(fp)
 700e530:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 700e534:	00bfffc4 	movi	r2,-1
 700e538:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 700e53c:	0005317a 	rdctl	r2,cpuid
 700e540:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 700e544:	e0bffb17 	ldw	r2,-20(fp)
 700e548:	1006943a 	slli	r3,r2,16
 700e54c:	e0bfff17 	ldw	r2,-4(fp)
 700e550:	1884b03a 	or	r2,r3,r2
 700e554:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 700e558:	e0bffe17 	ldw	r2,-8(fp)
 700e55c:	10800317 	ldw	r2,12(r2)
 700e560:	e0fffc17 	ldw	r3,-16(fp)
 700e564:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 700e568:	e0bffe17 	ldw	r2,-8(fp)
 700e56c:	10800317 	ldw	r2,12(r2)
 700e570:	10800037 	ldwio	r2,0(r2)
 700e574:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 700e578:	e0fffd17 	ldw	r3,-12(fp)
 700e57c:	e0bffc17 	ldw	r2,-16(fp)
 700e580:	1880011e 	bne	r3,r2,700e588 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 700e584:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 700e588:	e0bffa17 	ldw	r2,-24(fp)
}
 700e58c:	e037883a 	mov	sp,fp
 700e590:	df000017 	ldw	fp,0(sp)
 700e594:	dec00104 	addi	sp,sp,4
 700e598:	f800283a 	ret

0700e59c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 700e59c:	defffc04 	addi	sp,sp,-16
 700e5a0:	dfc00315 	stw	ra,12(sp)
 700e5a4:	df000215 	stw	fp,8(sp)
 700e5a8:	df000204 	addi	fp,sp,8
 700e5ac:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 700e5b0:	d1601004 	addi	r5,gp,-32704
 700e5b4:	e13fff17 	ldw	r4,-4(fp)
 700e5b8:	700eb700 	call	700eb70 <alt_find_dev>
 700e5bc:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 700e5c0:	e0bffe17 	ldw	r2,-8(fp)
 700e5c4:	1000041e 	bne	r2,zero,700e5d8 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 700e5c8:	700e4e40 	call	700e4e4 <alt_get_errno>
 700e5cc:	1007883a 	mov	r3,r2
 700e5d0:	008004c4 	movi	r2,19
 700e5d4:	18800015 	stw	r2,0(r3)
  }

  return dev;
 700e5d8:	e0bffe17 	ldw	r2,-8(fp)
}
 700e5dc:	e037883a 	mov	sp,fp
 700e5e0:	dfc00117 	ldw	ra,4(sp)
 700e5e4:	df000017 	ldw	fp,0(sp)
 700e5e8:	dec00204 	addi	sp,sp,8
 700e5ec:	f800283a 	ret

0700e5f0 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 700e5f0:	defffe04 	addi	sp,sp,-8
 700e5f4:	df000115 	stw	fp,4(sp)
 700e5f8:	df000104 	addi	fp,sp,4
 700e5fc:	e13fff15 	stw	r4,-4(fp)
  return;
 700e600:	0001883a 	nop
}
 700e604:	e037883a 	mov	sp,fp
 700e608:	df000017 	ldw	fp,0(sp)
 700e60c:	dec00104 	addi	sp,sp,4
 700e610:	f800283a 	ret

0700e614 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 700e614:	defffc04 	addi	sp,sp,-16
 700e618:	dfc00315 	stw	ra,12(sp)
 700e61c:	df000215 	stw	fp,8(sp)
 700e620:	df000204 	addi	fp,sp,8
 700e624:	e13ffe15 	stw	r4,-8(fp)
 700e628:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 700e62c:	0001883a 	nop
 700e630:	e17fff17 	ldw	r5,-4(fp)
 700e634:	e13ffe17 	ldw	r4,-8(fp)
 700e638:	700e5200 	call	700e520 <alt_mutex_trylock>
 700e63c:	103ffc1e 	bne	r2,zero,700e630 <__alt_data_end+0xff00e630>
}
 700e640:	0001883a 	nop
 700e644:	e037883a 	mov	sp,fp
 700e648:	dfc00117 	ldw	ra,4(sp)
 700e64c:	df000017 	ldw	fp,0(sp)
 700e650:	dec00204 	addi	sp,sp,8
 700e654:	f800283a 	ret

0700e658 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 700e658:	defffa04 	addi	sp,sp,-24
 700e65c:	dfc00515 	stw	ra,20(sp)
 700e660:	df000415 	stw	fp,16(sp)
 700e664:	df000404 	addi	fp,sp,16
 700e668:	e13ffd15 	stw	r4,-12(fp)
 700e66c:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 700e670:	e17ffe17 	ldw	r5,-8(fp)
 700e674:	e13ffd17 	ldw	r4,-12(fp)
 700e678:	700e5200 	call	700e520 <alt_mutex_trylock>
 700e67c:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 700e680:	e0bffc17 	ldw	r2,-16(fp)
}
 700e684:	e037883a 	mov	sp,fp
 700e688:	dfc00117 	ldw	ra,4(sp)
 700e68c:	df000017 	ldw	fp,0(sp)
 700e690:	dec00204 	addi	sp,sp,8
 700e694:	f800283a 	ret

0700e698 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 700e698:	defffd04 	addi	sp,sp,-12
 700e69c:	df000215 	stw	fp,8(sp)
 700e6a0:	df000204 	addi	fp,sp,8
 700e6a4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 700e6a8:	0005317a 	rdctl	r2,cpuid
 700e6ac:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 700e6b0:	e0bfff17 	ldw	r2,-4(fp)
 700e6b4:	10800317 	ldw	r2,12(r2)
 700e6b8:	10800104 	addi	r2,r2,4
 700e6bc:	00c00044 	movi	r3,1
 700e6c0:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 700e6c4:	e0bfff17 	ldw	r2,-4(fp)
 700e6c8:	10800317 	ldw	r2,12(r2)
 700e6cc:	e0fffe17 	ldw	r3,-8(fp)
 700e6d0:	1806943a 	slli	r3,r3,16
 700e6d4:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 700e6d8:	0001883a 	nop
 700e6dc:	e037883a 	mov	sp,fp
 700e6e0:	df000017 	ldw	fp,0(sp)
 700e6e4:	dec00104 	addi	sp,sp,4
 700e6e8:	f800283a 	ret

0700e6ec <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 700e6ec:	defff904 	addi	sp,sp,-28
 700e6f0:	df000615 	stw	fp,24(sp)
 700e6f4:	df000604 	addi	fp,sp,24
 700e6f8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 700e6fc:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 700e700:	0005317a 	rdctl	r2,cpuid
 700e704:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 700e708:	e0bfff17 	ldw	r2,-4(fp)
 700e70c:	10800317 	ldw	r2,12(r2)
 700e710:	10800037 	ldwio	r2,0(r2)
 700e714:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 700e718:	e0bffc17 	ldw	r2,-16(fp)
 700e71c:	1004d43a 	srli	r2,r2,16
 700e720:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 700e724:	e0fffd17 	ldw	r3,-12(fp)
 700e728:	e0bffb17 	ldw	r2,-20(fp)
 700e72c:	1880071e 	bne	r3,r2,700e74c <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 700e730:	e0bffc17 	ldw	r2,-16(fp)
 700e734:	10bfffcc 	andi	r2,r2,65535
 700e738:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 700e73c:	e0bffe17 	ldw	r2,-8(fp)
 700e740:	10000226 	beq	r2,zero,700e74c <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 700e744:	00800044 	movi	r2,1
 700e748:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 700e74c:	e0bffa17 	ldw	r2,-24(fp)
}
 700e750:	e037883a 	mov	sp,fp
 700e754:	df000017 	ldw	fp,0(sp)
 700e758:	dec00104 	addi	sp,sp,4
 700e75c:	f800283a 	ret

0700e760 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 700e760:	defffc04 	addi	sp,sp,-16
 700e764:	df000315 	stw	fp,12(sp)
 700e768:	df000304 	addi	fp,sp,12
 700e76c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 700e770:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 700e774:	e0bfff17 	ldw	r2,-4(fp)
 700e778:	10800317 	ldw	r2,12(r2)
 700e77c:	10800104 	addi	r2,r2,4
 700e780:	10800037 	ldwio	r2,0(r2)
 700e784:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 700e788:	e0bffe17 	ldw	r2,-8(fp)
 700e78c:	1080004c 	andi	r2,r2,1
 700e790:	10000226 	beq	r2,zero,700e79c <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 700e794:	00800044 	movi	r2,1
 700e798:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 700e79c:	e0bffd17 	ldw	r2,-12(fp)
}
 700e7a0:	e037883a 	mov	sp,fp
 700e7a4:	df000017 	ldw	fp,0(sp)
 700e7a8:	dec00104 	addi	sp,sp,4
 700e7ac:	f800283a 	ret

0700e7b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 700e7b0:	defffa04 	addi	sp,sp,-24
 700e7b4:	dfc00515 	stw	ra,20(sp)
 700e7b8:	df000415 	stw	fp,16(sp)
 700e7bc:	df000404 	addi	fp,sp,16
 700e7c0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 700e7c4:	0007883a 	mov	r3,zero
 700e7c8:	e0bfff17 	ldw	r2,-4(fp)
 700e7cc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 700e7d0:	e0bfff17 	ldw	r2,-4(fp)
 700e7d4:	10800104 	addi	r2,r2,4
 700e7d8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700e7dc:	0005303a 	rdctl	r2,status
 700e7e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700e7e4:	e0fffd17 	ldw	r3,-12(fp)
 700e7e8:	00bfff84 	movi	r2,-2
 700e7ec:	1884703a 	and	r2,r3,r2
 700e7f0:	1001703a 	wrctl	status,r2
  
  return context;
 700e7f4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 700e7f8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 700e7fc:	700f3040 	call	700f304 <alt_tick>
 700e800:	e0bffc17 	ldw	r2,-16(fp)
 700e804:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700e808:	e0bffe17 	ldw	r2,-8(fp)
 700e80c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 700e810:	0001883a 	nop
 700e814:	e037883a 	mov	sp,fp
 700e818:	dfc00117 	ldw	ra,4(sp)
 700e81c:	df000017 	ldw	fp,0(sp)
 700e820:	dec00204 	addi	sp,sp,8
 700e824:	f800283a 	ret

0700e828 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 700e828:	defff804 	addi	sp,sp,-32
 700e82c:	dfc00715 	stw	ra,28(sp)
 700e830:	df000615 	stw	fp,24(sp)
 700e834:	df000604 	addi	fp,sp,24
 700e838:	e13ffc15 	stw	r4,-16(fp)
 700e83c:	e17ffd15 	stw	r5,-12(fp)
 700e840:	e1bffe15 	stw	r6,-8(fp)
 700e844:	e1ffff15 	stw	r7,-4(fp)
 700e848:	e0bfff17 	ldw	r2,-4(fp)
 700e84c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 700e850:	d0a6e417 	ldw	r2,-25712(gp)
 700e854:	1000021e 	bne	r2,zero,700e860 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 700e858:	e0bffb17 	ldw	r2,-20(fp)
 700e85c:	d0a6e415 	stw	r2,-25712(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 700e860:	e0bffc17 	ldw	r2,-16(fp)
 700e864:	10800104 	addi	r2,r2,4
 700e868:	00c001c4 	movi	r3,7
 700e86c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 700e870:	d8000015 	stw	zero,0(sp)
 700e874:	e1fffc17 	ldw	r7,-16(fp)
 700e878:	0181c074 	movhi	r6,1793
 700e87c:	31b9ec04 	addi	r6,r6,-6224
 700e880:	e17ffe17 	ldw	r5,-8(fp)
 700e884:	e13ffd17 	ldw	r4,-12(fp)
 700e888:	700ec340 	call	700ec34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 700e88c:	0001883a 	nop
 700e890:	e037883a 	mov	sp,fp
 700e894:	dfc00117 	ldw	ra,4(sp)
 700e898:	df000017 	ldw	fp,0(sp)
 700e89c:	dec00204 	addi	sp,sp,8
 700e8a0:	f800283a 	ret

0700e8a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 700e8a4:	defff504 	addi	sp,sp,-44
 700e8a8:	df000a15 	stw	fp,40(sp)
 700e8ac:	df000a04 	addi	fp,sp,40
 700e8b0:	e13ffc15 	stw	r4,-16(fp)
 700e8b4:	e17ffd15 	stw	r5,-12(fp)
 700e8b8:	e1bffe15 	stw	r6,-8(fp)
 700e8bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 700e8c0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 700e8c4:	d0a6e417 	ldw	r2,-25712(gp)
  
  if (alt_ticks_per_second ())
 700e8c8:	10003c26 	beq	r2,zero,700e9bc <alt_alarm_start+0x118>
  {
    if (alarm)
 700e8cc:	e0bffc17 	ldw	r2,-16(fp)
 700e8d0:	10003826 	beq	r2,zero,700e9b4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 700e8d4:	e0bffc17 	ldw	r2,-16(fp)
 700e8d8:	e0fffe17 	ldw	r3,-8(fp)
 700e8dc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 700e8e0:	e0bffc17 	ldw	r2,-16(fp)
 700e8e4:	e0ffff17 	ldw	r3,-4(fp)
 700e8e8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700e8ec:	0005303a 	rdctl	r2,status
 700e8f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700e8f4:	e0fff917 	ldw	r3,-28(fp)
 700e8f8:	00bfff84 	movi	r2,-2
 700e8fc:	1884703a 	and	r2,r3,r2
 700e900:	1001703a 	wrctl	status,r2
  
  return context;
 700e904:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 700e908:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 700e90c:	d0a6e517 	ldw	r2,-25708(gp)
      
      current_nticks = alt_nticks();
 700e910:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 700e914:	e0fffd17 	ldw	r3,-12(fp)
 700e918:	e0bff617 	ldw	r2,-40(fp)
 700e91c:	1885883a 	add	r2,r3,r2
 700e920:	10c00044 	addi	r3,r2,1
 700e924:	e0bffc17 	ldw	r2,-16(fp)
 700e928:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 700e92c:	e0bffc17 	ldw	r2,-16(fp)
 700e930:	10c00217 	ldw	r3,8(r2)
 700e934:	e0bff617 	ldw	r2,-40(fp)
 700e938:	1880042e 	bgeu	r3,r2,700e94c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 700e93c:	e0bffc17 	ldw	r2,-16(fp)
 700e940:	00c00044 	movi	r3,1
 700e944:	10c00405 	stb	r3,16(r2)
 700e948:	00000206 	br	700e954 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 700e94c:	e0bffc17 	ldw	r2,-16(fp)
 700e950:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 700e954:	e0bffc17 	ldw	r2,-16(fp)
 700e958:	d0e01304 	addi	r3,gp,-32692
 700e95c:	e0fffa15 	stw	r3,-24(fp)
 700e960:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 700e964:	e0bffb17 	ldw	r2,-20(fp)
 700e968:	e0fffa17 	ldw	r3,-24(fp)
 700e96c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 700e970:	e0bffa17 	ldw	r2,-24(fp)
 700e974:	10c00017 	ldw	r3,0(r2)
 700e978:	e0bffb17 	ldw	r2,-20(fp)
 700e97c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 700e980:	e0bffa17 	ldw	r2,-24(fp)
 700e984:	10800017 	ldw	r2,0(r2)
 700e988:	e0fffb17 	ldw	r3,-20(fp)
 700e98c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 700e990:	e0bffa17 	ldw	r2,-24(fp)
 700e994:	e0fffb17 	ldw	r3,-20(fp)
 700e998:	10c00015 	stw	r3,0(r2)
 700e99c:	e0bff817 	ldw	r2,-32(fp)
 700e9a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700e9a4:	e0bff717 	ldw	r2,-36(fp)
 700e9a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 700e9ac:	0005883a 	mov	r2,zero
 700e9b0:	00000306 	br	700e9c0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 700e9b4:	00bffa84 	movi	r2,-22
 700e9b8:	00000106 	br	700e9c0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 700e9bc:	00bfde84 	movi	r2,-134
  }
}
 700e9c0:	e037883a 	mov	sp,fp
 700e9c4:	df000017 	ldw	fp,0(sp)
 700e9c8:	dec00104 	addi	sp,sp,4
 700e9cc:	f800283a 	ret

0700e9d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700e9d0:	defffe04 	addi	sp,sp,-8
 700e9d4:	dfc00115 	stw	ra,4(sp)
 700e9d8:	df000015 	stw	fp,0(sp)
 700e9dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700e9e0:	d0a00e17 	ldw	r2,-32712(gp)
 700e9e4:	10000326 	beq	r2,zero,700e9f4 <alt_get_errno+0x24>
 700e9e8:	d0a00e17 	ldw	r2,-32712(gp)
 700e9ec:	103ee83a 	callr	r2
 700e9f0:	00000106 	br	700e9f8 <alt_get_errno+0x28>
 700e9f4:	d0a6df04 	addi	r2,gp,-25732
}
 700e9f8:	e037883a 	mov	sp,fp
 700e9fc:	dfc00117 	ldw	ra,4(sp)
 700ea00:	df000017 	ldw	fp,0(sp)
 700ea04:	dec00204 	addi	sp,sp,8
 700ea08:	f800283a 	ret

0700ea0c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 700ea0c:	defffa04 	addi	sp,sp,-24
 700ea10:	dfc00515 	stw	ra,20(sp)
 700ea14:	df000415 	stw	fp,16(sp)
 700ea18:	df000404 	addi	fp,sp,16
 700ea1c:	e13ffe15 	stw	r4,-8(fp)
 700ea20:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 700ea24:	e0bffe17 	ldw	r2,-8(fp)
 700ea28:	10000326 	beq	r2,zero,700ea38 <alt_dev_llist_insert+0x2c>
 700ea2c:	e0bffe17 	ldw	r2,-8(fp)
 700ea30:	10800217 	ldw	r2,8(r2)
 700ea34:	1000061e 	bne	r2,zero,700ea50 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 700ea38:	700e9d00 	call	700e9d0 <alt_get_errno>
 700ea3c:	1007883a 	mov	r3,r2
 700ea40:	00800584 	movi	r2,22
 700ea44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 700ea48:	00bffa84 	movi	r2,-22
 700ea4c:	00001306 	br	700ea9c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 700ea50:	e0bffe17 	ldw	r2,-8(fp)
 700ea54:	e0ffff17 	ldw	r3,-4(fp)
 700ea58:	e0fffc15 	stw	r3,-16(fp)
 700ea5c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 700ea60:	e0bffd17 	ldw	r2,-12(fp)
 700ea64:	e0fffc17 	ldw	r3,-16(fp)
 700ea68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 700ea6c:	e0bffc17 	ldw	r2,-16(fp)
 700ea70:	10c00017 	ldw	r3,0(r2)
 700ea74:	e0bffd17 	ldw	r2,-12(fp)
 700ea78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 700ea7c:	e0bffc17 	ldw	r2,-16(fp)
 700ea80:	10800017 	ldw	r2,0(r2)
 700ea84:	e0fffd17 	ldw	r3,-12(fp)
 700ea88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 700ea8c:	e0bffc17 	ldw	r2,-16(fp)
 700ea90:	e0fffd17 	ldw	r3,-12(fp)
 700ea94:	10c00015 	stw	r3,0(r2)

  return 0;  
 700ea98:	0005883a 	mov	r2,zero
}
 700ea9c:	e037883a 	mov	sp,fp
 700eaa0:	dfc00117 	ldw	ra,4(sp)
 700eaa4:	df000017 	ldw	fp,0(sp)
 700eaa8:	dec00204 	addi	sp,sp,8
 700eaac:	f800283a 	ret

0700eab0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 700eab0:	defffd04 	addi	sp,sp,-12
 700eab4:	dfc00215 	stw	ra,8(sp)
 700eab8:	df000115 	stw	fp,4(sp)
 700eabc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 700eac0:	0081c074 	movhi	r2,1793
 700eac4:	10bea604 	addi	r2,r2,-1384
 700eac8:	e0bfff15 	stw	r2,-4(fp)
 700eacc:	00000606 	br	700eae8 <_do_ctors+0x38>
        (*ctor) (); 
 700ead0:	e0bfff17 	ldw	r2,-4(fp)
 700ead4:	10800017 	ldw	r2,0(r2)
 700ead8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 700eadc:	e0bfff17 	ldw	r2,-4(fp)
 700eae0:	10bfff04 	addi	r2,r2,-4
 700eae4:	e0bfff15 	stw	r2,-4(fp)
 700eae8:	e0ffff17 	ldw	r3,-4(fp)
 700eaec:	0081c074 	movhi	r2,1793
 700eaf0:	10bea704 	addi	r2,r2,-1380
 700eaf4:	18bff62e 	bgeu	r3,r2,700ead0 <__alt_data_end+0xff00ead0>
        (*ctor) (); 
}
 700eaf8:	0001883a 	nop
 700eafc:	e037883a 	mov	sp,fp
 700eb00:	dfc00117 	ldw	ra,4(sp)
 700eb04:	df000017 	ldw	fp,0(sp)
 700eb08:	dec00204 	addi	sp,sp,8
 700eb0c:	f800283a 	ret

0700eb10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 700eb10:	defffd04 	addi	sp,sp,-12
 700eb14:	dfc00215 	stw	ra,8(sp)
 700eb18:	df000115 	stw	fp,4(sp)
 700eb1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 700eb20:	0081c074 	movhi	r2,1793
 700eb24:	10bea604 	addi	r2,r2,-1384
 700eb28:	e0bfff15 	stw	r2,-4(fp)
 700eb2c:	00000606 	br	700eb48 <_do_dtors+0x38>
        (*dtor) (); 
 700eb30:	e0bfff17 	ldw	r2,-4(fp)
 700eb34:	10800017 	ldw	r2,0(r2)
 700eb38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 700eb3c:	e0bfff17 	ldw	r2,-4(fp)
 700eb40:	10bfff04 	addi	r2,r2,-4
 700eb44:	e0bfff15 	stw	r2,-4(fp)
 700eb48:	e0ffff17 	ldw	r3,-4(fp)
 700eb4c:	0081c074 	movhi	r2,1793
 700eb50:	10bea704 	addi	r2,r2,-1380
 700eb54:	18bff62e 	bgeu	r3,r2,700eb30 <__alt_data_end+0xff00eb30>
        (*dtor) (); 
}
 700eb58:	0001883a 	nop
 700eb5c:	e037883a 	mov	sp,fp
 700eb60:	dfc00117 	ldw	ra,4(sp)
 700eb64:	df000017 	ldw	fp,0(sp)
 700eb68:	dec00204 	addi	sp,sp,8
 700eb6c:	f800283a 	ret

0700eb70 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 700eb70:	defffa04 	addi	sp,sp,-24
 700eb74:	dfc00515 	stw	ra,20(sp)
 700eb78:	df000415 	stw	fp,16(sp)
 700eb7c:	df000404 	addi	fp,sp,16
 700eb80:	e13ffe15 	stw	r4,-8(fp)
 700eb84:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 700eb88:	e0bfff17 	ldw	r2,-4(fp)
 700eb8c:	10800017 	ldw	r2,0(r2)
 700eb90:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 700eb94:	e13ffe17 	ldw	r4,-8(fp)
 700eb98:	70006300 	call	7000630 <strlen>
 700eb9c:	10800044 	addi	r2,r2,1
 700eba0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 700eba4:	00000d06 	br	700ebdc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 700eba8:	e0bffc17 	ldw	r2,-16(fp)
 700ebac:	10800217 	ldw	r2,8(r2)
 700ebb0:	e0fffd17 	ldw	r3,-12(fp)
 700ebb4:	180d883a 	mov	r6,r3
 700ebb8:	e17ffe17 	ldw	r5,-8(fp)
 700ebbc:	1009883a 	mov	r4,r2
 700ebc0:	700f7540 	call	700f754 <memcmp>
 700ebc4:	1000021e 	bne	r2,zero,700ebd0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 700ebc8:	e0bffc17 	ldw	r2,-16(fp)
 700ebcc:	00000706 	br	700ebec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 700ebd0:	e0bffc17 	ldw	r2,-16(fp)
 700ebd4:	10800017 	ldw	r2,0(r2)
 700ebd8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 700ebdc:	e0fffc17 	ldw	r3,-16(fp)
 700ebe0:	e0bfff17 	ldw	r2,-4(fp)
 700ebe4:	18bff01e 	bne	r3,r2,700eba8 <__alt_data_end+0xff00eba8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 700ebe8:	0005883a 	mov	r2,zero
}
 700ebec:	e037883a 	mov	sp,fp
 700ebf0:	dfc00117 	ldw	ra,4(sp)
 700ebf4:	df000017 	ldw	fp,0(sp)
 700ebf8:	dec00204 	addi	sp,sp,8
 700ebfc:	f800283a 	ret

0700ec00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 700ec00:	defffe04 	addi	sp,sp,-8
 700ec04:	dfc00115 	stw	ra,4(sp)
 700ec08:	df000015 	stw	fp,0(sp)
 700ec0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 700ec10:	01440004 	movi	r5,4096
 700ec14:	0009883a 	mov	r4,zero
 700ec18:	700f5dc0 	call	700f5dc <alt_icache_flush>
#endif
}
 700ec1c:	0001883a 	nop
 700ec20:	e037883a 	mov	sp,fp
 700ec24:	dfc00117 	ldw	ra,4(sp)
 700ec28:	df000017 	ldw	fp,0(sp)
 700ec2c:	dec00204 	addi	sp,sp,8
 700ec30:	f800283a 	ret

0700ec34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 700ec34:	defff904 	addi	sp,sp,-28
 700ec38:	dfc00615 	stw	ra,24(sp)
 700ec3c:	df000515 	stw	fp,20(sp)
 700ec40:	df000504 	addi	fp,sp,20
 700ec44:	e13ffc15 	stw	r4,-16(fp)
 700ec48:	e17ffd15 	stw	r5,-12(fp)
 700ec4c:	e1bffe15 	stw	r6,-8(fp)
 700ec50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 700ec54:	e0800217 	ldw	r2,8(fp)
 700ec58:	d8800015 	stw	r2,0(sp)
 700ec5c:	e1ffff17 	ldw	r7,-4(fp)
 700ec60:	e1bffe17 	ldw	r6,-8(fp)
 700ec64:	e17ffd17 	ldw	r5,-12(fp)
 700ec68:	e13ffc17 	ldw	r4,-16(fp)
 700ec6c:	700ede40 	call	700ede4 <alt_iic_isr_register>
}  
 700ec70:	e037883a 	mov	sp,fp
 700ec74:	dfc00117 	ldw	ra,4(sp)
 700ec78:	df000017 	ldw	fp,0(sp)
 700ec7c:	dec00204 	addi	sp,sp,8
 700ec80:	f800283a 	ret

0700ec84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 700ec84:	defff904 	addi	sp,sp,-28
 700ec88:	df000615 	stw	fp,24(sp)
 700ec8c:	df000604 	addi	fp,sp,24
 700ec90:	e13ffe15 	stw	r4,-8(fp)
 700ec94:	e17fff15 	stw	r5,-4(fp)
 700ec98:	e0bfff17 	ldw	r2,-4(fp)
 700ec9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700eca0:	0005303a 	rdctl	r2,status
 700eca4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700eca8:	e0fffb17 	ldw	r3,-20(fp)
 700ecac:	00bfff84 	movi	r2,-2
 700ecb0:	1884703a 	and	r2,r3,r2
 700ecb4:	1001703a 	wrctl	status,r2
  
  return context;
 700ecb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 700ecbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 700ecc0:	00c00044 	movi	r3,1
 700ecc4:	e0bffa17 	ldw	r2,-24(fp)
 700ecc8:	1884983a 	sll	r2,r3,r2
 700eccc:	1007883a 	mov	r3,r2
 700ecd0:	d0a6e317 	ldw	r2,-25716(gp)
 700ecd4:	1884b03a 	or	r2,r3,r2
 700ecd8:	d0a6e315 	stw	r2,-25716(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 700ecdc:	d0a6e317 	ldw	r2,-25716(gp)
 700ece0:	100170fa 	wrctl	ienable,r2
 700ece4:	e0bffc17 	ldw	r2,-16(fp)
 700ece8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700ecec:	e0bffd17 	ldw	r2,-12(fp)
 700ecf0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 700ecf4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 700ecf8:	0001883a 	nop
}
 700ecfc:	e037883a 	mov	sp,fp
 700ed00:	df000017 	ldw	fp,0(sp)
 700ed04:	dec00104 	addi	sp,sp,4
 700ed08:	f800283a 	ret

0700ed0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 700ed0c:	defff904 	addi	sp,sp,-28
 700ed10:	df000615 	stw	fp,24(sp)
 700ed14:	df000604 	addi	fp,sp,24
 700ed18:	e13ffe15 	stw	r4,-8(fp)
 700ed1c:	e17fff15 	stw	r5,-4(fp)
 700ed20:	e0bfff17 	ldw	r2,-4(fp)
 700ed24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700ed28:	0005303a 	rdctl	r2,status
 700ed2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700ed30:	e0fffb17 	ldw	r3,-20(fp)
 700ed34:	00bfff84 	movi	r2,-2
 700ed38:	1884703a 	and	r2,r3,r2
 700ed3c:	1001703a 	wrctl	status,r2
  
  return context;
 700ed40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 700ed44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 700ed48:	00c00044 	movi	r3,1
 700ed4c:	e0bffa17 	ldw	r2,-24(fp)
 700ed50:	1884983a 	sll	r2,r3,r2
 700ed54:	0084303a 	nor	r2,zero,r2
 700ed58:	1007883a 	mov	r3,r2
 700ed5c:	d0a6e317 	ldw	r2,-25716(gp)
 700ed60:	1884703a 	and	r2,r3,r2
 700ed64:	d0a6e315 	stw	r2,-25716(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 700ed68:	d0a6e317 	ldw	r2,-25716(gp)
 700ed6c:	100170fa 	wrctl	ienable,r2
 700ed70:	e0bffc17 	ldw	r2,-16(fp)
 700ed74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700ed78:	e0bffd17 	ldw	r2,-12(fp)
 700ed7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 700ed80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 700ed84:	0001883a 	nop
}
 700ed88:	e037883a 	mov	sp,fp
 700ed8c:	df000017 	ldw	fp,0(sp)
 700ed90:	dec00104 	addi	sp,sp,4
 700ed94:	f800283a 	ret

0700ed98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 700ed98:	defffc04 	addi	sp,sp,-16
 700ed9c:	df000315 	stw	fp,12(sp)
 700eda0:	df000304 	addi	fp,sp,12
 700eda4:	e13ffe15 	stw	r4,-8(fp)
 700eda8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 700edac:	000530fa 	rdctl	r2,ienable
 700edb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 700edb4:	00c00044 	movi	r3,1
 700edb8:	e0bfff17 	ldw	r2,-4(fp)
 700edbc:	1884983a 	sll	r2,r3,r2
 700edc0:	1007883a 	mov	r3,r2
 700edc4:	e0bffd17 	ldw	r2,-12(fp)
 700edc8:	1884703a 	and	r2,r3,r2
 700edcc:	1004c03a 	cmpne	r2,r2,zero
 700edd0:	10803fcc 	andi	r2,r2,255
}
 700edd4:	e037883a 	mov	sp,fp
 700edd8:	df000017 	ldw	fp,0(sp)
 700eddc:	dec00104 	addi	sp,sp,4
 700ede0:	f800283a 	ret

0700ede4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 700ede4:	defff504 	addi	sp,sp,-44
 700ede8:	dfc00a15 	stw	ra,40(sp)
 700edec:	df000915 	stw	fp,36(sp)
 700edf0:	df000904 	addi	fp,sp,36
 700edf4:	e13ffc15 	stw	r4,-16(fp)
 700edf8:	e17ffd15 	stw	r5,-12(fp)
 700edfc:	e1bffe15 	stw	r6,-8(fp)
 700ee00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 700ee04:	00bffa84 	movi	r2,-22
 700ee08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 700ee0c:	e0bffd17 	ldw	r2,-12(fp)
 700ee10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 700ee14:	e0bff817 	ldw	r2,-32(fp)
 700ee18:	10800808 	cmpgei	r2,r2,32
 700ee1c:	1000271e 	bne	r2,zero,700eebc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700ee20:	0005303a 	rdctl	r2,status
 700ee24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700ee28:	e0fffb17 	ldw	r3,-20(fp)
 700ee2c:	00bfff84 	movi	r2,-2
 700ee30:	1884703a 	and	r2,r3,r2
 700ee34:	1001703a 	wrctl	status,r2
  
  return context;
 700ee38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 700ee3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 700ee40:	0081c074 	movhi	r2,1793
 700ee44:	108d3704 	addi	r2,r2,13532
 700ee48:	e0fff817 	ldw	r3,-32(fp)
 700ee4c:	180690fa 	slli	r3,r3,3
 700ee50:	10c5883a 	add	r2,r2,r3
 700ee54:	e0fffe17 	ldw	r3,-8(fp)
 700ee58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 700ee5c:	0081c074 	movhi	r2,1793
 700ee60:	108d3704 	addi	r2,r2,13532
 700ee64:	e0fff817 	ldw	r3,-32(fp)
 700ee68:	180690fa 	slli	r3,r3,3
 700ee6c:	10c5883a 	add	r2,r2,r3
 700ee70:	10800104 	addi	r2,r2,4
 700ee74:	e0ffff17 	ldw	r3,-4(fp)
 700ee78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 700ee7c:	e0bffe17 	ldw	r2,-8(fp)
 700ee80:	10000526 	beq	r2,zero,700ee98 <alt_iic_isr_register+0xb4>
 700ee84:	e0bff817 	ldw	r2,-32(fp)
 700ee88:	100b883a 	mov	r5,r2
 700ee8c:	e13ffc17 	ldw	r4,-16(fp)
 700ee90:	700ec840 	call	700ec84 <alt_ic_irq_enable>
 700ee94:	00000406 	br	700eea8 <alt_iic_isr_register+0xc4>
 700ee98:	e0bff817 	ldw	r2,-32(fp)
 700ee9c:	100b883a 	mov	r5,r2
 700eea0:	e13ffc17 	ldw	r4,-16(fp)
 700eea4:	700ed0c0 	call	700ed0c <alt_ic_irq_disable>
 700eea8:	e0bff715 	stw	r2,-36(fp)
 700eeac:	e0bffa17 	ldw	r2,-24(fp)
 700eeb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700eeb4:	e0bff917 	ldw	r2,-28(fp)
 700eeb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 700eebc:	e0bff717 	ldw	r2,-36(fp)
}
 700eec0:	e037883a 	mov	sp,fp
 700eec4:	dfc00117 	ldw	ra,4(sp)
 700eec8:	df000017 	ldw	fp,0(sp)
 700eecc:	dec00204 	addi	sp,sp,8
 700eed0:	f800283a 	ret

0700eed4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 700eed4:	defff904 	addi	sp,sp,-28
 700eed8:	dfc00615 	stw	ra,24(sp)
 700eedc:	df000515 	stw	fp,20(sp)
 700eee0:	df000504 	addi	fp,sp,20
 700eee4:	e13ffc15 	stw	r4,-16(fp)
 700eee8:	e17ffd15 	stw	r5,-12(fp)
 700eeec:	e1bffe15 	stw	r6,-8(fp)
 700eef0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 700eef4:	e1bfff17 	ldw	r6,-4(fp)
 700eef8:	e17ffe17 	ldw	r5,-8(fp)
 700eefc:	e13ffd17 	ldw	r4,-12(fp)
 700ef00:	700f1140 	call	700f114 <open>
 700ef04:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 700ef08:	e0bffb17 	ldw	r2,-20(fp)
 700ef0c:	10001c16 	blt	r2,zero,700ef80 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 700ef10:	0081c074 	movhi	r2,1793
 700ef14:	1081ca04 	addi	r2,r2,1832
 700ef18:	e0fffb17 	ldw	r3,-20(fp)
 700ef1c:	18c00324 	muli	r3,r3,12
 700ef20:	10c5883a 	add	r2,r2,r3
 700ef24:	10c00017 	ldw	r3,0(r2)
 700ef28:	e0bffc17 	ldw	r2,-16(fp)
 700ef2c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 700ef30:	0081c074 	movhi	r2,1793
 700ef34:	1081ca04 	addi	r2,r2,1832
 700ef38:	e0fffb17 	ldw	r3,-20(fp)
 700ef3c:	18c00324 	muli	r3,r3,12
 700ef40:	10c5883a 	add	r2,r2,r3
 700ef44:	10800104 	addi	r2,r2,4
 700ef48:	10c00017 	ldw	r3,0(r2)
 700ef4c:	e0bffc17 	ldw	r2,-16(fp)
 700ef50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 700ef54:	0081c074 	movhi	r2,1793
 700ef58:	1081ca04 	addi	r2,r2,1832
 700ef5c:	e0fffb17 	ldw	r3,-20(fp)
 700ef60:	18c00324 	muli	r3,r3,12
 700ef64:	10c5883a 	add	r2,r2,r3
 700ef68:	10800204 	addi	r2,r2,8
 700ef6c:	10c00017 	ldw	r3,0(r2)
 700ef70:	e0bffc17 	ldw	r2,-16(fp)
 700ef74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 700ef78:	e13ffb17 	ldw	r4,-20(fp)
 700ef7c:	700d6bc0 	call	700d6bc <alt_release_fd>
  }
} 
 700ef80:	0001883a 	nop
 700ef84:	e037883a 	mov	sp,fp
 700ef88:	dfc00117 	ldw	ra,4(sp)
 700ef8c:	df000017 	ldw	fp,0(sp)
 700ef90:	dec00204 	addi	sp,sp,8
 700ef94:	f800283a 	ret

0700ef98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 700ef98:	defffb04 	addi	sp,sp,-20
 700ef9c:	dfc00415 	stw	ra,16(sp)
 700efa0:	df000315 	stw	fp,12(sp)
 700efa4:	df000304 	addi	fp,sp,12
 700efa8:	e13ffd15 	stw	r4,-12(fp)
 700efac:	e17ffe15 	stw	r5,-8(fp)
 700efb0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 700efb4:	01c07fc4 	movi	r7,511
 700efb8:	01800044 	movi	r6,1
 700efbc:	e17ffd17 	ldw	r5,-12(fp)
 700efc0:	0101c074 	movhi	r4,1793
 700efc4:	2101cd04 	addi	r4,r4,1844
 700efc8:	700eed40 	call	700eed4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 700efcc:	01c07fc4 	movi	r7,511
 700efd0:	000d883a 	mov	r6,zero
 700efd4:	e17ffe17 	ldw	r5,-8(fp)
 700efd8:	0101c074 	movhi	r4,1793
 700efdc:	2101ca04 	addi	r4,r4,1832
 700efe0:	700eed40 	call	700eed4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 700efe4:	01c07fc4 	movi	r7,511
 700efe8:	01800044 	movi	r6,1
 700efec:	e17fff17 	ldw	r5,-4(fp)
 700eff0:	0101c074 	movhi	r4,1793
 700eff4:	2101d004 	addi	r4,r4,1856
 700eff8:	700eed40 	call	700eed4 <alt_open_fd>
}  
 700effc:	0001883a 	nop
 700f000:	e037883a 	mov	sp,fp
 700f004:	dfc00117 	ldw	ra,4(sp)
 700f008:	df000017 	ldw	fp,0(sp)
 700f00c:	dec00204 	addi	sp,sp,8
 700f010:	f800283a 	ret

0700f014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 700f014:	defffe04 	addi	sp,sp,-8
 700f018:	dfc00115 	stw	ra,4(sp)
 700f01c:	df000015 	stw	fp,0(sp)
 700f020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 700f024:	d0a00e17 	ldw	r2,-32712(gp)
 700f028:	10000326 	beq	r2,zero,700f038 <alt_get_errno+0x24>
 700f02c:	d0a00e17 	ldw	r2,-32712(gp)
 700f030:	103ee83a 	callr	r2
 700f034:	00000106 	br	700f03c <alt_get_errno+0x28>
 700f038:	d0a6df04 	addi	r2,gp,-25732
}
 700f03c:	e037883a 	mov	sp,fp
 700f040:	dfc00117 	ldw	ra,4(sp)
 700f044:	df000017 	ldw	fp,0(sp)
 700f048:	dec00204 	addi	sp,sp,8
 700f04c:	f800283a 	ret

0700f050 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 700f050:	defffd04 	addi	sp,sp,-12
 700f054:	df000215 	stw	fp,8(sp)
 700f058:	df000204 	addi	fp,sp,8
 700f05c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 700f060:	e0bfff17 	ldw	r2,-4(fp)
 700f064:	10800217 	ldw	r2,8(r2)
 700f068:	10d00034 	orhi	r3,r2,16384
 700f06c:	e0bfff17 	ldw	r2,-4(fp)
 700f070:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 700f074:	e03ffe15 	stw	zero,-8(fp)
 700f078:	00001d06 	br	700f0f0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 700f07c:	0081c074 	movhi	r2,1793
 700f080:	1081ca04 	addi	r2,r2,1832
 700f084:	e0fffe17 	ldw	r3,-8(fp)
 700f088:	18c00324 	muli	r3,r3,12
 700f08c:	10c5883a 	add	r2,r2,r3
 700f090:	10c00017 	ldw	r3,0(r2)
 700f094:	e0bfff17 	ldw	r2,-4(fp)
 700f098:	10800017 	ldw	r2,0(r2)
 700f09c:	1880111e 	bne	r3,r2,700f0e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 700f0a0:	0081c074 	movhi	r2,1793
 700f0a4:	1081ca04 	addi	r2,r2,1832
 700f0a8:	e0fffe17 	ldw	r3,-8(fp)
 700f0ac:	18c00324 	muli	r3,r3,12
 700f0b0:	10c5883a 	add	r2,r2,r3
 700f0b4:	10800204 	addi	r2,r2,8
 700f0b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 700f0bc:	1000090e 	bge	r2,zero,700f0e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 700f0c0:	e0bffe17 	ldw	r2,-8(fp)
 700f0c4:	10c00324 	muli	r3,r2,12
 700f0c8:	0081c074 	movhi	r2,1793
 700f0cc:	1081ca04 	addi	r2,r2,1832
 700f0d0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 700f0d4:	e0bfff17 	ldw	r2,-4(fp)
 700f0d8:	18800226 	beq	r3,r2,700f0e4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 700f0dc:	00bffcc4 	movi	r2,-13
 700f0e0:	00000806 	br	700f104 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 700f0e4:	e0bffe17 	ldw	r2,-8(fp)
 700f0e8:	10800044 	addi	r2,r2,1
 700f0ec:	e0bffe15 	stw	r2,-8(fp)
 700f0f0:	d0a00d17 	ldw	r2,-32716(gp)
 700f0f4:	1007883a 	mov	r3,r2
 700f0f8:	e0bffe17 	ldw	r2,-8(fp)
 700f0fc:	18bfdf2e 	bgeu	r3,r2,700f07c <__alt_data_end+0xff00f07c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 700f100:	0005883a 	mov	r2,zero
}
 700f104:	e037883a 	mov	sp,fp
 700f108:	df000017 	ldw	fp,0(sp)
 700f10c:	dec00104 	addi	sp,sp,4
 700f110:	f800283a 	ret

0700f114 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 700f114:	defff604 	addi	sp,sp,-40
 700f118:	dfc00915 	stw	ra,36(sp)
 700f11c:	df000815 	stw	fp,32(sp)
 700f120:	df000804 	addi	fp,sp,32
 700f124:	e13ffd15 	stw	r4,-12(fp)
 700f128:	e17ffe15 	stw	r5,-8(fp)
 700f12c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 700f130:	00bfffc4 	movi	r2,-1
 700f134:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 700f138:	00bffb44 	movi	r2,-19
 700f13c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 700f140:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 700f144:	d1600b04 	addi	r5,gp,-32724
 700f148:	e13ffd17 	ldw	r4,-12(fp)
 700f14c:	700eb700 	call	700eb70 <alt_find_dev>
 700f150:	e0bff815 	stw	r2,-32(fp)
 700f154:	e0bff817 	ldw	r2,-32(fp)
 700f158:	1000051e 	bne	r2,zero,700f170 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 700f15c:	e13ffd17 	ldw	r4,-12(fp)
 700f160:	700f4300 	call	700f430 <alt_find_file>
 700f164:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 700f168:	00800044 	movi	r2,1
 700f16c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 700f170:	e0bff817 	ldw	r2,-32(fp)
 700f174:	10002926 	beq	r2,zero,700f21c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 700f178:	e13ff817 	ldw	r4,-32(fp)
 700f17c:	700f5380 	call	700f538 <alt_get_fd>
 700f180:	e0bff915 	stw	r2,-28(fp)
 700f184:	e0bff917 	ldw	r2,-28(fp)
 700f188:	1000030e 	bge	r2,zero,700f198 <open+0x84>
    {
      status = index;
 700f18c:	e0bff917 	ldw	r2,-28(fp)
 700f190:	e0bffa15 	stw	r2,-24(fp)
 700f194:	00002306 	br	700f224 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 700f198:	e0bff917 	ldw	r2,-28(fp)
 700f19c:	10c00324 	muli	r3,r2,12
 700f1a0:	0081c074 	movhi	r2,1793
 700f1a4:	1081ca04 	addi	r2,r2,1832
 700f1a8:	1885883a 	add	r2,r3,r2
 700f1ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 700f1b0:	e0fffe17 	ldw	r3,-8(fp)
 700f1b4:	00900034 	movhi	r2,16384
 700f1b8:	10bfffc4 	addi	r2,r2,-1
 700f1bc:	1886703a 	and	r3,r3,r2
 700f1c0:	e0bffc17 	ldw	r2,-16(fp)
 700f1c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 700f1c8:	e0bffb17 	ldw	r2,-20(fp)
 700f1cc:	1000051e 	bne	r2,zero,700f1e4 <open+0xd0>
 700f1d0:	e13ffc17 	ldw	r4,-16(fp)
 700f1d4:	700f0500 	call	700f050 <alt_file_locked>
 700f1d8:	e0bffa15 	stw	r2,-24(fp)
 700f1dc:	e0bffa17 	ldw	r2,-24(fp)
 700f1e0:	10001016 	blt	r2,zero,700f224 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 700f1e4:	e0bff817 	ldw	r2,-32(fp)
 700f1e8:	10800317 	ldw	r2,12(r2)
 700f1ec:	10000826 	beq	r2,zero,700f210 <open+0xfc>
 700f1f0:	e0bff817 	ldw	r2,-32(fp)
 700f1f4:	10800317 	ldw	r2,12(r2)
 700f1f8:	e1ffff17 	ldw	r7,-4(fp)
 700f1fc:	e1bffe17 	ldw	r6,-8(fp)
 700f200:	e17ffd17 	ldw	r5,-12(fp)
 700f204:	e13ffc17 	ldw	r4,-16(fp)
 700f208:	103ee83a 	callr	r2
 700f20c:	00000106 	br	700f214 <open+0x100>
 700f210:	0005883a 	mov	r2,zero
 700f214:	e0bffa15 	stw	r2,-24(fp)
 700f218:	00000206 	br	700f224 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 700f21c:	00bffb44 	movi	r2,-19
 700f220:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 700f224:	e0bffa17 	ldw	r2,-24(fp)
 700f228:	1000090e 	bge	r2,zero,700f250 <open+0x13c>
  {
    alt_release_fd (index);  
 700f22c:	e13ff917 	ldw	r4,-28(fp)
 700f230:	700d6bc0 	call	700d6bc <alt_release_fd>
    ALT_ERRNO = -status;
 700f234:	700f0140 	call	700f014 <alt_get_errno>
 700f238:	1007883a 	mov	r3,r2
 700f23c:	e0bffa17 	ldw	r2,-24(fp)
 700f240:	0085c83a 	sub	r2,zero,r2
 700f244:	18800015 	stw	r2,0(r3)
    return -1;
 700f248:	00bfffc4 	movi	r2,-1
 700f24c:	00000106 	br	700f254 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 700f250:	e0bff917 	ldw	r2,-28(fp)
}
 700f254:	e037883a 	mov	sp,fp
 700f258:	dfc00117 	ldw	ra,4(sp)
 700f25c:	df000017 	ldw	fp,0(sp)
 700f260:	dec00204 	addi	sp,sp,8
 700f264:	f800283a 	ret

0700f268 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 700f268:	defffa04 	addi	sp,sp,-24
 700f26c:	df000515 	stw	fp,20(sp)
 700f270:	df000504 	addi	fp,sp,20
 700f274:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 700f278:	0005303a 	rdctl	r2,status
 700f27c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 700f280:	e0fffc17 	ldw	r3,-16(fp)
 700f284:	00bfff84 	movi	r2,-2
 700f288:	1884703a 	and	r2,r3,r2
 700f28c:	1001703a 	wrctl	status,r2
  
  return context;
 700f290:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 700f294:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 700f298:	e0bfff17 	ldw	r2,-4(fp)
 700f29c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 700f2a0:	e0bffd17 	ldw	r2,-12(fp)
 700f2a4:	10800017 	ldw	r2,0(r2)
 700f2a8:	e0fffd17 	ldw	r3,-12(fp)
 700f2ac:	18c00117 	ldw	r3,4(r3)
 700f2b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 700f2b4:	e0bffd17 	ldw	r2,-12(fp)
 700f2b8:	10800117 	ldw	r2,4(r2)
 700f2bc:	e0fffd17 	ldw	r3,-12(fp)
 700f2c0:	18c00017 	ldw	r3,0(r3)
 700f2c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 700f2c8:	e0bffd17 	ldw	r2,-12(fp)
 700f2cc:	e0fffd17 	ldw	r3,-12(fp)
 700f2d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 700f2d4:	e0bffd17 	ldw	r2,-12(fp)
 700f2d8:	e0fffd17 	ldw	r3,-12(fp)
 700f2dc:	10c00015 	stw	r3,0(r2)
 700f2e0:	e0bffb17 	ldw	r2,-20(fp)
 700f2e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 700f2e8:	e0bffe17 	ldw	r2,-8(fp)
 700f2ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 700f2f0:	0001883a 	nop
 700f2f4:	e037883a 	mov	sp,fp
 700f2f8:	df000017 	ldw	fp,0(sp)
 700f2fc:	dec00104 	addi	sp,sp,4
 700f300:	f800283a 	ret

0700f304 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 700f304:	defffb04 	addi	sp,sp,-20
 700f308:	dfc00415 	stw	ra,16(sp)
 700f30c:	df000315 	stw	fp,12(sp)
 700f310:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 700f314:	d0a01317 	ldw	r2,-32692(gp)
 700f318:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 700f31c:	d0a6e517 	ldw	r2,-25708(gp)
 700f320:	10800044 	addi	r2,r2,1
 700f324:	d0a6e515 	stw	r2,-25708(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 700f328:	00002e06 	br	700f3e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 700f32c:	e0bffd17 	ldw	r2,-12(fp)
 700f330:	10800017 	ldw	r2,0(r2)
 700f334:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 700f338:	e0bffd17 	ldw	r2,-12(fp)
 700f33c:	10800403 	ldbu	r2,16(r2)
 700f340:	10803fcc 	andi	r2,r2,255
 700f344:	10000426 	beq	r2,zero,700f358 <alt_tick+0x54>
 700f348:	d0a6e517 	ldw	r2,-25708(gp)
 700f34c:	1000021e 	bne	r2,zero,700f358 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 700f350:	e0bffd17 	ldw	r2,-12(fp)
 700f354:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 700f358:	e0bffd17 	ldw	r2,-12(fp)
 700f35c:	10800217 	ldw	r2,8(r2)
 700f360:	d0e6e517 	ldw	r3,-25708(gp)
 700f364:	18801d36 	bltu	r3,r2,700f3dc <alt_tick+0xd8>
 700f368:	e0bffd17 	ldw	r2,-12(fp)
 700f36c:	10800403 	ldbu	r2,16(r2)
 700f370:	10803fcc 	andi	r2,r2,255
 700f374:	1000191e 	bne	r2,zero,700f3dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 700f378:	e0bffd17 	ldw	r2,-12(fp)
 700f37c:	10800317 	ldw	r2,12(r2)
 700f380:	e0fffd17 	ldw	r3,-12(fp)
 700f384:	18c00517 	ldw	r3,20(r3)
 700f388:	1809883a 	mov	r4,r3
 700f38c:	103ee83a 	callr	r2
 700f390:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 700f394:	e0bfff17 	ldw	r2,-4(fp)
 700f398:	1000031e 	bne	r2,zero,700f3a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 700f39c:	e13ffd17 	ldw	r4,-12(fp)
 700f3a0:	700f2680 	call	700f268 <alt_alarm_stop>
 700f3a4:	00000d06 	br	700f3dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 700f3a8:	e0bffd17 	ldw	r2,-12(fp)
 700f3ac:	10c00217 	ldw	r3,8(r2)
 700f3b0:	e0bfff17 	ldw	r2,-4(fp)
 700f3b4:	1887883a 	add	r3,r3,r2
 700f3b8:	e0bffd17 	ldw	r2,-12(fp)
 700f3bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 700f3c0:	e0bffd17 	ldw	r2,-12(fp)
 700f3c4:	10c00217 	ldw	r3,8(r2)
 700f3c8:	d0a6e517 	ldw	r2,-25708(gp)
 700f3cc:	1880032e 	bgeu	r3,r2,700f3dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 700f3d0:	e0bffd17 	ldw	r2,-12(fp)
 700f3d4:	00c00044 	movi	r3,1
 700f3d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 700f3dc:	e0bffe17 	ldw	r2,-8(fp)
 700f3e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 700f3e4:	e0fffd17 	ldw	r3,-12(fp)
 700f3e8:	d0a01304 	addi	r2,gp,-32692
 700f3ec:	18bfcf1e 	bne	r3,r2,700f32c <__alt_data_end+0xff00f32c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 700f3f0:	0001883a 	nop
}
 700f3f4:	0001883a 	nop
 700f3f8:	e037883a 	mov	sp,fp
 700f3fc:	dfc00117 	ldw	ra,4(sp)
 700f400:	df000017 	ldw	fp,0(sp)
 700f404:	dec00204 	addi	sp,sp,8
 700f408:	f800283a 	ret

0700f40c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 700f40c:	deffff04 	addi	sp,sp,-4
 700f410:	df000015 	stw	fp,0(sp)
 700f414:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 700f418:	000170fa 	wrctl	ienable,zero
}
 700f41c:	0001883a 	nop
 700f420:	e037883a 	mov	sp,fp
 700f424:	df000017 	ldw	fp,0(sp)
 700f428:	dec00104 	addi	sp,sp,4
 700f42c:	f800283a 	ret

0700f430 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 700f430:	defffb04 	addi	sp,sp,-20
 700f434:	dfc00415 	stw	ra,16(sp)
 700f438:	df000315 	stw	fp,12(sp)
 700f43c:	df000304 	addi	fp,sp,12
 700f440:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 700f444:	d0a00917 	ldw	r2,-32732(gp)
 700f448:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 700f44c:	00003106 	br	700f514 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 700f450:	e0bffd17 	ldw	r2,-12(fp)
 700f454:	10800217 	ldw	r2,8(r2)
 700f458:	1009883a 	mov	r4,r2
 700f45c:	70006300 	call	7000630 <strlen>
 700f460:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 700f464:	e0bffd17 	ldw	r2,-12(fp)
 700f468:	10c00217 	ldw	r3,8(r2)
 700f46c:	e0bffe17 	ldw	r2,-8(fp)
 700f470:	10bfffc4 	addi	r2,r2,-1
 700f474:	1885883a 	add	r2,r3,r2
 700f478:	10800003 	ldbu	r2,0(r2)
 700f47c:	10803fcc 	andi	r2,r2,255
 700f480:	1080201c 	xori	r2,r2,128
 700f484:	10bfe004 	addi	r2,r2,-128
 700f488:	10800bd8 	cmpnei	r2,r2,47
 700f48c:	1000031e 	bne	r2,zero,700f49c <alt_find_file+0x6c>
    {
      len -= 1;
 700f490:	e0bffe17 	ldw	r2,-8(fp)
 700f494:	10bfffc4 	addi	r2,r2,-1
 700f498:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 700f49c:	e0bffe17 	ldw	r2,-8(fp)
 700f4a0:	e0ffff17 	ldw	r3,-4(fp)
 700f4a4:	1885883a 	add	r2,r3,r2
 700f4a8:	10800003 	ldbu	r2,0(r2)
 700f4ac:	10803fcc 	andi	r2,r2,255
 700f4b0:	1080201c 	xori	r2,r2,128
 700f4b4:	10bfe004 	addi	r2,r2,-128
 700f4b8:	10800be0 	cmpeqi	r2,r2,47
 700f4bc:	1000081e 	bne	r2,zero,700f4e0 <alt_find_file+0xb0>
 700f4c0:	e0bffe17 	ldw	r2,-8(fp)
 700f4c4:	e0ffff17 	ldw	r3,-4(fp)
 700f4c8:	1885883a 	add	r2,r3,r2
 700f4cc:	10800003 	ldbu	r2,0(r2)
 700f4d0:	10803fcc 	andi	r2,r2,255
 700f4d4:	1080201c 	xori	r2,r2,128
 700f4d8:	10bfe004 	addi	r2,r2,-128
 700f4dc:	10000a1e 	bne	r2,zero,700f508 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 700f4e0:	e0bffd17 	ldw	r2,-12(fp)
 700f4e4:	10800217 	ldw	r2,8(r2)
 700f4e8:	e0fffe17 	ldw	r3,-8(fp)
 700f4ec:	180d883a 	mov	r6,r3
 700f4f0:	e17fff17 	ldw	r5,-4(fp)
 700f4f4:	1009883a 	mov	r4,r2
 700f4f8:	700f7540 	call	700f754 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 700f4fc:	1000021e 	bne	r2,zero,700f508 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 700f500:	e0bffd17 	ldw	r2,-12(fp)
 700f504:	00000706 	br	700f524 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 700f508:	e0bffd17 	ldw	r2,-12(fp)
 700f50c:	10800017 	ldw	r2,0(r2)
 700f510:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 700f514:	e0fffd17 	ldw	r3,-12(fp)
 700f518:	d0a00904 	addi	r2,gp,-32732
 700f51c:	18bfcc1e 	bne	r3,r2,700f450 <__alt_data_end+0xff00f450>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 700f520:	0005883a 	mov	r2,zero
}
 700f524:	e037883a 	mov	sp,fp
 700f528:	dfc00117 	ldw	ra,4(sp)
 700f52c:	df000017 	ldw	fp,0(sp)
 700f530:	dec00204 	addi	sp,sp,8
 700f534:	f800283a 	ret

0700f538 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 700f538:	defffc04 	addi	sp,sp,-16
 700f53c:	df000315 	stw	fp,12(sp)
 700f540:	df000304 	addi	fp,sp,12
 700f544:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 700f548:	00bffa04 	movi	r2,-24
 700f54c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 700f550:	e03ffd15 	stw	zero,-12(fp)
 700f554:	00001906 	br	700f5bc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 700f558:	0081c074 	movhi	r2,1793
 700f55c:	1081ca04 	addi	r2,r2,1832
 700f560:	e0fffd17 	ldw	r3,-12(fp)
 700f564:	18c00324 	muli	r3,r3,12
 700f568:	10c5883a 	add	r2,r2,r3
 700f56c:	10800017 	ldw	r2,0(r2)
 700f570:	10000f1e 	bne	r2,zero,700f5b0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 700f574:	0081c074 	movhi	r2,1793
 700f578:	1081ca04 	addi	r2,r2,1832
 700f57c:	e0fffd17 	ldw	r3,-12(fp)
 700f580:	18c00324 	muli	r3,r3,12
 700f584:	10c5883a 	add	r2,r2,r3
 700f588:	e0ffff17 	ldw	r3,-4(fp)
 700f58c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 700f590:	d0e00d17 	ldw	r3,-32716(gp)
 700f594:	e0bffd17 	ldw	r2,-12(fp)
 700f598:	1880020e 	bge	r3,r2,700f5a4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 700f59c:	e0bffd17 	ldw	r2,-12(fp)
 700f5a0:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 700f5a4:	e0bffd17 	ldw	r2,-12(fp)
 700f5a8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 700f5ac:	00000606 	br	700f5c8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 700f5b0:	e0bffd17 	ldw	r2,-12(fp)
 700f5b4:	10800044 	addi	r2,r2,1
 700f5b8:	e0bffd15 	stw	r2,-12(fp)
 700f5bc:	e0bffd17 	ldw	r2,-12(fp)
 700f5c0:	10800810 	cmplti	r2,r2,32
 700f5c4:	103fe41e 	bne	r2,zero,700f558 <__alt_data_end+0xff00f558>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 700f5c8:	e0bffe17 	ldw	r2,-8(fp)
}
 700f5cc:	e037883a 	mov	sp,fp
 700f5d0:	df000017 	ldw	fp,0(sp)
 700f5d4:	dec00104 	addi	sp,sp,4
 700f5d8:	f800283a 	ret

0700f5dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 700f5dc:	defffb04 	addi	sp,sp,-20
 700f5e0:	df000415 	stw	fp,16(sp)
 700f5e4:	df000404 	addi	fp,sp,16
 700f5e8:	e13ffe15 	stw	r4,-8(fp)
 700f5ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 700f5f0:	e0bfff17 	ldw	r2,-4(fp)
 700f5f4:	10840070 	cmpltui	r2,r2,4097
 700f5f8:	1000021e 	bne	r2,zero,700f604 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 700f5fc:	00840004 	movi	r2,4096
 700f600:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 700f604:	e0fffe17 	ldw	r3,-8(fp)
 700f608:	e0bfff17 	ldw	r2,-4(fp)
 700f60c:	1885883a 	add	r2,r3,r2
 700f610:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 700f614:	e0bffe17 	ldw	r2,-8(fp)
 700f618:	e0bffc15 	stw	r2,-16(fp)
 700f61c:	00000506 	br	700f634 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 700f620:	e0bffc17 	ldw	r2,-16(fp)
 700f624:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 700f628:	e0bffc17 	ldw	r2,-16(fp)
 700f62c:	10800804 	addi	r2,r2,32
 700f630:	e0bffc15 	stw	r2,-16(fp)
 700f634:	e0fffc17 	ldw	r3,-16(fp)
 700f638:	e0bffd17 	ldw	r2,-12(fp)
 700f63c:	18bff836 	bltu	r3,r2,700f620 <__alt_data_end+0xff00f620>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 700f640:	e0bffe17 	ldw	r2,-8(fp)
 700f644:	108007cc 	andi	r2,r2,31
 700f648:	10000226 	beq	r2,zero,700f654 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 700f64c:	e0bffc17 	ldw	r2,-16(fp)
 700f650:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 700f654:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 700f658:	0001883a 	nop
 700f65c:	e037883a 	mov	sp,fp
 700f660:	df000017 	ldw	fp,0(sp)
 700f664:	dec00104 	addi	sp,sp,4
 700f668:	f800283a 	ret

0700f66c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 700f66c:	defffe04 	addi	sp,sp,-8
 700f670:	df000115 	stw	fp,4(sp)
 700f674:	df000104 	addi	fp,sp,4
 700f678:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 700f67c:	e0bfff17 	ldw	r2,-4(fp)
 700f680:	10bffe84 	addi	r2,r2,-6
 700f684:	10c00428 	cmpgeui	r3,r2,16
 700f688:	18001a1e 	bne	r3,zero,700f6f4 <alt_exception_cause_generated_bad_addr+0x88>
 700f68c:	100690ba 	slli	r3,r2,2
 700f690:	0081c074 	movhi	r2,1793
 700f694:	10bda904 	addi	r2,r2,-2396
 700f698:	1885883a 	add	r2,r3,r2
 700f69c:	10800017 	ldw	r2,0(r2)
 700f6a0:	1000683a 	jmp	r2
 700f6a4:	0700f6e4 	muli	fp,zero,987
 700f6a8:	0700f6e4 	muli	fp,zero,987
 700f6ac:	0700f6f4 	movhi	fp,987
 700f6b0:	0700f6f4 	movhi	fp,987
 700f6b4:	0700f6f4 	movhi	fp,987
 700f6b8:	0700f6e4 	muli	fp,zero,987
 700f6bc:	0700f6ec 	andhi	fp,zero,987
 700f6c0:	0700f6f4 	movhi	fp,987
 700f6c4:	0700f6e4 	muli	fp,zero,987
 700f6c8:	0700f6e4 	muli	fp,zero,987
 700f6cc:	0700f6f4 	movhi	fp,987
 700f6d0:	0700f6e4 	muli	fp,zero,987
 700f6d4:	0700f6ec 	andhi	fp,zero,987
 700f6d8:	0700f6f4 	movhi	fp,987
 700f6dc:	0700f6f4 	movhi	fp,987
 700f6e0:	0700f6e4 	muli	fp,zero,987
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 700f6e4:	00800044 	movi	r2,1
 700f6e8:	00000306 	br	700f6f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 700f6ec:	0005883a 	mov	r2,zero
 700f6f0:	00000106 	br	700f6f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 700f6f4:	0005883a 	mov	r2,zero
  }
}
 700f6f8:	e037883a 	mov	sp,fp
 700f6fc:	df000017 	ldw	fp,0(sp)
 700f700:	dec00104 	addi	sp,sp,4
 700f704:	f800283a 	ret

0700f708 <atexit>:
 700f708:	200b883a 	mov	r5,r4
 700f70c:	000f883a 	mov	r7,zero
 700f710:	000d883a 	mov	r6,zero
 700f714:	0009883a 	mov	r4,zero
 700f718:	700f7d01 	jmpi	700f7d0 <__register_exitproc>

0700f71c <exit>:
 700f71c:	defffe04 	addi	sp,sp,-8
 700f720:	000b883a 	mov	r5,zero
 700f724:	dc000015 	stw	r16,0(sp)
 700f728:	dfc00115 	stw	ra,4(sp)
 700f72c:	2021883a 	mov	r16,r4
 700f730:	700f8e80 	call	700f8e8 <__call_exitprocs>
 700f734:	0081c074 	movhi	r2,1793
 700f738:	10864904 	addi	r2,r2,6436
 700f73c:	11000017 	ldw	r4,0(r2)
 700f740:	20800f17 	ldw	r2,60(r4)
 700f744:	10000126 	beq	r2,zero,700f74c <exit+0x30>
 700f748:	103ee83a 	callr	r2
 700f74c:	8009883a 	mov	r4,r16
 700f750:	700fa680 	call	700fa68 <_exit>

0700f754 <memcmp>:
 700f754:	01c000c4 	movi	r7,3
 700f758:	3980192e 	bgeu	r7,r6,700f7c0 <memcmp+0x6c>
 700f75c:	2144b03a 	or	r2,r4,r5
 700f760:	11c4703a 	and	r2,r2,r7
 700f764:	10000f26 	beq	r2,zero,700f7a4 <memcmp+0x50>
 700f768:	20800003 	ldbu	r2,0(r4)
 700f76c:	28c00003 	ldbu	r3,0(r5)
 700f770:	10c0151e 	bne	r2,r3,700f7c8 <memcmp+0x74>
 700f774:	31bfff84 	addi	r6,r6,-2
 700f778:	01ffffc4 	movi	r7,-1
 700f77c:	00000406 	br	700f790 <memcmp+0x3c>
 700f780:	20800003 	ldbu	r2,0(r4)
 700f784:	28c00003 	ldbu	r3,0(r5)
 700f788:	31bfffc4 	addi	r6,r6,-1
 700f78c:	10c00e1e 	bne	r2,r3,700f7c8 <memcmp+0x74>
 700f790:	21000044 	addi	r4,r4,1
 700f794:	29400044 	addi	r5,r5,1
 700f798:	31fff91e 	bne	r6,r7,700f780 <__alt_data_end+0xff00f780>
 700f79c:	0005883a 	mov	r2,zero
 700f7a0:	f800283a 	ret
 700f7a4:	20c00017 	ldw	r3,0(r4)
 700f7a8:	28800017 	ldw	r2,0(r5)
 700f7ac:	18bfee1e 	bne	r3,r2,700f768 <__alt_data_end+0xff00f768>
 700f7b0:	31bfff04 	addi	r6,r6,-4
 700f7b4:	21000104 	addi	r4,r4,4
 700f7b8:	29400104 	addi	r5,r5,4
 700f7bc:	39bff936 	bltu	r7,r6,700f7a4 <__alt_data_end+0xff00f7a4>
 700f7c0:	303fe91e 	bne	r6,zero,700f768 <__alt_data_end+0xff00f768>
 700f7c4:	003ff506 	br	700f79c <__alt_data_end+0xff00f79c>
 700f7c8:	10c5c83a 	sub	r2,r2,r3
 700f7cc:	f800283a 	ret

0700f7d0 <__register_exitproc>:
 700f7d0:	defffa04 	addi	sp,sp,-24
 700f7d4:	dc000315 	stw	r16,12(sp)
 700f7d8:	0401c074 	movhi	r16,1793
 700f7dc:	84064904 	addi	r16,r16,6436
 700f7e0:	80c00017 	ldw	r3,0(r16)
 700f7e4:	dc400415 	stw	r17,16(sp)
 700f7e8:	dfc00515 	stw	ra,20(sp)
 700f7ec:	18805217 	ldw	r2,328(r3)
 700f7f0:	2023883a 	mov	r17,r4
 700f7f4:	10003726 	beq	r2,zero,700f8d4 <__register_exitproc+0x104>
 700f7f8:	10c00117 	ldw	r3,4(r2)
 700f7fc:	010007c4 	movi	r4,31
 700f800:	20c00e16 	blt	r4,r3,700f83c <__register_exitproc+0x6c>
 700f804:	1a000044 	addi	r8,r3,1
 700f808:	8800221e 	bne	r17,zero,700f894 <__register_exitproc+0xc4>
 700f80c:	18c00084 	addi	r3,r3,2
 700f810:	18c7883a 	add	r3,r3,r3
 700f814:	18c7883a 	add	r3,r3,r3
 700f818:	12000115 	stw	r8,4(r2)
 700f81c:	10c7883a 	add	r3,r2,r3
 700f820:	19400015 	stw	r5,0(r3)
 700f824:	0005883a 	mov	r2,zero
 700f828:	dfc00517 	ldw	ra,20(sp)
 700f82c:	dc400417 	ldw	r17,16(sp)
 700f830:	dc000317 	ldw	r16,12(sp)
 700f834:	dec00604 	addi	sp,sp,24
 700f838:	f800283a 	ret
 700f83c:	00800034 	movhi	r2,0
 700f840:	10800004 	addi	r2,r2,0
 700f844:	10002626 	beq	r2,zero,700f8e0 <__register_exitproc+0x110>
 700f848:	01006404 	movi	r4,400
 700f84c:	d9400015 	stw	r5,0(sp)
 700f850:	d9800115 	stw	r6,4(sp)
 700f854:	d9c00215 	stw	r7,8(sp)
 700f858:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 700f85c:	d9400017 	ldw	r5,0(sp)
 700f860:	d9800117 	ldw	r6,4(sp)
 700f864:	d9c00217 	ldw	r7,8(sp)
 700f868:	10001d26 	beq	r2,zero,700f8e0 <__register_exitproc+0x110>
 700f86c:	81000017 	ldw	r4,0(r16)
 700f870:	10000115 	stw	zero,4(r2)
 700f874:	02000044 	movi	r8,1
 700f878:	22405217 	ldw	r9,328(r4)
 700f87c:	0007883a 	mov	r3,zero
 700f880:	12400015 	stw	r9,0(r2)
 700f884:	20805215 	stw	r2,328(r4)
 700f888:	10006215 	stw	zero,392(r2)
 700f88c:	10006315 	stw	zero,396(r2)
 700f890:	883fde26 	beq	r17,zero,700f80c <__alt_data_end+0xff00f80c>
 700f894:	18c9883a 	add	r4,r3,r3
 700f898:	2109883a 	add	r4,r4,r4
 700f89c:	1109883a 	add	r4,r2,r4
 700f8a0:	21802215 	stw	r6,136(r4)
 700f8a4:	01800044 	movi	r6,1
 700f8a8:	12406217 	ldw	r9,392(r2)
 700f8ac:	30cc983a 	sll	r6,r6,r3
 700f8b0:	4992b03a 	or	r9,r9,r6
 700f8b4:	12406215 	stw	r9,392(r2)
 700f8b8:	21c04215 	stw	r7,264(r4)
 700f8bc:	01000084 	movi	r4,2
 700f8c0:	893fd21e 	bne	r17,r4,700f80c <__alt_data_end+0xff00f80c>
 700f8c4:	11006317 	ldw	r4,396(r2)
 700f8c8:	218cb03a 	or	r6,r4,r6
 700f8cc:	11806315 	stw	r6,396(r2)
 700f8d0:	003fce06 	br	700f80c <__alt_data_end+0xff00f80c>
 700f8d4:	18805304 	addi	r2,r3,332
 700f8d8:	18805215 	stw	r2,328(r3)
 700f8dc:	003fc606 	br	700f7f8 <__alt_data_end+0xff00f7f8>
 700f8e0:	00bfffc4 	movi	r2,-1
 700f8e4:	003fd006 	br	700f828 <__alt_data_end+0xff00f828>

0700f8e8 <__call_exitprocs>:
 700f8e8:	defff504 	addi	sp,sp,-44
 700f8ec:	df000915 	stw	fp,36(sp)
 700f8f0:	dd400615 	stw	r21,24(sp)
 700f8f4:	dc800315 	stw	r18,12(sp)
 700f8f8:	dfc00a15 	stw	ra,40(sp)
 700f8fc:	ddc00815 	stw	r23,32(sp)
 700f900:	dd800715 	stw	r22,28(sp)
 700f904:	dd000515 	stw	r20,20(sp)
 700f908:	dcc00415 	stw	r19,16(sp)
 700f90c:	dc400215 	stw	r17,8(sp)
 700f910:	dc000115 	stw	r16,4(sp)
 700f914:	d9000015 	stw	r4,0(sp)
 700f918:	2839883a 	mov	fp,r5
 700f91c:	04800044 	movi	r18,1
 700f920:	057fffc4 	movi	r21,-1
 700f924:	0081c074 	movhi	r2,1793
 700f928:	10864904 	addi	r2,r2,6436
 700f92c:	12000017 	ldw	r8,0(r2)
 700f930:	45005217 	ldw	r20,328(r8)
 700f934:	44c05204 	addi	r19,r8,328
 700f938:	a0001c26 	beq	r20,zero,700f9ac <__call_exitprocs+0xc4>
 700f93c:	a0800117 	ldw	r2,4(r20)
 700f940:	15ffffc4 	addi	r23,r2,-1
 700f944:	b8000d16 	blt	r23,zero,700f97c <__call_exitprocs+0x94>
 700f948:	14000044 	addi	r16,r2,1
 700f94c:	8421883a 	add	r16,r16,r16
 700f950:	8421883a 	add	r16,r16,r16
 700f954:	84402004 	addi	r17,r16,128
 700f958:	a463883a 	add	r17,r20,r17
 700f95c:	a421883a 	add	r16,r20,r16
 700f960:	e0001e26 	beq	fp,zero,700f9dc <__call_exitprocs+0xf4>
 700f964:	80804017 	ldw	r2,256(r16)
 700f968:	e0801c26 	beq	fp,r2,700f9dc <__call_exitprocs+0xf4>
 700f96c:	bdffffc4 	addi	r23,r23,-1
 700f970:	843fff04 	addi	r16,r16,-4
 700f974:	8c7fff04 	addi	r17,r17,-4
 700f978:	bd7ff91e 	bne	r23,r21,700f960 <__alt_data_end+0xff00f960>
 700f97c:	00800034 	movhi	r2,0
 700f980:	10800004 	addi	r2,r2,0
 700f984:	10000926 	beq	r2,zero,700f9ac <__call_exitprocs+0xc4>
 700f988:	a0800117 	ldw	r2,4(r20)
 700f98c:	1000301e 	bne	r2,zero,700fa50 <__call_exitprocs+0x168>
 700f990:	a0800017 	ldw	r2,0(r20)
 700f994:	10003226 	beq	r2,zero,700fa60 <__call_exitprocs+0x178>
 700f998:	a009883a 	mov	r4,r20
 700f99c:	98800015 	stw	r2,0(r19)
 700f9a0:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 700f9a4:	9d000017 	ldw	r20,0(r19)
 700f9a8:	a03fe41e 	bne	r20,zero,700f93c <__alt_data_end+0xff00f93c>
 700f9ac:	dfc00a17 	ldw	ra,40(sp)
 700f9b0:	df000917 	ldw	fp,36(sp)
 700f9b4:	ddc00817 	ldw	r23,32(sp)
 700f9b8:	dd800717 	ldw	r22,28(sp)
 700f9bc:	dd400617 	ldw	r21,24(sp)
 700f9c0:	dd000517 	ldw	r20,20(sp)
 700f9c4:	dcc00417 	ldw	r19,16(sp)
 700f9c8:	dc800317 	ldw	r18,12(sp)
 700f9cc:	dc400217 	ldw	r17,8(sp)
 700f9d0:	dc000117 	ldw	r16,4(sp)
 700f9d4:	dec00b04 	addi	sp,sp,44
 700f9d8:	f800283a 	ret
 700f9dc:	a0800117 	ldw	r2,4(r20)
 700f9e0:	80c00017 	ldw	r3,0(r16)
 700f9e4:	10bfffc4 	addi	r2,r2,-1
 700f9e8:	15c01426 	beq	r2,r23,700fa3c <__call_exitprocs+0x154>
 700f9ec:	80000015 	stw	zero,0(r16)
 700f9f0:	183fde26 	beq	r3,zero,700f96c <__alt_data_end+0xff00f96c>
 700f9f4:	95c8983a 	sll	r4,r18,r23
 700f9f8:	a0806217 	ldw	r2,392(r20)
 700f9fc:	a5800117 	ldw	r22,4(r20)
 700fa00:	2084703a 	and	r2,r4,r2
 700fa04:	10000b26 	beq	r2,zero,700fa34 <__call_exitprocs+0x14c>
 700fa08:	a0806317 	ldw	r2,396(r20)
 700fa0c:	2088703a 	and	r4,r4,r2
 700fa10:	20000c1e 	bne	r4,zero,700fa44 <__call_exitprocs+0x15c>
 700fa14:	89400017 	ldw	r5,0(r17)
 700fa18:	d9000017 	ldw	r4,0(sp)
 700fa1c:	183ee83a 	callr	r3
 700fa20:	a0800117 	ldw	r2,4(r20)
 700fa24:	15bfbf1e 	bne	r2,r22,700f924 <__alt_data_end+0xff00f924>
 700fa28:	98800017 	ldw	r2,0(r19)
 700fa2c:	153fcf26 	beq	r2,r20,700f96c <__alt_data_end+0xff00f96c>
 700fa30:	003fbc06 	br	700f924 <__alt_data_end+0xff00f924>
 700fa34:	183ee83a 	callr	r3
 700fa38:	003ff906 	br	700fa20 <__alt_data_end+0xff00fa20>
 700fa3c:	a5c00115 	stw	r23,4(r20)
 700fa40:	003feb06 	br	700f9f0 <__alt_data_end+0xff00f9f0>
 700fa44:	89000017 	ldw	r4,0(r17)
 700fa48:	183ee83a 	callr	r3
 700fa4c:	003ff406 	br	700fa20 <__alt_data_end+0xff00fa20>
 700fa50:	a0800017 	ldw	r2,0(r20)
 700fa54:	a027883a 	mov	r19,r20
 700fa58:	1029883a 	mov	r20,r2
 700fa5c:	003fb606 	br	700f938 <__alt_data_end+0xff00f938>
 700fa60:	0005883a 	mov	r2,zero
 700fa64:	003ffb06 	br	700fa54 <__alt_data_end+0xff00fa54>

0700fa68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 700fa68:	defffd04 	addi	sp,sp,-12
 700fa6c:	df000215 	stw	fp,8(sp)
 700fa70:	df000204 	addi	fp,sp,8
 700fa74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 700fa78:	0001883a 	nop
 700fa7c:	e0bfff17 	ldw	r2,-4(fp)
 700fa80:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 700fa84:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 700fa88:	10000226 	beq	r2,zero,700fa94 <_exit+0x2c>
    ALT_SIM_FAIL();
 700fa8c:	002af070 	cmpltui	zero,zero,43969
 700fa90:	00000106 	br	700fa98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 700fa94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 700fa98:	003fff06 	br	700fa98 <__alt_data_end+0xff00fa98>
