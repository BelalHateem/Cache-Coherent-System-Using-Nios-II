
multiprocessorcpu0.elf:     file format elf32-littlenios2
multiprocessorcpu0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000ff14 memsz 0x0000ff14 flags r-x
    LOAD off    0x00010f34 vaddr 0x0400ff34 paddr 0x04011a44 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x00013554 vaddr 0x04013554 paddr 0x04013554 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f90c  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003e4  0400fb50  0400fb50  00010b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  0400ff34  04011a44  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  04013554  04013554  00013554  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  040136b4  040136b4  00012a44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012a44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f28  00000000  00000000  00012a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024d87  00000000  00000000  00013990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009676  00000000  00000000  00038717  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bae5  00000000  00000000  00041d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002308  00000000  00000000  0004d874  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003989  00000000  00000000  0004fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b0d  00000000  00000000  00053505  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006b014  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001920  00000000  00000000  0006b048  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006fd2e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006fd31  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006fd36  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006fd37  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006fd38  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006fd3c  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006fd40  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000a  00000000  00000000  0006fd44  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000a  00000000  00000000  0006fd4e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000a  00000000  00000000  0006fd58  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006fd62  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000011  00000000  00000000  0006fd65  2**0
                  CONTENTS, READONLY
 29 .jdi          000112a5  00000000  00000000  0006fd76  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000bc226  00000000  00000000  0008101b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0400fb50 l    d  .rodata	00000000 .rodata
0400ff34 l    d  .rwdata	00000000 .rwdata
04013554 l    d  .bss	00000000 .bss
040136b4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../multiprocessorcpu0_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 maincpu0.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400fc76 l     O .rodata	00000010 zeroes.4404
04002988 l     F .text	000000bc __sbprintf
0400fc86 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04002b98 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040046c8 l     F .text	00000008 __fp_unlock
040046dc l     F .text	0000019c __sinit.part.1
04004878 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0400ff34 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04010378 l     O .rwdata	00000020 lc_ctype_charset
04010358 l     O .rwdata	00000020 lc_message_charset
04010398 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0400fcb8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04007ddc l     F .text	000000fc __sprint_r.part.0
0400fdec l     O .rodata	00000010 blanks.4348
0400fddc l     O .rodata	00000010 zeroes.4349
04009368 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400d024 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0400d178 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400d1a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400d290 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400d370 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400d45c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400d630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04011a2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400d87c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400d9b0 l     F .text	00000034 alt_dev_reg
0400d9e4 l     F .text	0000003c alt_get_errno
0400da20 l     F .text	00000068 alt_avalon_mutex_reg
04010980 l     O .rwdata	00001060 jtag_uart0
040119e0 l     O .rwdata	00000010 mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400dd54 l     F .text	0000020c altera_avalon_jtag_uart_irq
0400df60 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0400e598 l     F .text	0000003c alt_get_errno
0400e5d4 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400e864 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400ea84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400ef88 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400f0c8 l     F .text	0000003c alt_get_errno
0400f104 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04013588 g     O .bss	00000004 alt_instruction_exception_handler
040005f0 g     F .text	00000018 putchar
040072b8 g     F .text	00000074 _mprec_log10
040073a4 g     F .text	0000008c __any_on
04009a5c g     F .text	00000054 _isatty_r
0400fcc4 g     O .rodata	00000028 __mprec_tinytens
0400d56c g     F .text	0000007c alt_main
04000608 g     F .text	000000c0 _puts_r
040135b4 g     O .bss	00000100 alt_irq
04009ab0 g     F .text	00000060 _lseek_r
04011a44 g       *ABS*	00000000 __flash_rwdata_start
0400bb50 g     F .text	00000088 .hidden __eqdf2
040136b4 g       *ABS*	00000000 __alt_heap_start
040005ac g     F .text	0000003c printf
04009b70 g     F .text	0000009c _wcrtomb_r
04007c9c g     F .text	0000005c __sseek
04004a18 g     F .text	00000010 __sinit
04009424 g     F .text	00000140 __swbuf_r
040054e0 g     F .text	0000007c _setlocale_r
04004880 g     F .text	00000068 __sfmoreglue
0400d60c g     F .text	00000024 __malloc_unlock
040061b0 g     F .text	0000015c memmove
04004a00 g     F .text	00000018 _cleanup
0400e70c g     F .text	00000040 altera_avalon_mutex_trylock
04006434 g     F .text	000000a8 _Balloc
0400bbd8 g     F .text	000000dc .hidden __gtdf2
0400f4c0 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
0400e7a0 g     F .text	00000074 altera_avalon_mutex_is_mine
04000020 g       *ABS*	00000000 __flash_exceptions_start
04009a00 g     F .text	0000005c _fstat_r
0401356c g     O .bss	00000004 errno
04007c18 g     F .text	00000008 __seofread
04013574 g     O .bss	00000004 alt_argv
040199f0 g       *ABS*	00000000 _gp
04010800 g     O .rwdata	00000180 alt_fd_list
040005e8 g     F .text	00000008 _putchar_r
0400ec24 g     F .text	00000090 alt_find_dev
040119f0 g     O .rwdata	00000004 A
04006068 g     F .text	00000148 memcpy
040046d0 g     F .text	0000000c _cleanup_r
0400ce3c g     F .text	000000dc .hidden __floatsidf
0400f04c g     F .text	0000007c alt_io_redirect
0400bcb4 g     F .text	000000f4 .hidden __ltdf2
0400fb50 g       *ABS*	00000000 __DTOR_END__
040006c8 g     F .text	00000014 puts
0400f720 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04007afc g     F .text	00000074 __fpclassifyd
04007214 g     F .text	000000a4 __ratio
0400934c g     F .text	0000001c __vfiprintf_internal
0400e158 g     F .text	0000021c altera_avalon_jtag_uart_read
0400057c g     F .text	00000030 _printf_r
0400a900 g     F .text	00000064 .hidden __udivsi3
0400d2cc g     F .text	000000a4 isatty
0400fd14 g     O .rodata	000000c8 __mprec_tens
0400555c g     F .text	0000000c __locale_charset
0400f690 g     F .text	00000090 alt_icache_flush
04013568 g     O .bss	00000004 __malloc_top_pad
04011a04 g     O .rwdata	00000004 __mb_cur_max
0400558c g     F .text	0000000c _localeconv_r
04006840 g     F .text	0000003c __i2b
04004e9c g     F .text	000004bc __sfvwrite_r
04007b70 g     F .text	00000054 _sbrk_r
04009b10 g     F .text	00000060 _read_r
04011a24 g     O .rwdata	00000004 alt_max_fd
040096f4 g     F .text	000000f0 _fclose_r
04004698 g     F .text	00000030 fflush
04013564 g     O .bss	00000004 __malloc_max_sbrked_mem
0400a9bc g     F .text	000008ac .hidden __adddf3
04006fbc g     F .text	0000010c __b2d
0400a2d0 g     F .text	00000538 .hidden __umoddi3
0400d498 g     F .text	000000d4 lseek
0400e814 g     F .text	00000050 altera_avalon_mutex_first_lock
040119fc g     O .rwdata	00000004 _global_impure_ptr
04007598 g     F .text	00000564 _realloc_r
040136b4 g       *ABS*	00000000 __bss_end
0400ee98 g     F .text	000000f0 alt_iic_isr_register
0400f3b8 g     F .text	00000108 alt_tick
04009d58 g     F .text	00000578 .hidden __udivdi3
0400995c g     F .text	00000024 _fputwc_r
0400fcec g     O .rodata	00000028 __mprec_bigtens
04006624 g     F .text	00000104 __s2b
0400cf18 g     F .text	000000a8 .hidden __floatunsidf
04006cfc g     F .text	00000060 __mcmp
04004a38 g     F .text	00000018 __fp_lock_all
0400ee4c g     F .text	0000004c alt_ic_irq_enabled
0400f31c g     F .text	0000009c alt_alarm_stop
0401357c g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
040107d8 g     O .rwdata	00000028 alt_dev_null
0400e650 g     F .text	00000054 altera_avalon_mutex_open
0400d130 g     F .text	00000048 alt_dcache_flush_all
04006728 g     F .text	00000068 __hi0bits
040119f4 g     O .rwdata	00000004 B
0400cdbc g     F .text	00000080 .hidden __fixdfsi
04011a44 g       *ABS*	00000000 __ram_rwdata_end
04011a1c g     O .rwdata	00000008 alt_dev_list
0400d8b8 g     F .text	000000f8 write
04007430 g     F .text	000000a0 _putc_r
04011a30 g     O .rwdata	00000008 alt_mutex_list
0400ff34 g       *ABS*	00000000 __ram_rodata_end
0400d1e0 g     F .text	000000b0 fstat
0400bcb4 g     F .text	000000f4 .hidden __ledf2
04006a74 g     F .text	00000140 __pow5mult
04007ef0 g     F .text	0000145c ___vfiprintf_internal_r
0401355c g     O .bss	00000004 __nlocale_changed
0400a964 g     F .text	00000058 .hidden __umodsi3
040136b4 g       *ABS*	00000000 end
040119f8 g     O .rwdata	00000004 C
0400dc94 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0400fb50 g       *ABS*	00000000 __CTOR_LIST__
05000000 g       *ABS*	00000000 __alt_stack_pointer
0400e8dc g     F .text	0000007c alt_avalon_timer_sc_init
0400cfc0 g     F .text	00000064 .hidden __clzsi2
0400e374 g     F .text	00000224 altera_avalon_jtag_uart_write
04004a28 g     F .text	00000004 __sfp_lock_acquire
04005f84 g     F .text	000000e4 memchr
04000774 g     F .text	000021f8 ___vfprintf_internal_r
04004b8c g     F .text	00000310 _free_r
04005568 g     F .text	00000010 __locale_mb_cur_max
0400f99c g     F .text	00000180 __call_exitprocs
04013558 g     O .bss	00000004 __mlocale_changed
04011a08 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04013580 g     O .bss	00000004 _alt_tick_rate
04006bb4 g     F .text	00000148 __lshift
04013584 g     O .bss	00000004 _alt_nticks
0400d66c g     F .text	000000fc read
0400dac0 g     F .text	00000070 alt_sys_init
0400f884 g     F .text	00000118 __register_exitproc
0400e74c g     F .text	00000054 altera_avalon_mutex_unlock
0400687c g     F .text	000001f8 __multiply
0400e000 g     F .text	00000068 altera_avalon_jtag_uart_close
0400ff34 g       *ABS*	00000000 __ram_rwdata_start
0400fb50 g       *ABS*	00000000 __ram_rodata_start
0401358c g     O .bss	00000028 __malloc_current_mallinfo
040070c8 g     F .text	0000014c __d2b
0400db30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400f5ec g     F .text	000000a4 alt_get_fd
040095dc g     F .text	00000054 _close_r
0400f808 g     F .text	0000007c memcmp
0400dbf0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040136b4 g       *ABS*	00000000 __alt_stack_base
0400dc40 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002a44 g     F .text	00000154 __swsetup_r
0400b268 g     F .text	000008e8 .hidden __divdf3
040048e8 g     F .text	00000118 __sfp
0400732c g     F .text	00000078 __copybits
040103d0 g     O .rwdata	00000408 __malloc_av_
04004a34 g     F .text	00000004 __sinit_lock_release
0400bda8 g     F .text	00000718 .hidden __muldf3
04007bc4 g     F .text	00000054 __sread
0400f4e4 g     F .text	00000108 alt_find_file
0400eac0 g     F .text	000000a4 alt_dev_llist_insert
0400d5e8 g     F .text	00000024 __malloc_lock
0400d7cc g     F .text	000000b0 sbrk
0400463c g     F .text	0000005c _fflush_r
04009630 g     F .text	000000c4 _calloc_r
04013554 g       *ABS*	00000000 __bss_start
0400630c g     F .text	00000128 memset
04000458 g     F .text	00000124 main
04013578 g     O .bss	00000004 alt_envp
04013560 g     O .bss	00000004 __malloc_max_total_mem
0400db90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04009564 g     F .text	00000018 __swbuf
04000290 g     F .text	00000110 matrix_multiply_part
04007cf8 g     F .text	00000008 __sclose
05000000 g       *ABS*	00000000 __alt_heap_limit
040097e4 g     F .text	00000014 fclose
0400e6c8 g     F .text	00000044 altera_avalon_mutex_lock
04002d98 g     F .text	00001688 _dtoa_r
04005778 g     F .text	0000080c _malloc_r
04009ccc g     F .text	00000030 __ascii_wctomb
04011a28 g     O .rwdata	00000004 alt_errno
04005358 g     F .text	000000c4 _fwalk
040074d0 g     F .text	000000c8 putc
0400a808 g     F .text	00000084 .hidden __divsi3
04004a68 g     F .text	00000124 _malloc_trim_r
0400fb50 g       *ABS*	00000000 __CTOR_END__
04007d00 g     F .text	000000dc strcmp
0400fb50 g       *ABS*	00000000 __flash_rodata_start
0400fb50 g       *ABS*	00000000 __DTOR_LIST__
0400bb50 g     F .text	00000088 .hidden __nedf2
0400da88 g     F .text	00000038 alt_irq_init
0400d768 g     F .text	00000064 alt_release_fd
0400fdfc g     O .rodata	00000100 .hidden __clz_tab
04013554 g     O .bss	00000004 _PathLocale
0400f7bc g     F .text	00000014 atexit
0400957c g     F .text	00000060 _write_r
04005598 g     F .text	00000018 setlocale
04011a00 g     O .rwdata	00000004 _impure_ptr
04013570 g     O .bss	00000004 alt_argc
04004420 g     F .text	0000021c __sflush_r
0400ebc4 g     F .text	00000060 _do_dtors
04005584 g     F .text	00000008 __locale_cjk_lang
04000020 g       .exceptions	00000000 alt_irq_entry
04006f58 g     F .text	00000064 __ulp
04004a50 g     F .text	00000018 __fp_unlock_all
04011a14 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
040055b0 g     F .text	0000000c localeconv
0400ece8 g     F .text	00000050 alt_ic_isr_register
04011a44 g       *ABS*	00000000 _edata
040136b4 g       *ABS*	00000000 _end
040097f8 g     F .text	00000164 __fputwc
04000244 g       *ABS*	00000000 __ram_exceptions_end
0400e068 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400edc0 g     F .text	0000008c alt_ic_irq_disable
04007c20 g     F .text	0000007c __swrite
04011a0c g     O .rwdata	00000004 __malloc_trim_threshold
04005578 g     F .text	0000000c __locale_msgcharset
0400f7d0 g     F .text	00000038 exit
0400541c g     F .text	000000c4 _fwalk_reent
04006d5c g     F .text	000001fc __mdiff
0400a88c g     F .text	00000074 .hidden __modsi3
05000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04004a2c g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400fb1c g     F .text	00000034 _exit
0400e958 g     F .text	0000012c alt_alarm_start
040055bc g     F .text	000001bc __smakebuf_r
040006dc g     F .text	00000098 strlen
0400f1c8 g     F .text	00000154 open
0400bbd8 g     F .text	000000dc .hidden __gedf2
04011a10 g     O .rwdata	00000004 __wctomb
04007ed8 g     F .text	00000018 __sprint_r
0400ecb4 g     F .text	00000034 alt_icache_flush_all
04011a38 g     O .rwdata	00000004 alt_priority_mask
0400ed38 g     F .text	00000088 alt_ic_irq_enable
0400296c g     F .text	0000001c __vfprintf_internal
0400e6a4 g     F .text	00000024 altera_avalon_mutex_close
04009cfc g     F .text	0000005c _wctomb_r
0400c4c0 g     F .text	000008fc .hidden __subdf3
04006790 g     F .text	000000b0 __lo0bits
04011a3c g     O .rwdata	00000008 alt_alarm_list
0400eb64 g     F .text	00000060 _do_ctors
04009c0c g     F .text	000000c0 wcrtomb
0400d060 g     F .text	000000d0 close
0400d3d8 g     F .text	00000084 alt_load
040003a0 g     F .text	000000b8 print_matrix
04009980 g     F .text	00000080 fputwc
04004a30 g     F .text	00000004 __sinit_lock_acquire
04006504 g     F .text	00000120 __multadd
040064dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00a00014 	movui	r2,32768
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	108d6d04 	addi	r2,r2,13748
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	108d6d04 	addi	r2,r2,13748
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a6e617 	ldw	r2,-25704(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a6e617 	ldw	r2,-25704(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c14034 	movhi	sp,1280
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000260:	d6a67c14 	ori	gp,gp,39408
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000268:	108d5514 	ori	r2,r2,13652

    movhi r3, %hi(__bss_end)
 400026c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000270:	18cdad14 	ori	r3,r3,14004

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	400d3d80 	call	400d3d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	400d56c0 	call	400d56c <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_data_end+0xff00028c>

04000290 <matrix_multiply_part>:
// Shared memory addresses
volatile int *A = (int *) SDRAM_BASE;
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
 4000290:	defff904 	addi	sp,sp,-28
 4000294:	df000615 	stw	fp,24(sp)
 4000298:	df000604 	addi	fp,sp,24
 400029c:	e13ffe15 	stw	r4,-8(fp)
 40002a0:	e17fff15 	stw	r5,-4(fp)
    for (int i = start_row; i < end_row; i++) {
 40002a4:	e0bffe17 	ldw	r2,-8(fp)
 40002a8:	e0bffa15 	stw	r2,-24(fp)
 40002ac:	00003406 	br	4000380 <matrix_multiply_part+0xf0>
        for (int j = 0; j < N; j++) {
 40002b0:	e03ffb15 	stw	zero,-20(fp)
 40002b4:	00002c06 	br	4000368 <matrix_multiply_part+0xd8>
            int sum = 0;
 40002b8:	e03ffc15 	stw	zero,-16(fp)
            for (int k = 0; k < N; k++) {
 40002bc:	e03ffd15 	stw	zero,-12(fp)
 40002c0:	00001906 	br	4000328 <matrix_multiply_part+0x98>
                sum += A[i * N + k] * B[k * N + j];
 40002c4:	d0e00017 	ldw	r3,-32768(gp)
 40002c8:	e0bffa17 	ldw	r2,-24(fp)
 40002cc:	100890fa 	slli	r4,r2,3
 40002d0:	e0bffd17 	ldw	r2,-12(fp)
 40002d4:	2085883a 	add	r2,r4,r2
 40002d8:	1085883a 	add	r2,r2,r2
 40002dc:	1085883a 	add	r2,r2,r2
 40002e0:	1885883a 	add	r2,r3,r2
 40002e4:	10c00017 	ldw	r3,0(r2)
 40002e8:	d1200117 	ldw	r4,-32764(gp)
 40002ec:	e0bffd17 	ldw	r2,-12(fp)
 40002f0:	100a90fa 	slli	r5,r2,3
 40002f4:	e0bffb17 	ldw	r2,-20(fp)
 40002f8:	2885883a 	add	r2,r5,r2
 40002fc:	1085883a 	add	r2,r2,r2
 4000300:	1085883a 	add	r2,r2,r2
 4000304:	2085883a 	add	r2,r4,r2
 4000308:	10800017 	ldw	r2,0(r2)
 400030c:	1885383a 	mul	r2,r3,r2
 4000310:	e0fffc17 	ldw	r3,-16(fp)
 4000314:	1885883a 	add	r2,r3,r2
 4000318:	e0bffc15 	stw	r2,-16(fp)

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < N; j++) {
            int sum = 0;
            for (int k = 0; k < N; k++) {
 400031c:	e0bffd17 	ldw	r2,-12(fp)
 4000320:	10800044 	addi	r2,r2,1
 4000324:	e0bffd15 	stw	r2,-12(fp)
 4000328:	e0bffd17 	ldw	r2,-12(fp)
 400032c:	10800210 	cmplti	r2,r2,8
 4000330:	103fe41e 	bne	r2,zero,40002c4 <__alt_data_end+0xff0002c4>
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;  // Store result in shared memory
 4000334:	d0e00217 	ldw	r3,-32760(gp)
 4000338:	e0bffa17 	ldw	r2,-24(fp)
 400033c:	100890fa 	slli	r4,r2,3
 4000340:	e0bffb17 	ldw	r2,-20(fp)
 4000344:	2085883a 	add	r2,r4,r2
 4000348:	1085883a 	add	r2,r2,r2
 400034c:	1085883a 	add	r2,r2,r2
 4000350:	1885883a 	add	r2,r3,r2
 4000354:	e0fffc17 	ldw	r3,-16(fp)
 4000358:	10c00015 	stw	r3,0(r2)
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
        for (int j = 0; j < N; j++) {
 400035c:	e0bffb17 	ldw	r2,-20(fp)
 4000360:	10800044 	addi	r2,r2,1
 4000364:	e0bffb15 	stw	r2,-20(fp)
 4000368:	e0bffb17 	ldw	r2,-20(fp)
 400036c:	10800210 	cmplti	r2,r2,8
 4000370:	103fd11e 	bne	r2,zero,40002b8 <__alt_data_end+0xff0002b8>
volatile int *A = (int *) SDRAM_BASE;
volatile int *B = (int *) (SDRAM_BASE + N * N * sizeof(int));
volatile int *C = (int *) (SDRAM_BASE + 2 * N * N * sizeof(int));  // C in shared memory

void matrix_multiply_part(int start_row, int end_row) {
    for (int i = start_row; i < end_row; i++) {
 4000374:	e0bffa17 	ldw	r2,-24(fp)
 4000378:	10800044 	addi	r2,r2,1
 400037c:	e0bffa15 	stw	r2,-24(fp)
 4000380:	e0fffa17 	ldw	r3,-24(fp)
 4000384:	e0bfff17 	ldw	r2,-4(fp)
 4000388:	18bfc916 	blt	r3,r2,40002b0 <__alt_data_end+0xff0002b0>
                sum += A[i * N + k] * B[k * N + j];
            }
            C[i * N + j] = sum;  // Store result in shared memory
        }
    }
}
 400038c:	0001883a 	nop
 4000390:	e037883a 	mov	sp,fp
 4000394:	df000017 	ldw	fp,0(sp)
 4000398:	dec00104 	addi	sp,sp,4
 400039c:	f800283a 	ret

040003a0 <print_matrix>:

void print_matrix(int *matrix, int rows, int cols) {
 40003a0:	defff904 	addi	sp,sp,-28
 40003a4:	dfc00615 	stw	ra,24(sp)
 40003a8:	df000515 	stw	fp,20(sp)
 40003ac:	df000504 	addi	fp,sp,20
 40003b0:	e13ffd15 	stw	r4,-12(fp)
 40003b4:	e17ffe15 	stw	r5,-8(fp)
 40003b8:	e1bfff15 	stw	r6,-4(fp)
    for (int i = 0; i < rows; i++) {
 40003bc:	e03ffb15 	stw	zero,-20(fp)
 40003c0:	00001c06 	br	4000434 <print_matrix+0x94>
        for (int j = 0; j < cols; j++) {
 40003c4:	e03ffc15 	stw	zero,-16(fp)
 40003c8:	00001206 	br	4000414 <print_matrix+0x74>
            printf("%d ", matrix[i * cols + j]);
 40003cc:	e0fffb17 	ldw	r3,-20(fp)
 40003d0:	e0bfff17 	ldw	r2,-4(fp)
 40003d4:	1887383a 	mul	r3,r3,r2
 40003d8:	e0bffc17 	ldw	r2,-16(fp)
 40003dc:	1885883a 	add	r2,r3,r2
 40003e0:	1085883a 	add	r2,r2,r2
 40003e4:	1085883a 	add	r2,r2,r2
 40003e8:	1007883a 	mov	r3,r2
 40003ec:	e0bffd17 	ldw	r2,-12(fp)
 40003f0:	10c5883a 	add	r2,r2,r3
 40003f4:	10800017 	ldw	r2,0(r2)
 40003f8:	100b883a 	mov	r5,r2
 40003fc:	01010074 	movhi	r4,1025
 4000400:	213ed404 	addi	r4,r4,-1200
 4000404:	40005ac0 	call	40005ac <printf>
    }
}

void print_matrix(int *matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
 4000408:	e0bffc17 	ldw	r2,-16(fp)
 400040c:	10800044 	addi	r2,r2,1
 4000410:	e0bffc15 	stw	r2,-16(fp)
 4000414:	e0fffc17 	ldw	r3,-16(fp)
 4000418:	e0bfff17 	ldw	r2,-4(fp)
 400041c:	18bfeb16 	blt	r3,r2,40003cc <__alt_data_end+0xff0003cc>
            printf("%d ", matrix[i * cols + j]);
        }
        printf("\n");
 4000420:	01000284 	movi	r4,10
 4000424:	40005f00 	call	40005f0 <putchar>
        }
    }
}

void print_matrix(int *matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
 4000428:	e0bffb17 	ldw	r2,-20(fp)
 400042c:	10800044 	addi	r2,r2,1
 4000430:	e0bffb15 	stw	r2,-20(fp)
 4000434:	e0fffb17 	ldw	r3,-20(fp)
 4000438:	e0bffe17 	ldw	r2,-8(fp)
 400043c:	18bfe116 	blt	r3,r2,40003c4 <__alt_data_end+0xff0003c4>
        for (int j = 0; j < cols; j++) {
            printf("%d ", matrix[i * cols + j]);
        }
        printf("\n");
    }
}
 4000440:	0001883a 	nop
 4000444:	e037883a 	mov	sp,fp
 4000448:	dfc00117 	ldw	ra,4(sp)
 400044c:	df000017 	ldw	fp,0(sp)
 4000450:	dec00204 	addi	sp,sp,8
 4000454:	f800283a 	ret

04000458 <main>:

int main() {
 4000458:	defffc04 	addi	sp,sp,-16
 400045c:	dfc00315 	stw	ra,12(sp)
 4000460:	df000215 	stw	fp,8(sp)
 4000464:	df000204 	addi	fp,sp,8
    // Initialize mutex
    alt_mutex_dev *mutex = altera_avalon_mutex_open(MUTEX_NAME);
 4000468:	01010074 	movhi	r4,1025
 400046c:	213ed504 	addi	r4,r4,-1196
 4000470:	400e6500 	call	400e650 <altera_avalon_mutex_open>
 4000474:	e0bfff15 	stw	r2,-4(fp)

    // Lock mutex to initialize matrices A and B
    altera_avalon_mutex_lock(mutex, 1);
 4000478:	01400044 	movi	r5,1
 400047c:	e13fff17 	ldw	r4,-4(fp)
 4000480:	400e6c80 	call	400e6c8 <altera_avalon_mutex_lock>

    // Initialize matrices A and B with some values
    for (int i = 0; i < N * N; i++) {
 4000484:	e03ffe15 	stw	zero,-8(fp)
 4000488:	00001106 	br	40004d0 <main+0x78>
        A[i] = i;
 400048c:	d0e00017 	ldw	r3,-32768(gp)
 4000490:	e0bffe17 	ldw	r2,-8(fp)
 4000494:	1085883a 	add	r2,r2,r2
 4000498:	1085883a 	add	r2,r2,r2
 400049c:	1885883a 	add	r2,r3,r2
 40004a0:	e0fffe17 	ldw	r3,-8(fp)
 40004a4:	10c00015 	stw	r3,0(r2)
        B[i] = i;
 40004a8:	d0e00117 	ldw	r3,-32764(gp)
 40004ac:	e0bffe17 	ldw	r2,-8(fp)
 40004b0:	1085883a 	add	r2,r2,r2
 40004b4:	1085883a 	add	r2,r2,r2
 40004b8:	1885883a 	add	r2,r3,r2
 40004bc:	e0fffe17 	ldw	r3,-8(fp)
 40004c0:	10c00015 	stw	r3,0(r2)

    // Lock mutex to initialize matrices A and B
    altera_avalon_mutex_lock(mutex, 1);

    // Initialize matrices A and B with some values
    for (int i = 0; i < N * N; i++) {
 40004c4:	e0bffe17 	ldw	r2,-8(fp)
 40004c8:	10800044 	addi	r2,r2,1
 40004cc:	e0bffe15 	stw	r2,-8(fp)
 40004d0:	e0bffe17 	ldw	r2,-8(fp)
 40004d4:	10801010 	cmplti	r2,r2,64
 40004d8:	103fec1e 	bne	r2,zero,400048c <__alt_data_end+0xff00048c>
        A[i] = i;
        B[i] = i;
    }

    // Print matrices A and B
    printf("CPU 0: Matrix A:\n");
 40004dc:	01010074 	movhi	r4,1025
 40004e0:	213ed804 	addi	r4,r4,-1184
 40004e4:	40006c80 	call	40006c8 <puts>
    print_matrix((int *)A, N, N);
 40004e8:	d0a00017 	ldw	r2,-32768(gp)
 40004ec:	01800204 	movi	r6,8
 40004f0:	01400204 	movi	r5,8
 40004f4:	1009883a 	mov	r4,r2
 40004f8:	40003a00 	call	40003a0 <print_matrix>

    printf("CPU 0: Matrix B:\n");
 40004fc:	01010074 	movhi	r4,1025
 4000500:	213edd04 	addi	r4,r4,-1164
 4000504:	40006c80 	call	40006c8 <puts>
    print_matrix((int *)B, N, N);
 4000508:	d0a00117 	ldw	r2,-32764(gp)
 400050c:	01800204 	movi	r6,8
 4000510:	01400204 	movi	r5,8
 4000514:	1009883a 	mov	r4,r2
 4000518:	40003a00 	call	40003a0 <print_matrix>

    // Flush caches to ensure all CPUs see the updated values
    alt_dcache_flush_all();
 400051c:	400d1300 	call	400d130 <alt_dcache_flush_all>

    // Unlock mutex after initialization
    altera_avalon_mutex_unlock(mutex);
 4000520:	e13fff17 	ldw	r4,-4(fp)
 4000524:	400e74c0 	call	400e74c <altera_avalon_mutex_unlock>

    // Wait for switches SW[0], SW[1], SW[2], and SW[3] to be on
    printf("CPU 0: Waiting for switches SW[0], SW[1], SW[2], and SW[3] to be on...\n");
 4000528:	01010074 	movhi	r4,1025
 400052c:	213ee204 	addi	r4,r4,-1144
 4000530:	40006c80 	call	40006c8 <puts>
    while ((IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x0F) != 0x0F);
 4000534:	0001883a 	nop
 4000538:	00820034 	movhi	r2,2048
 400053c:	10840804 	addi	r2,r2,4128
 4000540:	10800037 	ldwio	r2,0(r2)
 4000544:	108003cc 	andi	r2,r2,15
 4000548:	108003d8 	cmpnei	r2,r2,15
 400054c:	103ffa1e 	bne	r2,zero,4000538 <__alt_data_end+0xff000538>

    printf("CPU 0: Switches are on, starting matrix multiplication.\n");
 4000550:	01010074 	movhi	r4,1025
 4000554:	213ef404 	addi	r4,r4,-1072
 4000558:	40006c80 	call	40006c8 <puts>

    // Perform matrix multiplication for the first quarter
    matrix_multiply_part(0, N / 4);
 400055c:	01400084 	movi	r5,2
 4000560:	0009883a 	mov	r4,zero
 4000564:	40002900 	call	4000290 <matrix_multiply_part>

    // Flush caches to ensure other CPUs see the updated values
    alt_dcache_flush_all();
 4000568:	400d1300 	call	400d130 <alt_dcache_flush_all>

    printf("CPU 0: Matrix multiplication complete.\n");
 400056c:	01010074 	movhi	r4,1025
 4000570:	213f0204 	addi	r4,r4,-1016
 4000574:	40006c80 	call	40006c8 <puts>

    while (1);  // Loop forever
 4000578:	003fff06 	br	4000578 <__alt_data_end+0xff000578>

0400057c <_printf_r>:
 400057c:	defffd04 	addi	sp,sp,-12
 4000580:	2805883a 	mov	r2,r5
 4000584:	dfc00015 	stw	ra,0(sp)
 4000588:	d9800115 	stw	r6,4(sp)
 400058c:	d9c00215 	stw	r7,8(sp)
 4000590:	21400217 	ldw	r5,8(r4)
 4000594:	d9c00104 	addi	r7,sp,4
 4000598:	100d883a 	mov	r6,r2
 400059c:	40007740 	call	4000774 <___vfprintf_internal_r>
 40005a0:	dfc00017 	ldw	ra,0(sp)
 40005a4:	dec00304 	addi	sp,sp,12
 40005a8:	f800283a 	ret

040005ac <printf>:
 40005ac:	defffc04 	addi	sp,sp,-16
 40005b0:	dfc00015 	stw	ra,0(sp)
 40005b4:	d9400115 	stw	r5,4(sp)
 40005b8:	d9800215 	stw	r6,8(sp)
 40005bc:	d9c00315 	stw	r7,12(sp)
 40005c0:	00810074 	movhi	r2,1025
 40005c4:	10868004 	addi	r2,r2,6656
 40005c8:	10800017 	ldw	r2,0(r2)
 40005cc:	200b883a 	mov	r5,r4
 40005d0:	d9800104 	addi	r6,sp,4
 40005d4:	11000217 	ldw	r4,8(r2)
 40005d8:	400296c0 	call	400296c <__vfprintf_internal>
 40005dc:	dfc00017 	ldw	ra,0(sp)
 40005e0:	dec00404 	addi	sp,sp,16
 40005e4:	f800283a 	ret

040005e8 <_putchar_r>:
 40005e8:	21800217 	ldw	r6,8(r4)
 40005ec:	40074301 	jmpi	4007430 <_putc_r>

040005f0 <putchar>:
 40005f0:	00810074 	movhi	r2,1025
 40005f4:	10868004 	addi	r2,r2,6656
 40005f8:	200b883a 	mov	r5,r4
 40005fc:	11000017 	ldw	r4,0(r2)
 4000600:	21800217 	ldw	r6,8(r4)
 4000604:	40074301 	jmpi	4007430 <_putc_r>

04000608 <_puts_r>:
 4000608:	defff604 	addi	sp,sp,-40
 400060c:	dc000715 	stw	r16,28(sp)
 4000610:	2021883a 	mov	r16,r4
 4000614:	2809883a 	mov	r4,r5
 4000618:	dc400815 	stw	r17,32(sp)
 400061c:	dfc00915 	stw	ra,36(sp)
 4000620:	2823883a 	mov	r17,r5
 4000624:	40006dc0 	call	40006dc <strlen>
 4000628:	10c00044 	addi	r3,r2,1
 400062c:	d8800115 	stw	r2,4(sp)
 4000630:	00810074 	movhi	r2,1025
 4000634:	10bf0c04 	addi	r2,r2,-976
 4000638:	d8800215 	stw	r2,8(sp)
 400063c:	00800044 	movi	r2,1
 4000640:	d8800315 	stw	r2,12(sp)
 4000644:	00800084 	movi	r2,2
 4000648:	dc400015 	stw	r17,0(sp)
 400064c:	d8c00615 	stw	r3,24(sp)
 4000650:	dec00415 	stw	sp,16(sp)
 4000654:	d8800515 	stw	r2,20(sp)
 4000658:	80000226 	beq	r16,zero,4000664 <_puts_r+0x5c>
 400065c:	80800e17 	ldw	r2,56(r16)
 4000660:	10001426 	beq	r2,zero,40006b4 <_puts_r+0xac>
 4000664:	81400217 	ldw	r5,8(r16)
 4000668:	2880030b 	ldhu	r2,12(r5)
 400066c:	10c8000c 	andi	r3,r2,8192
 4000670:	1800061e 	bne	r3,zero,400068c <_puts_r+0x84>
 4000674:	29001917 	ldw	r4,100(r5)
 4000678:	00f7ffc4 	movi	r3,-8193
 400067c:	10880014 	ori	r2,r2,8192
 4000680:	20c6703a 	and	r3,r4,r3
 4000684:	2880030d 	sth	r2,12(r5)
 4000688:	28c01915 	stw	r3,100(r5)
 400068c:	d9800404 	addi	r6,sp,16
 4000690:	8009883a 	mov	r4,r16
 4000694:	4004e9c0 	call	4004e9c <__sfvwrite_r>
 4000698:	1000091e 	bne	r2,zero,40006c0 <_puts_r+0xb8>
 400069c:	00800284 	movi	r2,10
 40006a0:	dfc00917 	ldw	ra,36(sp)
 40006a4:	dc400817 	ldw	r17,32(sp)
 40006a8:	dc000717 	ldw	r16,28(sp)
 40006ac:	dec00a04 	addi	sp,sp,40
 40006b0:	f800283a 	ret
 40006b4:	8009883a 	mov	r4,r16
 40006b8:	4004a180 	call	4004a18 <__sinit>
 40006bc:	003fe906 	br	4000664 <__alt_data_end+0xff000664>
 40006c0:	00bfffc4 	movi	r2,-1
 40006c4:	003ff606 	br	40006a0 <__alt_data_end+0xff0006a0>

040006c8 <puts>:
 40006c8:	00810074 	movhi	r2,1025
 40006cc:	10868004 	addi	r2,r2,6656
 40006d0:	200b883a 	mov	r5,r4
 40006d4:	11000017 	ldw	r4,0(r2)
 40006d8:	40006081 	jmpi	4000608 <_puts_r>

040006dc <strlen>:
 40006dc:	208000cc 	andi	r2,r4,3
 40006e0:	10002026 	beq	r2,zero,4000764 <strlen+0x88>
 40006e4:	20800007 	ldb	r2,0(r4)
 40006e8:	10002026 	beq	r2,zero,400076c <strlen+0x90>
 40006ec:	2005883a 	mov	r2,r4
 40006f0:	00000206 	br	40006fc <strlen+0x20>
 40006f4:	10c00007 	ldb	r3,0(r2)
 40006f8:	18001826 	beq	r3,zero,400075c <strlen+0x80>
 40006fc:	10800044 	addi	r2,r2,1
 4000700:	10c000cc 	andi	r3,r2,3
 4000704:	183ffb1e 	bne	r3,zero,40006f4 <__alt_data_end+0xff0006f4>
 4000708:	10c00017 	ldw	r3,0(r2)
 400070c:	01ffbff4 	movhi	r7,65279
 4000710:	39ffbfc4 	addi	r7,r7,-257
 4000714:	00ca303a 	nor	r5,zero,r3
 4000718:	01a02074 	movhi	r6,32897
 400071c:	19c7883a 	add	r3,r3,r7
 4000720:	31a02004 	addi	r6,r6,-32640
 4000724:	1946703a 	and	r3,r3,r5
 4000728:	1986703a 	and	r3,r3,r6
 400072c:	1800091e 	bne	r3,zero,4000754 <strlen+0x78>
 4000730:	10800104 	addi	r2,r2,4
 4000734:	10c00017 	ldw	r3,0(r2)
 4000738:	19cb883a 	add	r5,r3,r7
 400073c:	00c6303a 	nor	r3,zero,r3
 4000740:	28c6703a 	and	r3,r5,r3
 4000744:	1986703a 	and	r3,r3,r6
 4000748:	183ff926 	beq	r3,zero,4000730 <__alt_data_end+0xff000730>
 400074c:	00000106 	br	4000754 <strlen+0x78>
 4000750:	10800044 	addi	r2,r2,1
 4000754:	10c00007 	ldb	r3,0(r2)
 4000758:	183ffd1e 	bne	r3,zero,4000750 <__alt_data_end+0xff000750>
 400075c:	1105c83a 	sub	r2,r2,r4
 4000760:	f800283a 	ret
 4000764:	2005883a 	mov	r2,r4
 4000768:	003fe706 	br	4000708 <__alt_data_end+0xff000708>
 400076c:	0005883a 	mov	r2,zero
 4000770:	f800283a 	ret

04000774 <___vfprintf_internal_r>:
 4000774:	deffb804 	addi	sp,sp,-288
 4000778:	dfc04715 	stw	ra,284(sp)
 400077c:	ddc04515 	stw	r23,276(sp)
 4000780:	dd404315 	stw	r21,268(sp)
 4000784:	d9002c15 	stw	r4,176(sp)
 4000788:	282f883a 	mov	r23,r5
 400078c:	302b883a 	mov	r21,r6
 4000790:	d9c02d15 	stw	r7,180(sp)
 4000794:	df004615 	stw	fp,280(sp)
 4000798:	dd804415 	stw	r22,272(sp)
 400079c:	dd004215 	stw	r20,264(sp)
 40007a0:	dcc04115 	stw	r19,260(sp)
 40007a4:	dc804015 	stw	r18,256(sp)
 40007a8:	dc403f15 	stw	r17,252(sp)
 40007ac:	dc003e15 	stw	r16,248(sp)
 40007b0:	400558c0 	call	400558c <_localeconv_r>
 40007b4:	10800017 	ldw	r2,0(r2)
 40007b8:	1009883a 	mov	r4,r2
 40007bc:	d8803415 	stw	r2,208(sp)
 40007c0:	40006dc0 	call	40006dc <strlen>
 40007c4:	d8803715 	stw	r2,220(sp)
 40007c8:	d8802c17 	ldw	r2,176(sp)
 40007cc:	10000226 	beq	r2,zero,40007d8 <___vfprintf_internal_r+0x64>
 40007d0:	10800e17 	ldw	r2,56(r2)
 40007d4:	1000f926 	beq	r2,zero,4000bbc <___vfprintf_internal_r+0x448>
 40007d8:	b880030b 	ldhu	r2,12(r23)
 40007dc:	10c8000c 	andi	r3,r2,8192
 40007e0:	1800061e 	bne	r3,zero,40007fc <___vfprintf_internal_r+0x88>
 40007e4:	b9001917 	ldw	r4,100(r23)
 40007e8:	00f7ffc4 	movi	r3,-8193
 40007ec:	10880014 	ori	r2,r2,8192
 40007f0:	20c6703a 	and	r3,r4,r3
 40007f4:	b880030d 	sth	r2,12(r23)
 40007f8:	b8c01915 	stw	r3,100(r23)
 40007fc:	10c0020c 	andi	r3,r2,8
 4000800:	1800c126 	beq	r3,zero,4000b08 <___vfprintf_internal_r+0x394>
 4000804:	b8c00417 	ldw	r3,16(r23)
 4000808:	1800bf26 	beq	r3,zero,4000b08 <___vfprintf_internal_r+0x394>
 400080c:	1080068c 	andi	r2,r2,26
 4000810:	00c00284 	movi	r3,10
 4000814:	10c0c426 	beq	r2,r3,4000b28 <___vfprintf_internal_r+0x3b4>
 4000818:	d8c00404 	addi	r3,sp,16
 400081c:	05010074 	movhi	r20,1025
 4000820:	d9001e04 	addi	r4,sp,120
 4000824:	a53f1d84 	addi	r20,r20,-906
 4000828:	d8c01e15 	stw	r3,120(sp)
 400082c:	d8002015 	stw	zero,128(sp)
 4000830:	d8001f15 	stw	zero,124(sp)
 4000834:	d8003315 	stw	zero,204(sp)
 4000838:	d8003615 	stw	zero,216(sp)
 400083c:	d8003815 	stw	zero,224(sp)
 4000840:	1811883a 	mov	r8,r3
 4000844:	d8003915 	stw	zero,228(sp)
 4000848:	d8003a15 	stw	zero,232(sp)
 400084c:	d8002f15 	stw	zero,188(sp)
 4000850:	d9002815 	stw	r4,160(sp)
 4000854:	a8800007 	ldb	r2,0(r21)
 4000858:	10027b26 	beq	r2,zero,4001248 <___vfprintf_internal_r+0xad4>
 400085c:	00c00944 	movi	r3,37
 4000860:	a821883a 	mov	r16,r21
 4000864:	10c0021e 	bne	r2,r3,4000870 <___vfprintf_internal_r+0xfc>
 4000868:	00001406 	br	40008bc <___vfprintf_internal_r+0x148>
 400086c:	10c00326 	beq	r2,r3,400087c <___vfprintf_internal_r+0x108>
 4000870:	84000044 	addi	r16,r16,1
 4000874:	80800007 	ldb	r2,0(r16)
 4000878:	103ffc1e 	bne	r2,zero,400086c <__alt_data_end+0xff00086c>
 400087c:	8563c83a 	sub	r17,r16,r21
 4000880:	88000e26 	beq	r17,zero,40008bc <___vfprintf_internal_r+0x148>
 4000884:	d8c02017 	ldw	r3,128(sp)
 4000888:	d8801f17 	ldw	r2,124(sp)
 400088c:	45400015 	stw	r21,0(r8)
 4000890:	1c47883a 	add	r3,r3,r17
 4000894:	10800044 	addi	r2,r2,1
 4000898:	d8c02015 	stw	r3,128(sp)
 400089c:	44400115 	stw	r17,4(r8)
 40008a0:	d8801f15 	stw	r2,124(sp)
 40008a4:	00c001c4 	movi	r3,7
 40008a8:	1880a716 	blt	r3,r2,4000b48 <___vfprintf_internal_r+0x3d4>
 40008ac:	42000204 	addi	r8,r8,8
 40008b0:	d9402f17 	ldw	r5,188(sp)
 40008b4:	2c4b883a 	add	r5,r5,r17
 40008b8:	d9402f15 	stw	r5,188(sp)
 40008bc:	80800007 	ldb	r2,0(r16)
 40008c0:	1000a826 	beq	r2,zero,4000b64 <___vfprintf_internal_r+0x3f0>
 40008c4:	84400047 	ldb	r17,1(r16)
 40008c8:	00bfffc4 	movi	r2,-1
 40008cc:	85400044 	addi	r21,r16,1
 40008d0:	d8002785 	stb	zero,158(sp)
 40008d4:	0007883a 	mov	r3,zero
 40008d8:	000f883a 	mov	r7,zero
 40008dc:	d8802915 	stw	r2,164(sp)
 40008e0:	d8003115 	stw	zero,196(sp)
 40008e4:	0025883a 	mov	r18,zero
 40008e8:	01401604 	movi	r5,88
 40008ec:	01800244 	movi	r6,9
 40008f0:	02800a84 	movi	r10,42
 40008f4:	02401b04 	movi	r9,108
 40008f8:	ad400044 	addi	r21,r21,1
 40008fc:	88bff804 	addi	r2,r17,-32
 4000900:	28830436 	bltu	r5,r2,4001514 <___vfprintf_internal_r+0xda0>
 4000904:	100490ba 	slli	r2,r2,2
 4000908:	01010034 	movhi	r4,1024
 400090c:	21024704 	addi	r4,r4,2332
 4000910:	1105883a 	add	r2,r2,r4
 4000914:	10800017 	ldw	r2,0(r2)
 4000918:	1000683a 	jmp	r2
 400091c:	04001434 	movhi	r16,80
 4000920:	04001514 	movui	r16,84
 4000924:	04001514 	movui	r16,84
 4000928:	04001454 	movui	r16,81
 400092c:	04001514 	movui	r16,84
 4000930:	04001514 	movui	r16,84
 4000934:	04001514 	movui	r16,84
 4000938:	04001514 	movui	r16,84
 400093c:	04001514 	movui	r16,84
 4000940:	04001514 	movui	r16,84
 4000944:	04000bc8 	cmpgei	r16,zero,47
 4000948:	04001370 	cmpltui	r16,zero,77
 400094c:	04001514 	movui	r16,84
 4000950:	04000a90 	cmplti	r16,zero,42
 4000954:	04000bf0 	cmpltui	r16,zero,47
 4000958:	04001514 	movui	r16,84
 400095c:	04000c30 	cmpltui	r16,zero,48
 4000960:	04000c3c 	xorhi	r16,zero,48
 4000964:	04000c3c 	xorhi	r16,zero,48
 4000968:	04000c3c 	xorhi	r16,zero,48
 400096c:	04000c3c 	xorhi	r16,zero,48
 4000970:	04000c3c 	xorhi	r16,zero,48
 4000974:	04000c3c 	xorhi	r16,zero,48
 4000978:	04000c3c 	xorhi	r16,zero,48
 400097c:	04000c3c 	xorhi	r16,zero,48
 4000980:	04000c3c 	xorhi	r16,zero,48
 4000984:	04001514 	movui	r16,84
 4000988:	04001514 	movui	r16,84
 400098c:	04001514 	movui	r16,84
 4000990:	04001514 	movui	r16,84
 4000994:	04001514 	movui	r16,84
 4000998:	04001514 	movui	r16,84
 400099c:	04001514 	movui	r16,84
 40009a0:	04001514 	movui	r16,84
 40009a4:	04001514 	movui	r16,84
 40009a8:	04001514 	movui	r16,84
 40009ac:	04000c70 	cmpltui	r16,zero,49
 40009b0:	04000d2c 	andhi	r16,zero,52
 40009b4:	04001514 	movui	r16,84
 40009b8:	04000d2c 	andhi	r16,zero,52
 40009bc:	04001514 	movui	r16,84
 40009c0:	04001514 	movui	r16,84
 40009c4:	04001514 	movui	r16,84
 40009c8:	04001514 	movui	r16,84
 40009cc:	04000dcc 	andi	r16,zero,55
 40009d0:	04001514 	movui	r16,84
 40009d4:	04001514 	movui	r16,84
 40009d8:	04000dd8 	cmpnei	r16,zero,55
 40009dc:	04001514 	movui	r16,84
 40009e0:	04001514 	movui	r16,84
 40009e4:	04001514 	movui	r16,84
 40009e8:	04001514 	movui	r16,84
 40009ec:	04001514 	movui	r16,84
 40009f0:	04001250 	cmplti	r16,zero,73
 40009f4:	04001514 	movui	r16,84
 40009f8:	04001514 	movui	r16,84
 40009fc:	040012b0 	cmpltui	r16,zero,74
 4000a00:	04001514 	movui	r16,84
 4000a04:	04001514 	movui	r16,84
 4000a08:	04001514 	movui	r16,84
 4000a0c:	04001514 	movui	r16,84
 4000a10:	04001514 	movui	r16,84
 4000a14:	04001514 	movui	r16,84
 4000a18:	04001514 	movui	r16,84
 4000a1c:	04001514 	movui	r16,84
 4000a20:	04001514 	movui	r16,84
 4000a24:	04001514 	movui	r16,84
 4000a28:	040014c0 	call	40014c <__alt_mem_sdram-0x3bffeb4>
 4000a2c:	04001460 	cmpeqi	r16,zero,81
 4000a30:	04000d2c 	andhi	r16,zero,52
 4000a34:	04000d2c 	andhi	r16,zero,52
 4000a38:	04000d2c 	andhi	r16,zero,52
 4000a3c:	04001470 	cmpltui	r16,zero,81
 4000a40:	04001460 	cmpeqi	r16,zero,81
 4000a44:	04001514 	movui	r16,84
 4000a48:	04001514 	movui	r16,84
 4000a4c:	0400147c 	xorhi	r16,zero,81
 4000a50:	04001514 	movui	r16,84
 4000a54:	0400148c 	andi	r16,zero,82
 4000a58:	04001360 	cmpeqi	r16,zero,77
 4000a5c:	04000a9c 	xori	r16,zero,42
 4000a60:	04001380 	call	400138 <__alt_mem_sdram-0x3bffec8>
 4000a64:	04001514 	movui	r16,84
 4000a68:	0400138c 	andi	r16,zero,78
 4000a6c:	04001514 	movui	r16,84
 4000a70:	040013e8 	cmpgeui	r16,zero,79
 4000a74:	04001514 	movui	r16,84
 4000a78:	04001514 	movui	r16,84
 4000a7c:	040013f8 	rdprs	r16,zero,79
 4000a80:	d9003117 	ldw	r4,196(sp)
 4000a84:	d8802d15 	stw	r2,180(sp)
 4000a88:	0109c83a 	sub	r4,zero,r4
 4000a8c:	d9003115 	stw	r4,196(sp)
 4000a90:	94800114 	ori	r18,r18,4
 4000a94:	ac400007 	ldb	r17,0(r21)
 4000a98:	003f9706 	br	40008f8 <__alt_data_end+0xff0008f8>
 4000a9c:	00800c04 	movi	r2,48
 4000aa0:	d9002d17 	ldw	r4,180(sp)
 4000aa4:	d9402917 	ldw	r5,164(sp)
 4000aa8:	d8802705 	stb	r2,156(sp)
 4000aac:	00801e04 	movi	r2,120
 4000ab0:	d8802745 	stb	r2,157(sp)
 4000ab4:	d8002785 	stb	zero,158(sp)
 4000ab8:	20c00104 	addi	r3,r4,4
 4000abc:	24c00017 	ldw	r19,0(r4)
 4000ac0:	002d883a 	mov	r22,zero
 4000ac4:	90800094 	ori	r2,r18,2
 4000ac8:	28029a16 	blt	r5,zero,4001534 <___vfprintf_internal_r+0xdc0>
 4000acc:	00bfdfc4 	movi	r2,-129
 4000ad0:	90a4703a 	and	r18,r18,r2
 4000ad4:	d8c02d15 	stw	r3,180(sp)
 4000ad8:	94800094 	ori	r18,r18,2
 4000adc:	9802871e 	bne	r19,zero,40014fc <___vfprintf_internal_r+0xd88>
 4000ae0:	00810074 	movhi	r2,1025
 4000ae4:	10bf1604 	addi	r2,r2,-936
 4000ae8:	d8803915 	stw	r2,228(sp)
 4000aec:	04401e04 	movi	r17,120
 4000af0:	d8802917 	ldw	r2,164(sp)
 4000af4:	0039883a 	mov	fp,zero
 4000af8:	1001e926 	beq	r2,zero,40012a0 <___vfprintf_internal_r+0xb2c>
 4000afc:	0027883a 	mov	r19,zero
 4000b00:	002d883a 	mov	r22,zero
 4000b04:	00020506 	br	400131c <___vfprintf_internal_r+0xba8>
 4000b08:	d9002c17 	ldw	r4,176(sp)
 4000b0c:	b80b883a 	mov	r5,r23
 4000b10:	4002a440 	call	4002a44 <__swsetup_r>
 4000b14:	1005ac1e 	bne	r2,zero,40021c8 <___vfprintf_internal_r+0x1a54>
 4000b18:	b880030b 	ldhu	r2,12(r23)
 4000b1c:	00c00284 	movi	r3,10
 4000b20:	1080068c 	andi	r2,r2,26
 4000b24:	10ff3c1e 	bne	r2,r3,4000818 <__alt_data_end+0xff000818>
 4000b28:	b880038f 	ldh	r2,14(r23)
 4000b2c:	103f3a16 	blt	r2,zero,4000818 <__alt_data_end+0xff000818>
 4000b30:	d9c02d17 	ldw	r7,180(sp)
 4000b34:	d9002c17 	ldw	r4,176(sp)
 4000b38:	a80d883a 	mov	r6,r21
 4000b3c:	b80b883a 	mov	r5,r23
 4000b40:	40029880 	call	4002988 <__sbprintf>
 4000b44:	00001106 	br	4000b8c <___vfprintf_internal_r+0x418>
 4000b48:	d9002c17 	ldw	r4,176(sp)
 4000b4c:	d9801e04 	addi	r6,sp,120
 4000b50:	b80b883a 	mov	r5,r23
 4000b54:	4007ed80 	call	4007ed8 <__sprint_r>
 4000b58:	1000081e 	bne	r2,zero,4000b7c <___vfprintf_internal_r+0x408>
 4000b5c:	da000404 	addi	r8,sp,16
 4000b60:	003f5306 	br	40008b0 <__alt_data_end+0xff0008b0>
 4000b64:	d8802017 	ldw	r2,128(sp)
 4000b68:	10000426 	beq	r2,zero,4000b7c <___vfprintf_internal_r+0x408>
 4000b6c:	d9002c17 	ldw	r4,176(sp)
 4000b70:	d9801e04 	addi	r6,sp,120
 4000b74:	b80b883a 	mov	r5,r23
 4000b78:	4007ed80 	call	4007ed8 <__sprint_r>
 4000b7c:	b880030b 	ldhu	r2,12(r23)
 4000b80:	1080100c 	andi	r2,r2,64
 4000b84:	1005901e 	bne	r2,zero,40021c8 <___vfprintf_internal_r+0x1a54>
 4000b88:	d8802f17 	ldw	r2,188(sp)
 4000b8c:	dfc04717 	ldw	ra,284(sp)
 4000b90:	df004617 	ldw	fp,280(sp)
 4000b94:	ddc04517 	ldw	r23,276(sp)
 4000b98:	dd804417 	ldw	r22,272(sp)
 4000b9c:	dd404317 	ldw	r21,268(sp)
 4000ba0:	dd004217 	ldw	r20,264(sp)
 4000ba4:	dcc04117 	ldw	r19,260(sp)
 4000ba8:	dc804017 	ldw	r18,256(sp)
 4000bac:	dc403f17 	ldw	r17,252(sp)
 4000bb0:	dc003e17 	ldw	r16,248(sp)
 4000bb4:	dec04804 	addi	sp,sp,288
 4000bb8:	f800283a 	ret
 4000bbc:	d9002c17 	ldw	r4,176(sp)
 4000bc0:	4004a180 	call	4004a18 <__sinit>
 4000bc4:	003f0406 	br	40007d8 <__alt_data_end+0xff0007d8>
 4000bc8:	d8802d17 	ldw	r2,180(sp)
 4000bcc:	d9002d17 	ldw	r4,180(sp)
 4000bd0:	10800017 	ldw	r2,0(r2)
 4000bd4:	d8803115 	stw	r2,196(sp)
 4000bd8:	20800104 	addi	r2,r4,4
 4000bdc:	d9003117 	ldw	r4,196(sp)
 4000be0:	203fa716 	blt	r4,zero,4000a80 <__alt_data_end+0xff000a80>
 4000be4:	d8802d15 	stw	r2,180(sp)
 4000be8:	ac400007 	ldb	r17,0(r21)
 4000bec:	003f4206 	br	40008f8 <__alt_data_end+0xff0008f8>
 4000bf0:	ac400007 	ldb	r17,0(r21)
 4000bf4:	aac00044 	addi	r11,r21,1
 4000bf8:	8a872826 	beq	r17,r10,400289c <___vfprintf_internal_r+0x2128>
 4000bfc:	88bff404 	addi	r2,r17,-48
 4000c00:	0009883a 	mov	r4,zero
 4000c04:	30867d36 	bltu	r6,r2,40025fc <___vfprintf_internal_r+0x1e88>
 4000c08:	5c400007 	ldb	r17,0(r11)
 4000c0c:	210002a4 	muli	r4,r4,10
 4000c10:	5d400044 	addi	r21,r11,1
 4000c14:	a817883a 	mov	r11,r21
 4000c18:	2089883a 	add	r4,r4,r2
 4000c1c:	88bff404 	addi	r2,r17,-48
 4000c20:	30bff92e 	bgeu	r6,r2,4000c08 <__alt_data_end+0xff000c08>
 4000c24:	2005c916 	blt	r4,zero,400234c <___vfprintf_internal_r+0x1bd8>
 4000c28:	d9002915 	stw	r4,164(sp)
 4000c2c:	003f3306 	br	40008fc <__alt_data_end+0xff0008fc>
 4000c30:	94802014 	ori	r18,r18,128
 4000c34:	ac400007 	ldb	r17,0(r21)
 4000c38:	003f2f06 	br	40008f8 <__alt_data_end+0xff0008f8>
 4000c3c:	a809883a 	mov	r4,r21
 4000c40:	d8003115 	stw	zero,196(sp)
 4000c44:	88bff404 	addi	r2,r17,-48
 4000c48:	0017883a 	mov	r11,zero
 4000c4c:	24400007 	ldb	r17,0(r4)
 4000c50:	5ac002a4 	muli	r11,r11,10
 4000c54:	ad400044 	addi	r21,r21,1
 4000c58:	a809883a 	mov	r4,r21
 4000c5c:	12d7883a 	add	r11,r2,r11
 4000c60:	88bff404 	addi	r2,r17,-48
 4000c64:	30bff92e 	bgeu	r6,r2,4000c4c <__alt_data_end+0xff000c4c>
 4000c68:	dac03115 	stw	r11,196(sp)
 4000c6c:	003f2306 	br	40008fc <__alt_data_end+0xff0008fc>
 4000c70:	18c03fcc 	andi	r3,r3,255
 4000c74:	18072b1e 	bne	r3,zero,4002924 <___vfprintf_internal_r+0x21b0>
 4000c78:	94800414 	ori	r18,r18,16
 4000c7c:	9080080c 	andi	r2,r18,32
 4000c80:	10037b26 	beq	r2,zero,4001a70 <___vfprintf_internal_r+0x12fc>
 4000c84:	d9402d17 	ldw	r5,180(sp)
 4000c88:	28800117 	ldw	r2,4(r5)
 4000c8c:	2cc00017 	ldw	r19,0(r5)
 4000c90:	29400204 	addi	r5,r5,8
 4000c94:	d9402d15 	stw	r5,180(sp)
 4000c98:	102d883a 	mov	r22,r2
 4000c9c:	10044b16 	blt	r2,zero,4001dcc <___vfprintf_internal_r+0x1658>
 4000ca0:	d9402917 	ldw	r5,164(sp)
 4000ca4:	df002783 	ldbu	fp,158(sp)
 4000ca8:	2803bc16 	blt	r5,zero,4001b9c <___vfprintf_internal_r+0x1428>
 4000cac:	00ffdfc4 	movi	r3,-129
 4000cb0:	9d84b03a 	or	r2,r19,r22
 4000cb4:	90e4703a 	and	r18,r18,r3
 4000cb8:	10017726 	beq	r2,zero,4001298 <___vfprintf_internal_r+0xb24>
 4000cbc:	b0038326 	beq	r22,zero,4001acc <___vfprintf_internal_r+0x1358>
 4000cc0:	dc402a15 	stw	r17,168(sp)
 4000cc4:	dc001e04 	addi	r16,sp,120
 4000cc8:	b023883a 	mov	r17,r22
 4000ccc:	402d883a 	mov	r22,r8
 4000cd0:	9809883a 	mov	r4,r19
 4000cd4:	880b883a 	mov	r5,r17
 4000cd8:	01800284 	movi	r6,10
 4000cdc:	000f883a 	mov	r7,zero
 4000ce0:	400a2d00 	call	400a2d0 <__umoddi3>
 4000ce4:	10800c04 	addi	r2,r2,48
 4000ce8:	843fffc4 	addi	r16,r16,-1
 4000cec:	9809883a 	mov	r4,r19
 4000cf0:	880b883a 	mov	r5,r17
 4000cf4:	80800005 	stb	r2,0(r16)
 4000cf8:	01800284 	movi	r6,10
 4000cfc:	000f883a 	mov	r7,zero
 4000d00:	4009d580 	call	4009d58 <__udivdi3>
 4000d04:	1027883a 	mov	r19,r2
 4000d08:	10c4b03a 	or	r2,r2,r3
 4000d0c:	1823883a 	mov	r17,r3
 4000d10:	103fef1e 	bne	r2,zero,4000cd0 <__alt_data_end+0xff000cd0>
 4000d14:	d8c02817 	ldw	r3,160(sp)
 4000d18:	dc402a17 	ldw	r17,168(sp)
 4000d1c:	b011883a 	mov	r8,r22
 4000d20:	1c07c83a 	sub	r3,r3,r16
 4000d24:	d8c02e15 	stw	r3,184(sp)
 4000d28:	00005906 	br	4000e90 <___vfprintf_internal_r+0x71c>
 4000d2c:	18c03fcc 	andi	r3,r3,255
 4000d30:	1806fa1e 	bne	r3,zero,400291c <___vfprintf_internal_r+0x21a8>
 4000d34:	9080020c 	andi	r2,r18,8
 4000d38:	10048a26 	beq	r2,zero,4001f64 <___vfprintf_internal_r+0x17f0>
 4000d3c:	d8c02d17 	ldw	r3,180(sp)
 4000d40:	d9002d17 	ldw	r4,180(sp)
 4000d44:	d9402d17 	ldw	r5,180(sp)
 4000d48:	18c00017 	ldw	r3,0(r3)
 4000d4c:	21000117 	ldw	r4,4(r4)
 4000d50:	29400204 	addi	r5,r5,8
 4000d54:	d8c03615 	stw	r3,216(sp)
 4000d58:	d9003815 	stw	r4,224(sp)
 4000d5c:	d9402d15 	stw	r5,180(sp)
 4000d60:	d9003617 	ldw	r4,216(sp)
 4000d64:	d9403817 	ldw	r5,224(sp)
 4000d68:	da003d15 	stw	r8,244(sp)
 4000d6c:	04000044 	movi	r16,1
 4000d70:	4007afc0 	call	4007afc <__fpclassifyd>
 4000d74:	da003d17 	ldw	r8,244(sp)
 4000d78:	14041f1e 	bne	r2,r16,4001df8 <___vfprintf_internal_r+0x1684>
 4000d7c:	d9003617 	ldw	r4,216(sp)
 4000d80:	d9403817 	ldw	r5,224(sp)
 4000d84:	000d883a 	mov	r6,zero
 4000d88:	000f883a 	mov	r7,zero
 4000d8c:	400bcb40 	call	400bcb4 <__ledf2>
 4000d90:	da003d17 	ldw	r8,244(sp)
 4000d94:	1005be16 	blt	r2,zero,4002490 <___vfprintf_internal_r+0x1d1c>
 4000d98:	df002783 	ldbu	fp,158(sp)
 4000d9c:	008011c4 	movi	r2,71
 4000da0:	1445330e 	bge	r2,r17,4002270 <___vfprintf_internal_r+0x1afc>
 4000da4:	04010074 	movhi	r16,1025
 4000da8:	843f0e04 	addi	r16,r16,-968
 4000dac:	00c000c4 	movi	r3,3
 4000db0:	00bfdfc4 	movi	r2,-129
 4000db4:	d8c02a15 	stw	r3,168(sp)
 4000db8:	90a4703a 	and	r18,r18,r2
 4000dbc:	d8c02e15 	stw	r3,184(sp)
 4000dc0:	d8002915 	stw	zero,164(sp)
 4000dc4:	d8003215 	stw	zero,200(sp)
 4000dc8:	00003706 	br	4000ea8 <___vfprintf_internal_r+0x734>
 4000dcc:	94800214 	ori	r18,r18,8
 4000dd0:	ac400007 	ldb	r17,0(r21)
 4000dd4:	003ec806 	br	40008f8 <__alt_data_end+0xff0008f8>
 4000dd8:	18c03fcc 	andi	r3,r3,255
 4000ddc:	1806db1e 	bne	r3,zero,400294c <___vfprintf_internal_r+0x21d8>
 4000de0:	94800414 	ori	r18,r18,16
 4000de4:	9080080c 	andi	r2,r18,32
 4000de8:	1002d826 	beq	r2,zero,400194c <___vfprintf_internal_r+0x11d8>
 4000dec:	d9402d17 	ldw	r5,180(sp)
 4000df0:	d8c02917 	ldw	r3,164(sp)
 4000df4:	d8002785 	stb	zero,158(sp)
 4000df8:	28800204 	addi	r2,r5,8
 4000dfc:	2cc00017 	ldw	r19,0(r5)
 4000e00:	2d800117 	ldw	r22,4(r5)
 4000e04:	18048f16 	blt	r3,zero,4002044 <___vfprintf_internal_r+0x18d0>
 4000e08:	013fdfc4 	movi	r4,-129
 4000e0c:	9d86b03a 	or	r3,r19,r22
 4000e10:	d8802d15 	stw	r2,180(sp)
 4000e14:	9124703a 	and	r18,r18,r4
 4000e18:	1802d91e 	bne	r3,zero,4001980 <___vfprintf_internal_r+0x120c>
 4000e1c:	d8c02917 	ldw	r3,164(sp)
 4000e20:	0039883a 	mov	fp,zero
 4000e24:	1805c326 	beq	r3,zero,4002534 <___vfprintf_internal_r+0x1dc0>
 4000e28:	0027883a 	mov	r19,zero
 4000e2c:	002d883a 	mov	r22,zero
 4000e30:	dc001e04 	addi	r16,sp,120
 4000e34:	9806d0fa 	srli	r3,r19,3
 4000e38:	b008977a 	slli	r4,r22,29
 4000e3c:	b02cd0fa 	srli	r22,r22,3
 4000e40:	9cc001cc 	andi	r19,r19,7
 4000e44:	98800c04 	addi	r2,r19,48
 4000e48:	843fffc4 	addi	r16,r16,-1
 4000e4c:	20e6b03a 	or	r19,r4,r3
 4000e50:	80800005 	stb	r2,0(r16)
 4000e54:	9d86b03a 	or	r3,r19,r22
 4000e58:	183ff61e 	bne	r3,zero,4000e34 <__alt_data_end+0xff000e34>
 4000e5c:	90c0004c 	andi	r3,r18,1
 4000e60:	18013b26 	beq	r3,zero,4001350 <___vfprintf_internal_r+0xbdc>
 4000e64:	10803fcc 	andi	r2,r2,255
 4000e68:	1080201c 	xori	r2,r2,128
 4000e6c:	10bfe004 	addi	r2,r2,-128
 4000e70:	00c00c04 	movi	r3,48
 4000e74:	10c13626 	beq	r2,r3,4001350 <___vfprintf_internal_r+0xbdc>
 4000e78:	80ffffc5 	stb	r3,-1(r16)
 4000e7c:	d8c02817 	ldw	r3,160(sp)
 4000e80:	80bfffc4 	addi	r2,r16,-1
 4000e84:	1021883a 	mov	r16,r2
 4000e88:	1887c83a 	sub	r3,r3,r2
 4000e8c:	d8c02e15 	stw	r3,184(sp)
 4000e90:	d8802e17 	ldw	r2,184(sp)
 4000e94:	d9002917 	ldw	r4,164(sp)
 4000e98:	1100010e 	bge	r2,r4,4000ea0 <___vfprintf_internal_r+0x72c>
 4000e9c:	2005883a 	mov	r2,r4
 4000ea0:	d8802a15 	stw	r2,168(sp)
 4000ea4:	d8003215 	stw	zero,200(sp)
 4000ea8:	e7003fcc 	andi	fp,fp,255
 4000eac:	e700201c 	xori	fp,fp,128
 4000eb0:	e73fe004 	addi	fp,fp,-128
 4000eb4:	e0000326 	beq	fp,zero,4000ec4 <___vfprintf_internal_r+0x750>
 4000eb8:	d8c02a17 	ldw	r3,168(sp)
 4000ebc:	18c00044 	addi	r3,r3,1
 4000ec0:	d8c02a15 	stw	r3,168(sp)
 4000ec4:	90c0008c 	andi	r3,r18,2
 4000ec8:	d8c02b15 	stw	r3,172(sp)
 4000ecc:	18000326 	beq	r3,zero,4000edc <___vfprintf_internal_r+0x768>
 4000ed0:	d8c02a17 	ldw	r3,168(sp)
 4000ed4:	18c00084 	addi	r3,r3,2
 4000ed8:	d8c02a15 	stw	r3,168(sp)
 4000edc:	90c0210c 	andi	r3,r18,132
 4000ee0:	d8c03015 	stw	r3,192(sp)
 4000ee4:	1801a31e 	bne	r3,zero,4001574 <___vfprintf_internal_r+0xe00>
 4000ee8:	d9003117 	ldw	r4,196(sp)
 4000eec:	d8c02a17 	ldw	r3,168(sp)
 4000ef0:	20e7c83a 	sub	r19,r4,r3
 4000ef4:	04c19f0e 	bge	zero,r19,4001574 <___vfprintf_internal_r+0xe00>
 4000ef8:	02400404 	movi	r9,16
 4000efc:	d8c02017 	ldw	r3,128(sp)
 4000f00:	d8801f17 	ldw	r2,124(sp)
 4000f04:	4cc50d0e 	bge	r9,r19,400233c <___vfprintf_internal_r+0x1bc8>
 4000f08:	01410074 	movhi	r5,1025
 4000f0c:	297f2184 	addi	r5,r5,-890
 4000f10:	dc403b15 	stw	r17,236(sp)
 4000f14:	d9403515 	stw	r5,212(sp)
 4000f18:	9823883a 	mov	r17,r19
 4000f1c:	482d883a 	mov	r22,r9
 4000f20:	9027883a 	mov	r19,r18
 4000f24:	070001c4 	movi	fp,7
 4000f28:	8025883a 	mov	r18,r16
 4000f2c:	dc002c17 	ldw	r16,176(sp)
 4000f30:	00000306 	br	4000f40 <___vfprintf_internal_r+0x7cc>
 4000f34:	8c7ffc04 	addi	r17,r17,-16
 4000f38:	42000204 	addi	r8,r8,8
 4000f3c:	b440130e 	bge	r22,r17,4000f8c <___vfprintf_internal_r+0x818>
 4000f40:	01010074 	movhi	r4,1025
 4000f44:	18c00404 	addi	r3,r3,16
 4000f48:	10800044 	addi	r2,r2,1
 4000f4c:	213f2184 	addi	r4,r4,-890
 4000f50:	41000015 	stw	r4,0(r8)
 4000f54:	45800115 	stw	r22,4(r8)
 4000f58:	d8c02015 	stw	r3,128(sp)
 4000f5c:	d8801f15 	stw	r2,124(sp)
 4000f60:	e0bff40e 	bge	fp,r2,4000f34 <__alt_data_end+0xff000f34>
 4000f64:	d9801e04 	addi	r6,sp,120
 4000f68:	b80b883a 	mov	r5,r23
 4000f6c:	8009883a 	mov	r4,r16
 4000f70:	4007ed80 	call	4007ed8 <__sprint_r>
 4000f74:	103f011e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4000f78:	8c7ffc04 	addi	r17,r17,-16
 4000f7c:	d8c02017 	ldw	r3,128(sp)
 4000f80:	d8801f17 	ldw	r2,124(sp)
 4000f84:	da000404 	addi	r8,sp,16
 4000f88:	b47fed16 	blt	r22,r17,4000f40 <__alt_data_end+0xff000f40>
 4000f8c:	9021883a 	mov	r16,r18
 4000f90:	9825883a 	mov	r18,r19
 4000f94:	8827883a 	mov	r19,r17
 4000f98:	dc403b17 	ldw	r17,236(sp)
 4000f9c:	d9403517 	ldw	r5,212(sp)
 4000fa0:	98c7883a 	add	r3,r19,r3
 4000fa4:	10800044 	addi	r2,r2,1
 4000fa8:	41400015 	stw	r5,0(r8)
 4000fac:	44c00115 	stw	r19,4(r8)
 4000fb0:	d8c02015 	stw	r3,128(sp)
 4000fb4:	d8801f15 	stw	r2,124(sp)
 4000fb8:	010001c4 	movi	r4,7
 4000fbc:	2082a316 	blt	r4,r2,4001a4c <___vfprintf_internal_r+0x12d8>
 4000fc0:	df002787 	ldb	fp,158(sp)
 4000fc4:	42000204 	addi	r8,r8,8
 4000fc8:	e0000c26 	beq	fp,zero,4000ffc <___vfprintf_internal_r+0x888>
 4000fcc:	d8801f17 	ldw	r2,124(sp)
 4000fd0:	d9002784 	addi	r4,sp,158
 4000fd4:	18c00044 	addi	r3,r3,1
 4000fd8:	10800044 	addi	r2,r2,1
 4000fdc:	41000015 	stw	r4,0(r8)
 4000fe0:	01000044 	movi	r4,1
 4000fe4:	41000115 	stw	r4,4(r8)
 4000fe8:	d8c02015 	stw	r3,128(sp)
 4000fec:	d8801f15 	stw	r2,124(sp)
 4000ff0:	010001c4 	movi	r4,7
 4000ff4:	20823c16 	blt	r4,r2,40018e8 <___vfprintf_internal_r+0x1174>
 4000ff8:	42000204 	addi	r8,r8,8
 4000ffc:	d8802b17 	ldw	r2,172(sp)
 4001000:	10000c26 	beq	r2,zero,4001034 <___vfprintf_internal_r+0x8c0>
 4001004:	d8801f17 	ldw	r2,124(sp)
 4001008:	d9002704 	addi	r4,sp,156
 400100c:	18c00084 	addi	r3,r3,2
 4001010:	10800044 	addi	r2,r2,1
 4001014:	41000015 	stw	r4,0(r8)
 4001018:	01000084 	movi	r4,2
 400101c:	41000115 	stw	r4,4(r8)
 4001020:	d8c02015 	stw	r3,128(sp)
 4001024:	d8801f15 	stw	r2,124(sp)
 4001028:	010001c4 	movi	r4,7
 400102c:	20823616 	blt	r4,r2,4001908 <___vfprintf_internal_r+0x1194>
 4001030:	42000204 	addi	r8,r8,8
 4001034:	d9003017 	ldw	r4,192(sp)
 4001038:	00802004 	movi	r2,128
 400103c:	20819926 	beq	r4,r2,40016a4 <___vfprintf_internal_r+0xf30>
 4001040:	d9402917 	ldw	r5,164(sp)
 4001044:	d8802e17 	ldw	r2,184(sp)
 4001048:	28adc83a 	sub	r22,r5,r2
 400104c:	0580310e 	bge	zero,r22,4001114 <___vfprintf_internal_r+0x9a0>
 4001050:	07000404 	movi	fp,16
 4001054:	d8801f17 	ldw	r2,124(sp)
 4001058:	e584140e 	bge	fp,r22,40020ac <___vfprintf_internal_r+0x1938>
 400105c:	01410074 	movhi	r5,1025
 4001060:	297f1d84 	addi	r5,r5,-906
 4001064:	dc402915 	stw	r17,164(sp)
 4001068:	d9402b15 	stw	r5,172(sp)
 400106c:	b023883a 	mov	r17,r22
 4001070:	04c001c4 	movi	r19,7
 4001074:	a82d883a 	mov	r22,r21
 4001078:	902b883a 	mov	r21,r18
 400107c:	8025883a 	mov	r18,r16
 4001080:	dc002c17 	ldw	r16,176(sp)
 4001084:	00000306 	br	4001094 <___vfprintf_internal_r+0x920>
 4001088:	8c7ffc04 	addi	r17,r17,-16
 400108c:	42000204 	addi	r8,r8,8
 4001090:	e440110e 	bge	fp,r17,40010d8 <___vfprintf_internal_r+0x964>
 4001094:	18c00404 	addi	r3,r3,16
 4001098:	10800044 	addi	r2,r2,1
 400109c:	45000015 	stw	r20,0(r8)
 40010a0:	47000115 	stw	fp,4(r8)
 40010a4:	d8c02015 	stw	r3,128(sp)
 40010a8:	d8801f15 	stw	r2,124(sp)
 40010ac:	98bff60e 	bge	r19,r2,4001088 <__alt_data_end+0xff001088>
 40010b0:	d9801e04 	addi	r6,sp,120
 40010b4:	b80b883a 	mov	r5,r23
 40010b8:	8009883a 	mov	r4,r16
 40010bc:	4007ed80 	call	4007ed8 <__sprint_r>
 40010c0:	103eae1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40010c4:	8c7ffc04 	addi	r17,r17,-16
 40010c8:	d8c02017 	ldw	r3,128(sp)
 40010cc:	d8801f17 	ldw	r2,124(sp)
 40010d0:	da000404 	addi	r8,sp,16
 40010d4:	e47fef16 	blt	fp,r17,4001094 <__alt_data_end+0xff001094>
 40010d8:	9021883a 	mov	r16,r18
 40010dc:	a825883a 	mov	r18,r21
 40010e0:	b02b883a 	mov	r21,r22
 40010e4:	882d883a 	mov	r22,r17
 40010e8:	dc402917 	ldw	r17,164(sp)
 40010ec:	d9002b17 	ldw	r4,172(sp)
 40010f0:	1d87883a 	add	r3,r3,r22
 40010f4:	10800044 	addi	r2,r2,1
 40010f8:	41000015 	stw	r4,0(r8)
 40010fc:	45800115 	stw	r22,4(r8)
 4001100:	d8c02015 	stw	r3,128(sp)
 4001104:	d8801f15 	stw	r2,124(sp)
 4001108:	010001c4 	movi	r4,7
 400110c:	2081ee16 	blt	r4,r2,40018c8 <___vfprintf_internal_r+0x1154>
 4001110:	42000204 	addi	r8,r8,8
 4001114:	9080400c 	andi	r2,r18,256
 4001118:	1001181e 	bne	r2,zero,400157c <___vfprintf_internal_r+0xe08>
 400111c:	d9402e17 	ldw	r5,184(sp)
 4001120:	d8801f17 	ldw	r2,124(sp)
 4001124:	44000015 	stw	r16,0(r8)
 4001128:	1947883a 	add	r3,r3,r5
 400112c:	10800044 	addi	r2,r2,1
 4001130:	41400115 	stw	r5,4(r8)
 4001134:	d8c02015 	stw	r3,128(sp)
 4001138:	d8801f15 	stw	r2,124(sp)
 400113c:	010001c4 	movi	r4,7
 4001140:	2081d316 	blt	r4,r2,4001890 <___vfprintf_internal_r+0x111c>
 4001144:	42000204 	addi	r8,r8,8
 4001148:	9480010c 	andi	r18,r18,4
 400114c:	90003226 	beq	r18,zero,4001218 <___vfprintf_internal_r+0xaa4>
 4001150:	d9403117 	ldw	r5,196(sp)
 4001154:	d8802a17 	ldw	r2,168(sp)
 4001158:	28a1c83a 	sub	r16,r5,r2
 400115c:	04002e0e 	bge	zero,r16,4001218 <___vfprintf_internal_r+0xaa4>
 4001160:	04400404 	movi	r17,16
 4001164:	d8801f17 	ldw	r2,124(sp)
 4001168:	8c04a20e 	bge	r17,r16,40023f4 <___vfprintf_internal_r+0x1c80>
 400116c:	01410074 	movhi	r5,1025
 4001170:	297f2184 	addi	r5,r5,-890
 4001174:	d9403515 	stw	r5,212(sp)
 4001178:	048001c4 	movi	r18,7
 400117c:	dcc02c17 	ldw	r19,176(sp)
 4001180:	00000306 	br	4001190 <___vfprintf_internal_r+0xa1c>
 4001184:	843ffc04 	addi	r16,r16,-16
 4001188:	42000204 	addi	r8,r8,8
 400118c:	8c00130e 	bge	r17,r16,40011dc <___vfprintf_internal_r+0xa68>
 4001190:	01010074 	movhi	r4,1025
 4001194:	18c00404 	addi	r3,r3,16
 4001198:	10800044 	addi	r2,r2,1
 400119c:	213f2184 	addi	r4,r4,-890
 40011a0:	41000015 	stw	r4,0(r8)
 40011a4:	44400115 	stw	r17,4(r8)
 40011a8:	d8c02015 	stw	r3,128(sp)
 40011ac:	d8801f15 	stw	r2,124(sp)
 40011b0:	90bff40e 	bge	r18,r2,4001184 <__alt_data_end+0xff001184>
 40011b4:	d9801e04 	addi	r6,sp,120
 40011b8:	b80b883a 	mov	r5,r23
 40011bc:	9809883a 	mov	r4,r19
 40011c0:	4007ed80 	call	4007ed8 <__sprint_r>
 40011c4:	103e6d1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40011c8:	843ffc04 	addi	r16,r16,-16
 40011cc:	d8c02017 	ldw	r3,128(sp)
 40011d0:	d8801f17 	ldw	r2,124(sp)
 40011d4:	da000404 	addi	r8,sp,16
 40011d8:	8c3fed16 	blt	r17,r16,4001190 <__alt_data_end+0xff001190>
 40011dc:	d9403517 	ldw	r5,212(sp)
 40011e0:	1c07883a 	add	r3,r3,r16
 40011e4:	10800044 	addi	r2,r2,1
 40011e8:	41400015 	stw	r5,0(r8)
 40011ec:	44000115 	stw	r16,4(r8)
 40011f0:	d8c02015 	stw	r3,128(sp)
 40011f4:	d8801f15 	stw	r2,124(sp)
 40011f8:	010001c4 	movi	r4,7
 40011fc:	2080060e 	bge	r4,r2,4001218 <___vfprintf_internal_r+0xaa4>
 4001200:	d9002c17 	ldw	r4,176(sp)
 4001204:	d9801e04 	addi	r6,sp,120
 4001208:	b80b883a 	mov	r5,r23
 400120c:	4007ed80 	call	4007ed8 <__sprint_r>
 4001210:	103e5a1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001214:	d8c02017 	ldw	r3,128(sp)
 4001218:	d8803117 	ldw	r2,196(sp)
 400121c:	d9002a17 	ldw	r4,168(sp)
 4001220:	1100010e 	bge	r2,r4,4001228 <___vfprintf_internal_r+0xab4>
 4001224:	2005883a 	mov	r2,r4
 4001228:	d9402f17 	ldw	r5,188(sp)
 400122c:	288b883a 	add	r5,r5,r2
 4001230:	d9402f15 	stw	r5,188(sp)
 4001234:	18019e1e 	bne	r3,zero,40018b0 <___vfprintf_internal_r+0x113c>
 4001238:	a8800007 	ldb	r2,0(r21)
 400123c:	d8001f15 	stw	zero,124(sp)
 4001240:	da000404 	addi	r8,sp,16
 4001244:	103d851e 	bne	r2,zero,400085c <__alt_data_end+0xff00085c>
 4001248:	a821883a 	mov	r16,r21
 400124c:	003d9b06 	br	40008bc <__alt_data_end+0xff0008bc>
 4001250:	18c03fcc 	andi	r3,r3,255
 4001254:	1805c11e 	bne	r3,zero,400295c <___vfprintf_internal_r+0x21e8>
 4001258:	94800414 	ori	r18,r18,16
 400125c:	9080080c 	andi	r2,r18,32
 4001260:	10020c26 	beq	r2,zero,4001a94 <___vfprintf_internal_r+0x1320>
 4001264:	d8802d17 	ldw	r2,180(sp)
 4001268:	d9002917 	ldw	r4,164(sp)
 400126c:	d8002785 	stb	zero,158(sp)
 4001270:	10c00204 	addi	r3,r2,8
 4001274:	14c00017 	ldw	r19,0(r2)
 4001278:	15800117 	ldw	r22,4(r2)
 400127c:	20040f16 	blt	r4,zero,40022bc <___vfprintf_internal_r+0x1b48>
 4001280:	013fdfc4 	movi	r4,-129
 4001284:	9d84b03a 	or	r2,r19,r22
 4001288:	d8c02d15 	stw	r3,180(sp)
 400128c:	9124703a 	and	r18,r18,r4
 4001290:	0039883a 	mov	fp,zero
 4001294:	103e891e 	bne	r2,zero,4000cbc <__alt_data_end+0xff000cbc>
 4001298:	d9002917 	ldw	r4,164(sp)
 400129c:	2002c11e 	bne	r4,zero,4001da4 <___vfprintf_internal_r+0x1630>
 40012a0:	d8002915 	stw	zero,164(sp)
 40012a4:	d8002e15 	stw	zero,184(sp)
 40012a8:	dc001e04 	addi	r16,sp,120
 40012ac:	003ef806 	br	4000e90 <__alt_data_end+0xff000e90>
 40012b0:	18c03fcc 	andi	r3,r3,255
 40012b4:	18059d1e 	bne	r3,zero,400292c <___vfprintf_internal_r+0x21b8>
 40012b8:	01410074 	movhi	r5,1025
 40012bc:	297f1104 	addi	r5,r5,-956
 40012c0:	d9403915 	stw	r5,228(sp)
 40012c4:	9080080c 	andi	r2,r18,32
 40012c8:	10005226 	beq	r2,zero,4001414 <___vfprintf_internal_r+0xca0>
 40012cc:	d8802d17 	ldw	r2,180(sp)
 40012d0:	14c00017 	ldw	r19,0(r2)
 40012d4:	15800117 	ldw	r22,4(r2)
 40012d8:	10800204 	addi	r2,r2,8
 40012dc:	d8802d15 	stw	r2,180(sp)
 40012e0:	9080004c 	andi	r2,r18,1
 40012e4:	10019026 	beq	r2,zero,4001928 <___vfprintf_internal_r+0x11b4>
 40012e8:	9d84b03a 	or	r2,r19,r22
 40012ec:	10036926 	beq	r2,zero,4002094 <___vfprintf_internal_r+0x1920>
 40012f0:	d8c02917 	ldw	r3,164(sp)
 40012f4:	00800c04 	movi	r2,48
 40012f8:	d8802705 	stb	r2,156(sp)
 40012fc:	dc402745 	stb	r17,157(sp)
 4001300:	d8002785 	stb	zero,158(sp)
 4001304:	90800094 	ori	r2,r18,2
 4001308:	18045d16 	blt	r3,zero,4002480 <___vfprintf_internal_r+0x1d0c>
 400130c:	00bfdfc4 	movi	r2,-129
 4001310:	90a4703a 	and	r18,r18,r2
 4001314:	94800094 	ori	r18,r18,2
 4001318:	0039883a 	mov	fp,zero
 400131c:	d9003917 	ldw	r4,228(sp)
 4001320:	dc001e04 	addi	r16,sp,120
 4001324:	988003cc 	andi	r2,r19,15
 4001328:	b006973a 	slli	r3,r22,28
 400132c:	2085883a 	add	r2,r4,r2
 4001330:	9826d13a 	srli	r19,r19,4
 4001334:	10800003 	ldbu	r2,0(r2)
 4001338:	b02cd13a 	srli	r22,r22,4
 400133c:	843fffc4 	addi	r16,r16,-1
 4001340:	1ce6b03a 	or	r19,r3,r19
 4001344:	80800005 	stb	r2,0(r16)
 4001348:	9d84b03a 	or	r2,r19,r22
 400134c:	103ff51e 	bne	r2,zero,4001324 <__alt_data_end+0xff001324>
 4001350:	d8c02817 	ldw	r3,160(sp)
 4001354:	1c07c83a 	sub	r3,r3,r16
 4001358:	d8c02e15 	stw	r3,184(sp)
 400135c:	003ecc06 	br	4000e90 <__alt_data_end+0xff000e90>
 4001360:	18c03fcc 	andi	r3,r3,255
 4001364:	183e9f26 	beq	r3,zero,4000de4 <__alt_data_end+0xff000de4>
 4001368:	d9c02785 	stb	r7,158(sp)
 400136c:	003e9d06 	br	4000de4 <__alt_data_end+0xff000de4>
 4001370:	00c00044 	movi	r3,1
 4001374:	01c00ac4 	movi	r7,43
 4001378:	ac400007 	ldb	r17,0(r21)
 400137c:	003d5e06 	br	40008f8 <__alt_data_end+0xff0008f8>
 4001380:	94800814 	ori	r18,r18,32
 4001384:	ac400007 	ldb	r17,0(r21)
 4001388:	003d5b06 	br	40008f8 <__alt_data_end+0xff0008f8>
 400138c:	d8c02d17 	ldw	r3,180(sp)
 4001390:	d8002785 	stb	zero,158(sp)
 4001394:	1c000017 	ldw	r16,0(r3)
 4001398:	1cc00104 	addi	r19,r3,4
 400139c:	80041926 	beq	r16,zero,4002404 <___vfprintf_internal_r+0x1c90>
 40013a0:	d9002917 	ldw	r4,164(sp)
 40013a4:	2003d016 	blt	r4,zero,40022e8 <___vfprintf_internal_r+0x1b74>
 40013a8:	200d883a 	mov	r6,r4
 40013ac:	000b883a 	mov	r5,zero
 40013b0:	8009883a 	mov	r4,r16
 40013b4:	da003d15 	stw	r8,244(sp)
 40013b8:	4005f840 	call	4005f84 <memchr>
 40013bc:	da003d17 	ldw	r8,244(sp)
 40013c0:	10045426 	beq	r2,zero,4002514 <___vfprintf_internal_r+0x1da0>
 40013c4:	1405c83a 	sub	r2,r2,r16
 40013c8:	d8802e15 	stw	r2,184(sp)
 40013cc:	1003cc16 	blt	r2,zero,4002300 <___vfprintf_internal_r+0x1b8c>
 40013d0:	df002783 	ldbu	fp,158(sp)
 40013d4:	d8802a15 	stw	r2,168(sp)
 40013d8:	dcc02d15 	stw	r19,180(sp)
 40013dc:	d8002915 	stw	zero,164(sp)
 40013e0:	d8003215 	stw	zero,200(sp)
 40013e4:	003eb006 	br	4000ea8 <__alt_data_end+0xff000ea8>
 40013e8:	18c03fcc 	andi	r3,r3,255
 40013ec:	183f9b26 	beq	r3,zero,400125c <__alt_data_end+0xff00125c>
 40013f0:	d9c02785 	stb	r7,158(sp)
 40013f4:	003f9906 	br	400125c <__alt_data_end+0xff00125c>
 40013f8:	18c03fcc 	andi	r3,r3,255
 40013fc:	1805551e 	bne	r3,zero,4002954 <___vfprintf_internal_r+0x21e0>
 4001400:	01410074 	movhi	r5,1025
 4001404:	297f1604 	addi	r5,r5,-936
 4001408:	d9403915 	stw	r5,228(sp)
 400140c:	9080080c 	andi	r2,r18,32
 4001410:	103fae1e 	bne	r2,zero,40012cc <__alt_data_end+0xff0012cc>
 4001414:	9080040c 	andi	r2,r18,16
 4001418:	1002de26 	beq	r2,zero,4001f94 <___vfprintf_internal_r+0x1820>
 400141c:	d8c02d17 	ldw	r3,180(sp)
 4001420:	002d883a 	mov	r22,zero
 4001424:	1cc00017 	ldw	r19,0(r3)
 4001428:	18c00104 	addi	r3,r3,4
 400142c:	d8c02d15 	stw	r3,180(sp)
 4001430:	003fab06 	br	40012e0 <__alt_data_end+0xff0012e0>
 4001434:	38803fcc 	andi	r2,r7,255
 4001438:	1080201c 	xori	r2,r2,128
 400143c:	10bfe004 	addi	r2,r2,-128
 4001440:	1002d21e 	bne	r2,zero,4001f8c <___vfprintf_internal_r+0x1818>
 4001444:	00c00044 	movi	r3,1
 4001448:	01c00804 	movi	r7,32
 400144c:	ac400007 	ldb	r17,0(r21)
 4001450:	003d2906 	br	40008f8 <__alt_data_end+0xff0008f8>
 4001454:	94800054 	ori	r18,r18,1
 4001458:	ac400007 	ldb	r17,0(r21)
 400145c:	003d2606 	br	40008f8 <__alt_data_end+0xff0008f8>
 4001460:	18c03fcc 	andi	r3,r3,255
 4001464:	183e0526 	beq	r3,zero,4000c7c <__alt_data_end+0xff000c7c>
 4001468:	d9c02785 	stb	r7,158(sp)
 400146c:	003e0306 	br	4000c7c <__alt_data_end+0xff000c7c>
 4001470:	94801014 	ori	r18,r18,64
 4001474:	ac400007 	ldb	r17,0(r21)
 4001478:	003d1f06 	br	40008f8 <__alt_data_end+0xff0008f8>
 400147c:	ac400007 	ldb	r17,0(r21)
 4001480:	8a438726 	beq	r17,r9,40022a0 <___vfprintf_internal_r+0x1b2c>
 4001484:	94800414 	ori	r18,r18,16
 4001488:	003d1b06 	br	40008f8 <__alt_data_end+0xff0008f8>
 400148c:	18c03fcc 	andi	r3,r3,255
 4001490:	1805341e 	bne	r3,zero,4002964 <___vfprintf_internal_r+0x21f0>
 4001494:	9080080c 	andi	r2,r18,32
 4001498:	1002cd26 	beq	r2,zero,4001fd0 <___vfprintf_internal_r+0x185c>
 400149c:	d9402d17 	ldw	r5,180(sp)
 40014a0:	d9002f17 	ldw	r4,188(sp)
 40014a4:	28800017 	ldw	r2,0(r5)
 40014a8:	2007d7fa 	srai	r3,r4,31
 40014ac:	29400104 	addi	r5,r5,4
 40014b0:	d9402d15 	stw	r5,180(sp)
 40014b4:	11000015 	stw	r4,0(r2)
 40014b8:	10c00115 	stw	r3,4(r2)
 40014bc:	003ce506 	br	4000854 <__alt_data_end+0xff000854>
 40014c0:	d8c02d17 	ldw	r3,180(sp)
 40014c4:	d9002d17 	ldw	r4,180(sp)
 40014c8:	d8002785 	stb	zero,158(sp)
 40014cc:	18800017 	ldw	r2,0(r3)
 40014d0:	21000104 	addi	r4,r4,4
 40014d4:	00c00044 	movi	r3,1
 40014d8:	d8c02a15 	stw	r3,168(sp)
 40014dc:	d8801405 	stb	r2,80(sp)
 40014e0:	d9002d15 	stw	r4,180(sp)
 40014e4:	d8c02e15 	stw	r3,184(sp)
 40014e8:	d8002915 	stw	zero,164(sp)
 40014ec:	d8003215 	stw	zero,200(sp)
 40014f0:	dc001404 	addi	r16,sp,80
 40014f4:	0039883a 	mov	fp,zero
 40014f8:	003e7206 	br	4000ec4 <__alt_data_end+0xff000ec4>
 40014fc:	01010074 	movhi	r4,1025
 4001500:	213f1604 	addi	r4,r4,-936
 4001504:	0039883a 	mov	fp,zero
 4001508:	d9003915 	stw	r4,228(sp)
 400150c:	04401e04 	movi	r17,120
 4001510:	003f8206 	br	400131c <__alt_data_end+0xff00131c>
 4001514:	18c03fcc 	andi	r3,r3,255
 4001518:	1805061e 	bne	r3,zero,4002934 <___vfprintf_internal_r+0x21c0>
 400151c:	883d9126 	beq	r17,zero,4000b64 <__alt_data_end+0xff000b64>
 4001520:	00c00044 	movi	r3,1
 4001524:	d8c02a15 	stw	r3,168(sp)
 4001528:	dc401405 	stb	r17,80(sp)
 400152c:	d8002785 	stb	zero,158(sp)
 4001530:	003fec06 	br	40014e4 <__alt_data_end+0xff0014e4>
 4001534:	01410074 	movhi	r5,1025
 4001538:	297f1604 	addi	r5,r5,-936
 400153c:	d9403915 	stw	r5,228(sp)
 4001540:	d8c02d15 	stw	r3,180(sp)
 4001544:	1025883a 	mov	r18,r2
 4001548:	04401e04 	movi	r17,120
 400154c:	9d84b03a 	or	r2,r19,r22
 4001550:	1000fc1e 	bne	r2,zero,4001944 <___vfprintf_internal_r+0x11d0>
 4001554:	0039883a 	mov	fp,zero
 4001558:	00800084 	movi	r2,2
 400155c:	10803fcc 	andi	r2,r2,255
 4001560:	00c00044 	movi	r3,1
 4001564:	10c20f26 	beq	r2,r3,4001da4 <___vfprintf_internal_r+0x1630>
 4001568:	00c00084 	movi	r3,2
 400156c:	10fd6326 	beq	r2,r3,4000afc <__alt_data_end+0xff000afc>
 4001570:	003e2d06 	br	4000e28 <__alt_data_end+0xff000e28>
 4001574:	d8c02017 	ldw	r3,128(sp)
 4001578:	003e9306 	br	4000fc8 <__alt_data_end+0xff000fc8>
 400157c:	00801944 	movi	r2,101
 4001580:	14407e0e 	bge	r2,r17,400177c <___vfprintf_internal_r+0x1008>
 4001584:	d9003617 	ldw	r4,216(sp)
 4001588:	d9403817 	ldw	r5,224(sp)
 400158c:	000d883a 	mov	r6,zero
 4001590:	000f883a 	mov	r7,zero
 4001594:	d8c03c15 	stw	r3,240(sp)
 4001598:	da003d15 	stw	r8,244(sp)
 400159c:	400bb500 	call	400bb50 <__eqdf2>
 40015a0:	d8c03c17 	ldw	r3,240(sp)
 40015a4:	da003d17 	ldw	r8,244(sp)
 40015a8:	1000f71e 	bne	r2,zero,4001988 <___vfprintf_internal_r+0x1214>
 40015ac:	d8801f17 	ldw	r2,124(sp)
 40015b0:	01010074 	movhi	r4,1025
 40015b4:	213f1d04 	addi	r4,r4,-908
 40015b8:	18c00044 	addi	r3,r3,1
 40015bc:	10800044 	addi	r2,r2,1
 40015c0:	41000015 	stw	r4,0(r8)
 40015c4:	01000044 	movi	r4,1
 40015c8:	41000115 	stw	r4,4(r8)
 40015cc:	d8c02015 	stw	r3,128(sp)
 40015d0:	d8801f15 	stw	r2,124(sp)
 40015d4:	010001c4 	movi	r4,7
 40015d8:	2082b816 	blt	r4,r2,40020bc <___vfprintf_internal_r+0x1948>
 40015dc:	42000204 	addi	r8,r8,8
 40015e0:	d8802617 	ldw	r2,152(sp)
 40015e4:	d9403317 	ldw	r5,204(sp)
 40015e8:	11400216 	blt	r2,r5,40015f4 <___vfprintf_internal_r+0xe80>
 40015ec:	9080004c 	andi	r2,r18,1
 40015f0:	103ed526 	beq	r2,zero,4001148 <__alt_data_end+0xff001148>
 40015f4:	d8803717 	ldw	r2,220(sp)
 40015f8:	d9003417 	ldw	r4,208(sp)
 40015fc:	d9403717 	ldw	r5,220(sp)
 4001600:	1887883a 	add	r3,r3,r2
 4001604:	d8801f17 	ldw	r2,124(sp)
 4001608:	41000015 	stw	r4,0(r8)
 400160c:	41400115 	stw	r5,4(r8)
 4001610:	10800044 	addi	r2,r2,1
 4001614:	d8c02015 	stw	r3,128(sp)
 4001618:	d8801f15 	stw	r2,124(sp)
 400161c:	010001c4 	movi	r4,7
 4001620:	20832916 	blt	r4,r2,40022c8 <___vfprintf_internal_r+0x1b54>
 4001624:	42000204 	addi	r8,r8,8
 4001628:	d8803317 	ldw	r2,204(sp)
 400162c:	143fffc4 	addi	r16,r2,-1
 4001630:	043ec50e 	bge	zero,r16,4001148 <__alt_data_end+0xff001148>
 4001634:	04400404 	movi	r17,16
 4001638:	d8801f17 	ldw	r2,124(sp)
 400163c:	8c00880e 	bge	r17,r16,4001860 <___vfprintf_internal_r+0x10ec>
 4001640:	01410074 	movhi	r5,1025
 4001644:	297f1d84 	addi	r5,r5,-906
 4001648:	d9402b15 	stw	r5,172(sp)
 400164c:	058001c4 	movi	r22,7
 4001650:	dcc02c17 	ldw	r19,176(sp)
 4001654:	00000306 	br	4001664 <___vfprintf_internal_r+0xef0>
 4001658:	42000204 	addi	r8,r8,8
 400165c:	843ffc04 	addi	r16,r16,-16
 4001660:	8c00820e 	bge	r17,r16,400186c <___vfprintf_internal_r+0x10f8>
 4001664:	18c00404 	addi	r3,r3,16
 4001668:	10800044 	addi	r2,r2,1
 400166c:	45000015 	stw	r20,0(r8)
 4001670:	44400115 	stw	r17,4(r8)
 4001674:	d8c02015 	stw	r3,128(sp)
 4001678:	d8801f15 	stw	r2,124(sp)
 400167c:	b0bff60e 	bge	r22,r2,4001658 <__alt_data_end+0xff001658>
 4001680:	d9801e04 	addi	r6,sp,120
 4001684:	b80b883a 	mov	r5,r23
 4001688:	9809883a 	mov	r4,r19
 400168c:	4007ed80 	call	4007ed8 <__sprint_r>
 4001690:	103d3a1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001694:	d8c02017 	ldw	r3,128(sp)
 4001698:	d8801f17 	ldw	r2,124(sp)
 400169c:	da000404 	addi	r8,sp,16
 40016a0:	003fee06 	br	400165c <__alt_data_end+0xff00165c>
 40016a4:	d9403117 	ldw	r5,196(sp)
 40016a8:	d8802a17 	ldw	r2,168(sp)
 40016ac:	28adc83a 	sub	r22,r5,r2
 40016b0:	05be630e 	bge	zero,r22,4001040 <__alt_data_end+0xff001040>
 40016b4:	07000404 	movi	fp,16
 40016b8:	d8801f17 	ldw	r2,124(sp)
 40016bc:	e5838f0e 	bge	fp,r22,40024fc <___vfprintf_internal_r+0x1d88>
 40016c0:	01410074 	movhi	r5,1025
 40016c4:	297f1d84 	addi	r5,r5,-906
 40016c8:	dc403015 	stw	r17,192(sp)
 40016cc:	d9402b15 	stw	r5,172(sp)
 40016d0:	b023883a 	mov	r17,r22
 40016d4:	04c001c4 	movi	r19,7
 40016d8:	a82d883a 	mov	r22,r21
 40016dc:	902b883a 	mov	r21,r18
 40016e0:	8025883a 	mov	r18,r16
 40016e4:	dc002c17 	ldw	r16,176(sp)
 40016e8:	00000306 	br	40016f8 <___vfprintf_internal_r+0xf84>
 40016ec:	8c7ffc04 	addi	r17,r17,-16
 40016f0:	42000204 	addi	r8,r8,8
 40016f4:	e440110e 	bge	fp,r17,400173c <___vfprintf_internal_r+0xfc8>
 40016f8:	18c00404 	addi	r3,r3,16
 40016fc:	10800044 	addi	r2,r2,1
 4001700:	45000015 	stw	r20,0(r8)
 4001704:	47000115 	stw	fp,4(r8)
 4001708:	d8c02015 	stw	r3,128(sp)
 400170c:	d8801f15 	stw	r2,124(sp)
 4001710:	98bff60e 	bge	r19,r2,40016ec <__alt_data_end+0xff0016ec>
 4001714:	d9801e04 	addi	r6,sp,120
 4001718:	b80b883a 	mov	r5,r23
 400171c:	8009883a 	mov	r4,r16
 4001720:	4007ed80 	call	4007ed8 <__sprint_r>
 4001724:	103d151e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001728:	8c7ffc04 	addi	r17,r17,-16
 400172c:	d8c02017 	ldw	r3,128(sp)
 4001730:	d8801f17 	ldw	r2,124(sp)
 4001734:	da000404 	addi	r8,sp,16
 4001738:	e47fef16 	blt	fp,r17,40016f8 <__alt_data_end+0xff0016f8>
 400173c:	9021883a 	mov	r16,r18
 4001740:	a825883a 	mov	r18,r21
 4001744:	b02b883a 	mov	r21,r22
 4001748:	882d883a 	mov	r22,r17
 400174c:	dc403017 	ldw	r17,192(sp)
 4001750:	d9002b17 	ldw	r4,172(sp)
 4001754:	1d87883a 	add	r3,r3,r22
 4001758:	10800044 	addi	r2,r2,1
 400175c:	41000015 	stw	r4,0(r8)
 4001760:	45800115 	stw	r22,4(r8)
 4001764:	d8c02015 	stw	r3,128(sp)
 4001768:	d8801f15 	stw	r2,124(sp)
 400176c:	010001c4 	movi	r4,7
 4001770:	20818e16 	blt	r4,r2,4001dac <___vfprintf_internal_r+0x1638>
 4001774:	42000204 	addi	r8,r8,8
 4001778:	003e3106 	br	4001040 <__alt_data_end+0xff001040>
 400177c:	d9403317 	ldw	r5,204(sp)
 4001780:	00800044 	movi	r2,1
 4001784:	18c00044 	addi	r3,r3,1
 4001788:	1141530e 	bge	r2,r5,4001cd8 <___vfprintf_internal_r+0x1564>
 400178c:	dc401f17 	ldw	r17,124(sp)
 4001790:	00800044 	movi	r2,1
 4001794:	40800115 	stw	r2,4(r8)
 4001798:	8c400044 	addi	r17,r17,1
 400179c:	44000015 	stw	r16,0(r8)
 40017a0:	d8c02015 	stw	r3,128(sp)
 40017a4:	dc401f15 	stw	r17,124(sp)
 40017a8:	008001c4 	movi	r2,7
 40017ac:	14416b16 	blt	r2,r17,4001d5c <___vfprintf_internal_r+0x15e8>
 40017b0:	42000204 	addi	r8,r8,8
 40017b4:	d8803717 	ldw	r2,220(sp)
 40017b8:	d9003417 	ldw	r4,208(sp)
 40017bc:	8c400044 	addi	r17,r17,1
 40017c0:	10c7883a 	add	r3,r2,r3
 40017c4:	40800115 	stw	r2,4(r8)
 40017c8:	41000015 	stw	r4,0(r8)
 40017cc:	d8c02015 	stw	r3,128(sp)
 40017d0:	dc401f15 	stw	r17,124(sp)
 40017d4:	008001c4 	movi	r2,7
 40017d8:	14416916 	blt	r2,r17,4001d80 <___vfprintf_internal_r+0x160c>
 40017dc:	45800204 	addi	r22,r8,8
 40017e0:	d9003617 	ldw	r4,216(sp)
 40017e4:	d9403817 	ldw	r5,224(sp)
 40017e8:	000d883a 	mov	r6,zero
 40017ec:	000f883a 	mov	r7,zero
 40017f0:	d8c03c15 	stw	r3,240(sp)
 40017f4:	400bb500 	call	400bb50 <__eqdf2>
 40017f8:	d8c03c17 	ldw	r3,240(sp)
 40017fc:	1000bc26 	beq	r2,zero,4001af0 <___vfprintf_internal_r+0x137c>
 4001800:	d9403317 	ldw	r5,204(sp)
 4001804:	84000044 	addi	r16,r16,1
 4001808:	8c400044 	addi	r17,r17,1
 400180c:	28bfffc4 	addi	r2,r5,-1
 4001810:	1887883a 	add	r3,r3,r2
 4001814:	b0800115 	stw	r2,4(r22)
 4001818:	b4000015 	stw	r16,0(r22)
 400181c:	d8c02015 	stw	r3,128(sp)
 4001820:	dc401f15 	stw	r17,124(sp)
 4001824:	008001c4 	movi	r2,7
 4001828:	14414316 	blt	r2,r17,4001d38 <___vfprintf_internal_r+0x15c4>
 400182c:	b5800204 	addi	r22,r22,8
 4001830:	d9003a17 	ldw	r4,232(sp)
 4001834:	df0022c4 	addi	fp,sp,139
 4001838:	8c400044 	addi	r17,r17,1
 400183c:	20c7883a 	add	r3,r4,r3
 4001840:	b7000015 	stw	fp,0(r22)
 4001844:	b1000115 	stw	r4,4(r22)
 4001848:	d8c02015 	stw	r3,128(sp)
 400184c:	dc401f15 	stw	r17,124(sp)
 4001850:	008001c4 	movi	r2,7
 4001854:	14400e16 	blt	r2,r17,4001890 <___vfprintf_internal_r+0x111c>
 4001858:	b2000204 	addi	r8,r22,8
 400185c:	003e3a06 	br	4001148 <__alt_data_end+0xff001148>
 4001860:	01010074 	movhi	r4,1025
 4001864:	213f1d84 	addi	r4,r4,-906
 4001868:	d9002b15 	stw	r4,172(sp)
 400186c:	d9002b17 	ldw	r4,172(sp)
 4001870:	1c07883a 	add	r3,r3,r16
 4001874:	44000115 	stw	r16,4(r8)
 4001878:	41000015 	stw	r4,0(r8)
 400187c:	10800044 	addi	r2,r2,1
 4001880:	d8c02015 	stw	r3,128(sp)
 4001884:	d8801f15 	stw	r2,124(sp)
 4001888:	010001c4 	movi	r4,7
 400188c:	20be2d0e 	bge	r4,r2,4001144 <__alt_data_end+0xff001144>
 4001890:	d9002c17 	ldw	r4,176(sp)
 4001894:	d9801e04 	addi	r6,sp,120
 4001898:	b80b883a 	mov	r5,r23
 400189c:	4007ed80 	call	4007ed8 <__sprint_r>
 40018a0:	103cb61e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40018a4:	d8c02017 	ldw	r3,128(sp)
 40018a8:	da000404 	addi	r8,sp,16
 40018ac:	003e2606 	br	4001148 <__alt_data_end+0xff001148>
 40018b0:	d9002c17 	ldw	r4,176(sp)
 40018b4:	d9801e04 	addi	r6,sp,120
 40018b8:	b80b883a 	mov	r5,r23
 40018bc:	4007ed80 	call	4007ed8 <__sprint_r>
 40018c0:	103e5d26 	beq	r2,zero,4001238 <__alt_data_end+0xff001238>
 40018c4:	003cad06 	br	4000b7c <__alt_data_end+0xff000b7c>
 40018c8:	d9002c17 	ldw	r4,176(sp)
 40018cc:	d9801e04 	addi	r6,sp,120
 40018d0:	b80b883a 	mov	r5,r23
 40018d4:	4007ed80 	call	4007ed8 <__sprint_r>
 40018d8:	103ca81e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40018dc:	d8c02017 	ldw	r3,128(sp)
 40018e0:	da000404 	addi	r8,sp,16
 40018e4:	003e0b06 	br	4001114 <__alt_data_end+0xff001114>
 40018e8:	d9002c17 	ldw	r4,176(sp)
 40018ec:	d9801e04 	addi	r6,sp,120
 40018f0:	b80b883a 	mov	r5,r23
 40018f4:	4007ed80 	call	4007ed8 <__sprint_r>
 40018f8:	103ca01e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40018fc:	d8c02017 	ldw	r3,128(sp)
 4001900:	da000404 	addi	r8,sp,16
 4001904:	003dbd06 	br	4000ffc <__alt_data_end+0xff000ffc>
 4001908:	d9002c17 	ldw	r4,176(sp)
 400190c:	d9801e04 	addi	r6,sp,120
 4001910:	b80b883a 	mov	r5,r23
 4001914:	4007ed80 	call	4007ed8 <__sprint_r>
 4001918:	103c981e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 400191c:	d8c02017 	ldw	r3,128(sp)
 4001920:	da000404 	addi	r8,sp,16
 4001924:	003dc306 	br	4001034 <__alt_data_end+0xff001034>
 4001928:	d8802917 	ldw	r2,164(sp)
 400192c:	d8002785 	stb	zero,158(sp)
 4001930:	103f0616 	blt	r2,zero,400154c <__alt_data_end+0xff00154c>
 4001934:	00ffdfc4 	movi	r3,-129
 4001938:	9d84b03a 	or	r2,r19,r22
 400193c:	90e4703a 	and	r18,r18,r3
 4001940:	103c6b26 	beq	r2,zero,4000af0 <__alt_data_end+0xff000af0>
 4001944:	0039883a 	mov	fp,zero
 4001948:	003e7406 	br	400131c <__alt_data_end+0xff00131c>
 400194c:	9080040c 	andi	r2,r18,16
 4001950:	1001b326 	beq	r2,zero,4002020 <___vfprintf_internal_r+0x18ac>
 4001954:	d9002d17 	ldw	r4,180(sp)
 4001958:	d9402917 	ldw	r5,164(sp)
 400195c:	d8002785 	stb	zero,158(sp)
 4001960:	20800104 	addi	r2,r4,4
 4001964:	24c00017 	ldw	r19,0(r4)
 4001968:	002d883a 	mov	r22,zero
 400196c:	2801b516 	blt	r5,zero,4002044 <___vfprintf_internal_r+0x18d0>
 4001970:	00ffdfc4 	movi	r3,-129
 4001974:	d8802d15 	stw	r2,180(sp)
 4001978:	90e4703a 	and	r18,r18,r3
 400197c:	983d2726 	beq	r19,zero,4000e1c <__alt_data_end+0xff000e1c>
 4001980:	0039883a 	mov	fp,zero
 4001984:	003d2a06 	br	4000e30 <__alt_data_end+0xff000e30>
 4001988:	dc402617 	ldw	r17,152(sp)
 400198c:	0441d30e 	bge	zero,r17,40020dc <___vfprintf_internal_r+0x1968>
 4001990:	dc403217 	ldw	r17,200(sp)
 4001994:	d8803317 	ldw	r2,204(sp)
 4001998:	1440010e 	bge	r2,r17,40019a0 <___vfprintf_internal_r+0x122c>
 400199c:	1023883a 	mov	r17,r2
 40019a0:	04400a0e 	bge	zero,r17,40019cc <___vfprintf_internal_r+0x1258>
 40019a4:	d8801f17 	ldw	r2,124(sp)
 40019a8:	1c47883a 	add	r3,r3,r17
 40019ac:	44000015 	stw	r16,0(r8)
 40019b0:	10800044 	addi	r2,r2,1
 40019b4:	44400115 	stw	r17,4(r8)
 40019b8:	d8c02015 	stw	r3,128(sp)
 40019bc:	d8801f15 	stw	r2,124(sp)
 40019c0:	010001c4 	movi	r4,7
 40019c4:	20826516 	blt	r4,r2,400235c <___vfprintf_internal_r+0x1be8>
 40019c8:	42000204 	addi	r8,r8,8
 40019cc:	88026116 	blt	r17,zero,4002354 <___vfprintf_internal_r+0x1be0>
 40019d0:	d9003217 	ldw	r4,200(sp)
 40019d4:	2463c83a 	sub	r17,r4,r17
 40019d8:	04407b0e 	bge	zero,r17,4001bc8 <___vfprintf_internal_r+0x1454>
 40019dc:	05800404 	movi	r22,16
 40019e0:	d8801f17 	ldw	r2,124(sp)
 40019e4:	b4419d0e 	bge	r22,r17,400205c <___vfprintf_internal_r+0x18e8>
 40019e8:	01010074 	movhi	r4,1025
 40019ec:	213f1d84 	addi	r4,r4,-906
 40019f0:	d9002b15 	stw	r4,172(sp)
 40019f4:	070001c4 	movi	fp,7
 40019f8:	dcc02c17 	ldw	r19,176(sp)
 40019fc:	00000306 	br	4001a0c <___vfprintf_internal_r+0x1298>
 4001a00:	42000204 	addi	r8,r8,8
 4001a04:	8c7ffc04 	addi	r17,r17,-16
 4001a08:	b441970e 	bge	r22,r17,4002068 <___vfprintf_internal_r+0x18f4>
 4001a0c:	18c00404 	addi	r3,r3,16
 4001a10:	10800044 	addi	r2,r2,1
 4001a14:	45000015 	stw	r20,0(r8)
 4001a18:	45800115 	stw	r22,4(r8)
 4001a1c:	d8c02015 	stw	r3,128(sp)
 4001a20:	d8801f15 	stw	r2,124(sp)
 4001a24:	e0bff60e 	bge	fp,r2,4001a00 <__alt_data_end+0xff001a00>
 4001a28:	d9801e04 	addi	r6,sp,120
 4001a2c:	b80b883a 	mov	r5,r23
 4001a30:	9809883a 	mov	r4,r19
 4001a34:	4007ed80 	call	4007ed8 <__sprint_r>
 4001a38:	103c501e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001a3c:	d8c02017 	ldw	r3,128(sp)
 4001a40:	d8801f17 	ldw	r2,124(sp)
 4001a44:	da000404 	addi	r8,sp,16
 4001a48:	003fee06 	br	4001a04 <__alt_data_end+0xff001a04>
 4001a4c:	d9002c17 	ldw	r4,176(sp)
 4001a50:	d9801e04 	addi	r6,sp,120
 4001a54:	b80b883a 	mov	r5,r23
 4001a58:	4007ed80 	call	4007ed8 <__sprint_r>
 4001a5c:	103c471e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001a60:	d8c02017 	ldw	r3,128(sp)
 4001a64:	df002787 	ldb	fp,158(sp)
 4001a68:	da000404 	addi	r8,sp,16
 4001a6c:	003d5606 	br	4000fc8 <__alt_data_end+0xff000fc8>
 4001a70:	9080040c 	andi	r2,r18,16
 4001a74:	10016126 	beq	r2,zero,4001ffc <___vfprintf_internal_r+0x1888>
 4001a78:	d8802d17 	ldw	r2,180(sp)
 4001a7c:	14c00017 	ldw	r19,0(r2)
 4001a80:	10800104 	addi	r2,r2,4
 4001a84:	d8802d15 	stw	r2,180(sp)
 4001a88:	982dd7fa 	srai	r22,r19,31
 4001a8c:	b005883a 	mov	r2,r22
 4001a90:	003c8206 	br	4000c9c <__alt_data_end+0xff000c9c>
 4001a94:	9080040c 	andi	r2,r18,16
 4001a98:	10003526 	beq	r2,zero,4001b70 <___vfprintf_internal_r+0x13fc>
 4001a9c:	d9402d17 	ldw	r5,180(sp)
 4001aa0:	d8c02917 	ldw	r3,164(sp)
 4001aa4:	d8002785 	stb	zero,158(sp)
 4001aa8:	28800104 	addi	r2,r5,4
 4001aac:	2cc00017 	ldw	r19,0(r5)
 4001ab0:	002d883a 	mov	r22,zero
 4001ab4:	18003716 	blt	r3,zero,4001b94 <___vfprintf_internal_r+0x1420>
 4001ab8:	00ffdfc4 	movi	r3,-129
 4001abc:	d8802d15 	stw	r2,180(sp)
 4001ac0:	90e4703a 	and	r18,r18,r3
 4001ac4:	0039883a 	mov	fp,zero
 4001ac8:	983df326 	beq	r19,zero,4001298 <__alt_data_end+0xff001298>
 4001acc:	00800244 	movi	r2,9
 4001ad0:	14fc7b36 	bltu	r2,r19,4000cc0 <__alt_data_end+0xff000cc0>
 4001ad4:	d8c02817 	ldw	r3,160(sp)
 4001ad8:	dc001dc4 	addi	r16,sp,119
 4001adc:	9cc00c04 	addi	r19,r19,48
 4001ae0:	1c07c83a 	sub	r3,r3,r16
 4001ae4:	dcc01dc5 	stb	r19,119(sp)
 4001ae8:	d8c02e15 	stw	r3,184(sp)
 4001aec:	003ce806 	br	4000e90 <__alt_data_end+0xff000e90>
 4001af0:	d8803317 	ldw	r2,204(sp)
 4001af4:	143fffc4 	addi	r16,r2,-1
 4001af8:	043f4d0e 	bge	zero,r16,4001830 <__alt_data_end+0xff001830>
 4001afc:	07000404 	movi	fp,16
 4001b00:	e400810e 	bge	fp,r16,4001d08 <___vfprintf_internal_r+0x1594>
 4001b04:	01410074 	movhi	r5,1025
 4001b08:	297f1d84 	addi	r5,r5,-906
 4001b0c:	d9402b15 	stw	r5,172(sp)
 4001b10:	01c001c4 	movi	r7,7
 4001b14:	dcc02c17 	ldw	r19,176(sp)
 4001b18:	00000306 	br	4001b28 <___vfprintf_internal_r+0x13b4>
 4001b1c:	b5800204 	addi	r22,r22,8
 4001b20:	843ffc04 	addi	r16,r16,-16
 4001b24:	e4007b0e 	bge	fp,r16,4001d14 <___vfprintf_internal_r+0x15a0>
 4001b28:	18c00404 	addi	r3,r3,16
 4001b2c:	8c400044 	addi	r17,r17,1
 4001b30:	b5000015 	stw	r20,0(r22)
 4001b34:	b7000115 	stw	fp,4(r22)
 4001b38:	d8c02015 	stw	r3,128(sp)
 4001b3c:	dc401f15 	stw	r17,124(sp)
 4001b40:	3c7ff60e 	bge	r7,r17,4001b1c <__alt_data_end+0xff001b1c>
 4001b44:	d9801e04 	addi	r6,sp,120
 4001b48:	b80b883a 	mov	r5,r23
 4001b4c:	9809883a 	mov	r4,r19
 4001b50:	d9c03c15 	stw	r7,240(sp)
 4001b54:	4007ed80 	call	4007ed8 <__sprint_r>
 4001b58:	d9c03c17 	ldw	r7,240(sp)
 4001b5c:	103c071e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001b60:	d8c02017 	ldw	r3,128(sp)
 4001b64:	dc401f17 	ldw	r17,124(sp)
 4001b68:	dd800404 	addi	r22,sp,16
 4001b6c:	003fec06 	br	4001b20 <__alt_data_end+0xff001b20>
 4001b70:	9080100c 	andi	r2,r18,64
 4001b74:	d8002785 	stb	zero,158(sp)
 4001b78:	10010e26 	beq	r2,zero,4001fb4 <___vfprintf_internal_r+0x1840>
 4001b7c:	d9002d17 	ldw	r4,180(sp)
 4001b80:	d9402917 	ldw	r5,164(sp)
 4001b84:	002d883a 	mov	r22,zero
 4001b88:	20800104 	addi	r2,r4,4
 4001b8c:	24c0000b 	ldhu	r19,0(r4)
 4001b90:	283fc90e 	bge	r5,zero,4001ab8 <__alt_data_end+0xff001ab8>
 4001b94:	d8802d15 	stw	r2,180(sp)
 4001b98:	0039883a 	mov	fp,zero
 4001b9c:	9d84b03a 	or	r2,r19,r22
 4001ba0:	103c461e 	bne	r2,zero,4000cbc <__alt_data_end+0xff000cbc>
 4001ba4:	00800044 	movi	r2,1
 4001ba8:	003e6c06 	br	400155c <__alt_data_end+0xff00155c>
 4001bac:	d9002c17 	ldw	r4,176(sp)
 4001bb0:	d9801e04 	addi	r6,sp,120
 4001bb4:	b80b883a 	mov	r5,r23
 4001bb8:	4007ed80 	call	4007ed8 <__sprint_r>
 4001bbc:	103bef1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001bc0:	d8c02017 	ldw	r3,128(sp)
 4001bc4:	da000404 	addi	r8,sp,16
 4001bc8:	d9003217 	ldw	r4,200(sp)
 4001bcc:	d8802617 	ldw	r2,152(sp)
 4001bd0:	d9403317 	ldw	r5,204(sp)
 4001bd4:	8123883a 	add	r17,r16,r4
 4001bd8:	11400216 	blt	r2,r5,4001be4 <___vfprintf_internal_r+0x1470>
 4001bdc:	9100004c 	andi	r4,r18,1
 4001be0:	20000d26 	beq	r4,zero,4001c18 <___vfprintf_internal_r+0x14a4>
 4001be4:	d9003717 	ldw	r4,220(sp)
 4001be8:	d9403417 	ldw	r5,208(sp)
 4001bec:	1907883a 	add	r3,r3,r4
 4001bf0:	d9001f17 	ldw	r4,124(sp)
 4001bf4:	41400015 	stw	r5,0(r8)
 4001bf8:	d9403717 	ldw	r5,220(sp)
 4001bfc:	21000044 	addi	r4,r4,1
 4001c00:	d8c02015 	stw	r3,128(sp)
 4001c04:	41400115 	stw	r5,4(r8)
 4001c08:	d9001f15 	stw	r4,124(sp)
 4001c0c:	014001c4 	movi	r5,7
 4001c10:	2901e816 	blt	r5,r4,40023b4 <___vfprintf_internal_r+0x1c40>
 4001c14:	42000204 	addi	r8,r8,8
 4001c18:	d9003317 	ldw	r4,204(sp)
 4001c1c:	8121883a 	add	r16,r16,r4
 4001c20:	2085c83a 	sub	r2,r4,r2
 4001c24:	8461c83a 	sub	r16,r16,r17
 4001c28:	1400010e 	bge	r2,r16,4001c30 <___vfprintf_internal_r+0x14bc>
 4001c2c:	1021883a 	mov	r16,r2
 4001c30:	04000a0e 	bge	zero,r16,4001c5c <___vfprintf_internal_r+0x14e8>
 4001c34:	d9001f17 	ldw	r4,124(sp)
 4001c38:	1c07883a 	add	r3,r3,r16
 4001c3c:	44400015 	stw	r17,0(r8)
 4001c40:	21000044 	addi	r4,r4,1
 4001c44:	44000115 	stw	r16,4(r8)
 4001c48:	d8c02015 	stw	r3,128(sp)
 4001c4c:	d9001f15 	stw	r4,124(sp)
 4001c50:	014001c4 	movi	r5,7
 4001c54:	2901fb16 	blt	r5,r4,4002444 <___vfprintf_internal_r+0x1cd0>
 4001c58:	42000204 	addi	r8,r8,8
 4001c5c:	8001f716 	blt	r16,zero,400243c <___vfprintf_internal_r+0x1cc8>
 4001c60:	1421c83a 	sub	r16,r2,r16
 4001c64:	043d380e 	bge	zero,r16,4001148 <__alt_data_end+0xff001148>
 4001c68:	04400404 	movi	r17,16
 4001c6c:	d8801f17 	ldw	r2,124(sp)
 4001c70:	8c3efb0e 	bge	r17,r16,4001860 <__alt_data_end+0xff001860>
 4001c74:	01410074 	movhi	r5,1025
 4001c78:	297f1d84 	addi	r5,r5,-906
 4001c7c:	d9402b15 	stw	r5,172(sp)
 4001c80:	058001c4 	movi	r22,7
 4001c84:	dcc02c17 	ldw	r19,176(sp)
 4001c88:	00000306 	br	4001c98 <___vfprintf_internal_r+0x1524>
 4001c8c:	42000204 	addi	r8,r8,8
 4001c90:	843ffc04 	addi	r16,r16,-16
 4001c94:	8c3ef50e 	bge	r17,r16,400186c <__alt_data_end+0xff00186c>
 4001c98:	18c00404 	addi	r3,r3,16
 4001c9c:	10800044 	addi	r2,r2,1
 4001ca0:	45000015 	stw	r20,0(r8)
 4001ca4:	44400115 	stw	r17,4(r8)
 4001ca8:	d8c02015 	stw	r3,128(sp)
 4001cac:	d8801f15 	stw	r2,124(sp)
 4001cb0:	b0bff60e 	bge	r22,r2,4001c8c <__alt_data_end+0xff001c8c>
 4001cb4:	d9801e04 	addi	r6,sp,120
 4001cb8:	b80b883a 	mov	r5,r23
 4001cbc:	9809883a 	mov	r4,r19
 4001cc0:	4007ed80 	call	4007ed8 <__sprint_r>
 4001cc4:	103bad1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001cc8:	d8c02017 	ldw	r3,128(sp)
 4001ccc:	d8801f17 	ldw	r2,124(sp)
 4001cd0:	da000404 	addi	r8,sp,16
 4001cd4:	003fee06 	br	4001c90 <__alt_data_end+0xff001c90>
 4001cd8:	9088703a 	and	r4,r18,r2
 4001cdc:	203eab1e 	bne	r4,zero,400178c <__alt_data_end+0xff00178c>
 4001ce0:	dc401f17 	ldw	r17,124(sp)
 4001ce4:	40800115 	stw	r2,4(r8)
 4001ce8:	44000015 	stw	r16,0(r8)
 4001cec:	8c400044 	addi	r17,r17,1
 4001cf0:	d8c02015 	stw	r3,128(sp)
 4001cf4:	dc401f15 	stw	r17,124(sp)
 4001cf8:	008001c4 	movi	r2,7
 4001cfc:	14400e16 	blt	r2,r17,4001d38 <___vfprintf_internal_r+0x15c4>
 4001d00:	45800204 	addi	r22,r8,8
 4001d04:	003eca06 	br	4001830 <__alt_data_end+0xff001830>
 4001d08:	01010074 	movhi	r4,1025
 4001d0c:	213f1d84 	addi	r4,r4,-906
 4001d10:	d9002b15 	stw	r4,172(sp)
 4001d14:	d8802b17 	ldw	r2,172(sp)
 4001d18:	1c07883a 	add	r3,r3,r16
 4001d1c:	8c400044 	addi	r17,r17,1
 4001d20:	b0800015 	stw	r2,0(r22)
 4001d24:	b4000115 	stw	r16,4(r22)
 4001d28:	d8c02015 	stw	r3,128(sp)
 4001d2c:	dc401f15 	stw	r17,124(sp)
 4001d30:	008001c4 	movi	r2,7
 4001d34:	147ebd0e 	bge	r2,r17,400182c <__alt_data_end+0xff00182c>
 4001d38:	d9002c17 	ldw	r4,176(sp)
 4001d3c:	d9801e04 	addi	r6,sp,120
 4001d40:	b80b883a 	mov	r5,r23
 4001d44:	4007ed80 	call	4007ed8 <__sprint_r>
 4001d48:	103b8c1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001d4c:	d8c02017 	ldw	r3,128(sp)
 4001d50:	dc401f17 	ldw	r17,124(sp)
 4001d54:	dd800404 	addi	r22,sp,16
 4001d58:	003eb506 	br	4001830 <__alt_data_end+0xff001830>
 4001d5c:	d9002c17 	ldw	r4,176(sp)
 4001d60:	d9801e04 	addi	r6,sp,120
 4001d64:	b80b883a 	mov	r5,r23
 4001d68:	4007ed80 	call	4007ed8 <__sprint_r>
 4001d6c:	103b831e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001d70:	d8c02017 	ldw	r3,128(sp)
 4001d74:	dc401f17 	ldw	r17,124(sp)
 4001d78:	da000404 	addi	r8,sp,16
 4001d7c:	003e8d06 	br	40017b4 <__alt_data_end+0xff0017b4>
 4001d80:	d9002c17 	ldw	r4,176(sp)
 4001d84:	d9801e04 	addi	r6,sp,120
 4001d88:	b80b883a 	mov	r5,r23
 4001d8c:	4007ed80 	call	4007ed8 <__sprint_r>
 4001d90:	103b7a1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001d94:	d8c02017 	ldw	r3,128(sp)
 4001d98:	dc401f17 	ldw	r17,124(sp)
 4001d9c:	dd800404 	addi	r22,sp,16
 4001da0:	003e8f06 	br	40017e0 <__alt_data_end+0xff0017e0>
 4001da4:	0027883a 	mov	r19,zero
 4001da8:	003f4a06 	br	4001ad4 <__alt_data_end+0xff001ad4>
 4001dac:	d9002c17 	ldw	r4,176(sp)
 4001db0:	d9801e04 	addi	r6,sp,120
 4001db4:	b80b883a 	mov	r5,r23
 4001db8:	4007ed80 	call	4007ed8 <__sprint_r>
 4001dbc:	103b6f1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4001dc0:	d8c02017 	ldw	r3,128(sp)
 4001dc4:	da000404 	addi	r8,sp,16
 4001dc8:	003c9d06 	br	4001040 <__alt_data_end+0xff001040>
 4001dcc:	04e7c83a 	sub	r19,zero,r19
 4001dd0:	9804c03a 	cmpne	r2,r19,zero
 4001dd4:	05adc83a 	sub	r22,zero,r22
 4001dd8:	b0adc83a 	sub	r22,r22,r2
 4001ddc:	d8802917 	ldw	r2,164(sp)
 4001de0:	07000b44 	movi	fp,45
 4001de4:	df002785 	stb	fp,158(sp)
 4001de8:	10017b16 	blt	r2,zero,40023d8 <___vfprintf_internal_r+0x1c64>
 4001dec:	00bfdfc4 	movi	r2,-129
 4001df0:	90a4703a 	and	r18,r18,r2
 4001df4:	003bb106 	br	4000cbc <__alt_data_end+0xff000cbc>
 4001df8:	d9003617 	ldw	r4,216(sp)
 4001dfc:	d9403817 	ldw	r5,224(sp)
 4001e00:	da003d15 	stw	r8,244(sp)
 4001e04:	4007afc0 	call	4007afc <__fpclassifyd>
 4001e08:	da003d17 	ldw	r8,244(sp)
 4001e0c:	1000f026 	beq	r2,zero,40021d0 <___vfprintf_internal_r+0x1a5c>
 4001e10:	d9002917 	ldw	r4,164(sp)
 4001e14:	05bff7c4 	movi	r22,-33
 4001e18:	00bfffc4 	movi	r2,-1
 4001e1c:	8dac703a 	and	r22,r17,r22
 4001e20:	20820026 	beq	r4,r2,4002624 <___vfprintf_internal_r+0x1eb0>
 4001e24:	008011c4 	movi	r2,71
 4001e28:	b081f726 	beq	r22,r2,4002608 <___vfprintf_internal_r+0x1e94>
 4001e2c:	d9003817 	ldw	r4,224(sp)
 4001e30:	90c04014 	ori	r3,r18,256
 4001e34:	d8c02b15 	stw	r3,172(sp)
 4001e38:	20021516 	blt	r4,zero,4002690 <___vfprintf_internal_r+0x1f1c>
 4001e3c:	dcc03817 	ldw	r19,224(sp)
 4001e40:	d8002a05 	stb	zero,168(sp)
 4001e44:	00801984 	movi	r2,102
 4001e48:	8881f926 	beq	r17,r2,4002630 <___vfprintf_internal_r+0x1ebc>
 4001e4c:	00801184 	movi	r2,70
 4001e50:	88821c26 	beq	r17,r2,40026c4 <___vfprintf_internal_r+0x1f50>
 4001e54:	00801144 	movi	r2,69
 4001e58:	b081ef26 	beq	r22,r2,4002618 <___vfprintf_internal_r+0x1ea4>
 4001e5c:	d8c02917 	ldw	r3,164(sp)
 4001e60:	d8802104 	addi	r2,sp,132
 4001e64:	d8800315 	stw	r2,12(sp)
 4001e68:	d9403617 	ldw	r5,216(sp)
 4001e6c:	d8802504 	addi	r2,sp,148
 4001e70:	d9002c17 	ldw	r4,176(sp)
 4001e74:	d8800215 	stw	r2,8(sp)
 4001e78:	d8802604 	addi	r2,sp,152
 4001e7c:	d8c00015 	stw	r3,0(sp)
 4001e80:	d8800115 	stw	r2,4(sp)
 4001e84:	01c00084 	movi	r7,2
 4001e88:	980d883a 	mov	r6,r19
 4001e8c:	d8c03c15 	stw	r3,240(sp)
 4001e90:	da003d15 	stw	r8,244(sp)
 4001e94:	4002d980 	call	4002d98 <_dtoa_r>
 4001e98:	1021883a 	mov	r16,r2
 4001e9c:	008019c4 	movi	r2,103
 4001ea0:	d8c03c17 	ldw	r3,240(sp)
 4001ea4:	da003d17 	ldw	r8,244(sp)
 4001ea8:	88817126 	beq	r17,r2,4002470 <___vfprintf_internal_r+0x1cfc>
 4001eac:	008011c4 	movi	r2,71
 4001eb0:	88829226 	beq	r17,r2,40028fc <___vfprintf_internal_r+0x2188>
 4001eb4:	80f9883a 	add	fp,r16,r3
 4001eb8:	d9003617 	ldw	r4,216(sp)
 4001ebc:	000d883a 	mov	r6,zero
 4001ec0:	000f883a 	mov	r7,zero
 4001ec4:	980b883a 	mov	r5,r19
 4001ec8:	da003d15 	stw	r8,244(sp)
 4001ecc:	400bb500 	call	400bb50 <__eqdf2>
 4001ed0:	da003d17 	ldw	r8,244(sp)
 4001ed4:	10018d26 	beq	r2,zero,400250c <___vfprintf_internal_r+0x1d98>
 4001ed8:	d8802117 	ldw	r2,132(sp)
 4001edc:	1700062e 	bgeu	r2,fp,4001ef8 <___vfprintf_internal_r+0x1784>
 4001ee0:	01000c04 	movi	r4,48
 4001ee4:	10c00044 	addi	r3,r2,1
 4001ee8:	d8c02115 	stw	r3,132(sp)
 4001eec:	11000005 	stb	r4,0(r2)
 4001ef0:	d8802117 	ldw	r2,132(sp)
 4001ef4:	173ffb36 	bltu	r2,fp,4001ee4 <__alt_data_end+0xff001ee4>
 4001ef8:	1405c83a 	sub	r2,r2,r16
 4001efc:	d8803315 	stw	r2,204(sp)
 4001f00:	008011c4 	movi	r2,71
 4001f04:	b0817626 	beq	r22,r2,40024e0 <___vfprintf_internal_r+0x1d6c>
 4001f08:	00801944 	movi	r2,101
 4001f0c:	1442810e 	bge	r2,r17,4002914 <___vfprintf_internal_r+0x21a0>
 4001f10:	d8c02617 	ldw	r3,152(sp)
 4001f14:	00801984 	movi	r2,102
 4001f18:	d8c03215 	stw	r3,200(sp)
 4001f1c:	8881fe26 	beq	r17,r2,4002718 <___vfprintf_internal_r+0x1fa4>
 4001f20:	d8c03217 	ldw	r3,200(sp)
 4001f24:	d9003317 	ldw	r4,204(sp)
 4001f28:	1901dd16 	blt	r3,r4,40026a0 <___vfprintf_internal_r+0x1f2c>
 4001f2c:	9480004c 	andi	r18,r18,1
 4001f30:	90022b1e 	bne	r18,zero,40027e0 <___vfprintf_internal_r+0x206c>
 4001f34:	1805883a 	mov	r2,r3
 4001f38:	18028016 	blt	r3,zero,400293c <___vfprintf_internal_r+0x21c8>
 4001f3c:	d8c03217 	ldw	r3,200(sp)
 4001f40:	044019c4 	movi	r17,103
 4001f44:	d8c02e15 	stw	r3,184(sp)
 4001f48:	df002a07 	ldb	fp,168(sp)
 4001f4c:	e001531e 	bne	fp,zero,400249c <___vfprintf_internal_r+0x1d28>
 4001f50:	df002783 	ldbu	fp,158(sp)
 4001f54:	d8802a15 	stw	r2,168(sp)
 4001f58:	dc802b17 	ldw	r18,172(sp)
 4001f5c:	d8002915 	stw	zero,164(sp)
 4001f60:	003bd106 	br	4000ea8 <__alt_data_end+0xff000ea8>
 4001f64:	d8802d17 	ldw	r2,180(sp)
 4001f68:	d8c02d17 	ldw	r3,180(sp)
 4001f6c:	d9002d17 	ldw	r4,180(sp)
 4001f70:	10800017 	ldw	r2,0(r2)
 4001f74:	18c00117 	ldw	r3,4(r3)
 4001f78:	21000204 	addi	r4,r4,8
 4001f7c:	d8803615 	stw	r2,216(sp)
 4001f80:	d8c03815 	stw	r3,224(sp)
 4001f84:	d9002d15 	stw	r4,180(sp)
 4001f88:	003b7506 	br	4000d60 <__alt_data_end+0xff000d60>
 4001f8c:	ac400007 	ldb	r17,0(r21)
 4001f90:	003a5906 	br	40008f8 <__alt_data_end+0xff0008f8>
 4001f94:	9080100c 	andi	r2,r18,64
 4001f98:	1000a826 	beq	r2,zero,400223c <___vfprintf_internal_r+0x1ac8>
 4001f9c:	d9002d17 	ldw	r4,180(sp)
 4001fa0:	002d883a 	mov	r22,zero
 4001fa4:	24c0000b 	ldhu	r19,0(r4)
 4001fa8:	21000104 	addi	r4,r4,4
 4001fac:	d9002d15 	stw	r4,180(sp)
 4001fb0:	003ccb06 	br	40012e0 <__alt_data_end+0xff0012e0>
 4001fb4:	d8c02d17 	ldw	r3,180(sp)
 4001fb8:	d9002917 	ldw	r4,164(sp)
 4001fbc:	002d883a 	mov	r22,zero
 4001fc0:	18800104 	addi	r2,r3,4
 4001fc4:	1cc00017 	ldw	r19,0(r3)
 4001fc8:	203ebb0e 	bge	r4,zero,4001ab8 <__alt_data_end+0xff001ab8>
 4001fcc:	003ef106 	br	4001b94 <__alt_data_end+0xff001b94>
 4001fd0:	9080040c 	andi	r2,r18,16
 4001fd4:	1000921e 	bne	r2,zero,4002220 <___vfprintf_internal_r+0x1aac>
 4001fd8:	9480100c 	andi	r18,r18,64
 4001fdc:	90013926 	beq	r18,zero,40024c4 <___vfprintf_internal_r+0x1d50>
 4001fe0:	d9002d17 	ldw	r4,180(sp)
 4001fe4:	d9402f17 	ldw	r5,188(sp)
 4001fe8:	20800017 	ldw	r2,0(r4)
 4001fec:	21000104 	addi	r4,r4,4
 4001ff0:	d9002d15 	stw	r4,180(sp)
 4001ff4:	1140000d 	sth	r5,0(r2)
 4001ff8:	003a1606 	br	4000854 <__alt_data_end+0xff000854>
 4001ffc:	9080100c 	andi	r2,r18,64
 4002000:	10008026 	beq	r2,zero,4002204 <___vfprintf_internal_r+0x1a90>
 4002004:	d8c02d17 	ldw	r3,180(sp)
 4002008:	1cc0000f 	ldh	r19,0(r3)
 400200c:	18c00104 	addi	r3,r3,4
 4002010:	d8c02d15 	stw	r3,180(sp)
 4002014:	982dd7fa 	srai	r22,r19,31
 4002018:	b005883a 	mov	r2,r22
 400201c:	003b1f06 	br	4000c9c <__alt_data_end+0xff000c9c>
 4002020:	9080100c 	andi	r2,r18,64
 4002024:	d8002785 	stb	zero,158(sp)
 4002028:	10008a1e 	bne	r2,zero,4002254 <___vfprintf_internal_r+0x1ae0>
 400202c:	d9402d17 	ldw	r5,180(sp)
 4002030:	d8c02917 	ldw	r3,164(sp)
 4002034:	002d883a 	mov	r22,zero
 4002038:	28800104 	addi	r2,r5,4
 400203c:	2cc00017 	ldw	r19,0(r5)
 4002040:	183e4b0e 	bge	r3,zero,4001970 <__alt_data_end+0xff001970>
 4002044:	9d86b03a 	or	r3,r19,r22
 4002048:	d8802d15 	stw	r2,180(sp)
 400204c:	183e4c1e 	bne	r3,zero,4001980 <__alt_data_end+0xff001980>
 4002050:	0039883a 	mov	fp,zero
 4002054:	0005883a 	mov	r2,zero
 4002058:	003d4006 	br	400155c <__alt_data_end+0xff00155c>
 400205c:	01410074 	movhi	r5,1025
 4002060:	297f1d84 	addi	r5,r5,-906
 4002064:	d9402b15 	stw	r5,172(sp)
 4002068:	d9402b17 	ldw	r5,172(sp)
 400206c:	1c47883a 	add	r3,r3,r17
 4002070:	10800044 	addi	r2,r2,1
 4002074:	41400015 	stw	r5,0(r8)
 4002078:	44400115 	stw	r17,4(r8)
 400207c:	d8c02015 	stw	r3,128(sp)
 4002080:	d8801f15 	stw	r2,124(sp)
 4002084:	010001c4 	movi	r4,7
 4002088:	20bec816 	blt	r4,r2,4001bac <__alt_data_end+0xff001bac>
 400208c:	42000204 	addi	r8,r8,8
 4002090:	003ecd06 	br	4001bc8 <__alt_data_end+0xff001bc8>
 4002094:	d9002917 	ldw	r4,164(sp)
 4002098:	d8002785 	stb	zero,158(sp)
 400209c:	203d2d16 	blt	r4,zero,4001554 <__alt_data_end+0xff001554>
 40020a0:	00bfdfc4 	movi	r2,-129
 40020a4:	90a4703a 	and	r18,r18,r2
 40020a8:	003a9106 	br	4000af0 <__alt_data_end+0xff000af0>
 40020ac:	01010074 	movhi	r4,1025
 40020b0:	213f1d84 	addi	r4,r4,-906
 40020b4:	d9002b15 	stw	r4,172(sp)
 40020b8:	003c0c06 	br	40010ec <__alt_data_end+0xff0010ec>
 40020bc:	d9002c17 	ldw	r4,176(sp)
 40020c0:	d9801e04 	addi	r6,sp,120
 40020c4:	b80b883a 	mov	r5,r23
 40020c8:	4007ed80 	call	4007ed8 <__sprint_r>
 40020cc:	103aab1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40020d0:	d8c02017 	ldw	r3,128(sp)
 40020d4:	da000404 	addi	r8,sp,16
 40020d8:	003d4106 	br	40015e0 <__alt_data_end+0xff0015e0>
 40020dc:	d8801f17 	ldw	r2,124(sp)
 40020e0:	01410074 	movhi	r5,1025
 40020e4:	01000044 	movi	r4,1
 40020e8:	18c00044 	addi	r3,r3,1
 40020ec:	10800044 	addi	r2,r2,1
 40020f0:	297f1d04 	addi	r5,r5,-908
 40020f4:	41000115 	stw	r4,4(r8)
 40020f8:	41400015 	stw	r5,0(r8)
 40020fc:	d8c02015 	stw	r3,128(sp)
 4002100:	d8801f15 	stw	r2,124(sp)
 4002104:	010001c4 	movi	r4,7
 4002108:	20805c16 	blt	r4,r2,400227c <___vfprintf_internal_r+0x1b08>
 400210c:	42000204 	addi	r8,r8,8
 4002110:	8800041e 	bne	r17,zero,4002124 <___vfprintf_internal_r+0x19b0>
 4002114:	d8803317 	ldw	r2,204(sp)
 4002118:	1000021e 	bne	r2,zero,4002124 <___vfprintf_internal_r+0x19b0>
 400211c:	9080004c 	andi	r2,r18,1
 4002120:	103c0926 	beq	r2,zero,4001148 <__alt_data_end+0xff001148>
 4002124:	d9003717 	ldw	r4,220(sp)
 4002128:	d8801f17 	ldw	r2,124(sp)
 400212c:	d9403417 	ldw	r5,208(sp)
 4002130:	20c7883a 	add	r3,r4,r3
 4002134:	10800044 	addi	r2,r2,1
 4002138:	41000115 	stw	r4,4(r8)
 400213c:	41400015 	stw	r5,0(r8)
 4002140:	d8c02015 	stw	r3,128(sp)
 4002144:	d8801f15 	stw	r2,124(sp)
 4002148:	010001c4 	movi	r4,7
 400214c:	20812116 	blt	r4,r2,40025d4 <___vfprintf_internal_r+0x1e60>
 4002150:	42000204 	addi	r8,r8,8
 4002154:	0463c83a 	sub	r17,zero,r17
 4002158:	0440730e 	bge	zero,r17,4002328 <___vfprintf_internal_r+0x1bb4>
 400215c:	05800404 	movi	r22,16
 4002160:	b440860e 	bge	r22,r17,400237c <___vfprintf_internal_r+0x1c08>
 4002164:	01410074 	movhi	r5,1025
 4002168:	297f1d84 	addi	r5,r5,-906
 400216c:	d9402b15 	stw	r5,172(sp)
 4002170:	070001c4 	movi	fp,7
 4002174:	dcc02c17 	ldw	r19,176(sp)
 4002178:	00000306 	br	4002188 <___vfprintf_internal_r+0x1a14>
 400217c:	42000204 	addi	r8,r8,8
 4002180:	8c7ffc04 	addi	r17,r17,-16
 4002184:	b440800e 	bge	r22,r17,4002388 <___vfprintf_internal_r+0x1c14>
 4002188:	18c00404 	addi	r3,r3,16
 400218c:	10800044 	addi	r2,r2,1
 4002190:	45000015 	stw	r20,0(r8)
 4002194:	45800115 	stw	r22,4(r8)
 4002198:	d8c02015 	stw	r3,128(sp)
 400219c:	d8801f15 	stw	r2,124(sp)
 40021a0:	e0bff60e 	bge	fp,r2,400217c <__alt_data_end+0xff00217c>
 40021a4:	d9801e04 	addi	r6,sp,120
 40021a8:	b80b883a 	mov	r5,r23
 40021ac:	9809883a 	mov	r4,r19
 40021b0:	4007ed80 	call	4007ed8 <__sprint_r>
 40021b4:	103a711e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40021b8:	d8c02017 	ldw	r3,128(sp)
 40021bc:	d8801f17 	ldw	r2,124(sp)
 40021c0:	da000404 	addi	r8,sp,16
 40021c4:	003fee06 	br	4002180 <__alt_data_end+0xff002180>
 40021c8:	00bfffc4 	movi	r2,-1
 40021cc:	003a6f06 	br	4000b8c <__alt_data_end+0xff000b8c>
 40021d0:	008011c4 	movi	r2,71
 40021d4:	1440b816 	blt	r2,r17,40024b8 <___vfprintf_internal_r+0x1d44>
 40021d8:	04010074 	movhi	r16,1025
 40021dc:	843f0f04 	addi	r16,r16,-964
 40021e0:	00c000c4 	movi	r3,3
 40021e4:	00bfdfc4 	movi	r2,-129
 40021e8:	d8c02a15 	stw	r3,168(sp)
 40021ec:	90a4703a 	and	r18,r18,r2
 40021f0:	df002783 	ldbu	fp,158(sp)
 40021f4:	d8c02e15 	stw	r3,184(sp)
 40021f8:	d8002915 	stw	zero,164(sp)
 40021fc:	d8003215 	stw	zero,200(sp)
 4002200:	003b2906 	br	4000ea8 <__alt_data_end+0xff000ea8>
 4002204:	d9002d17 	ldw	r4,180(sp)
 4002208:	24c00017 	ldw	r19,0(r4)
 400220c:	21000104 	addi	r4,r4,4
 4002210:	d9002d15 	stw	r4,180(sp)
 4002214:	982dd7fa 	srai	r22,r19,31
 4002218:	b005883a 	mov	r2,r22
 400221c:	003a9f06 	br	4000c9c <__alt_data_end+0xff000c9c>
 4002220:	d9402d17 	ldw	r5,180(sp)
 4002224:	d8c02f17 	ldw	r3,188(sp)
 4002228:	28800017 	ldw	r2,0(r5)
 400222c:	29400104 	addi	r5,r5,4
 4002230:	d9402d15 	stw	r5,180(sp)
 4002234:	10c00015 	stw	r3,0(r2)
 4002238:	00398606 	br	4000854 <__alt_data_end+0xff000854>
 400223c:	d9402d17 	ldw	r5,180(sp)
 4002240:	002d883a 	mov	r22,zero
 4002244:	2cc00017 	ldw	r19,0(r5)
 4002248:	29400104 	addi	r5,r5,4
 400224c:	d9402d15 	stw	r5,180(sp)
 4002250:	003c2306 	br	40012e0 <__alt_data_end+0xff0012e0>
 4002254:	d8c02d17 	ldw	r3,180(sp)
 4002258:	d9002917 	ldw	r4,164(sp)
 400225c:	002d883a 	mov	r22,zero
 4002260:	18800104 	addi	r2,r3,4
 4002264:	1cc0000b 	ldhu	r19,0(r3)
 4002268:	203dc10e 	bge	r4,zero,4001970 <__alt_data_end+0xff001970>
 400226c:	003f7506 	br	4002044 <__alt_data_end+0xff002044>
 4002270:	04010074 	movhi	r16,1025
 4002274:	843f0d04 	addi	r16,r16,-972
 4002278:	003acc06 	br	4000dac <__alt_data_end+0xff000dac>
 400227c:	d9002c17 	ldw	r4,176(sp)
 4002280:	d9801e04 	addi	r6,sp,120
 4002284:	b80b883a 	mov	r5,r23
 4002288:	4007ed80 	call	4007ed8 <__sprint_r>
 400228c:	103a3b1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4002290:	dc402617 	ldw	r17,152(sp)
 4002294:	d8c02017 	ldw	r3,128(sp)
 4002298:	da000404 	addi	r8,sp,16
 400229c:	003f9c06 	br	4002110 <__alt_data_end+0xff002110>
 40022a0:	ac400043 	ldbu	r17,1(r21)
 40022a4:	94800814 	ori	r18,r18,32
 40022a8:	ad400044 	addi	r21,r21,1
 40022ac:	8c403fcc 	andi	r17,r17,255
 40022b0:	8c40201c 	xori	r17,r17,128
 40022b4:	8c7fe004 	addi	r17,r17,-128
 40022b8:	00398f06 	br	40008f8 <__alt_data_end+0xff0008f8>
 40022bc:	d8c02d15 	stw	r3,180(sp)
 40022c0:	0039883a 	mov	fp,zero
 40022c4:	003e3506 	br	4001b9c <__alt_data_end+0xff001b9c>
 40022c8:	d9002c17 	ldw	r4,176(sp)
 40022cc:	d9801e04 	addi	r6,sp,120
 40022d0:	b80b883a 	mov	r5,r23
 40022d4:	4007ed80 	call	4007ed8 <__sprint_r>
 40022d8:	103a281e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40022dc:	d8c02017 	ldw	r3,128(sp)
 40022e0:	da000404 	addi	r8,sp,16
 40022e4:	003cd006 	br	4001628 <__alt_data_end+0xff001628>
 40022e8:	8009883a 	mov	r4,r16
 40022ec:	da003d15 	stw	r8,244(sp)
 40022f0:	40006dc0 	call	40006dc <strlen>
 40022f4:	d8802e15 	stw	r2,184(sp)
 40022f8:	da003d17 	ldw	r8,244(sp)
 40022fc:	103c340e 	bge	r2,zero,40013d0 <__alt_data_end+0xff0013d0>
 4002300:	0005883a 	mov	r2,zero
 4002304:	003c3206 	br	40013d0 <__alt_data_end+0xff0013d0>
 4002308:	d9002c17 	ldw	r4,176(sp)
 400230c:	d9801e04 	addi	r6,sp,120
 4002310:	b80b883a 	mov	r5,r23
 4002314:	4007ed80 	call	4007ed8 <__sprint_r>
 4002318:	103a181e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 400231c:	d8c02017 	ldw	r3,128(sp)
 4002320:	d8801f17 	ldw	r2,124(sp)
 4002324:	da000404 	addi	r8,sp,16
 4002328:	d9403317 	ldw	r5,204(sp)
 400232c:	10800044 	addi	r2,r2,1
 4002330:	44000015 	stw	r16,0(r8)
 4002334:	28c7883a 	add	r3,r5,r3
 4002338:	003b7d06 	br	4001130 <__alt_data_end+0xff001130>
 400233c:	01010074 	movhi	r4,1025
 4002340:	213f2184 	addi	r4,r4,-890
 4002344:	d9003515 	stw	r4,212(sp)
 4002348:	003b1406 	br	4000f9c <__alt_data_end+0xff000f9c>
 400234c:	013fffc4 	movi	r4,-1
 4002350:	003a3506 	br	4000c28 <__alt_data_end+0xff000c28>
 4002354:	0023883a 	mov	r17,zero
 4002358:	003d9d06 	br	40019d0 <__alt_data_end+0xff0019d0>
 400235c:	d9002c17 	ldw	r4,176(sp)
 4002360:	d9801e04 	addi	r6,sp,120
 4002364:	b80b883a 	mov	r5,r23
 4002368:	4007ed80 	call	4007ed8 <__sprint_r>
 400236c:	103a031e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4002370:	d8c02017 	ldw	r3,128(sp)
 4002374:	da000404 	addi	r8,sp,16
 4002378:	003d9406 	br	40019cc <__alt_data_end+0xff0019cc>
 400237c:	01010074 	movhi	r4,1025
 4002380:	213f1d84 	addi	r4,r4,-906
 4002384:	d9002b15 	stw	r4,172(sp)
 4002388:	d9002b17 	ldw	r4,172(sp)
 400238c:	1c47883a 	add	r3,r3,r17
 4002390:	10800044 	addi	r2,r2,1
 4002394:	41000015 	stw	r4,0(r8)
 4002398:	44400115 	stw	r17,4(r8)
 400239c:	d8c02015 	stw	r3,128(sp)
 40023a0:	d8801f15 	stw	r2,124(sp)
 40023a4:	010001c4 	movi	r4,7
 40023a8:	20bfd716 	blt	r4,r2,4002308 <__alt_data_end+0xff002308>
 40023ac:	42000204 	addi	r8,r8,8
 40023b0:	003fdd06 	br	4002328 <__alt_data_end+0xff002328>
 40023b4:	d9002c17 	ldw	r4,176(sp)
 40023b8:	d9801e04 	addi	r6,sp,120
 40023bc:	b80b883a 	mov	r5,r23
 40023c0:	4007ed80 	call	4007ed8 <__sprint_r>
 40023c4:	1039ed1e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40023c8:	d8802617 	ldw	r2,152(sp)
 40023cc:	d8c02017 	ldw	r3,128(sp)
 40023d0:	da000404 	addi	r8,sp,16
 40023d4:	003e1006 	br	4001c18 <__alt_data_end+0xff001c18>
 40023d8:	00800044 	movi	r2,1
 40023dc:	10803fcc 	andi	r2,r2,255
 40023e0:	00c00044 	movi	r3,1
 40023e4:	10fa3526 	beq	r2,r3,4000cbc <__alt_data_end+0xff000cbc>
 40023e8:	00c00084 	movi	r3,2
 40023ec:	10fbcb26 	beq	r2,r3,400131c <__alt_data_end+0xff00131c>
 40023f0:	003a8f06 	br	4000e30 <__alt_data_end+0xff000e30>
 40023f4:	01010074 	movhi	r4,1025
 40023f8:	213f2184 	addi	r4,r4,-890
 40023fc:	d9003515 	stw	r4,212(sp)
 4002400:	003b7606 	br	40011dc <__alt_data_end+0xff0011dc>
 4002404:	d8802917 	ldw	r2,164(sp)
 4002408:	00c00184 	movi	r3,6
 400240c:	1880012e 	bgeu	r3,r2,4002414 <___vfprintf_internal_r+0x1ca0>
 4002410:	1805883a 	mov	r2,r3
 4002414:	d8802e15 	stw	r2,184(sp)
 4002418:	1000ef16 	blt	r2,zero,40027d8 <___vfprintf_internal_r+0x2064>
 400241c:	04010074 	movhi	r16,1025
 4002420:	d8802a15 	stw	r2,168(sp)
 4002424:	dcc02d15 	stw	r19,180(sp)
 4002428:	d8002915 	stw	zero,164(sp)
 400242c:	d8003215 	stw	zero,200(sp)
 4002430:	843f1b04 	addi	r16,r16,-916
 4002434:	0039883a 	mov	fp,zero
 4002438:	003aa206 	br	4000ec4 <__alt_data_end+0xff000ec4>
 400243c:	0021883a 	mov	r16,zero
 4002440:	003e0706 	br	4001c60 <__alt_data_end+0xff001c60>
 4002444:	d9002c17 	ldw	r4,176(sp)
 4002448:	d9801e04 	addi	r6,sp,120
 400244c:	b80b883a 	mov	r5,r23
 4002450:	4007ed80 	call	4007ed8 <__sprint_r>
 4002454:	1039c91e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 4002458:	d8802617 	ldw	r2,152(sp)
 400245c:	d9403317 	ldw	r5,204(sp)
 4002460:	d8c02017 	ldw	r3,128(sp)
 4002464:	da000404 	addi	r8,sp,16
 4002468:	2885c83a 	sub	r2,r5,r2
 400246c:	003dfb06 	br	4001c5c <__alt_data_end+0xff001c5c>
 4002470:	9080004c 	andi	r2,r18,1
 4002474:	103e8f1e 	bne	r2,zero,4001eb4 <__alt_data_end+0xff001eb4>
 4002478:	d8802117 	ldw	r2,132(sp)
 400247c:	003e9e06 	br	4001ef8 <__alt_data_end+0xff001ef8>
 4002480:	1025883a 	mov	r18,r2
 4002484:	0039883a 	mov	fp,zero
 4002488:	00800084 	movi	r2,2
 400248c:	003fd306 	br	40023dc <__alt_data_end+0xff0023dc>
 4002490:	07000b44 	movi	fp,45
 4002494:	df002785 	stb	fp,158(sp)
 4002498:	003a4006 	br	4000d9c <__alt_data_end+0xff000d9c>
 400249c:	00c00b44 	movi	r3,45
 40024a0:	d8c02785 	stb	r3,158(sp)
 40024a4:	d8802a15 	stw	r2,168(sp)
 40024a8:	dc802b17 	ldw	r18,172(sp)
 40024ac:	d8002915 	stw	zero,164(sp)
 40024b0:	07000b44 	movi	fp,45
 40024b4:	003a8006 	br	4000eb8 <__alt_data_end+0xff000eb8>
 40024b8:	04010074 	movhi	r16,1025
 40024bc:	843f1004 	addi	r16,r16,-960
 40024c0:	003f4706 	br	40021e0 <__alt_data_end+0xff0021e0>
 40024c4:	d8c02d17 	ldw	r3,180(sp)
 40024c8:	d9002f17 	ldw	r4,188(sp)
 40024cc:	18800017 	ldw	r2,0(r3)
 40024d0:	18c00104 	addi	r3,r3,4
 40024d4:	d8c02d15 	stw	r3,180(sp)
 40024d8:	11000015 	stw	r4,0(r2)
 40024dc:	0038dd06 	br	4000854 <__alt_data_end+0xff000854>
 40024e0:	dd802617 	ldw	r22,152(sp)
 40024e4:	00bfff44 	movi	r2,-3
 40024e8:	b0801c16 	blt	r22,r2,400255c <___vfprintf_internal_r+0x1de8>
 40024ec:	d9402917 	ldw	r5,164(sp)
 40024f0:	2d801a16 	blt	r5,r22,400255c <___vfprintf_internal_r+0x1de8>
 40024f4:	dd803215 	stw	r22,200(sp)
 40024f8:	003e8906 	br	4001f20 <__alt_data_end+0xff001f20>
 40024fc:	01010074 	movhi	r4,1025
 4002500:	213f1d84 	addi	r4,r4,-906
 4002504:	d9002b15 	stw	r4,172(sp)
 4002508:	003c9106 	br	4001750 <__alt_data_end+0xff001750>
 400250c:	e005883a 	mov	r2,fp
 4002510:	003e7906 	br	4001ef8 <__alt_data_end+0xff001ef8>
 4002514:	d9402917 	ldw	r5,164(sp)
 4002518:	df002783 	ldbu	fp,158(sp)
 400251c:	dcc02d15 	stw	r19,180(sp)
 4002520:	d9402a15 	stw	r5,168(sp)
 4002524:	d9402e15 	stw	r5,184(sp)
 4002528:	d8002915 	stw	zero,164(sp)
 400252c:	d8003215 	stw	zero,200(sp)
 4002530:	003a5d06 	br	4000ea8 <__alt_data_end+0xff000ea8>
 4002534:	9080004c 	andi	r2,r18,1
 4002538:	0039883a 	mov	fp,zero
 400253c:	10000426 	beq	r2,zero,4002550 <___vfprintf_internal_r+0x1ddc>
 4002540:	00800c04 	movi	r2,48
 4002544:	dc001dc4 	addi	r16,sp,119
 4002548:	d8801dc5 	stb	r2,119(sp)
 400254c:	003b8006 	br	4001350 <__alt_data_end+0xff001350>
 4002550:	d8002e15 	stw	zero,184(sp)
 4002554:	dc001e04 	addi	r16,sp,120
 4002558:	003a4d06 	br	4000e90 <__alt_data_end+0xff000e90>
 400255c:	8c7fff84 	addi	r17,r17,-2
 4002560:	b5bfffc4 	addi	r22,r22,-1
 4002564:	dd802615 	stw	r22,152(sp)
 4002568:	dc4022c5 	stb	r17,139(sp)
 400256c:	b000bf16 	blt	r22,zero,400286c <___vfprintf_internal_r+0x20f8>
 4002570:	00800ac4 	movi	r2,43
 4002574:	d8802305 	stb	r2,140(sp)
 4002578:	00800244 	movi	r2,9
 400257c:	15807016 	blt	r2,r22,4002740 <___vfprintf_internal_r+0x1fcc>
 4002580:	00800c04 	movi	r2,48
 4002584:	b5800c04 	addi	r22,r22,48
 4002588:	d8802345 	stb	r2,141(sp)
 400258c:	dd802385 	stb	r22,142(sp)
 4002590:	d88023c4 	addi	r2,sp,143
 4002594:	df0022c4 	addi	fp,sp,139
 4002598:	d8c03317 	ldw	r3,204(sp)
 400259c:	1739c83a 	sub	fp,r2,fp
 40025a0:	d9003317 	ldw	r4,204(sp)
 40025a4:	e0c7883a 	add	r3,fp,r3
 40025a8:	df003a15 	stw	fp,232(sp)
 40025ac:	d8c02e15 	stw	r3,184(sp)
 40025b0:	00800044 	movi	r2,1
 40025b4:	1100b30e 	bge	r2,r4,4002884 <___vfprintf_internal_r+0x2110>
 40025b8:	d8c02e17 	ldw	r3,184(sp)
 40025bc:	18c00044 	addi	r3,r3,1
 40025c0:	d8c02e15 	stw	r3,184(sp)
 40025c4:	1805883a 	mov	r2,r3
 40025c8:	1800ac16 	blt	r3,zero,400287c <___vfprintf_internal_r+0x2108>
 40025cc:	d8003215 	stw	zero,200(sp)
 40025d0:	003e5d06 	br	4001f48 <__alt_data_end+0xff001f48>
 40025d4:	d9002c17 	ldw	r4,176(sp)
 40025d8:	d9801e04 	addi	r6,sp,120
 40025dc:	b80b883a 	mov	r5,r23
 40025e0:	4007ed80 	call	4007ed8 <__sprint_r>
 40025e4:	1039651e 	bne	r2,zero,4000b7c <__alt_data_end+0xff000b7c>
 40025e8:	dc402617 	ldw	r17,152(sp)
 40025ec:	d8c02017 	ldw	r3,128(sp)
 40025f0:	d8801f17 	ldw	r2,124(sp)
 40025f4:	da000404 	addi	r8,sp,16
 40025f8:	003ed606 	br	4002154 <__alt_data_end+0xff002154>
 40025fc:	582b883a 	mov	r21,r11
 4002600:	d8002915 	stw	zero,164(sp)
 4002604:	0038bd06 	br	40008fc <__alt_data_end+0xff0008fc>
 4002608:	d8802917 	ldw	r2,164(sp)
 400260c:	103e071e 	bne	r2,zero,4001e2c <__alt_data_end+0xff001e2c>
 4002610:	dc002915 	stw	r16,164(sp)
 4002614:	003e0506 	br	4001e2c <__alt_data_end+0xff001e2c>
 4002618:	d9002917 	ldw	r4,164(sp)
 400261c:	20c00044 	addi	r3,r4,1
 4002620:	003e0f06 	br	4001e60 <__alt_data_end+0xff001e60>
 4002624:	01400184 	movi	r5,6
 4002628:	d9402915 	stw	r5,164(sp)
 400262c:	003dff06 	br	4001e2c <__alt_data_end+0xff001e2c>
 4002630:	d8802104 	addi	r2,sp,132
 4002634:	d8800315 	stw	r2,12(sp)
 4002638:	d8802504 	addi	r2,sp,148
 400263c:	d8800215 	stw	r2,8(sp)
 4002640:	d8802604 	addi	r2,sp,152
 4002644:	d8800115 	stw	r2,4(sp)
 4002648:	d8802917 	ldw	r2,164(sp)
 400264c:	d9403617 	ldw	r5,216(sp)
 4002650:	d9002c17 	ldw	r4,176(sp)
 4002654:	d8800015 	stw	r2,0(sp)
 4002658:	01c000c4 	movi	r7,3
 400265c:	980d883a 	mov	r6,r19
 4002660:	da003d15 	stw	r8,244(sp)
 4002664:	4002d980 	call	4002d98 <_dtoa_r>
 4002668:	d8c02917 	ldw	r3,164(sp)
 400266c:	da003d17 	ldw	r8,244(sp)
 4002670:	1021883a 	mov	r16,r2
 4002674:	10f9883a 	add	fp,r2,r3
 4002678:	81000007 	ldb	r4,0(r16)
 400267c:	00800c04 	movi	r2,48
 4002680:	20805e26 	beq	r4,r2,40027fc <___vfprintf_internal_r+0x2088>
 4002684:	d8c02617 	ldw	r3,152(sp)
 4002688:	e0f9883a 	add	fp,fp,r3
 400268c:	003e0a06 	br	4001eb8 <__alt_data_end+0xff001eb8>
 4002690:	00c00b44 	movi	r3,45
 4002694:	24e0003c 	xorhi	r19,r4,32768
 4002698:	d8c02a05 	stb	r3,168(sp)
 400269c:	003de906 	br	4001e44 <__alt_data_end+0xff001e44>
 40026a0:	d8c03217 	ldw	r3,200(sp)
 40026a4:	00c07a0e 	bge	zero,r3,4002890 <___vfprintf_internal_r+0x211c>
 40026a8:	00800044 	movi	r2,1
 40026ac:	d9003317 	ldw	r4,204(sp)
 40026b0:	1105883a 	add	r2,r2,r4
 40026b4:	d8802e15 	stw	r2,184(sp)
 40026b8:	10004e16 	blt	r2,zero,40027f4 <___vfprintf_internal_r+0x2080>
 40026bc:	044019c4 	movi	r17,103
 40026c0:	003e2106 	br	4001f48 <__alt_data_end+0xff001f48>
 40026c4:	d9002917 	ldw	r4,164(sp)
 40026c8:	d8802104 	addi	r2,sp,132
 40026cc:	d8800315 	stw	r2,12(sp)
 40026d0:	d9000015 	stw	r4,0(sp)
 40026d4:	d8802504 	addi	r2,sp,148
 40026d8:	d9403617 	ldw	r5,216(sp)
 40026dc:	d9002c17 	ldw	r4,176(sp)
 40026e0:	d8800215 	stw	r2,8(sp)
 40026e4:	d8802604 	addi	r2,sp,152
 40026e8:	d8800115 	stw	r2,4(sp)
 40026ec:	01c000c4 	movi	r7,3
 40026f0:	980d883a 	mov	r6,r19
 40026f4:	da003d15 	stw	r8,244(sp)
 40026f8:	4002d980 	call	4002d98 <_dtoa_r>
 40026fc:	d8c02917 	ldw	r3,164(sp)
 4002700:	da003d17 	ldw	r8,244(sp)
 4002704:	1021883a 	mov	r16,r2
 4002708:	00801184 	movi	r2,70
 400270c:	80f9883a 	add	fp,r16,r3
 4002710:	88bfd926 	beq	r17,r2,4002678 <__alt_data_end+0xff002678>
 4002714:	003de806 	br	4001eb8 <__alt_data_end+0xff001eb8>
 4002718:	d9002917 	ldw	r4,164(sp)
 400271c:	00c04d0e 	bge	zero,r3,4002854 <___vfprintf_internal_r+0x20e0>
 4002720:	2000441e 	bne	r4,zero,4002834 <___vfprintf_internal_r+0x20c0>
 4002724:	9480004c 	andi	r18,r18,1
 4002728:	9000421e 	bne	r18,zero,4002834 <___vfprintf_internal_r+0x20c0>
 400272c:	1805883a 	mov	r2,r3
 4002730:	18007016 	blt	r3,zero,40028f4 <___vfprintf_internal_r+0x2180>
 4002734:	d8c03217 	ldw	r3,200(sp)
 4002738:	d8c02e15 	stw	r3,184(sp)
 400273c:	003e0206 	br	4001f48 <__alt_data_end+0xff001f48>
 4002740:	df0022c4 	addi	fp,sp,139
 4002744:	dc002915 	stw	r16,164(sp)
 4002748:	4027883a 	mov	r19,r8
 400274c:	e021883a 	mov	r16,fp
 4002750:	b009883a 	mov	r4,r22
 4002754:	01400284 	movi	r5,10
 4002758:	400a88c0 	call	400a88c <__modsi3>
 400275c:	10800c04 	addi	r2,r2,48
 4002760:	843fffc4 	addi	r16,r16,-1
 4002764:	b009883a 	mov	r4,r22
 4002768:	01400284 	movi	r5,10
 400276c:	80800005 	stb	r2,0(r16)
 4002770:	400a8080 	call	400a808 <__divsi3>
 4002774:	102d883a 	mov	r22,r2
 4002778:	00800244 	movi	r2,9
 400277c:	15bff416 	blt	r2,r22,4002750 <__alt_data_end+0xff002750>
 4002780:	9811883a 	mov	r8,r19
 4002784:	b0800c04 	addi	r2,r22,48
 4002788:	8027883a 	mov	r19,r16
 400278c:	997fffc4 	addi	r5,r19,-1
 4002790:	98bfffc5 	stb	r2,-1(r19)
 4002794:	dc002917 	ldw	r16,164(sp)
 4002798:	2f006a2e 	bgeu	r5,fp,4002944 <___vfprintf_internal_r+0x21d0>
 400279c:	d9c02384 	addi	r7,sp,142
 40027a0:	3ccfc83a 	sub	r7,r7,r19
 40027a4:	d9002344 	addi	r4,sp,141
 40027a8:	e1cf883a 	add	r7,fp,r7
 40027ac:	00000106 	br	40027b4 <___vfprintf_internal_r+0x2040>
 40027b0:	28800003 	ldbu	r2,0(r5)
 40027b4:	20800005 	stb	r2,0(r4)
 40027b8:	21000044 	addi	r4,r4,1
 40027bc:	29400044 	addi	r5,r5,1
 40027c0:	393ffb1e 	bne	r7,r4,40027b0 <__alt_data_end+0xff0027b0>
 40027c4:	d8802304 	addi	r2,sp,140
 40027c8:	14c5c83a 	sub	r2,r2,r19
 40027cc:	d8c02344 	addi	r3,sp,141
 40027d0:	1885883a 	add	r2,r3,r2
 40027d4:	003f7006 	br	4002598 <__alt_data_end+0xff002598>
 40027d8:	0005883a 	mov	r2,zero
 40027dc:	003f0f06 	br	400241c <__alt_data_end+0xff00241c>
 40027e0:	d8c03217 	ldw	r3,200(sp)
 40027e4:	18c00044 	addi	r3,r3,1
 40027e8:	d8c02e15 	stw	r3,184(sp)
 40027ec:	1805883a 	mov	r2,r3
 40027f0:	183fb20e 	bge	r3,zero,40026bc <__alt_data_end+0xff0026bc>
 40027f4:	0005883a 	mov	r2,zero
 40027f8:	003fb006 	br	40026bc <__alt_data_end+0xff0026bc>
 40027fc:	d9003617 	ldw	r4,216(sp)
 4002800:	000d883a 	mov	r6,zero
 4002804:	000f883a 	mov	r7,zero
 4002808:	980b883a 	mov	r5,r19
 400280c:	d8c03c15 	stw	r3,240(sp)
 4002810:	da003d15 	stw	r8,244(sp)
 4002814:	400bb500 	call	400bb50 <__eqdf2>
 4002818:	d8c03c17 	ldw	r3,240(sp)
 400281c:	da003d17 	ldw	r8,244(sp)
 4002820:	103f9826 	beq	r2,zero,4002684 <__alt_data_end+0xff002684>
 4002824:	00800044 	movi	r2,1
 4002828:	10c7c83a 	sub	r3,r2,r3
 400282c:	d8c02615 	stw	r3,152(sp)
 4002830:	003f9506 	br	4002688 <__alt_data_end+0xff002688>
 4002834:	d9002917 	ldw	r4,164(sp)
 4002838:	d8c03217 	ldw	r3,200(sp)
 400283c:	20800044 	addi	r2,r4,1
 4002840:	1885883a 	add	r2,r3,r2
 4002844:	d8802e15 	stw	r2,184(sp)
 4002848:	103dbf0e 	bge	r2,zero,4001f48 <__alt_data_end+0xff001f48>
 400284c:	0005883a 	mov	r2,zero
 4002850:	003dbd06 	br	4001f48 <__alt_data_end+0xff001f48>
 4002854:	2000211e 	bne	r4,zero,40028dc <___vfprintf_internal_r+0x2168>
 4002858:	9480004c 	andi	r18,r18,1
 400285c:	90001f1e 	bne	r18,zero,40028dc <___vfprintf_internal_r+0x2168>
 4002860:	00800044 	movi	r2,1
 4002864:	d8802e15 	stw	r2,184(sp)
 4002868:	003db706 	br	4001f48 <__alt_data_end+0xff001f48>
 400286c:	00800b44 	movi	r2,45
 4002870:	05adc83a 	sub	r22,zero,r22
 4002874:	d8802305 	stb	r2,140(sp)
 4002878:	003f3f06 	br	4002578 <__alt_data_end+0xff002578>
 400287c:	0005883a 	mov	r2,zero
 4002880:	003f5206 	br	40025cc <__alt_data_end+0xff0025cc>
 4002884:	90a4703a 	and	r18,r18,r2
 4002888:	903f4e26 	beq	r18,zero,40025c4 <__alt_data_end+0xff0025c4>
 400288c:	003f4a06 	br	40025b8 <__alt_data_end+0xff0025b8>
 4002890:	00800084 	movi	r2,2
 4002894:	10c5c83a 	sub	r2,r2,r3
 4002898:	003f8406 	br	40026ac <__alt_data_end+0xff0026ac>
 400289c:	d8802d17 	ldw	r2,180(sp)
 40028a0:	d9002d17 	ldw	r4,180(sp)
 40028a4:	ac400043 	ldbu	r17,1(r21)
 40028a8:	10800017 	ldw	r2,0(r2)
 40028ac:	582b883a 	mov	r21,r11
 40028b0:	d8802915 	stw	r2,164(sp)
 40028b4:	20800104 	addi	r2,r4,4
 40028b8:	d9002917 	ldw	r4,164(sp)
 40028bc:	d8802d15 	stw	r2,180(sp)
 40028c0:	203e7a0e 	bge	r4,zero,40022ac <__alt_data_end+0xff0022ac>
 40028c4:	8c403fcc 	andi	r17,r17,255
 40028c8:	00bfffc4 	movi	r2,-1
 40028cc:	8c40201c 	xori	r17,r17,128
 40028d0:	d8802915 	stw	r2,164(sp)
 40028d4:	8c7fe004 	addi	r17,r17,-128
 40028d8:	00380706 	br	40008f8 <__alt_data_end+0xff0008f8>
 40028dc:	d8c02917 	ldw	r3,164(sp)
 40028e0:	18c00084 	addi	r3,r3,2
 40028e4:	d8c02e15 	stw	r3,184(sp)
 40028e8:	1805883a 	mov	r2,r3
 40028ec:	183d960e 	bge	r3,zero,4001f48 <__alt_data_end+0xff001f48>
 40028f0:	003fd606 	br	400284c <__alt_data_end+0xff00284c>
 40028f4:	0005883a 	mov	r2,zero
 40028f8:	003f8e06 	br	4002734 <__alt_data_end+0xff002734>
 40028fc:	9080004c 	andi	r2,r18,1
 4002900:	103f811e 	bne	r2,zero,4002708 <__alt_data_end+0xff002708>
 4002904:	d8802117 	ldw	r2,132(sp)
 4002908:	1405c83a 	sub	r2,r2,r16
 400290c:	d8803315 	stw	r2,204(sp)
 4002910:	b47ef326 	beq	r22,r17,40024e0 <__alt_data_end+0xff0024e0>
 4002914:	dd802617 	ldw	r22,152(sp)
 4002918:	003f1106 	br	4002560 <__alt_data_end+0xff002560>
 400291c:	d9c02785 	stb	r7,158(sp)
 4002920:	00390406 	br	4000d34 <__alt_data_end+0xff000d34>
 4002924:	d9c02785 	stb	r7,158(sp)
 4002928:	0038d306 	br	4000c78 <__alt_data_end+0xff000c78>
 400292c:	d9c02785 	stb	r7,158(sp)
 4002930:	003a6106 	br	40012b8 <__alt_data_end+0xff0012b8>
 4002934:	d9c02785 	stb	r7,158(sp)
 4002938:	003af806 	br	400151c <__alt_data_end+0xff00151c>
 400293c:	0005883a 	mov	r2,zero
 4002940:	003d7e06 	br	4001f3c <__alt_data_end+0xff001f3c>
 4002944:	d8802344 	addi	r2,sp,141
 4002948:	003f1306 	br	4002598 <__alt_data_end+0xff002598>
 400294c:	d9c02785 	stb	r7,158(sp)
 4002950:	00392306 	br	4000de0 <__alt_data_end+0xff000de0>
 4002954:	d9c02785 	stb	r7,158(sp)
 4002958:	003aa906 	br	4001400 <__alt_data_end+0xff001400>
 400295c:	d9c02785 	stb	r7,158(sp)
 4002960:	003a3d06 	br	4001258 <__alt_data_end+0xff001258>
 4002964:	d9c02785 	stb	r7,158(sp)
 4002968:	003aca06 	br	4001494 <__alt_data_end+0xff001494>

0400296c <__vfprintf_internal>:
 400296c:	00810074 	movhi	r2,1025
 4002970:	10868004 	addi	r2,r2,6656
 4002974:	300f883a 	mov	r7,r6
 4002978:	280d883a 	mov	r6,r5
 400297c:	200b883a 	mov	r5,r4
 4002980:	11000017 	ldw	r4,0(r2)
 4002984:	40007741 	jmpi	4000774 <___vfprintf_internal_r>

04002988 <__sbprintf>:
 4002988:	2880030b 	ldhu	r2,12(r5)
 400298c:	2ac01917 	ldw	r11,100(r5)
 4002990:	2a80038b 	ldhu	r10,14(r5)
 4002994:	2a400717 	ldw	r9,28(r5)
 4002998:	2a000917 	ldw	r8,36(r5)
 400299c:	defee204 	addi	sp,sp,-1144
 40029a0:	00c10004 	movi	r3,1024
 40029a4:	dc011a15 	stw	r16,1128(sp)
 40029a8:	10bfff4c 	andi	r2,r2,65533
 40029ac:	2821883a 	mov	r16,r5
 40029b0:	d8cb883a 	add	r5,sp,r3
 40029b4:	dc811c15 	stw	r18,1136(sp)
 40029b8:	dc411b15 	stw	r17,1132(sp)
 40029bc:	dfc11d15 	stw	ra,1140(sp)
 40029c0:	2025883a 	mov	r18,r4
 40029c4:	d881030d 	sth	r2,1036(sp)
 40029c8:	dac11915 	stw	r11,1124(sp)
 40029cc:	da81038d 	sth	r10,1038(sp)
 40029d0:	da410715 	stw	r9,1052(sp)
 40029d4:	da010915 	stw	r8,1060(sp)
 40029d8:	dec10015 	stw	sp,1024(sp)
 40029dc:	dec10415 	stw	sp,1040(sp)
 40029e0:	d8c10215 	stw	r3,1032(sp)
 40029e4:	d8c10515 	stw	r3,1044(sp)
 40029e8:	d8010615 	stw	zero,1048(sp)
 40029ec:	40007740 	call	4000774 <___vfprintf_internal_r>
 40029f0:	1023883a 	mov	r17,r2
 40029f4:	10000416 	blt	r2,zero,4002a08 <__sbprintf+0x80>
 40029f8:	d9410004 	addi	r5,sp,1024
 40029fc:	9009883a 	mov	r4,r18
 4002a00:	400463c0 	call	400463c <_fflush_r>
 4002a04:	10000d1e 	bne	r2,zero,4002a3c <__sbprintf+0xb4>
 4002a08:	d881030b 	ldhu	r2,1036(sp)
 4002a0c:	1080100c 	andi	r2,r2,64
 4002a10:	10000326 	beq	r2,zero,4002a20 <__sbprintf+0x98>
 4002a14:	8080030b 	ldhu	r2,12(r16)
 4002a18:	10801014 	ori	r2,r2,64
 4002a1c:	8080030d 	sth	r2,12(r16)
 4002a20:	8805883a 	mov	r2,r17
 4002a24:	dfc11d17 	ldw	ra,1140(sp)
 4002a28:	dc811c17 	ldw	r18,1136(sp)
 4002a2c:	dc411b17 	ldw	r17,1132(sp)
 4002a30:	dc011a17 	ldw	r16,1128(sp)
 4002a34:	dec11e04 	addi	sp,sp,1144
 4002a38:	f800283a 	ret
 4002a3c:	047fffc4 	movi	r17,-1
 4002a40:	003ff106 	br	4002a08 <__alt_data_end+0xff002a08>

04002a44 <__swsetup_r>:
 4002a44:	00810074 	movhi	r2,1025
 4002a48:	defffd04 	addi	sp,sp,-12
 4002a4c:	10868004 	addi	r2,r2,6656
 4002a50:	dc400115 	stw	r17,4(sp)
 4002a54:	2023883a 	mov	r17,r4
 4002a58:	11000017 	ldw	r4,0(r2)
 4002a5c:	dc000015 	stw	r16,0(sp)
 4002a60:	dfc00215 	stw	ra,8(sp)
 4002a64:	2821883a 	mov	r16,r5
 4002a68:	20000226 	beq	r4,zero,4002a74 <__swsetup_r+0x30>
 4002a6c:	20800e17 	ldw	r2,56(r4)
 4002a70:	10003126 	beq	r2,zero,4002b38 <__swsetup_r+0xf4>
 4002a74:	8080030b 	ldhu	r2,12(r16)
 4002a78:	10c0020c 	andi	r3,r2,8
 4002a7c:	1009883a 	mov	r4,r2
 4002a80:	18000f26 	beq	r3,zero,4002ac0 <__swsetup_r+0x7c>
 4002a84:	80c00417 	ldw	r3,16(r16)
 4002a88:	18001526 	beq	r3,zero,4002ae0 <__swsetup_r+0x9c>
 4002a8c:	1100004c 	andi	r4,r2,1
 4002a90:	20001c1e 	bne	r4,zero,4002b04 <__swsetup_r+0xc0>
 4002a94:	1080008c 	andi	r2,r2,2
 4002a98:	1000291e 	bne	r2,zero,4002b40 <__swsetup_r+0xfc>
 4002a9c:	80800517 	ldw	r2,20(r16)
 4002aa0:	80800215 	stw	r2,8(r16)
 4002aa4:	18001c26 	beq	r3,zero,4002b18 <__swsetup_r+0xd4>
 4002aa8:	0005883a 	mov	r2,zero
 4002aac:	dfc00217 	ldw	ra,8(sp)
 4002ab0:	dc400117 	ldw	r17,4(sp)
 4002ab4:	dc000017 	ldw	r16,0(sp)
 4002ab8:	dec00304 	addi	sp,sp,12
 4002abc:	f800283a 	ret
 4002ac0:	2080040c 	andi	r2,r4,16
 4002ac4:	10002e26 	beq	r2,zero,4002b80 <__swsetup_r+0x13c>
 4002ac8:	2080010c 	andi	r2,r4,4
 4002acc:	10001e1e 	bne	r2,zero,4002b48 <__swsetup_r+0x104>
 4002ad0:	80c00417 	ldw	r3,16(r16)
 4002ad4:	20800214 	ori	r2,r4,8
 4002ad8:	8080030d 	sth	r2,12(r16)
 4002adc:	183feb1e 	bne	r3,zero,4002a8c <__alt_data_end+0xff002a8c>
 4002ae0:	1100a00c 	andi	r4,r2,640
 4002ae4:	01408004 	movi	r5,512
 4002ae8:	217fe826 	beq	r4,r5,4002a8c <__alt_data_end+0xff002a8c>
 4002aec:	800b883a 	mov	r5,r16
 4002af0:	8809883a 	mov	r4,r17
 4002af4:	40055bc0 	call	40055bc <__smakebuf_r>
 4002af8:	8080030b 	ldhu	r2,12(r16)
 4002afc:	80c00417 	ldw	r3,16(r16)
 4002b00:	003fe206 	br	4002a8c <__alt_data_end+0xff002a8c>
 4002b04:	80800517 	ldw	r2,20(r16)
 4002b08:	80000215 	stw	zero,8(r16)
 4002b0c:	0085c83a 	sub	r2,zero,r2
 4002b10:	80800615 	stw	r2,24(r16)
 4002b14:	183fe41e 	bne	r3,zero,4002aa8 <__alt_data_end+0xff002aa8>
 4002b18:	80c0030b 	ldhu	r3,12(r16)
 4002b1c:	0005883a 	mov	r2,zero
 4002b20:	1900200c 	andi	r4,r3,128
 4002b24:	203fe126 	beq	r4,zero,4002aac <__alt_data_end+0xff002aac>
 4002b28:	18c01014 	ori	r3,r3,64
 4002b2c:	80c0030d 	sth	r3,12(r16)
 4002b30:	00bfffc4 	movi	r2,-1
 4002b34:	003fdd06 	br	4002aac <__alt_data_end+0xff002aac>
 4002b38:	4004a180 	call	4004a18 <__sinit>
 4002b3c:	003fcd06 	br	4002a74 <__alt_data_end+0xff002a74>
 4002b40:	0005883a 	mov	r2,zero
 4002b44:	003fd606 	br	4002aa0 <__alt_data_end+0xff002aa0>
 4002b48:	81400c17 	ldw	r5,48(r16)
 4002b4c:	28000626 	beq	r5,zero,4002b68 <__swsetup_r+0x124>
 4002b50:	80801004 	addi	r2,r16,64
 4002b54:	28800326 	beq	r5,r2,4002b64 <__swsetup_r+0x120>
 4002b58:	8809883a 	mov	r4,r17
 4002b5c:	4004b8c0 	call	4004b8c <_free_r>
 4002b60:	8100030b 	ldhu	r4,12(r16)
 4002b64:	80000c15 	stw	zero,48(r16)
 4002b68:	80c00417 	ldw	r3,16(r16)
 4002b6c:	00bff6c4 	movi	r2,-37
 4002b70:	1108703a 	and	r4,r2,r4
 4002b74:	80000115 	stw	zero,4(r16)
 4002b78:	80c00015 	stw	r3,0(r16)
 4002b7c:	003fd506 	br	4002ad4 <__alt_data_end+0xff002ad4>
 4002b80:	00800244 	movi	r2,9
 4002b84:	88800015 	stw	r2,0(r17)
 4002b88:	20801014 	ori	r2,r4,64
 4002b8c:	8080030d 	sth	r2,12(r16)
 4002b90:	00bfffc4 	movi	r2,-1
 4002b94:	003fc506 	br	4002aac <__alt_data_end+0xff002aac>

04002b98 <quorem>:
 4002b98:	defff704 	addi	sp,sp,-36
 4002b9c:	dc800215 	stw	r18,8(sp)
 4002ba0:	20800417 	ldw	r2,16(r4)
 4002ba4:	2c800417 	ldw	r18,16(r5)
 4002ba8:	dfc00815 	stw	ra,32(sp)
 4002bac:	ddc00715 	stw	r23,28(sp)
 4002bb0:	dd800615 	stw	r22,24(sp)
 4002bb4:	dd400515 	stw	r21,20(sp)
 4002bb8:	dd000415 	stw	r20,16(sp)
 4002bbc:	dcc00315 	stw	r19,12(sp)
 4002bc0:	dc400115 	stw	r17,4(sp)
 4002bc4:	dc000015 	stw	r16,0(sp)
 4002bc8:	14807116 	blt	r2,r18,4002d90 <quorem+0x1f8>
 4002bcc:	94bfffc4 	addi	r18,r18,-1
 4002bd0:	94ad883a 	add	r22,r18,r18
 4002bd4:	b5ad883a 	add	r22,r22,r22
 4002bd8:	2c400504 	addi	r17,r5,20
 4002bdc:	8da9883a 	add	r20,r17,r22
 4002be0:	25400504 	addi	r21,r4,20
 4002be4:	282f883a 	mov	r23,r5
 4002be8:	adad883a 	add	r22,r21,r22
 4002bec:	a1400017 	ldw	r5,0(r20)
 4002bf0:	2021883a 	mov	r16,r4
 4002bf4:	b1000017 	ldw	r4,0(r22)
 4002bf8:	29400044 	addi	r5,r5,1
 4002bfc:	400a9000 	call	400a900 <__udivsi3>
 4002c00:	1027883a 	mov	r19,r2
 4002c04:	10002c26 	beq	r2,zero,4002cb8 <quorem+0x120>
 4002c08:	a813883a 	mov	r9,r21
 4002c0c:	880b883a 	mov	r5,r17
 4002c10:	0009883a 	mov	r4,zero
 4002c14:	000d883a 	mov	r6,zero
 4002c18:	2a000017 	ldw	r8,0(r5)
 4002c1c:	49c00017 	ldw	r7,0(r9)
 4002c20:	29400104 	addi	r5,r5,4
 4002c24:	40bfffcc 	andi	r2,r8,65535
 4002c28:	14c5383a 	mul	r2,r2,r19
 4002c2c:	4010d43a 	srli	r8,r8,16
 4002c30:	38ffffcc 	andi	r3,r7,65535
 4002c34:	1105883a 	add	r2,r2,r4
 4002c38:	1008d43a 	srli	r4,r2,16
 4002c3c:	44d1383a 	mul	r8,r8,r19
 4002c40:	198d883a 	add	r6,r3,r6
 4002c44:	10ffffcc 	andi	r3,r2,65535
 4002c48:	30c7c83a 	sub	r3,r6,r3
 4002c4c:	380ed43a 	srli	r7,r7,16
 4002c50:	4105883a 	add	r2,r8,r4
 4002c54:	180dd43a 	srai	r6,r3,16
 4002c58:	113fffcc 	andi	r4,r2,65535
 4002c5c:	390fc83a 	sub	r7,r7,r4
 4002c60:	398d883a 	add	r6,r7,r6
 4002c64:	300e943a 	slli	r7,r6,16
 4002c68:	18ffffcc 	andi	r3,r3,65535
 4002c6c:	1008d43a 	srli	r4,r2,16
 4002c70:	38ceb03a 	or	r7,r7,r3
 4002c74:	49c00015 	stw	r7,0(r9)
 4002c78:	300dd43a 	srai	r6,r6,16
 4002c7c:	4a400104 	addi	r9,r9,4
 4002c80:	a17fe52e 	bgeu	r20,r5,4002c18 <__alt_data_end+0xff002c18>
 4002c84:	b0800017 	ldw	r2,0(r22)
 4002c88:	10000b1e 	bne	r2,zero,4002cb8 <quorem+0x120>
 4002c8c:	b0bfff04 	addi	r2,r22,-4
 4002c90:	a880082e 	bgeu	r21,r2,4002cb4 <quorem+0x11c>
 4002c94:	b0ffff17 	ldw	r3,-4(r22)
 4002c98:	18000326 	beq	r3,zero,4002ca8 <quorem+0x110>
 4002c9c:	00000506 	br	4002cb4 <quorem+0x11c>
 4002ca0:	10c00017 	ldw	r3,0(r2)
 4002ca4:	1800031e 	bne	r3,zero,4002cb4 <quorem+0x11c>
 4002ca8:	10bfff04 	addi	r2,r2,-4
 4002cac:	94bfffc4 	addi	r18,r18,-1
 4002cb0:	a8bffb36 	bltu	r21,r2,4002ca0 <__alt_data_end+0xff002ca0>
 4002cb4:	84800415 	stw	r18,16(r16)
 4002cb8:	b80b883a 	mov	r5,r23
 4002cbc:	8009883a 	mov	r4,r16
 4002cc0:	4006cfc0 	call	4006cfc <__mcmp>
 4002cc4:	10002616 	blt	r2,zero,4002d60 <quorem+0x1c8>
 4002cc8:	9cc00044 	addi	r19,r19,1
 4002ccc:	a805883a 	mov	r2,r21
 4002cd0:	000b883a 	mov	r5,zero
 4002cd4:	11000017 	ldw	r4,0(r2)
 4002cd8:	89800017 	ldw	r6,0(r17)
 4002cdc:	10800104 	addi	r2,r2,4
 4002ce0:	20ffffcc 	andi	r3,r4,65535
 4002ce4:	194b883a 	add	r5,r3,r5
 4002ce8:	30ffffcc 	andi	r3,r6,65535
 4002cec:	28c7c83a 	sub	r3,r5,r3
 4002cf0:	300cd43a 	srli	r6,r6,16
 4002cf4:	2008d43a 	srli	r4,r4,16
 4002cf8:	180bd43a 	srai	r5,r3,16
 4002cfc:	18ffffcc 	andi	r3,r3,65535
 4002d00:	2189c83a 	sub	r4,r4,r6
 4002d04:	2149883a 	add	r4,r4,r5
 4002d08:	200c943a 	slli	r6,r4,16
 4002d0c:	8c400104 	addi	r17,r17,4
 4002d10:	200bd43a 	srai	r5,r4,16
 4002d14:	30c6b03a 	or	r3,r6,r3
 4002d18:	10ffff15 	stw	r3,-4(r2)
 4002d1c:	a47fed2e 	bgeu	r20,r17,4002cd4 <__alt_data_end+0xff002cd4>
 4002d20:	9485883a 	add	r2,r18,r18
 4002d24:	1085883a 	add	r2,r2,r2
 4002d28:	a887883a 	add	r3,r21,r2
 4002d2c:	18800017 	ldw	r2,0(r3)
 4002d30:	10000b1e 	bne	r2,zero,4002d60 <quorem+0x1c8>
 4002d34:	18bfff04 	addi	r2,r3,-4
 4002d38:	a880082e 	bgeu	r21,r2,4002d5c <quorem+0x1c4>
 4002d3c:	18ffff17 	ldw	r3,-4(r3)
 4002d40:	18000326 	beq	r3,zero,4002d50 <quorem+0x1b8>
 4002d44:	00000506 	br	4002d5c <quorem+0x1c4>
 4002d48:	10c00017 	ldw	r3,0(r2)
 4002d4c:	1800031e 	bne	r3,zero,4002d5c <quorem+0x1c4>
 4002d50:	10bfff04 	addi	r2,r2,-4
 4002d54:	94bfffc4 	addi	r18,r18,-1
 4002d58:	a8bffb36 	bltu	r21,r2,4002d48 <__alt_data_end+0xff002d48>
 4002d5c:	84800415 	stw	r18,16(r16)
 4002d60:	9805883a 	mov	r2,r19
 4002d64:	dfc00817 	ldw	ra,32(sp)
 4002d68:	ddc00717 	ldw	r23,28(sp)
 4002d6c:	dd800617 	ldw	r22,24(sp)
 4002d70:	dd400517 	ldw	r21,20(sp)
 4002d74:	dd000417 	ldw	r20,16(sp)
 4002d78:	dcc00317 	ldw	r19,12(sp)
 4002d7c:	dc800217 	ldw	r18,8(sp)
 4002d80:	dc400117 	ldw	r17,4(sp)
 4002d84:	dc000017 	ldw	r16,0(sp)
 4002d88:	dec00904 	addi	sp,sp,36
 4002d8c:	f800283a 	ret
 4002d90:	0005883a 	mov	r2,zero
 4002d94:	003ff306 	br	4002d64 <__alt_data_end+0xff002d64>

04002d98 <_dtoa_r>:
 4002d98:	20801017 	ldw	r2,64(r4)
 4002d9c:	deffde04 	addi	sp,sp,-136
 4002da0:	df002015 	stw	fp,128(sp)
 4002da4:	dcc01b15 	stw	r19,108(sp)
 4002da8:	dc801a15 	stw	r18,104(sp)
 4002dac:	dc401915 	stw	r17,100(sp)
 4002db0:	dc001815 	stw	r16,96(sp)
 4002db4:	dfc02115 	stw	ra,132(sp)
 4002db8:	ddc01f15 	stw	r23,124(sp)
 4002dbc:	dd801e15 	stw	r22,120(sp)
 4002dc0:	dd401d15 	stw	r21,116(sp)
 4002dc4:	dd001c15 	stw	r20,112(sp)
 4002dc8:	d9c00315 	stw	r7,12(sp)
 4002dcc:	2039883a 	mov	fp,r4
 4002dd0:	3023883a 	mov	r17,r6
 4002dd4:	2825883a 	mov	r18,r5
 4002dd8:	dc002417 	ldw	r16,144(sp)
 4002ddc:	3027883a 	mov	r19,r6
 4002de0:	10000826 	beq	r2,zero,4002e04 <_dtoa_r+0x6c>
 4002de4:	21801117 	ldw	r6,68(r4)
 4002de8:	00c00044 	movi	r3,1
 4002dec:	100b883a 	mov	r5,r2
 4002df0:	1986983a 	sll	r3,r3,r6
 4002df4:	11800115 	stw	r6,4(r2)
 4002df8:	10c00215 	stw	r3,8(r2)
 4002dfc:	40064dc0 	call	40064dc <_Bfree>
 4002e00:	e0001015 	stw	zero,64(fp)
 4002e04:	88002e16 	blt	r17,zero,4002ec0 <_dtoa_r+0x128>
 4002e08:	80000015 	stw	zero,0(r16)
 4002e0c:	889ffc2c 	andhi	r2,r17,32752
 4002e10:	00dffc34 	movhi	r3,32752
 4002e14:	10c01c26 	beq	r2,r3,4002e88 <_dtoa_r+0xf0>
 4002e18:	000d883a 	mov	r6,zero
 4002e1c:	000f883a 	mov	r7,zero
 4002e20:	9009883a 	mov	r4,r18
 4002e24:	980b883a 	mov	r5,r19
 4002e28:	400bb500 	call	400bb50 <__eqdf2>
 4002e2c:	10002b1e 	bne	r2,zero,4002edc <_dtoa_r+0x144>
 4002e30:	d9c02317 	ldw	r7,140(sp)
 4002e34:	00800044 	movi	r2,1
 4002e38:	38800015 	stw	r2,0(r7)
 4002e3c:	d8802517 	ldw	r2,148(sp)
 4002e40:	10019e26 	beq	r2,zero,40034bc <_dtoa_r+0x724>
 4002e44:	d8c02517 	ldw	r3,148(sp)
 4002e48:	00810074 	movhi	r2,1025
 4002e4c:	10bf1d44 	addi	r2,r2,-907
 4002e50:	18800015 	stw	r2,0(r3)
 4002e54:	10bfffc4 	addi	r2,r2,-1
 4002e58:	dfc02117 	ldw	ra,132(sp)
 4002e5c:	df002017 	ldw	fp,128(sp)
 4002e60:	ddc01f17 	ldw	r23,124(sp)
 4002e64:	dd801e17 	ldw	r22,120(sp)
 4002e68:	dd401d17 	ldw	r21,116(sp)
 4002e6c:	dd001c17 	ldw	r20,112(sp)
 4002e70:	dcc01b17 	ldw	r19,108(sp)
 4002e74:	dc801a17 	ldw	r18,104(sp)
 4002e78:	dc401917 	ldw	r17,100(sp)
 4002e7c:	dc001817 	ldw	r16,96(sp)
 4002e80:	dec02204 	addi	sp,sp,136
 4002e84:	f800283a 	ret
 4002e88:	d8c02317 	ldw	r3,140(sp)
 4002e8c:	0089c3c4 	movi	r2,9999
 4002e90:	18800015 	stw	r2,0(r3)
 4002e94:	90017726 	beq	r18,zero,4003474 <_dtoa_r+0x6dc>
 4002e98:	00810074 	movhi	r2,1025
 4002e9c:	10bf2904 	addi	r2,r2,-860
 4002ea0:	d9002517 	ldw	r4,148(sp)
 4002ea4:	203fec26 	beq	r4,zero,4002e58 <__alt_data_end+0xff002e58>
 4002ea8:	10c000c7 	ldb	r3,3(r2)
 4002eac:	1801781e 	bne	r3,zero,4003490 <_dtoa_r+0x6f8>
 4002eb0:	10c000c4 	addi	r3,r2,3
 4002eb4:	d9802517 	ldw	r6,148(sp)
 4002eb8:	30c00015 	stw	r3,0(r6)
 4002ebc:	003fe606 	br	4002e58 <__alt_data_end+0xff002e58>
 4002ec0:	04e00034 	movhi	r19,32768
 4002ec4:	9cffffc4 	addi	r19,r19,-1
 4002ec8:	00800044 	movi	r2,1
 4002ecc:	8ce6703a 	and	r19,r17,r19
 4002ed0:	80800015 	stw	r2,0(r16)
 4002ed4:	9823883a 	mov	r17,r19
 4002ed8:	003fcc06 	br	4002e0c <__alt_data_end+0xff002e0c>
 4002edc:	d8800204 	addi	r2,sp,8
 4002ee0:	d8800015 	stw	r2,0(sp)
 4002ee4:	d9c00104 	addi	r7,sp,4
 4002ee8:	900b883a 	mov	r5,r18
 4002eec:	980d883a 	mov	r6,r19
 4002ef0:	e009883a 	mov	r4,fp
 4002ef4:	8820d53a 	srli	r16,r17,20
 4002ef8:	40070c80 	call	40070c8 <__d2b>
 4002efc:	d8800915 	stw	r2,36(sp)
 4002f00:	8001651e 	bne	r16,zero,4003498 <_dtoa_r+0x700>
 4002f04:	dd800217 	ldw	r22,8(sp)
 4002f08:	dc000117 	ldw	r16,4(sp)
 4002f0c:	00800804 	movi	r2,32
 4002f10:	b421883a 	add	r16,r22,r16
 4002f14:	80c10c84 	addi	r3,r16,1074
 4002f18:	10c2d10e 	bge	r2,r3,4003a60 <_dtoa_r+0xcc8>
 4002f1c:	00801004 	movi	r2,64
 4002f20:	81010484 	addi	r4,r16,1042
 4002f24:	10c7c83a 	sub	r3,r2,r3
 4002f28:	9108d83a 	srl	r4,r18,r4
 4002f2c:	88e2983a 	sll	r17,r17,r3
 4002f30:	2448b03a 	or	r4,r4,r17
 4002f34:	400cf180 	call	400cf18 <__floatunsidf>
 4002f38:	017f8434 	movhi	r5,65040
 4002f3c:	01800044 	movi	r6,1
 4002f40:	1009883a 	mov	r4,r2
 4002f44:	194b883a 	add	r5,r3,r5
 4002f48:	843fffc4 	addi	r16,r16,-1
 4002f4c:	d9801115 	stw	r6,68(sp)
 4002f50:	000d883a 	mov	r6,zero
 4002f54:	01cffe34 	movhi	r7,16376
 4002f58:	400c4c00 	call	400c4c0 <__subdf3>
 4002f5c:	0198dbf4 	movhi	r6,25455
 4002f60:	01cff4f4 	movhi	r7,16339
 4002f64:	3190d844 	addi	r6,r6,17249
 4002f68:	39e1e9c4 	addi	r7,r7,-30809
 4002f6c:	1009883a 	mov	r4,r2
 4002f70:	180b883a 	mov	r5,r3
 4002f74:	400bda80 	call	400bda8 <__muldf3>
 4002f78:	01a2d874 	movhi	r6,35681
 4002f7c:	01cff1f4 	movhi	r7,16327
 4002f80:	31b22cc4 	addi	r6,r6,-14157
 4002f84:	39e28a04 	addi	r7,r7,-30168
 4002f88:	180b883a 	mov	r5,r3
 4002f8c:	1009883a 	mov	r4,r2
 4002f90:	400a9bc0 	call	400a9bc <__adddf3>
 4002f94:	8009883a 	mov	r4,r16
 4002f98:	1029883a 	mov	r20,r2
 4002f9c:	1823883a 	mov	r17,r3
 4002fa0:	400ce3c0 	call	400ce3c <__floatsidf>
 4002fa4:	019427f4 	movhi	r6,20639
 4002fa8:	01cff4f4 	movhi	r7,16339
 4002fac:	319e7ec4 	addi	r6,r6,31227
 4002fb0:	39d104c4 	addi	r7,r7,17427
 4002fb4:	1009883a 	mov	r4,r2
 4002fb8:	180b883a 	mov	r5,r3
 4002fbc:	400bda80 	call	400bda8 <__muldf3>
 4002fc0:	100d883a 	mov	r6,r2
 4002fc4:	180f883a 	mov	r7,r3
 4002fc8:	a009883a 	mov	r4,r20
 4002fcc:	880b883a 	mov	r5,r17
 4002fd0:	400a9bc0 	call	400a9bc <__adddf3>
 4002fd4:	1009883a 	mov	r4,r2
 4002fd8:	180b883a 	mov	r5,r3
 4002fdc:	1029883a 	mov	r20,r2
 4002fe0:	1823883a 	mov	r17,r3
 4002fe4:	400cdbc0 	call	400cdbc <__fixdfsi>
 4002fe8:	000d883a 	mov	r6,zero
 4002fec:	000f883a 	mov	r7,zero
 4002ff0:	a009883a 	mov	r4,r20
 4002ff4:	880b883a 	mov	r5,r17
 4002ff8:	d8800515 	stw	r2,20(sp)
 4002ffc:	400bcb40 	call	400bcb4 <__ledf2>
 4003000:	10028716 	blt	r2,zero,4003a20 <_dtoa_r+0xc88>
 4003004:	d8c00517 	ldw	r3,20(sp)
 4003008:	00800584 	movi	r2,22
 400300c:	10c27536 	bltu	r2,r3,40039e4 <_dtoa_r+0xc4c>
 4003010:	180490fa 	slli	r2,r3,3
 4003014:	00c10074 	movhi	r3,1025
 4003018:	18ff4504 	addi	r3,r3,-748
 400301c:	1885883a 	add	r2,r3,r2
 4003020:	11000017 	ldw	r4,0(r2)
 4003024:	11400117 	ldw	r5,4(r2)
 4003028:	900d883a 	mov	r6,r18
 400302c:	980f883a 	mov	r7,r19
 4003030:	400bbd80 	call	400bbd8 <__gedf2>
 4003034:	00828d0e 	bge	zero,r2,4003a6c <_dtoa_r+0xcd4>
 4003038:	d9000517 	ldw	r4,20(sp)
 400303c:	d8000e15 	stw	zero,56(sp)
 4003040:	213fffc4 	addi	r4,r4,-1
 4003044:	d9000515 	stw	r4,20(sp)
 4003048:	b42dc83a 	sub	r22,r22,r16
 400304c:	b5bfffc4 	addi	r22,r22,-1
 4003050:	b0026f16 	blt	r22,zero,4003a10 <_dtoa_r+0xc78>
 4003054:	d8000815 	stw	zero,32(sp)
 4003058:	d9c00517 	ldw	r7,20(sp)
 400305c:	38026416 	blt	r7,zero,40039f0 <_dtoa_r+0xc58>
 4003060:	b1ed883a 	add	r22,r22,r7
 4003064:	d9c00d15 	stw	r7,52(sp)
 4003068:	d8000a15 	stw	zero,40(sp)
 400306c:	d9800317 	ldw	r6,12(sp)
 4003070:	00800244 	movi	r2,9
 4003074:	11811436 	bltu	r2,r6,40034c8 <_dtoa_r+0x730>
 4003078:	00800144 	movi	r2,5
 400307c:	1184e10e 	bge	r2,r6,4004404 <_dtoa_r+0x166c>
 4003080:	31bfff04 	addi	r6,r6,-4
 4003084:	d9800315 	stw	r6,12(sp)
 4003088:	0023883a 	mov	r17,zero
 400308c:	d9800317 	ldw	r6,12(sp)
 4003090:	008000c4 	movi	r2,3
 4003094:	30836726 	beq	r6,r2,4003e34 <_dtoa_r+0x109c>
 4003098:	1183410e 	bge	r2,r6,4003da0 <_dtoa_r+0x1008>
 400309c:	d9c00317 	ldw	r7,12(sp)
 40030a0:	00800104 	movi	r2,4
 40030a4:	38827c26 	beq	r7,r2,4003a98 <_dtoa_r+0xd00>
 40030a8:	00800144 	movi	r2,5
 40030ac:	3884c41e 	bne	r7,r2,40043c0 <_dtoa_r+0x1628>
 40030b0:	00800044 	movi	r2,1
 40030b4:	d8800b15 	stw	r2,44(sp)
 40030b8:	d8c00517 	ldw	r3,20(sp)
 40030bc:	d9002217 	ldw	r4,136(sp)
 40030c0:	1907883a 	add	r3,r3,r4
 40030c4:	19800044 	addi	r6,r3,1
 40030c8:	d8c00c15 	stw	r3,48(sp)
 40030cc:	d9800615 	stw	r6,24(sp)
 40030d0:	0183a40e 	bge	zero,r6,4003f64 <_dtoa_r+0x11cc>
 40030d4:	d9800617 	ldw	r6,24(sp)
 40030d8:	3021883a 	mov	r16,r6
 40030dc:	e0001115 	stw	zero,68(fp)
 40030e0:	008005c4 	movi	r2,23
 40030e4:	1184c92e 	bgeu	r2,r6,400440c <_dtoa_r+0x1674>
 40030e8:	00c00044 	movi	r3,1
 40030ec:	00800104 	movi	r2,4
 40030f0:	1085883a 	add	r2,r2,r2
 40030f4:	11000504 	addi	r4,r2,20
 40030f8:	180b883a 	mov	r5,r3
 40030fc:	18c00044 	addi	r3,r3,1
 4003100:	313ffb2e 	bgeu	r6,r4,40030f0 <__alt_data_end+0xff0030f0>
 4003104:	e1401115 	stw	r5,68(fp)
 4003108:	e009883a 	mov	r4,fp
 400310c:	40064340 	call	4006434 <_Balloc>
 4003110:	d8800715 	stw	r2,28(sp)
 4003114:	e0801015 	stw	r2,64(fp)
 4003118:	00800384 	movi	r2,14
 400311c:	1400f736 	bltu	r2,r16,40034fc <_dtoa_r+0x764>
 4003120:	8800f626 	beq	r17,zero,40034fc <_dtoa_r+0x764>
 4003124:	d9c00517 	ldw	r7,20(sp)
 4003128:	01c39a0e 	bge	zero,r7,4003f94 <_dtoa_r+0x11fc>
 400312c:	388003cc 	andi	r2,r7,15
 4003130:	100490fa 	slli	r2,r2,3
 4003134:	382bd13a 	srai	r21,r7,4
 4003138:	00c10074 	movhi	r3,1025
 400313c:	18ff4504 	addi	r3,r3,-748
 4003140:	1885883a 	add	r2,r3,r2
 4003144:	a8c0040c 	andi	r3,r21,16
 4003148:	12400017 	ldw	r9,0(r2)
 400314c:	12000117 	ldw	r8,4(r2)
 4003150:	18037926 	beq	r3,zero,4003f38 <_dtoa_r+0x11a0>
 4003154:	00810074 	movhi	r2,1025
 4003158:	10bf3b04 	addi	r2,r2,-788
 400315c:	11800817 	ldw	r6,32(r2)
 4003160:	11c00917 	ldw	r7,36(r2)
 4003164:	9009883a 	mov	r4,r18
 4003168:	980b883a 	mov	r5,r19
 400316c:	da001715 	stw	r8,92(sp)
 4003170:	da401615 	stw	r9,88(sp)
 4003174:	400b2680 	call	400b268 <__divdf3>
 4003178:	da001717 	ldw	r8,92(sp)
 400317c:	da401617 	ldw	r9,88(sp)
 4003180:	ad4003cc 	andi	r21,r21,15
 4003184:	040000c4 	movi	r16,3
 4003188:	1023883a 	mov	r17,r2
 400318c:	1829883a 	mov	r20,r3
 4003190:	a8001126 	beq	r21,zero,40031d8 <_dtoa_r+0x440>
 4003194:	05c10074 	movhi	r23,1025
 4003198:	bdff3b04 	addi	r23,r23,-788
 400319c:	4805883a 	mov	r2,r9
 40031a0:	4007883a 	mov	r3,r8
 40031a4:	a980004c 	andi	r6,r21,1
 40031a8:	1009883a 	mov	r4,r2
 40031ac:	a82bd07a 	srai	r21,r21,1
 40031b0:	180b883a 	mov	r5,r3
 40031b4:	30000426 	beq	r6,zero,40031c8 <_dtoa_r+0x430>
 40031b8:	b9800017 	ldw	r6,0(r23)
 40031bc:	b9c00117 	ldw	r7,4(r23)
 40031c0:	84000044 	addi	r16,r16,1
 40031c4:	400bda80 	call	400bda8 <__muldf3>
 40031c8:	bdc00204 	addi	r23,r23,8
 40031cc:	a83ff51e 	bne	r21,zero,40031a4 <__alt_data_end+0xff0031a4>
 40031d0:	1013883a 	mov	r9,r2
 40031d4:	1811883a 	mov	r8,r3
 40031d8:	480d883a 	mov	r6,r9
 40031dc:	400f883a 	mov	r7,r8
 40031e0:	8809883a 	mov	r4,r17
 40031e4:	a00b883a 	mov	r5,r20
 40031e8:	400b2680 	call	400b268 <__divdf3>
 40031ec:	d8800f15 	stw	r2,60(sp)
 40031f0:	d8c01015 	stw	r3,64(sp)
 40031f4:	d8c00e17 	ldw	r3,56(sp)
 40031f8:	18000626 	beq	r3,zero,4003214 <_dtoa_r+0x47c>
 40031fc:	d9000f17 	ldw	r4,60(sp)
 4003200:	d9401017 	ldw	r5,64(sp)
 4003204:	000d883a 	mov	r6,zero
 4003208:	01cffc34 	movhi	r7,16368
 400320c:	400bcb40 	call	400bcb4 <__ledf2>
 4003210:	10040b16 	blt	r2,zero,4004240 <_dtoa_r+0x14a8>
 4003214:	8009883a 	mov	r4,r16
 4003218:	400ce3c0 	call	400ce3c <__floatsidf>
 400321c:	d9800f17 	ldw	r6,60(sp)
 4003220:	d9c01017 	ldw	r7,64(sp)
 4003224:	1009883a 	mov	r4,r2
 4003228:	180b883a 	mov	r5,r3
 400322c:	400bda80 	call	400bda8 <__muldf3>
 4003230:	000d883a 	mov	r6,zero
 4003234:	01d00734 	movhi	r7,16412
 4003238:	1009883a 	mov	r4,r2
 400323c:	180b883a 	mov	r5,r3
 4003240:	400a9bc0 	call	400a9bc <__adddf3>
 4003244:	1021883a 	mov	r16,r2
 4003248:	d8800617 	ldw	r2,24(sp)
 400324c:	047f3034 	movhi	r17,64704
 4003250:	1c63883a 	add	r17,r3,r17
 4003254:	10031826 	beq	r2,zero,4003eb8 <_dtoa_r+0x1120>
 4003258:	d8c00517 	ldw	r3,20(sp)
 400325c:	db000617 	ldw	r12,24(sp)
 4003260:	d8c01315 	stw	r3,76(sp)
 4003264:	d9000b17 	ldw	r4,44(sp)
 4003268:	20038f26 	beq	r4,zero,40040a8 <_dtoa_r+0x1310>
 400326c:	60bfffc4 	addi	r2,r12,-1
 4003270:	100490fa 	slli	r2,r2,3
 4003274:	00c10074 	movhi	r3,1025
 4003278:	18ff4504 	addi	r3,r3,-748
 400327c:	1885883a 	add	r2,r3,r2
 4003280:	11800017 	ldw	r6,0(r2)
 4003284:	11c00117 	ldw	r7,4(r2)
 4003288:	d8800717 	ldw	r2,28(sp)
 400328c:	0009883a 	mov	r4,zero
 4003290:	014ff834 	movhi	r5,16352
 4003294:	db001615 	stw	r12,88(sp)
 4003298:	15c00044 	addi	r23,r2,1
 400329c:	400b2680 	call	400b268 <__divdf3>
 40032a0:	800d883a 	mov	r6,r16
 40032a4:	880f883a 	mov	r7,r17
 40032a8:	1009883a 	mov	r4,r2
 40032ac:	180b883a 	mov	r5,r3
 40032b0:	400c4c00 	call	400c4c0 <__subdf3>
 40032b4:	d9401017 	ldw	r5,64(sp)
 40032b8:	d9000f17 	ldw	r4,60(sp)
 40032bc:	102b883a 	mov	r21,r2
 40032c0:	d8c01215 	stw	r3,72(sp)
 40032c4:	400cdbc0 	call	400cdbc <__fixdfsi>
 40032c8:	1009883a 	mov	r4,r2
 40032cc:	1029883a 	mov	r20,r2
 40032d0:	400ce3c0 	call	400ce3c <__floatsidf>
 40032d4:	d9000f17 	ldw	r4,60(sp)
 40032d8:	d9401017 	ldw	r5,64(sp)
 40032dc:	100d883a 	mov	r6,r2
 40032e0:	180f883a 	mov	r7,r3
 40032e4:	400c4c00 	call	400c4c0 <__subdf3>
 40032e8:	1823883a 	mov	r17,r3
 40032ec:	d8c00717 	ldw	r3,28(sp)
 40032f0:	d9401217 	ldw	r5,72(sp)
 40032f4:	a2000c04 	addi	r8,r20,48
 40032f8:	1021883a 	mov	r16,r2
 40032fc:	1a000005 	stb	r8,0(r3)
 4003300:	800d883a 	mov	r6,r16
 4003304:	880f883a 	mov	r7,r17
 4003308:	a809883a 	mov	r4,r21
 400330c:	4029883a 	mov	r20,r8
 4003310:	400bbd80 	call	400bbd8 <__gedf2>
 4003314:	00841d16 	blt	zero,r2,400438c <_dtoa_r+0x15f4>
 4003318:	800d883a 	mov	r6,r16
 400331c:	880f883a 	mov	r7,r17
 4003320:	0009883a 	mov	r4,zero
 4003324:	014ffc34 	movhi	r5,16368
 4003328:	400c4c00 	call	400c4c0 <__subdf3>
 400332c:	d9401217 	ldw	r5,72(sp)
 4003330:	100d883a 	mov	r6,r2
 4003334:	180f883a 	mov	r7,r3
 4003338:	a809883a 	mov	r4,r21
 400333c:	400bbd80 	call	400bbd8 <__gedf2>
 4003340:	db001617 	ldw	r12,88(sp)
 4003344:	00840e16 	blt	zero,r2,4004380 <_dtoa_r+0x15e8>
 4003348:	00800044 	movi	r2,1
 400334c:	13006b0e 	bge	r2,r12,40034fc <_dtoa_r+0x764>
 4003350:	d9000717 	ldw	r4,28(sp)
 4003354:	dd800f15 	stw	r22,60(sp)
 4003358:	dcc01015 	stw	r19,64(sp)
 400335c:	2319883a 	add	r12,r4,r12
 4003360:	dcc01217 	ldw	r19,72(sp)
 4003364:	602d883a 	mov	r22,r12
 4003368:	dc801215 	stw	r18,72(sp)
 400336c:	b825883a 	mov	r18,r23
 4003370:	00000906 	br	4003398 <_dtoa_r+0x600>
 4003374:	400c4c00 	call	400c4c0 <__subdf3>
 4003378:	a80d883a 	mov	r6,r21
 400337c:	980f883a 	mov	r7,r19
 4003380:	1009883a 	mov	r4,r2
 4003384:	180b883a 	mov	r5,r3
 4003388:	400bcb40 	call	400bcb4 <__ledf2>
 400338c:	1003e816 	blt	r2,zero,4004330 <_dtoa_r+0x1598>
 4003390:	b825883a 	mov	r18,r23
 4003394:	bd83e926 	beq	r23,r22,400433c <_dtoa_r+0x15a4>
 4003398:	a809883a 	mov	r4,r21
 400339c:	980b883a 	mov	r5,r19
 40033a0:	000d883a 	mov	r6,zero
 40033a4:	01d00934 	movhi	r7,16420
 40033a8:	400bda80 	call	400bda8 <__muldf3>
 40033ac:	000d883a 	mov	r6,zero
 40033b0:	01d00934 	movhi	r7,16420
 40033b4:	8009883a 	mov	r4,r16
 40033b8:	880b883a 	mov	r5,r17
 40033bc:	102b883a 	mov	r21,r2
 40033c0:	1827883a 	mov	r19,r3
 40033c4:	400bda80 	call	400bda8 <__muldf3>
 40033c8:	180b883a 	mov	r5,r3
 40033cc:	1009883a 	mov	r4,r2
 40033d0:	1821883a 	mov	r16,r3
 40033d4:	1023883a 	mov	r17,r2
 40033d8:	400cdbc0 	call	400cdbc <__fixdfsi>
 40033dc:	1009883a 	mov	r4,r2
 40033e0:	1029883a 	mov	r20,r2
 40033e4:	400ce3c0 	call	400ce3c <__floatsidf>
 40033e8:	8809883a 	mov	r4,r17
 40033ec:	800b883a 	mov	r5,r16
 40033f0:	100d883a 	mov	r6,r2
 40033f4:	180f883a 	mov	r7,r3
 40033f8:	400c4c00 	call	400c4c0 <__subdf3>
 40033fc:	a5000c04 	addi	r20,r20,48
 4003400:	a80d883a 	mov	r6,r21
 4003404:	980f883a 	mov	r7,r19
 4003408:	1009883a 	mov	r4,r2
 400340c:	180b883a 	mov	r5,r3
 4003410:	95000005 	stb	r20,0(r18)
 4003414:	1021883a 	mov	r16,r2
 4003418:	1823883a 	mov	r17,r3
 400341c:	400bcb40 	call	400bcb4 <__ledf2>
 4003420:	bdc00044 	addi	r23,r23,1
 4003424:	800d883a 	mov	r6,r16
 4003428:	880f883a 	mov	r7,r17
 400342c:	0009883a 	mov	r4,zero
 4003430:	014ffc34 	movhi	r5,16368
 4003434:	103fcf0e 	bge	r2,zero,4003374 <__alt_data_end+0xff003374>
 4003438:	d8c01317 	ldw	r3,76(sp)
 400343c:	d8c00515 	stw	r3,20(sp)
 4003440:	d9400917 	ldw	r5,36(sp)
 4003444:	e009883a 	mov	r4,fp
 4003448:	40064dc0 	call	40064dc <_Bfree>
 400344c:	d9000517 	ldw	r4,20(sp)
 4003450:	d9802317 	ldw	r6,140(sp)
 4003454:	d9c02517 	ldw	r7,148(sp)
 4003458:	b8000005 	stb	zero,0(r23)
 400345c:	20800044 	addi	r2,r4,1
 4003460:	30800015 	stw	r2,0(r6)
 4003464:	3802aa26 	beq	r7,zero,4003f10 <_dtoa_r+0x1178>
 4003468:	3dc00015 	stw	r23,0(r7)
 400346c:	d8800717 	ldw	r2,28(sp)
 4003470:	003e7906 	br	4002e58 <__alt_data_end+0xff002e58>
 4003474:	00800434 	movhi	r2,16
 4003478:	10bfffc4 	addi	r2,r2,-1
 400347c:	88a2703a 	and	r17,r17,r2
 4003480:	883e851e 	bne	r17,zero,4002e98 <__alt_data_end+0xff002e98>
 4003484:	00810074 	movhi	r2,1025
 4003488:	10bf2604 	addi	r2,r2,-872
 400348c:	003e8406 	br	4002ea0 <__alt_data_end+0xff002ea0>
 4003490:	10c00204 	addi	r3,r2,8
 4003494:	003e8706 	br	4002eb4 <__alt_data_end+0xff002eb4>
 4003498:	01400434 	movhi	r5,16
 400349c:	297fffc4 	addi	r5,r5,-1
 40034a0:	994a703a 	and	r5,r19,r5
 40034a4:	9009883a 	mov	r4,r18
 40034a8:	843f0044 	addi	r16,r16,-1023
 40034ac:	294ffc34 	orhi	r5,r5,16368
 40034b0:	dd800217 	ldw	r22,8(sp)
 40034b4:	d8001115 	stw	zero,68(sp)
 40034b8:	003ea506 	br	4002f50 <__alt_data_end+0xff002f50>
 40034bc:	00810074 	movhi	r2,1025
 40034c0:	10bf1d04 	addi	r2,r2,-908
 40034c4:	003e6406 	br	4002e58 <__alt_data_end+0xff002e58>
 40034c8:	e0001115 	stw	zero,68(fp)
 40034cc:	000b883a 	mov	r5,zero
 40034d0:	e009883a 	mov	r4,fp
 40034d4:	40064340 	call	4006434 <_Balloc>
 40034d8:	01bfffc4 	movi	r6,-1
 40034dc:	01c00044 	movi	r7,1
 40034e0:	d8800715 	stw	r2,28(sp)
 40034e4:	d9800c15 	stw	r6,48(sp)
 40034e8:	e0801015 	stw	r2,64(fp)
 40034ec:	d8000315 	stw	zero,12(sp)
 40034f0:	d9c00b15 	stw	r7,44(sp)
 40034f4:	d9800615 	stw	r6,24(sp)
 40034f8:	d8002215 	stw	zero,136(sp)
 40034fc:	d8800117 	ldw	r2,4(sp)
 4003500:	10008916 	blt	r2,zero,4003728 <_dtoa_r+0x990>
 4003504:	d9000517 	ldw	r4,20(sp)
 4003508:	00c00384 	movi	r3,14
 400350c:	19008616 	blt	r3,r4,4003728 <_dtoa_r+0x990>
 4003510:	200490fa 	slli	r2,r4,3
 4003514:	00c10074 	movhi	r3,1025
 4003518:	d9802217 	ldw	r6,136(sp)
 400351c:	18ff4504 	addi	r3,r3,-748
 4003520:	1885883a 	add	r2,r3,r2
 4003524:	14000017 	ldw	r16,0(r2)
 4003528:	14400117 	ldw	r17,4(r2)
 400352c:	30016316 	blt	r6,zero,4003abc <_dtoa_r+0xd24>
 4003530:	800d883a 	mov	r6,r16
 4003534:	880f883a 	mov	r7,r17
 4003538:	9009883a 	mov	r4,r18
 400353c:	980b883a 	mov	r5,r19
 4003540:	400b2680 	call	400b268 <__divdf3>
 4003544:	180b883a 	mov	r5,r3
 4003548:	1009883a 	mov	r4,r2
 400354c:	400cdbc0 	call	400cdbc <__fixdfsi>
 4003550:	1009883a 	mov	r4,r2
 4003554:	102b883a 	mov	r21,r2
 4003558:	400ce3c0 	call	400ce3c <__floatsidf>
 400355c:	800d883a 	mov	r6,r16
 4003560:	880f883a 	mov	r7,r17
 4003564:	1009883a 	mov	r4,r2
 4003568:	180b883a 	mov	r5,r3
 400356c:	400bda80 	call	400bda8 <__muldf3>
 4003570:	100d883a 	mov	r6,r2
 4003574:	180f883a 	mov	r7,r3
 4003578:	9009883a 	mov	r4,r18
 400357c:	980b883a 	mov	r5,r19
 4003580:	400c4c00 	call	400c4c0 <__subdf3>
 4003584:	d9c00717 	ldw	r7,28(sp)
 4003588:	1009883a 	mov	r4,r2
 400358c:	a8800c04 	addi	r2,r21,48
 4003590:	38800005 	stb	r2,0(r7)
 4003594:	3dc00044 	addi	r23,r7,1
 4003598:	d9c00617 	ldw	r7,24(sp)
 400359c:	01800044 	movi	r6,1
 40035a0:	180b883a 	mov	r5,r3
 40035a4:	2005883a 	mov	r2,r4
 40035a8:	39803826 	beq	r7,r6,400368c <_dtoa_r+0x8f4>
 40035ac:	000d883a 	mov	r6,zero
 40035b0:	01d00934 	movhi	r7,16420
 40035b4:	400bda80 	call	400bda8 <__muldf3>
 40035b8:	000d883a 	mov	r6,zero
 40035bc:	000f883a 	mov	r7,zero
 40035c0:	1009883a 	mov	r4,r2
 40035c4:	180b883a 	mov	r5,r3
 40035c8:	1025883a 	mov	r18,r2
 40035cc:	1827883a 	mov	r19,r3
 40035d0:	400bb500 	call	400bb50 <__eqdf2>
 40035d4:	103f9a26 	beq	r2,zero,4003440 <__alt_data_end+0xff003440>
 40035d8:	d9c00617 	ldw	r7,24(sp)
 40035dc:	d8c00717 	ldw	r3,28(sp)
 40035e0:	b829883a 	mov	r20,r23
 40035e4:	38bfffc4 	addi	r2,r7,-1
 40035e8:	18ad883a 	add	r22,r3,r2
 40035ec:	00000a06 	br	4003618 <_dtoa_r+0x880>
 40035f0:	400bda80 	call	400bda8 <__muldf3>
 40035f4:	000d883a 	mov	r6,zero
 40035f8:	000f883a 	mov	r7,zero
 40035fc:	1009883a 	mov	r4,r2
 4003600:	180b883a 	mov	r5,r3
 4003604:	1025883a 	mov	r18,r2
 4003608:	1827883a 	mov	r19,r3
 400360c:	b829883a 	mov	r20,r23
 4003610:	400bb500 	call	400bb50 <__eqdf2>
 4003614:	103f8a26 	beq	r2,zero,4003440 <__alt_data_end+0xff003440>
 4003618:	800d883a 	mov	r6,r16
 400361c:	880f883a 	mov	r7,r17
 4003620:	9009883a 	mov	r4,r18
 4003624:	980b883a 	mov	r5,r19
 4003628:	400b2680 	call	400b268 <__divdf3>
 400362c:	180b883a 	mov	r5,r3
 4003630:	1009883a 	mov	r4,r2
 4003634:	400cdbc0 	call	400cdbc <__fixdfsi>
 4003638:	1009883a 	mov	r4,r2
 400363c:	102b883a 	mov	r21,r2
 4003640:	400ce3c0 	call	400ce3c <__floatsidf>
 4003644:	800d883a 	mov	r6,r16
 4003648:	880f883a 	mov	r7,r17
 400364c:	1009883a 	mov	r4,r2
 4003650:	180b883a 	mov	r5,r3
 4003654:	400bda80 	call	400bda8 <__muldf3>
 4003658:	100d883a 	mov	r6,r2
 400365c:	180f883a 	mov	r7,r3
 4003660:	9009883a 	mov	r4,r18
 4003664:	980b883a 	mov	r5,r19
 4003668:	400c4c00 	call	400c4c0 <__subdf3>
 400366c:	aa000c04 	addi	r8,r21,48
 4003670:	a2000005 	stb	r8,0(r20)
 4003674:	000d883a 	mov	r6,zero
 4003678:	01d00934 	movhi	r7,16420
 400367c:	1009883a 	mov	r4,r2
 4003680:	180b883a 	mov	r5,r3
 4003684:	a5c00044 	addi	r23,r20,1
 4003688:	b53fd91e 	bne	r22,r20,40035f0 <__alt_data_end+0xff0035f0>
 400368c:	100d883a 	mov	r6,r2
 4003690:	180f883a 	mov	r7,r3
 4003694:	1009883a 	mov	r4,r2
 4003698:	180b883a 	mov	r5,r3
 400369c:	400a9bc0 	call	400a9bc <__adddf3>
 40036a0:	100d883a 	mov	r6,r2
 40036a4:	180f883a 	mov	r7,r3
 40036a8:	8009883a 	mov	r4,r16
 40036ac:	880b883a 	mov	r5,r17
 40036b0:	1027883a 	mov	r19,r2
 40036b4:	1825883a 	mov	r18,r3
 40036b8:	400bcb40 	call	400bcb4 <__ledf2>
 40036bc:	10000816 	blt	r2,zero,40036e0 <_dtoa_r+0x948>
 40036c0:	980d883a 	mov	r6,r19
 40036c4:	900f883a 	mov	r7,r18
 40036c8:	8009883a 	mov	r4,r16
 40036cc:	880b883a 	mov	r5,r17
 40036d0:	400bb500 	call	400bb50 <__eqdf2>
 40036d4:	103f5a1e 	bne	r2,zero,4003440 <__alt_data_end+0xff003440>
 40036d8:	ad40004c 	andi	r21,r21,1
 40036dc:	a83f5826 	beq	r21,zero,4003440 <__alt_data_end+0xff003440>
 40036e0:	bd3fffc3 	ldbu	r20,-1(r23)
 40036e4:	b8bfffc4 	addi	r2,r23,-1
 40036e8:	1007883a 	mov	r3,r2
 40036ec:	01400e44 	movi	r5,57
 40036f0:	d9800717 	ldw	r6,28(sp)
 40036f4:	00000506 	br	400370c <_dtoa_r+0x974>
 40036f8:	18ffffc4 	addi	r3,r3,-1
 40036fc:	11824726 	beq	r2,r6,400401c <_dtoa_r+0x1284>
 4003700:	1d000003 	ldbu	r20,0(r3)
 4003704:	102f883a 	mov	r23,r2
 4003708:	10bfffc4 	addi	r2,r2,-1
 400370c:	a1003fcc 	andi	r4,r20,255
 4003710:	2100201c 	xori	r4,r4,128
 4003714:	213fe004 	addi	r4,r4,-128
 4003718:	217ff726 	beq	r4,r5,40036f8 <__alt_data_end+0xff0036f8>
 400371c:	a2000044 	addi	r8,r20,1
 4003720:	12000005 	stb	r8,0(r2)
 4003724:	003f4606 	br	4003440 <__alt_data_end+0xff003440>
 4003728:	d9000b17 	ldw	r4,44(sp)
 400372c:	2000c826 	beq	r4,zero,4003a50 <_dtoa_r+0xcb8>
 4003730:	d9800317 	ldw	r6,12(sp)
 4003734:	00c00044 	movi	r3,1
 4003738:	1980f90e 	bge	r3,r6,4003b20 <_dtoa_r+0xd88>
 400373c:	d8800617 	ldw	r2,24(sp)
 4003740:	d8c00a17 	ldw	r3,40(sp)
 4003744:	157fffc4 	addi	r21,r2,-1
 4003748:	1d41f316 	blt	r3,r21,4003f18 <_dtoa_r+0x1180>
 400374c:	1d6bc83a 	sub	r21,r3,r21
 4003750:	d9c00617 	ldw	r7,24(sp)
 4003754:	3802aa16 	blt	r7,zero,4004200 <_dtoa_r+0x1468>
 4003758:	dd000817 	ldw	r20,32(sp)
 400375c:	d8800617 	ldw	r2,24(sp)
 4003760:	d8c00817 	ldw	r3,32(sp)
 4003764:	01400044 	movi	r5,1
 4003768:	e009883a 	mov	r4,fp
 400376c:	1887883a 	add	r3,r3,r2
 4003770:	d8c00815 	stw	r3,32(sp)
 4003774:	b0ad883a 	add	r22,r22,r2
 4003778:	40068400 	call	4006840 <__i2b>
 400377c:	1023883a 	mov	r17,r2
 4003780:	a0000826 	beq	r20,zero,40037a4 <_dtoa_r+0xa0c>
 4003784:	0580070e 	bge	zero,r22,40037a4 <_dtoa_r+0xa0c>
 4003788:	a005883a 	mov	r2,r20
 400378c:	b500b916 	blt	r22,r20,4003a74 <_dtoa_r+0xcdc>
 4003790:	d9000817 	ldw	r4,32(sp)
 4003794:	a0a9c83a 	sub	r20,r20,r2
 4003798:	b0adc83a 	sub	r22,r22,r2
 400379c:	2089c83a 	sub	r4,r4,r2
 40037a0:	d9000815 	stw	r4,32(sp)
 40037a4:	d9800a17 	ldw	r6,40(sp)
 40037a8:	0181810e 	bge	zero,r6,4003db0 <_dtoa_r+0x1018>
 40037ac:	d9c00b17 	ldw	r7,44(sp)
 40037b0:	3800b326 	beq	r7,zero,4003a80 <_dtoa_r+0xce8>
 40037b4:	a800b226 	beq	r21,zero,4003a80 <_dtoa_r+0xce8>
 40037b8:	880b883a 	mov	r5,r17
 40037bc:	a80d883a 	mov	r6,r21
 40037c0:	e009883a 	mov	r4,fp
 40037c4:	4006a740 	call	4006a74 <__pow5mult>
 40037c8:	d9800917 	ldw	r6,36(sp)
 40037cc:	100b883a 	mov	r5,r2
 40037d0:	e009883a 	mov	r4,fp
 40037d4:	1023883a 	mov	r17,r2
 40037d8:	400687c0 	call	400687c <__multiply>
 40037dc:	1021883a 	mov	r16,r2
 40037e0:	d8800a17 	ldw	r2,40(sp)
 40037e4:	d9400917 	ldw	r5,36(sp)
 40037e8:	e009883a 	mov	r4,fp
 40037ec:	1545c83a 	sub	r2,r2,r21
 40037f0:	d8800a15 	stw	r2,40(sp)
 40037f4:	40064dc0 	call	40064dc <_Bfree>
 40037f8:	d8c00a17 	ldw	r3,40(sp)
 40037fc:	18009f1e 	bne	r3,zero,4003a7c <_dtoa_r+0xce4>
 4003800:	05c00044 	movi	r23,1
 4003804:	e009883a 	mov	r4,fp
 4003808:	b80b883a 	mov	r5,r23
 400380c:	40068400 	call	4006840 <__i2b>
 4003810:	d9000d17 	ldw	r4,52(sp)
 4003814:	102b883a 	mov	r21,r2
 4003818:	2000ce26 	beq	r4,zero,4003b54 <_dtoa_r+0xdbc>
 400381c:	200d883a 	mov	r6,r4
 4003820:	100b883a 	mov	r5,r2
 4003824:	e009883a 	mov	r4,fp
 4003828:	4006a740 	call	4006a74 <__pow5mult>
 400382c:	d9800317 	ldw	r6,12(sp)
 4003830:	102b883a 	mov	r21,r2
 4003834:	b981810e 	bge	r23,r6,4003e3c <_dtoa_r+0x10a4>
 4003838:	0027883a 	mov	r19,zero
 400383c:	a8800417 	ldw	r2,16(r21)
 4003840:	05c00804 	movi	r23,32
 4003844:	10800104 	addi	r2,r2,4
 4003848:	1085883a 	add	r2,r2,r2
 400384c:	1085883a 	add	r2,r2,r2
 4003850:	a885883a 	add	r2,r21,r2
 4003854:	11000017 	ldw	r4,0(r2)
 4003858:	40067280 	call	4006728 <__hi0bits>
 400385c:	b885c83a 	sub	r2,r23,r2
 4003860:	1585883a 	add	r2,r2,r22
 4003864:	108007cc 	andi	r2,r2,31
 4003868:	1000b326 	beq	r2,zero,4003b38 <_dtoa_r+0xda0>
 400386c:	00c00804 	movi	r3,32
 4003870:	1887c83a 	sub	r3,r3,r2
 4003874:	01000104 	movi	r4,4
 4003878:	20c2cd0e 	bge	r4,r3,40043b0 <_dtoa_r+0x1618>
 400387c:	00c00704 	movi	r3,28
 4003880:	1885c83a 	sub	r2,r3,r2
 4003884:	d8c00817 	ldw	r3,32(sp)
 4003888:	a0a9883a 	add	r20,r20,r2
 400388c:	b0ad883a 	add	r22,r22,r2
 4003890:	1887883a 	add	r3,r3,r2
 4003894:	d8c00815 	stw	r3,32(sp)
 4003898:	d9800817 	ldw	r6,32(sp)
 400389c:	0180040e 	bge	zero,r6,40038b0 <_dtoa_r+0xb18>
 40038a0:	800b883a 	mov	r5,r16
 40038a4:	e009883a 	mov	r4,fp
 40038a8:	4006bb40 	call	4006bb4 <__lshift>
 40038ac:	1021883a 	mov	r16,r2
 40038b0:	0580050e 	bge	zero,r22,40038c8 <_dtoa_r+0xb30>
 40038b4:	a80b883a 	mov	r5,r21
 40038b8:	b00d883a 	mov	r6,r22
 40038bc:	e009883a 	mov	r4,fp
 40038c0:	4006bb40 	call	4006bb4 <__lshift>
 40038c4:	102b883a 	mov	r21,r2
 40038c8:	d9c00e17 	ldw	r7,56(sp)
 40038cc:	3801211e 	bne	r7,zero,4003d54 <_dtoa_r+0xfbc>
 40038d0:	d9800617 	ldw	r6,24(sp)
 40038d4:	0181380e 	bge	zero,r6,4003db8 <_dtoa_r+0x1020>
 40038d8:	d8c00b17 	ldw	r3,44(sp)
 40038dc:	1800ab1e 	bne	r3,zero,4003b8c <_dtoa_r+0xdf4>
 40038e0:	dc800717 	ldw	r18,28(sp)
 40038e4:	dcc00617 	ldw	r19,24(sp)
 40038e8:	9029883a 	mov	r20,r18
 40038ec:	00000206 	br	40038f8 <_dtoa_r+0xb60>
 40038f0:	40065040 	call	4006504 <__multadd>
 40038f4:	1021883a 	mov	r16,r2
 40038f8:	a80b883a 	mov	r5,r21
 40038fc:	8009883a 	mov	r4,r16
 4003900:	4002b980 	call	4002b98 <quorem>
 4003904:	10800c04 	addi	r2,r2,48
 4003908:	90800005 	stb	r2,0(r18)
 400390c:	94800044 	addi	r18,r18,1
 4003910:	9507c83a 	sub	r3,r18,r20
 4003914:	000f883a 	mov	r7,zero
 4003918:	01800284 	movi	r6,10
 400391c:	800b883a 	mov	r5,r16
 4003920:	e009883a 	mov	r4,fp
 4003924:	1cfff216 	blt	r3,r19,40038f0 <__alt_data_end+0xff0038f0>
 4003928:	1011883a 	mov	r8,r2
 400392c:	d8800617 	ldw	r2,24(sp)
 4003930:	0082370e 	bge	zero,r2,4004210 <_dtoa_r+0x1478>
 4003934:	d9000717 	ldw	r4,28(sp)
 4003938:	0025883a 	mov	r18,zero
 400393c:	20af883a 	add	r23,r4,r2
 4003940:	01800044 	movi	r6,1
 4003944:	800b883a 	mov	r5,r16
 4003948:	e009883a 	mov	r4,fp
 400394c:	da001715 	stw	r8,92(sp)
 4003950:	4006bb40 	call	4006bb4 <__lshift>
 4003954:	a80b883a 	mov	r5,r21
 4003958:	1009883a 	mov	r4,r2
 400395c:	d8800915 	stw	r2,36(sp)
 4003960:	4006cfc0 	call	4006cfc <__mcmp>
 4003964:	da001717 	ldw	r8,92(sp)
 4003968:	0081800e 	bge	zero,r2,4003f6c <_dtoa_r+0x11d4>
 400396c:	b93fffc3 	ldbu	r4,-1(r23)
 4003970:	b8bfffc4 	addi	r2,r23,-1
 4003974:	1007883a 	mov	r3,r2
 4003978:	01800e44 	movi	r6,57
 400397c:	d9c00717 	ldw	r7,28(sp)
 4003980:	00000506 	br	4003998 <_dtoa_r+0xc00>
 4003984:	18ffffc4 	addi	r3,r3,-1
 4003988:	11c12326 	beq	r2,r7,4003e18 <_dtoa_r+0x1080>
 400398c:	19000003 	ldbu	r4,0(r3)
 4003990:	102f883a 	mov	r23,r2
 4003994:	10bfffc4 	addi	r2,r2,-1
 4003998:	21403fcc 	andi	r5,r4,255
 400399c:	2940201c 	xori	r5,r5,128
 40039a0:	297fe004 	addi	r5,r5,-128
 40039a4:	29bff726 	beq	r5,r6,4003984 <__alt_data_end+0xff003984>
 40039a8:	21000044 	addi	r4,r4,1
 40039ac:	11000005 	stb	r4,0(r2)
 40039b0:	a80b883a 	mov	r5,r21
 40039b4:	e009883a 	mov	r4,fp
 40039b8:	40064dc0 	call	40064dc <_Bfree>
 40039bc:	883ea026 	beq	r17,zero,4003440 <__alt_data_end+0xff003440>
 40039c0:	90000426 	beq	r18,zero,40039d4 <_dtoa_r+0xc3c>
 40039c4:	94400326 	beq	r18,r17,40039d4 <_dtoa_r+0xc3c>
 40039c8:	900b883a 	mov	r5,r18
 40039cc:	e009883a 	mov	r4,fp
 40039d0:	40064dc0 	call	40064dc <_Bfree>
 40039d4:	880b883a 	mov	r5,r17
 40039d8:	e009883a 	mov	r4,fp
 40039dc:	40064dc0 	call	40064dc <_Bfree>
 40039e0:	003e9706 	br	4003440 <__alt_data_end+0xff003440>
 40039e4:	01800044 	movi	r6,1
 40039e8:	d9800e15 	stw	r6,56(sp)
 40039ec:	003d9606 	br	4003048 <__alt_data_end+0xff003048>
 40039f0:	d8800817 	ldw	r2,32(sp)
 40039f4:	d8c00517 	ldw	r3,20(sp)
 40039f8:	d8000d15 	stw	zero,52(sp)
 40039fc:	10c5c83a 	sub	r2,r2,r3
 4003a00:	00c9c83a 	sub	r4,zero,r3
 4003a04:	d8800815 	stw	r2,32(sp)
 4003a08:	d9000a15 	stw	r4,40(sp)
 4003a0c:	003d9706 	br	400306c <__alt_data_end+0xff00306c>
 4003a10:	05adc83a 	sub	r22,zero,r22
 4003a14:	dd800815 	stw	r22,32(sp)
 4003a18:	002d883a 	mov	r22,zero
 4003a1c:	003d8e06 	br	4003058 <__alt_data_end+0xff003058>
 4003a20:	d9000517 	ldw	r4,20(sp)
 4003a24:	400ce3c0 	call	400ce3c <__floatsidf>
 4003a28:	100d883a 	mov	r6,r2
 4003a2c:	180f883a 	mov	r7,r3
 4003a30:	a009883a 	mov	r4,r20
 4003a34:	880b883a 	mov	r5,r17
 4003a38:	400bb500 	call	400bb50 <__eqdf2>
 4003a3c:	103d7126 	beq	r2,zero,4003004 <__alt_data_end+0xff003004>
 4003a40:	d9c00517 	ldw	r7,20(sp)
 4003a44:	39ffffc4 	addi	r7,r7,-1
 4003a48:	d9c00515 	stw	r7,20(sp)
 4003a4c:	003d6d06 	br	4003004 <__alt_data_end+0xff003004>
 4003a50:	dd400a17 	ldw	r21,40(sp)
 4003a54:	dd000817 	ldw	r20,32(sp)
 4003a58:	0023883a 	mov	r17,zero
 4003a5c:	003f4806 	br	4003780 <__alt_data_end+0xff003780>
 4003a60:	10e3c83a 	sub	r17,r2,r3
 4003a64:	9448983a 	sll	r4,r18,r17
 4003a68:	003d3206 	br	4002f34 <__alt_data_end+0xff002f34>
 4003a6c:	d8000e15 	stw	zero,56(sp)
 4003a70:	003d7506 	br	4003048 <__alt_data_end+0xff003048>
 4003a74:	b005883a 	mov	r2,r22
 4003a78:	003f4506 	br	4003790 <__alt_data_end+0xff003790>
 4003a7c:	dc000915 	stw	r16,36(sp)
 4003a80:	d9800a17 	ldw	r6,40(sp)
 4003a84:	d9400917 	ldw	r5,36(sp)
 4003a88:	e009883a 	mov	r4,fp
 4003a8c:	4006a740 	call	4006a74 <__pow5mult>
 4003a90:	1021883a 	mov	r16,r2
 4003a94:	003f5a06 	br	4003800 <__alt_data_end+0xff003800>
 4003a98:	01c00044 	movi	r7,1
 4003a9c:	d9c00b15 	stw	r7,44(sp)
 4003aa0:	d8802217 	ldw	r2,136(sp)
 4003aa4:	0081280e 	bge	zero,r2,4003f48 <_dtoa_r+0x11b0>
 4003aa8:	100d883a 	mov	r6,r2
 4003aac:	1021883a 	mov	r16,r2
 4003ab0:	d8800c15 	stw	r2,48(sp)
 4003ab4:	d8800615 	stw	r2,24(sp)
 4003ab8:	003d8806 	br	40030dc <__alt_data_end+0xff0030dc>
 4003abc:	d8800617 	ldw	r2,24(sp)
 4003ac0:	00be9b16 	blt	zero,r2,4003530 <__alt_data_end+0xff003530>
 4003ac4:	10010f1e 	bne	r2,zero,4003f04 <_dtoa_r+0x116c>
 4003ac8:	880b883a 	mov	r5,r17
 4003acc:	000d883a 	mov	r6,zero
 4003ad0:	01d00534 	movhi	r7,16404
 4003ad4:	8009883a 	mov	r4,r16
 4003ad8:	400bda80 	call	400bda8 <__muldf3>
 4003adc:	900d883a 	mov	r6,r18
 4003ae0:	980f883a 	mov	r7,r19
 4003ae4:	1009883a 	mov	r4,r2
 4003ae8:	180b883a 	mov	r5,r3
 4003aec:	400bbd80 	call	400bbd8 <__gedf2>
 4003af0:	002b883a 	mov	r21,zero
 4003af4:	0023883a 	mov	r17,zero
 4003af8:	1000bf16 	blt	r2,zero,4003df8 <_dtoa_r+0x1060>
 4003afc:	d9802217 	ldw	r6,136(sp)
 4003b00:	ddc00717 	ldw	r23,28(sp)
 4003b04:	018c303a 	nor	r6,zero,r6
 4003b08:	d9800515 	stw	r6,20(sp)
 4003b0c:	a80b883a 	mov	r5,r21
 4003b10:	e009883a 	mov	r4,fp
 4003b14:	40064dc0 	call	40064dc <_Bfree>
 4003b18:	883e4926 	beq	r17,zero,4003440 <__alt_data_end+0xff003440>
 4003b1c:	003fad06 	br	40039d4 <__alt_data_end+0xff0039d4>
 4003b20:	d9c01117 	ldw	r7,68(sp)
 4003b24:	3801bc26 	beq	r7,zero,4004218 <_dtoa_r+0x1480>
 4003b28:	10810cc4 	addi	r2,r2,1075
 4003b2c:	dd400a17 	ldw	r21,40(sp)
 4003b30:	dd000817 	ldw	r20,32(sp)
 4003b34:	003f0a06 	br	4003760 <__alt_data_end+0xff003760>
 4003b38:	00800704 	movi	r2,28
 4003b3c:	d9000817 	ldw	r4,32(sp)
 4003b40:	a0a9883a 	add	r20,r20,r2
 4003b44:	b0ad883a 	add	r22,r22,r2
 4003b48:	2089883a 	add	r4,r4,r2
 4003b4c:	d9000815 	stw	r4,32(sp)
 4003b50:	003f5106 	br	4003898 <__alt_data_end+0xff003898>
 4003b54:	d8c00317 	ldw	r3,12(sp)
 4003b58:	b8c1fc0e 	bge	r23,r3,400434c <_dtoa_r+0x15b4>
 4003b5c:	0027883a 	mov	r19,zero
 4003b60:	b805883a 	mov	r2,r23
 4003b64:	003f3e06 	br	4003860 <__alt_data_end+0xff003860>
 4003b68:	880b883a 	mov	r5,r17
 4003b6c:	e009883a 	mov	r4,fp
 4003b70:	000f883a 	mov	r7,zero
 4003b74:	01800284 	movi	r6,10
 4003b78:	40065040 	call	4006504 <__multadd>
 4003b7c:	d9000c17 	ldw	r4,48(sp)
 4003b80:	1023883a 	mov	r17,r2
 4003b84:	0102040e 	bge	zero,r4,4004398 <_dtoa_r+0x1600>
 4003b88:	d9000615 	stw	r4,24(sp)
 4003b8c:	0500050e 	bge	zero,r20,4003ba4 <_dtoa_r+0xe0c>
 4003b90:	880b883a 	mov	r5,r17
 4003b94:	a00d883a 	mov	r6,r20
 4003b98:	e009883a 	mov	r4,fp
 4003b9c:	4006bb40 	call	4006bb4 <__lshift>
 4003ba0:	1023883a 	mov	r17,r2
 4003ba4:	9801241e 	bne	r19,zero,4004038 <_dtoa_r+0x12a0>
 4003ba8:	8829883a 	mov	r20,r17
 4003bac:	d9000617 	ldw	r4,24(sp)
 4003bb0:	dcc00717 	ldw	r19,28(sp)
 4003bb4:	9480004c 	andi	r18,r18,1
 4003bb8:	20bfffc4 	addi	r2,r4,-1
 4003bbc:	9885883a 	add	r2,r19,r2
 4003bc0:	d8800415 	stw	r2,16(sp)
 4003bc4:	dc800615 	stw	r18,24(sp)
 4003bc8:	a80b883a 	mov	r5,r21
 4003bcc:	8009883a 	mov	r4,r16
 4003bd0:	4002b980 	call	4002b98 <quorem>
 4003bd4:	880b883a 	mov	r5,r17
 4003bd8:	8009883a 	mov	r4,r16
 4003bdc:	102f883a 	mov	r23,r2
 4003be0:	4006cfc0 	call	4006cfc <__mcmp>
 4003be4:	a80b883a 	mov	r5,r21
 4003be8:	a00d883a 	mov	r6,r20
 4003bec:	e009883a 	mov	r4,fp
 4003bf0:	102d883a 	mov	r22,r2
 4003bf4:	4006d5c0 	call	4006d5c <__mdiff>
 4003bf8:	1007883a 	mov	r3,r2
 4003bfc:	10800317 	ldw	r2,12(r2)
 4003c00:	bc800c04 	addi	r18,r23,48
 4003c04:	180b883a 	mov	r5,r3
 4003c08:	10004e1e 	bne	r2,zero,4003d44 <_dtoa_r+0xfac>
 4003c0c:	8009883a 	mov	r4,r16
 4003c10:	d8c01615 	stw	r3,88(sp)
 4003c14:	4006cfc0 	call	4006cfc <__mcmp>
 4003c18:	d8c01617 	ldw	r3,88(sp)
 4003c1c:	e009883a 	mov	r4,fp
 4003c20:	d8801615 	stw	r2,88(sp)
 4003c24:	180b883a 	mov	r5,r3
 4003c28:	40064dc0 	call	40064dc <_Bfree>
 4003c2c:	d8801617 	ldw	r2,88(sp)
 4003c30:	1000041e 	bne	r2,zero,4003c44 <_dtoa_r+0xeac>
 4003c34:	d9800317 	ldw	r6,12(sp)
 4003c38:	3000021e 	bne	r6,zero,4003c44 <_dtoa_r+0xeac>
 4003c3c:	d8c00617 	ldw	r3,24(sp)
 4003c40:	18003726 	beq	r3,zero,4003d20 <_dtoa_r+0xf88>
 4003c44:	b0002016 	blt	r22,zero,4003cc8 <_dtoa_r+0xf30>
 4003c48:	b000041e 	bne	r22,zero,4003c5c <_dtoa_r+0xec4>
 4003c4c:	d9000317 	ldw	r4,12(sp)
 4003c50:	2000021e 	bne	r4,zero,4003c5c <_dtoa_r+0xec4>
 4003c54:	d8c00617 	ldw	r3,24(sp)
 4003c58:	18001b26 	beq	r3,zero,4003cc8 <_dtoa_r+0xf30>
 4003c5c:	00810716 	blt	zero,r2,400407c <_dtoa_r+0x12e4>
 4003c60:	d8c00417 	ldw	r3,16(sp)
 4003c64:	9d800044 	addi	r22,r19,1
 4003c68:	9c800005 	stb	r18,0(r19)
 4003c6c:	b02f883a 	mov	r23,r22
 4003c70:	98c10626 	beq	r19,r3,400408c <_dtoa_r+0x12f4>
 4003c74:	800b883a 	mov	r5,r16
 4003c78:	000f883a 	mov	r7,zero
 4003c7c:	01800284 	movi	r6,10
 4003c80:	e009883a 	mov	r4,fp
 4003c84:	40065040 	call	4006504 <__multadd>
 4003c88:	1021883a 	mov	r16,r2
 4003c8c:	000f883a 	mov	r7,zero
 4003c90:	01800284 	movi	r6,10
 4003c94:	880b883a 	mov	r5,r17
 4003c98:	e009883a 	mov	r4,fp
 4003c9c:	8d002526 	beq	r17,r20,4003d34 <_dtoa_r+0xf9c>
 4003ca0:	40065040 	call	4006504 <__multadd>
 4003ca4:	a00b883a 	mov	r5,r20
 4003ca8:	000f883a 	mov	r7,zero
 4003cac:	01800284 	movi	r6,10
 4003cb0:	e009883a 	mov	r4,fp
 4003cb4:	1023883a 	mov	r17,r2
 4003cb8:	40065040 	call	4006504 <__multadd>
 4003cbc:	1029883a 	mov	r20,r2
 4003cc0:	b027883a 	mov	r19,r22
 4003cc4:	003fc006 	br	4003bc8 <__alt_data_end+0xff003bc8>
 4003cc8:	9011883a 	mov	r8,r18
 4003ccc:	00800e0e 	bge	zero,r2,4003d08 <_dtoa_r+0xf70>
 4003cd0:	800b883a 	mov	r5,r16
 4003cd4:	01800044 	movi	r6,1
 4003cd8:	e009883a 	mov	r4,fp
 4003cdc:	da001715 	stw	r8,92(sp)
 4003ce0:	4006bb40 	call	4006bb4 <__lshift>
 4003ce4:	a80b883a 	mov	r5,r21
 4003ce8:	1009883a 	mov	r4,r2
 4003cec:	1021883a 	mov	r16,r2
 4003cf0:	4006cfc0 	call	4006cfc <__mcmp>
 4003cf4:	da001717 	ldw	r8,92(sp)
 4003cf8:	0081960e 	bge	zero,r2,4004354 <_dtoa_r+0x15bc>
 4003cfc:	00800e44 	movi	r2,57
 4003d00:	40817026 	beq	r8,r2,40042c4 <_dtoa_r+0x152c>
 4003d04:	ba000c44 	addi	r8,r23,49
 4003d08:	8825883a 	mov	r18,r17
 4003d0c:	9dc00044 	addi	r23,r19,1
 4003d10:	9a000005 	stb	r8,0(r19)
 4003d14:	a023883a 	mov	r17,r20
 4003d18:	dc000915 	stw	r16,36(sp)
 4003d1c:	003f2406 	br	40039b0 <__alt_data_end+0xff0039b0>
 4003d20:	00800e44 	movi	r2,57
 4003d24:	9011883a 	mov	r8,r18
 4003d28:	90816626 	beq	r18,r2,40042c4 <_dtoa_r+0x152c>
 4003d2c:	05bff516 	blt	zero,r22,4003d04 <__alt_data_end+0xff003d04>
 4003d30:	003ff506 	br	4003d08 <__alt_data_end+0xff003d08>
 4003d34:	40065040 	call	4006504 <__multadd>
 4003d38:	1023883a 	mov	r17,r2
 4003d3c:	1029883a 	mov	r20,r2
 4003d40:	003fdf06 	br	4003cc0 <__alt_data_end+0xff003cc0>
 4003d44:	e009883a 	mov	r4,fp
 4003d48:	40064dc0 	call	40064dc <_Bfree>
 4003d4c:	00800044 	movi	r2,1
 4003d50:	003fbc06 	br	4003c44 <__alt_data_end+0xff003c44>
 4003d54:	a80b883a 	mov	r5,r21
 4003d58:	8009883a 	mov	r4,r16
 4003d5c:	4006cfc0 	call	4006cfc <__mcmp>
 4003d60:	103edb0e 	bge	r2,zero,40038d0 <__alt_data_end+0xff0038d0>
 4003d64:	800b883a 	mov	r5,r16
 4003d68:	000f883a 	mov	r7,zero
 4003d6c:	01800284 	movi	r6,10
 4003d70:	e009883a 	mov	r4,fp
 4003d74:	40065040 	call	4006504 <__multadd>
 4003d78:	1021883a 	mov	r16,r2
 4003d7c:	d8800517 	ldw	r2,20(sp)
 4003d80:	d8c00b17 	ldw	r3,44(sp)
 4003d84:	10bfffc4 	addi	r2,r2,-1
 4003d88:	d8800515 	stw	r2,20(sp)
 4003d8c:	183f761e 	bne	r3,zero,4003b68 <__alt_data_end+0xff003b68>
 4003d90:	d9000c17 	ldw	r4,48(sp)
 4003d94:	0101730e 	bge	zero,r4,4004364 <_dtoa_r+0x15cc>
 4003d98:	d9000615 	stw	r4,24(sp)
 4003d9c:	003ed006 	br	40038e0 <__alt_data_end+0xff0038e0>
 4003da0:	00800084 	movi	r2,2
 4003da4:	3081861e 	bne	r6,r2,40043c0 <_dtoa_r+0x1628>
 4003da8:	d8000b15 	stw	zero,44(sp)
 4003dac:	003f3c06 	br	4003aa0 <__alt_data_end+0xff003aa0>
 4003db0:	dc000917 	ldw	r16,36(sp)
 4003db4:	003e9206 	br	4003800 <__alt_data_end+0xff003800>
 4003db8:	d9c00317 	ldw	r7,12(sp)
 4003dbc:	00800084 	movi	r2,2
 4003dc0:	11fec50e 	bge	r2,r7,40038d8 <__alt_data_end+0xff0038d8>
 4003dc4:	d9000617 	ldw	r4,24(sp)
 4003dc8:	20013c1e 	bne	r4,zero,40042bc <_dtoa_r+0x1524>
 4003dcc:	a80b883a 	mov	r5,r21
 4003dd0:	000f883a 	mov	r7,zero
 4003dd4:	01800144 	movi	r6,5
 4003dd8:	e009883a 	mov	r4,fp
 4003ddc:	40065040 	call	4006504 <__multadd>
 4003de0:	100b883a 	mov	r5,r2
 4003de4:	8009883a 	mov	r4,r16
 4003de8:	102b883a 	mov	r21,r2
 4003dec:	4006cfc0 	call	4006cfc <__mcmp>
 4003df0:	dc000915 	stw	r16,36(sp)
 4003df4:	00bf410e 	bge	zero,r2,4003afc <__alt_data_end+0xff003afc>
 4003df8:	d9c00717 	ldw	r7,28(sp)
 4003dfc:	00800c44 	movi	r2,49
 4003e00:	38800005 	stb	r2,0(r7)
 4003e04:	d8800517 	ldw	r2,20(sp)
 4003e08:	3dc00044 	addi	r23,r7,1
 4003e0c:	10800044 	addi	r2,r2,1
 4003e10:	d8800515 	stw	r2,20(sp)
 4003e14:	003f3d06 	br	4003b0c <__alt_data_end+0xff003b0c>
 4003e18:	d9800517 	ldw	r6,20(sp)
 4003e1c:	d9c00717 	ldw	r7,28(sp)
 4003e20:	00800c44 	movi	r2,49
 4003e24:	31800044 	addi	r6,r6,1
 4003e28:	d9800515 	stw	r6,20(sp)
 4003e2c:	38800005 	stb	r2,0(r7)
 4003e30:	003edf06 	br	40039b0 <__alt_data_end+0xff0039b0>
 4003e34:	d8000b15 	stw	zero,44(sp)
 4003e38:	003c9f06 	br	40030b8 <__alt_data_end+0xff0030b8>
 4003e3c:	903e7e1e 	bne	r18,zero,4003838 <__alt_data_end+0xff003838>
 4003e40:	00800434 	movhi	r2,16
 4003e44:	10bfffc4 	addi	r2,r2,-1
 4003e48:	9884703a 	and	r2,r19,r2
 4003e4c:	1000ea1e 	bne	r2,zero,40041f8 <_dtoa_r+0x1460>
 4003e50:	9cdffc2c 	andhi	r19,r19,32752
 4003e54:	9800e826 	beq	r19,zero,40041f8 <_dtoa_r+0x1460>
 4003e58:	d9c00817 	ldw	r7,32(sp)
 4003e5c:	b5800044 	addi	r22,r22,1
 4003e60:	04c00044 	movi	r19,1
 4003e64:	39c00044 	addi	r7,r7,1
 4003e68:	d9c00815 	stw	r7,32(sp)
 4003e6c:	d8800d17 	ldw	r2,52(sp)
 4003e70:	103e721e 	bne	r2,zero,400383c <__alt_data_end+0xff00383c>
 4003e74:	00800044 	movi	r2,1
 4003e78:	003e7906 	br	4003860 <__alt_data_end+0xff003860>
 4003e7c:	8009883a 	mov	r4,r16
 4003e80:	400ce3c0 	call	400ce3c <__floatsidf>
 4003e84:	d9800f17 	ldw	r6,60(sp)
 4003e88:	d9c01017 	ldw	r7,64(sp)
 4003e8c:	1009883a 	mov	r4,r2
 4003e90:	180b883a 	mov	r5,r3
 4003e94:	400bda80 	call	400bda8 <__muldf3>
 4003e98:	000d883a 	mov	r6,zero
 4003e9c:	01d00734 	movhi	r7,16412
 4003ea0:	1009883a 	mov	r4,r2
 4003ea4:	180b883a 	mov	r5,r3
 4003ea8:	400a9bc0 	call	400a9bc <__adddf3>
 4003eac:	047f3034 	movhi	r17,64704
 4003eb0:	1021883a 	mov	r16,r2
 4003eb4:	1c63883a 	add	r17,r3,r17
 4003eb8:	d9000f17 	ldw	r4,60(sp)
 4003ebc:	d9401017 	ldw	r5,64(sp)
 4003ec0:	000d883a 	mov	r6,zero
 4003ec4:	01d00534 	movhi	r7,16404
 4003ec8:	400c4c00 	call	400c4c0 <__subdf3>
 4003ecc:	800d883a 	mov	r6,r16
 4003ed0:	880f883a 	mov	r7,r17
 4003ed4:	1009883a 	mov	r4,r2
 4003ed8:	180b883a 	mov	r5,r3
 4003edc:	102b883a 	mov	r21,r2
 4003ee0:	1829883a 	mov	r20,r3
 4003ee4:	400bbd80 	call	400bbd8 <__gedf2>
 4003ee8:	00806c16 	blt	zero,r2,400409c <_dtoa_r+0x1304>
 4003eec:	89e0003c 	xorhi	r7,r17,32768
 4003ef0:	800d883a 	mov	r6,r16
 4003ef4:	a809883a 	mov	r4,r21
 4003ef8:	a00b883a 	mov	r5,r20
 4003efc:	400bcb40 	call	400bcb4 <__ledf2>
 4003f00:	103d7e0e 	bge	r2,zero,40034fc <__alt_data_end+0xff0034fc>
 4003f04:	002b883a 	mov	r21,zero
 4003f08:	0023883a 	mov	r17,zero
 4003f0c:	003efb06 	br	4003afc <__alt_data_end+0xff003afc>
 4003f10:	d8800717 	ldw	r2,28(sp)
 4003f14:	003bd006 	br	4002e58 <__alt_data_end+0xff002e58>
 4003f18:	d9000a17 	ldw	r4,40(sp)
 4003f1c:	d9800d17 	ldw	r6,52(sp)
 4003f20:	dd400a15 	stw	r21,40(sp)
 4003f24:	a905c83a 	sub	r2,r21,r4
 4003f28:	308d883a 	add	r6,r6,r2
 4003f2c:	d9800d15 	stw	r6,52(sp)
 4003f30:	002b883a 	mov	r21,zero
 4003f34:	003e0606 	br	4003750 <__alt_data_end+0xff003750>
 4003f38:	9023883a 	mov	r17,r18
 4003f3c:	9829883a 	mov	r20,r19
 4003f40:	04000084 	movi	r16,2
 4003f44:	003c9206 	br	4003190 <__alt_data_end+0xff003190>
 4003f48:	04000044 	movi	r16,1
 4003f4c:	dc000c15 	stw	r16,48(sp)
 4003f50:	dc000615 	stw	r16,24(sp)
 4003f54:	dc002215 	stw	r16,136(sp)
 4003f58:	e0001115 	stw	zero,68(fp)
 4003f5c:	000b883a 	mov	r5,zero
 4003f60:	003c6906 	br	4003108 <__alt_data_end+0xff003108>
 4003f64:	3021883a 	mov	r16,r6
 4003f68:	003ffb06 	br	4003f58 <__alt_data_end+0xff003f58>
 4003f6c:	1000021e 	bne	r2,zero,4003f78 <_dtoa_r+0x11e0>
 4003f70:	4200004c 	andi	r8,r8,1
 4003f74:	403e7d1e 	bne	r8,zero,400396c <__alt_data_end+0xff00396c>
 4003f78:	01000c04 	movi	r4,48
 4003f7c:	00000106 	br	4003f84 <_dtoa_r+0x11ec>
 4003f80:	102f883a 	mov	r23,r2
 4003f84:	b8bfffc4 	addi	r2,r23,-1
 4003f88:	10c00007 	ldb	r3,0(r2)
 4003f8c:	193ffc26 	beq	r3,r4,4003f80 <__alt_data_end+0xff003f80>
 4003f90:	003e8706 	br	40039b0 <__alt_data_end+0xff0039b0>
 4003f94:	d8800517 	ldw	r2,20(sp)
 4003f98:	00a3c83a 	sub	r17,zero,r2
 4003f9c:	8800a426 	beq	r17,zero,4004230 <_dtoa_r+0x1498>
 4003fa0:	888003cc 	andi	r2,r17,15
 4003fa4:	100490fa 	slli	r2,r2,3
 4003fa8:	00c10074 	movhi	r3,1025
 4003fac:	18ff4504 	addi	r3,r3,-748
 4003fb0:	1885883a 	add	r2,r3,r2
 4003fb4:	11800017 	ldw	r6,0(r2)
 4003fb8:	11c00117 	ldw	r7,4(r2)
 4003fbc:	9009883a 	mov	r4,r18
 4003fc0:	980b883a 	mov	r5,r19
 4003fc4:	8823d13a 	srai	r17,r17,4
 4003fc8:	400bda80 	call	400bda8 <__muldf3>
 4003fcc:	d8800f15 	stw	r2,60(sp)
 4003fd0:	d8c01015 	stw	r3,64(sp)
 4003fd4:	8800e826 	beq	r17,zero,4004378 <_dtoa_r+0x15e0>
 4003fd8:	05010074 	movhi	r20,1025
 4003fdc:	a53f3b04 	addi	r20,r20,-788
 4003fe0:	04000084 	movi	r16,2
 4003fe4:	8980004c 	andi	r6,r17,1
 4003fe8:	1009883a 	mov	r4,r2
 4003fec:	8823d07a 	srai	r17,r17,1
 4003ff0:	180b883a 	mov	r5,r3
 4003ff4:	30000426 	beq	r6,zero,4004008 <_dtoa_r+0x1270>
 4003ff8:	a1800017 	ldw	r6,0(r20)
 4003ffc:	a1c00117 	ldw	r7,4(r20)
 4004000:	84000044 	addi	r16,r16,1
 4004004:	400bda80 	call	400bda8 <__muldf3>
 4004008:	a5000204 	addi	r20,r20,8
 400400c:	883ff51e 	bne	r17,zero,4003fe4 <__alt_data_end+0xff003fe4>
 4004010:	d8800f15 	stw	r2,60(sp)
 4004014:	d8c01015 	stw	r3,64(sp)
 4004018:	003c7606 	br	40031f4 <__alt_data_end+0xff0031f4>
 400401c:	00c00c04 	movi	r3,48
 4004020:	10c00005 	stb	r3,0(r2)
 4004024:	d8c00517 	ldw	r3,20(sp)
 4004028:	bd3fffc3 	ldbu	r20,-1(r23)
 400402c:	18c00044 	addi	r3,r3,1
 4004030:	d8c00515 	stw	r3,20(sp)
 4004034:	003db906 	br	400371c <__alt_data_end+0xff00371c>
 4004038:	89400117 	ldw	r5,4(r17)
 400403c:	e009883a 	mov	r4,fp
 4004040:	40064340 	call	4006434 <_Balloc>
 4004044:	89800417 	ldw	r6,16(r17)
 4004048:	89400304 	addi	r5,r17,12
 400404c:	11000304 	addi	r4,r2,12
 4004050:	31800084 	addi	r6,r6,2
 4004054:	318d883a 	add	r6,r6,r6
 4004058:	318d883a 	add	r6,r6,r6
 400405c:	1027883a 	mov	r19,r2
 4004060:	40060680 	call	4006068 <memcpy>
 4004064:	01800044 	movi	r6,1
 4004068:	980b883a 	mov	r5,r19
 400406c:	e009883a 	mov	r4,fp
 4004070:	4006bb40 	call	4006bb4 <__lshift>
 4004074:	1029883a 	mov	r20,r2
 4004078:	003ecc06 	br	4003bac <__alt_data_end+0xff003bac>
 400407c:	00800e44 	movi	r2,57
 4004080:	90809026 	beq	r18,r2,40042c4 <_dtoa_r+0x152c>
 4004084:	92000044 	addi	r8,r18,1
 4004088:	003f1f06 	br	4003d08 <__alt_data_end+0xff003d08>
 400408c:	9011883a 	mov	r8,r18
 4004090:	8825883a 	mov	r18,r17
 4004094:	a023883a 	mov	r17,r20
 4004098:	003e2906 	br	4003940 <__alt_data_end+0xff003940>
 400409c:	002b883a 	mov	r21,zero
 40040a0:	0023883a 	mov	r17,zero
 40040a4:	003f5406 	br	4003df8 <__alt_data_end+0xff003df8>
 40040a8:	61bfffc4 	addi	r6,r12,-1
 40040ac:	300490fa 	slli	r2,r6,3
 40040b0:	00c10074 	movhi	r3,1025
 40040b4:	18ff4504 	addi	r3,r3,-748
 40040b8:	1885883a 	add	r2,r3,r2
 40040bc:	11000017 	ldw	r4,0(r2)
 40040c0:	11400117 	ldw	r5,4(r2)
 40040c4:	d8800717 	ldw	r2,28(sp)
 40040c8:	880f883a 	mov	r7,r17
 40040cc:	d9801215 	stw	r6,72(sp)
 40040d0:	800d883a 	mov	r6,r16
 40040d4:	db001615 	stw	r12,88(sp)
 40040d8:	15c00044 	addi	r23,r2,1
 40040dc:	400bda80 	call	400bda8 <__muldf3>
 40040e0:	d9401017 	ldw	r5,64(sp)
 40040e4:	d9000f17 	ldw	r4,60(sp)
 40040e8:	d8c01515 	stw	r3,84(sp)
 40040ec:	d8801415 	stw	r2,80(sp)
 40040f0:	400cdbc0 	call	400cdbc <__fixdfsi>
 40040f4:	1009883a 	mov	r4,r2
 40040f8:	1021883a 	mov	r16,r2
 40040fc:	400ce3c0 	call	400ce3c <__floatsidf>
 4004100:	d9000f17 	ldw	r4,60(sp)
 4004104:	d9401017 	ldw	r5,64(sp)
 4004108:	100d883a 	mov	r6,r2
 400410c:	180f883a 	mov	r7,r3
 4004110:	400c4c00 	call	400c4c0 <__subdf3>
 4004114:	1829883a 	mov	r20,r3
 4004118:	d8c00717 	ldw	r3,28(sp)
 400411c:	84000c04 	addi	r16,r16,48
 4004120:	1023883a 	mov	r17,r2
 4004124:	1c000005 	stb	r16,0(r3)
 4004128:	db001617 	ldw	r12,88(sp)
 400412c:	00800044 	movi	r2,1
 4004130:	60802226 	beq	r12,r2,40041bc <_dtoa_r+0x1424>
 4004134:	d9c00717 	ldw	r7,28(sp)
 4004138:	8805883a 	mov	r2,r17
 400413c:	b82b883a 	mov	r21,r23
 4004140:	3b19883a 	add	r12,r7,r12
 4004144:	6023883a 	mov	r17,r12
 4004148:	a007883a 	mov	r3,r20
 400414c:	dc800f15 	stw	r18,60(sp)
 4004150:	000d883a 	mov	r6,zero
 4004154:	01d00934 	movhi	r7,16420
 4004158:	1009883a 	mov	r4,r2
 400415c:	180b883a 	mov	r5,r3
 4004160:	400bda80 	call	400bda8 <__muldf3>
 4004164:	180b883a 	mov	r5,r3
 4004168:	1009883a 	mov	r4,r2
 400416c:	1829883a 	mov	r20,r3
 4004170:	1025883a 	mov	r18,r2
 4004174:	400cdbc0 	call	400cdbc <__fixdfsi>
 4004178:	1009883a 	mov	r4,r2
 400417c:	1021883a 	mov	r16,r2
 4004180:	400ce3c0 	call	400ce3c <__floatsidf>
 4004184:	100d883a 	mov	r6,r2
 4004188:	180f883a 	mov	r7,r3
 400418c:	9009883a 	mov	r4,r18
 4004190:	a00b883a 	mov	r5,r20
 4004194:	84000c04 	addi	r16,r16,48
 4004198:	400c4c00 	call	400c4c0 <__subdf3>
 400419c:	ad400044 	addi	r21,r21,1
 40041a0:	ac3fffc5 	stb	r16,-1(r21)
 40041a4:	ac7fea1e 	bne	r21,r17,4004150 <__alt_data_end+0xff004150>
 40041a8:	1023883a 	mov	r17,r2
 40041ac:	d8801217 	ldw	r2,72(sp)
 40041b0:	dc800f17 	ldw	r18,60(sp)
 40041b4:	1829883a 	mov	r20,r3
 40041b8:	b8af883a 	add	r23,r23,r2
 40041bc:	d9001417 	ldw	r4,80(sp)
 40041c0:	d9401517 	ldw	r5,84(sp)
 40041c4:	000d883a 	mov	r6,zero
 40041c8:	01cff834 	movhi	r7,16352
 40041cc:	400a9bc0 	call	400a9bc <__adddf3>
 40041d0:	880d883a 	mov	r6,r17
 40041d4:	a00f883a 	mov	r7,r20
 40041d8:	1009883a 	mov	r4,r2
 40041dc:	180b883a 	mov	r5,r3
 40041e0:	400bcb40 	call	400bcb4 <__ledf2>
 40041e4:	10003e0e 	bge	r2,zero,40042e0 <_dtoa_r+0x1548>
 40041e8:	d9001317 	ldw	r4,76(sp)
 40041ec:	bd3fffc3 	ldbu	r20,-1(r23)
 40041f0:	d9000515 	stw	r4,20(sp)
 40041f4:	003d3b06 	br	40036e4 <__alt_data_end+0xff0036e4>
 40041f8:	0027883a 	mov	r19,zero
 40041fc:	003f1b06 	br	4003e6c <__alt_data_end+0xff003e6c>
 4004200:	d8800817 	ldw	r2,32(sp)
 4004204:	11e9c83a 	sub	r20,r2,r7
 4004208:	0005883a 	mov	r2,zero
 400420c:	003d5406 	br	4003760 <__alt_data_end+0xff003760>
 4004210:	00800044 	movi	r2,1
 4004214:	003dc706 	br	4003934 <__alt_data_end+0xff003934>
 4004218:	d8c00217 	ldw	r3,8(sp)
 400421c:	00800d84 	movi	r2,54
 4004220:	dd400a17 	ldw	r21,40(sp)
 4004224:	10c5c83a 	sub	r2,r2,r3
 4004228:	dd000817 	ldw	r20,32(sp)
 400422c:	003d4c06 	br	4003760 <__alt_data_end+0xff003760>
 4004230:	dc800f15 	stw	r18,60(sp)
 4004234:	dcc01015 	stw	r19,64(sp)
 4004238:	04000084 	movi	r16,2
 400423c:	003bed06 	br	40031f4 <__alt_data_end+0xff0031f4>
 4004240:	d9000617 	ldw	r4,24(sp)
 4004244:	203f0d26 	beq	r4,zero,4003e7c <__alt_data_end+0xff003e7c>
 4004248:	d9800c17 	ldw	r6,48(sp)
 400424c:	01bcab0e 	bge	zero,r6,40034fc <__alt_data_end+0xff0034fc>
 4004250:	d9401017 	ldw	r5,64(sp)
 4004254:	d9000f17 	ldw	r4,60(sp)
 4004258:	000d883a 	mov	r6,zero
 400425c:	01d00934 	movhi	r7,16420
 4004260:	400bda80 	call	400bda8 <__muldf3>
 4004264:	81000044 	addi	r4,r16,1
 4004268:	d8800f15 	stw	r2,60(sp)
 400426c:	d8c01015 	stw	r3,64(sp)
 4004270:	400ce3c0 	call	400ce3c <__floatsidf>
 4004274:	d9800f17 	ldw	r6,60(sp)
 4004278:	d9c01017 	ldw	r7,64(sp)
 400427c:	1009883a 	mov	r4,r2
 4004280:	180b883a 	mov	r5,r3
 4004284:	400bda80 	call	400bda8 <__muldf3>
 4004288:	01d00734 	movhi	r7,16412
 400428c:	000d883a 	mov	r6,zero
 4004290:	1009883a 	mov	r4,r2
 4004294:	180b883a 	mov	r5,r3
 4004298:	400a9bc0 	call	400a9bc <__adddf3>
 400429c:	d9c00517 	ldw	r7,20(sp)
 40042a0:	047f3034 	movhi	r17,64704
 40042a4:	1021883a 	mov	r16,r2
 40042a8:	39ffffc4 	addi	r7,r7,-1
 40042ac:	d9c01315 	stw	r7,76(sp)
 40042b0:	1c63883a 	add	r17,r3,r17
 40042b4:	db000c17 	ldw	r12,48(sp)
 40042b8:	003bea06 	br	4003264 <__alt_data_end+0xff003264>
 40042bc:	dc000915 	stw	r16,36(sp)
 40042c0:	003e0e06 	br	4003afc <__alt_data_end+0xff003afc>
 40042c4:	01000e44 	movi	r4,57
 40042c8:	8825883a 	mov	r18,r17
 40042cc:	9dc00044 	addi	r23,r19,1
 40042d0:	99000005 	stb	r4,0(r19)
 40042d4:	a023883a 	mov	r17,r20
 40042d8:	dc000915 	stw	r16,36(sp)
 40042dc:	003da406 	br	4003970 <__alt_data_end+0xff003970>
 40042e0:	d9801417 	ldw	r6,80(sp)
 40042e4:	d9c01517 	ldw	r7,84(sp)
 40042e8:	0009883a 	mov	r4,zero
 40042ec:	014ff834 	movhi	r5,16352
 40042f0:	400c4c00 	call	400c4c0 <__subdf3>
 40042f4:	880d883a 	mov	r6,r17
 40042f8:	a00f883a 	mov	r7,r20
 40042fc:	1009883a 	mov	r4,r2
 4004300:	180b883a 	mov	r5,r3
 4004304:	400bbd80 	call	400bbd8 <__gedf2>
 4004308:	00bc7c0e 	bge	zero,r2,40034fc <__alt_data_end+0xff0034fc>
 400430c:	01000c04 	movi	r4,48
 4004310:	00000106 	br	4004318 <_dtoa_r+0x1580>
 4004314:	102f883a 	mov	r23,r2
 4004318:	b8bfffc4 	addi	r2,r23,-1
 400431c:	10c00007 	ldb	r3,0(r2)
 4004320:	193ffc26 	beq	r3,r4,4004314 <__alt_data_end+0xff004314>
 4004324:	d9801317 	ldw	r6,76(sp)
 4004328:	d9800515 	stw	r6,20(sp)
 400432c:	003c4406 	br	4003440 <__alt_data_end+0xff003440>
 4004330:	d9801317 	ldw	r6,76(sp)
 4004334:	d9800515 	stw	r6,20(sp)
 4004338:	003cea06 	br	40036e4 <__alt_data_end+0xff0036e4>
 400433c:	dd800f17 	ldw	r22,60(sp)
 4004340:	dcc01017 	ldw	r19,64(sp)
 4004344:	dc801217 	ldw	r18,72(sp)
 4004348:	003c6c06 	br	40034fc <__alt_data_end+0xff0034fc>
 400434c:	903e031e 	bne	r18,zero,4003b5c <__alt_data_end+0xff003b5c>
 4004350:	003ebb06 	br	4003e40 <__alt_data_end+0xff003e40>
 4004354:	103e6c1e 	bne	r2,zero,4003d08 <__alt_data_end+0xff003d08>
 4004358:	4080004c 	andi	r2,r8,1
 400435c:	103e6a26 	beq	r2,zero,4003d08 <__alt_data_end+0xff003d08>
 4004360:	003e6606 	br	4003cfc <__alt_data_end+0xff003cfc>
 4004364:	d8c00317 	ldw	r3,12(sp)
 4004368:	00800084 	movi	r2,2
 400436c:	10c02916 	blt	r2,r3,4004414 <_dtoa_r+0x167c>
 4004370:	d9000c17 	ldw	r4,48(sp)
 4004374:	003e8806 	br	4003d98 <__alt_data_end+0xff003d98>
 4004378:	04000084 	movi	r16,2
 400437c:	003b9d06 	br	40031f4 <__alt_data_end+0xff0031f4>
 4004380:	d9001317 	ldw	r4,76(sp)
 4004384:	d9000515 	stw	r4,20(sp)
 4004388:	003cd606 	br	40036e4 <__alt_data_end+0xff0036e4>
 400438c:	d8801317 	ldw	r2,76(sp)
 4004390:	d8800515 	stw	r2,20(sp)
 4004394:	003c2a06 	br	4003440 <__alt_data_end+0xff003440>
 4004398:	d9800317 	ldw	r6,12(sp)
 400439c:	00800084 	movi	r2,2
 40043a0:	11801516 	blt	r2,r6,40043f8 <_dtoa_r+0x1660>
 40043a4:	d9c00c17 	ldw	r7,48(sp)
 40043a8:	d9c00615 	stw	r7,24(sp)
 40043ac:	003df706 	br	4003b8c <__alt_data_end+0xff003b8c>
 40043b0:	193d3926 	beq	r3,r4,4003898 <__alt_data_end+0xff003898>
 40043b4:	00c00f04 	movi	r3,60
 40043b8:	1885c83a 	sub	r2,r3,r2
 40043bc:	003ddf06 	br	4003b3c <__alt_data_end+0xff003b3c>
 40043c0:	e009883a 	mov	r4,fp
 40043c4:	e0001115 	stw	zero,68(fp)
 40043c8:	000b883a 	mov	r5,zero
 40043cc:	40064340 	call	4006434 <_Balloc>
 40043d0:	d8800715 	stw	r2,28(sp)
 40043d4:	d8c00717 	ldw	r3,28(sp)
 40043d8:	00bfffc4 	movi	r2,-1
 40043dc:	01000044 	movi	r4,1
 40043e0:	d8800c15 	stw	r2,48(sp)
 40043e4:	e0c01015 	stw	r3,64(fp)
 40043e8:	d9000b15 	stw	r4,44(sp)
 40043ec:	d8800615 	stw	r2,24(sp)
 40043f0:	d8002215 	stw	zero,136(sp)
 40043f4:	003c4106 	br	40034fc <__alt_data_end+0xff0034fc>
 40043f8:	d8c00c17 	ldw	r3,48(sp)
 40043fc:	d8c00615 	stw	r3,24(sp)
 4004400:	003e7006 	br	4003dc4 <__alt_data_end+0xff003dc4>
 4004404:	04400044 	movi	r17,1
 4004408:	003b2006 	br	400308c <__alt_data_end+0xff00308c>
 400440c:	000b883a 	mov	r5,zero
 4004410:	003b3d06 	br	4003108 <__alt_data_end+0xff003108>
 4004414:	d8800c17 	ldw	r2,48(sp)
 4004418:	d8800615 	stw	r2,24(sp)
 400441c:	003e6906 	br	4003dc4 <__alt_data_end+0xff003dc4>

04004420 <__sflush_r>:
 4004420:	2880030b 	ldhu	r2,12(r5)
 4004424:	defffb04 	addi	sp,sp,-20
 4004428:	dcc00315 	stw	r19,12(sp)
 400442c:	dc400115 	stw	r17,4(sp)
 4004430:	dfc00415 	stw	ra,16(sp)
 4004434:	dc800215 	stw	r18,8(sp)
 4004438:	dc000015 	stw	r16,0(sp)
 400443c:	10c0020c 	andi	r3,r2,8
 4004440:	2823883a 	mov	r17,r5
 4004444:	2027883a 	mov	r19,r4
 4004448:	1800311e 	bne	r3,zero,4004510 <__sflush_r+0xf0>
 400444c:	28c00117 	ldw	r3,4(r5)
 4004450:	10820014 	ori	r2,r2,2048
 4004454:	2880030d 	sth	r2,12(r5)
 4004458:	00c04b0e 	bge	zero,r3,4004588 <__sflush_r+0x168>
 400445c:	8a000a17 	ldw	r8,40(r17)
 4004460:	40002326 	beq	r8,zero,40044f0 <__sflush_r+0xd0>
 4004464:	9c000017 	ldw	r16,0(r19)
 4004468:	10c4000c 	andi	r3,r2,4096
 400446c:	98000015 	stw	zero,0(r19)
 4004470:	18004826 	beq	r3,zero,4004594 <__sflush_r+0x174>
 4004474:	89801417 	ldw	r6,80(r17)
 4004478:	10c0010c 	andi	r3,r2,4
 400447c:	18000626 	beq	r3,zero,4004498 <__sflush_r+0x78>
 4004480:	88c00117 	ldw	r3,4(r17)
 4004484:	88800c17 	ldw	r2,48(r17)
 4004488:	30cdc83a 	sub	r6,r6,r3
 400448c:	10000226 	beq	r2,zero,4004498 <__sflush_r+0x78>
 4004490:	88800f17 	ldw	r2,60(r17)
 4004494:	308dc83a 	sub	r6,r6,r2
 4004498:	89400717 	ldw	r5,28(r17)
 400449c:	000f883a 	mov	r7,zero
 40044a0:	9809883a 	mov	r4,r19
 40044a4:	403ee83a 	callr	r8
 40044a8:	00ffffc4 	movi	r3,-1
 40044ac:	10c04426 	beq	r2,r3,40045c0 <__sflush_r+0x1a0>
 40044b0:	88c0030b 	ldhu	r3,12(r17)
 40044b4:	89000417 	ldw	r4,16(r17)
 40044b8:	88000115 	stw	zero,4(r17)
 40044bc:	197dffcc 	andi	r5,r3,63487
 40044c0:	8940030d 	sth	r5,12(r17)
 40044c4:	89000015 	stw	r4,0(r17)
 40044c8:	18c4000c 	andi	r3,r3,4096
 40044cc:	18002c1e 	bne	r3,zero,4004580 <__sflush_r+0x160>
 40044d0:	89400c17 	ldw	r5,48(r17)
 40044d4:	9c000015 	stw	r16,0(r19)
 40044d8:	28000526 	beq	r5,zero,40044f0 <__sflush_r+0xd0>
 40044dc:	88801004 	addi	r2,r17,64
 40044e0:	28800226 	beq	r5,r2,40044ec <__sflush_r+0xcc>
 40044e4:	9809883a 	mov	r4,r19
 40044e8:	4004b8c0 	call	4004b8c <_free_r>
 40044ec:	88000c15 	stw	zero,48(r17)
 40044f0:	0005883a 	mov	r2,zero
 40044f4:	dfc00417 	ldw	ra,16(sp)
 40044f8:	dcc00317 	ldw	r19,12(sp)
 40044fc:	dc800217 	ldw	r18,8(sp)
 4004500:	dc400117 	ldw	r17,4(sp)
 4004504:	dc000017 	ldw	r16,0(sp)
 4004508:	dec00504 	addi	sp,sp,20
 400450c:	f800283a 	ret
 4004510:	2c800417 	ldw	r18,16(r5)
 4004514:	903ff626 	beq	r18,zero,40044f0 <__alt_data_end+0xff0044f0>
 4004518:	2c000017 	ldw	r16,0(r5)
 400451c:	108000cc 	andi	r2,r2,3
 4004520:	2c800015 	stw	r18,0(r5)
 4004524:	84a1c83a 	sub	r16,r16,r18
 4004528:	1000131e 	bne	r2,zero,4004578 <__sflush_r+0x158>
 400452c:	28800517 	ldw	r2,20(r5)
 4004530:	88800215 	stw	r2,8(r17)
 4004534:	04000316 	blt	zero,r16,4004544 <__sflush_r+0x124>
 4004538:	003fed06 	br	40044f0 <__alt_data_end+0xff0044f0>
 400453c:	90a5883a 	add	r18,r18,r2
 4004540:	043feb0e 	bge	zero,r16,40044f0 <__alt_data_end+0xff0044f0>
 4004544:	88800917 	ldw	r2,36(r17)
 4004548:	89400717 	ldw	r5,28(r17)
 400454c:	800f883a 	mov	r7,r16
 4004550:	900d883a 	mov	r6,r18
 4004554:	9809883a 	mov	r4,r19
 4004558:	103ee83a 	callr	r2
 400455c:	80a1c83a 	sub	r16,r16,r2
 4004560:	00bff616 	blt	zero,r2,400453c <__alt_data_end+0xff00453c>
 4004564:	88c0030b 	ldhu	r3,12(r17)
 4004568:	00bfffc4 	movi	r2,-1
 400456c:	18c01014 	ori	r3,r3,64
 4004570:	88c0030d 	sth	r3,12(r17)
 4004574:	003fdf06 	br	40044f4 <__alt_data_end+0xff0044f4>
 4004578:	0005883a 	mov	r2,zero
 400457c:	003fec06 	br	4004530 <__alt_data_end+0xff004530>
 4004580:	88801415 	stw	r2,80(r17)
 4004584:	003fd206 	br	40044d0 <__alt_data_end+0xff0044d0>
 4004588:	28c00f17 	ldw	r3,60(r5)
 400458c:	00ffb316 	blt	zero,r3,400445c <__alt_data_end+0xff00445c>
 4004590:	003fd706 	br	40044f0 <__alt_data_end+0xff0044f0>
 4004594:	89400717 	ldw	r5,28(r17)
 4004598:	000d883a 	mov	r6,zero
 400459c:	01c00044 	movi	r7,1
 40045a0:	9809883a 	mov	r4,r19
 40045a4:	403ee83a 	callr	r8
 40045a8:	100d883a 	mov	r6,r2
 40045ac:	00bfffc4 	movi	r2,-1
 40045b0:	30801426 	beq	r6,r2,4004604 <__sflush_r+0x1e4>
 40045b4:	8880030b 	ldhu	r2,12(r17)
 40045b8:	8a000a17 	ldw	r8,40(r17)
 40045bc:	003fae06 	br	4004478 <__alt_data_end+0xff004478>
 40045c0:	98c00017 	ldw	r3,0(r19)
 40045c4:	183fba26 	beq	r3,zero,40044b0 <__alt_data_end+0xff0044b0>
 40045c8:	01000744 	movi	r4,29
 40045cc:	19000626 	beq	r3,r4,40045e8 <__sflush_r+0x1c8>
 40045d0:	01000584 	movi	r4,22
 40045d4:	19000426 	beq	r3,r4,40045e8 <__sflush_r+0x1c8>
 40045d8:	88c0030b 	ldhu	r3,12(r17)
 40045dc:	18c01014 	ori	r3,r3,64
 40045e0:	88c0030d 	sth	r3,12(r17)
 40045e4:	003fc306 	br	40044f4 <__alt_data_end+0xff0044f4>
 40045e8:	8880030b 	ldhu	r2,12(r17)
 40045ec:	88c00417 	ldw	r3,16(r17)
 40045f0:	88000115 	stw	zero,4(r17)
 40045f4:	10bdffcc 	andi	r2,r2,63487
 40045f8:	8880030d 	sth	r2,12(r17)
 40045fc:	88c00015 	stw	r3,0(r17)
 4004600:	003fb306 	br	40044d0 <__alt_data_end+0xff0044d0>
 4004604:	98800017 	ldw	r2,0(r19)
 4004608:	103fea26 	beq	r2,zero,40045b4 <__alt_data_end+0xff0045b4>
 400460c:	00c00744 	movi	r3,29
 4004610:	10c00226 	beq	r2,r3,400461c <__sflush_r+0x1fc>
 4004614:	00c00584 	movi	r3,22
 4004618:	10c0031e 	bne	r2,r3,4004628 <__sflush_r+0x208>
 400461c:	9c000015 	stw	r16,0(r19)
 4004620:	0005883a 	mov	r2,zero
 4004624:	003fb306 	br	40044f4 <__alt_data_end+0xff0044f4>
 4004628:	88c0030b 	ldhu	r3,12(r17)
 400462c:	3005883a 	mov	r2,r6
 4004630:	18c01014 	ori	r3,r3,64
 4004634:	88c0030d 	sth	r3,12(r17)
 4004638:	003fae06 	br	40044f4 <__alt_data_end+0xff0044f4>

0400463c <_fflush_r>:
 400463c:	defffd04 	addi	sp,sp,-12
 4004640:	dc000115 	stw	r16,4(sp)
 4004644:	dfc00215 	stw	ra,8(sp)
 4004648:	2021883a 	mov	r16,r4
 400464c:	20000226 	beq	r4,zero,4004658 <_fflush_r+0x1c>
 4004650:	20800e17 	ldw	r2,56(r4)
 4004654:	10000c26 	beq	r2,zero,4004688 <_fflush_r+0x4c>
 4004658:	2880030f 	ldh	r2,12(r5)
 400465c:	1000051e 	bne	r2,zero,4004674 <_fflush_r+0x38>
 4004660:	0005883a 	mov	r2,zero
 4004664:	dfc00217 	ldw	ra,8(sp)
 4004668:	dc000117 	ldw	r16,4(sp)
 400466c:	dec00304 	addi	sp,sp,12
 4004670:	f800283a 	ret
 4004674:	8009883a 	mov	r4,r16
 4004678:	dfc00217 	ldw	ra,8(sp)
 400467c:	dc000117 	ldw	r16,4(sp)
 4004680:	dec00304 	addi	sp,sp,12
 4004684:	40044201 	jmpi	4004420 <__sflush_r>
 4004688:	d9400015 	stw	r5,0(sp)
 400468c:	4004a180 	call	4004a18 <__sinit>
 4004690:	d9400017 	ldw	r5,0(sp)
 4004694:	003ff006 	br	4004658 <__alt_data_end+0xff004658>

04004698 <fflush>:
 4004698:	20000526 	beq	r4,zero,40046b0 <fflush+0x18>
 400469c:	00810074 	movhi	r2,1025
 40046a0:	10868004 	addi	r2,r2,6656
 40046a4:	200b883a 	mov	r5,r4
 40046a8:	11000017 	ldw	r4,0(r2)
 40046ac:	400463c1 	jmpi	400463c <_fflush_r>
 40046b0:	00810074 	movhi	r2,1025
 40046b4:	10867f04 	addi	r2,r2,6652
 40046b8:	11000017 	ldw	r4,0(r2)
 40046bc:	01410034 	movhi	r5,1024
 40046c0:	29518f04 	addi	r5,r5,17980
 40046c4:	400541c1 	jmpi	400541c <_fwalk_reent>

040046c8 <__fp_unlock>:
 40046c8:	0005883a 	mov	r2,zero
 40046cc:	f800283a 	ret

040046d0 <_cleanup_r>:
 40046d0:	01410074 	movhi	r5,1025
 40046d4:	2965bd04 	addi	r5,r5,-26892
 40046d8:	400541c1 	jmpi	400541c <_fwalk_reent>

040046dc <__sinit.part.1>:
 40046dc:	defff704 	addi	sp,sp,-36
 40046e0:	00c10034 	movhi	r3,1024
 40046e4:	dfc00815 	stw	ra,32(sp)
 40046e8:	ddc00715 	stw	r23,28(sp)
 40046ec:	dd800615 	stw	r22,24(sp)
 40046f0:	dd400515 	stw	r21,20(sp)
 40046f4:	dd000415 	stw	r20,16(sp)
 40046f8:	dcc00315 	stw	r19,12(sp)
 40046fc:	dc800215 	stw	r18,8(sp)
 4004700:	dc400115 	stw	r17,4(sp)
 4004704:	dc000015 	stw	r16,0(sp)
 4004708:	18d1b404 	addi	r3,r3,18128
 400470c:	24000117 	ldw	r16,4(r4)
 4004710:	20c00f15 	stw	r3,60(r4)
 4004714:	2080bb04 	addi	r2,r4,748
 4004718:	00c000c4 	movi	r3,3
 400471c:	20c0b915 	stw	r3,740(r4)
 4004720:	2080ba15 	stw	r2,744(r4)
 4004724:	2000b815 	stw	zero,736(r4)
 4004728:	05c00204 	movi	r23,8
 400472c:	00800104 	movi	r2,4
 4004730:	2025883a 	mov	r18,r4
 4004734:	b80d883a 	mov	r6,r23
 4004738:	81001704 	addi	r4,r16,92
 400473c:	000b883a 	mov	r5,zero
 4004740:	80000015 	stw	zero,0(r16)
 4004744:	80000115 	stw	zero,4(r16)
 4004748:	80000215 	stw	zero,8(r16)
 400474c:	8080030d 	sth	r2,12(r16)
 4004750:	80001915 	stw	zero,100(r16)
 4004754:	8000038d 	sth	zero,14(r16)
 4004758:	80000415 	stw	zero,16(r16)
 400475c:	80000515 	stw	zero,20(r16)
 4004760:	80000615 	stw	zero,24(r16)
 4004764:	400630c0 	call	400630c <memset>
 4004768:	05810034 	movhi	r22,1024
 400476c:	94400217 	ldw	r17,8(r18)
 4004770:	05410034 	movhi	r21,1024
 4004774:	05010034 	movhi	r20,1024
 4004778:	04c10034 	movhi	r19,1024
 400477c:	b59ef104 	addi	r22,r22,31684
 4004780:	ad5f0804 	addi	r21,r21,31776
 4004784:	a51f2704 	addi	r20,r20,31900
 4004788:	9cdf3e04 	addi	r19,r19,31992
 400478c:	85800815 	stw	r22,32(r16)
 4004790:	85400915 	stw	r21,36(r16)
 4004794:	85000a15 	stw	r20,40(r16)
 4004798:	84c00b15 	stw	r19,44(r16)
 400479c:	84000715 	stw	r16,28(r16)
 40047a0:	00800284 	movi	r2,10
 40047a4:	8880030d 	sth	r2,12(r17)
 40047a8:	00800044 	movi	r2,1
 40047ac:	b80d883a 	mov	r6,r23
 40047b0:	89001704 	addi	r4,r17,92
 40047b4:	000b883a 	mov	r5,zero
 40047b8:	88000015 	stw	zero,0(r17)
 40047bc:	88000115 	stw	zero,4(r17)
 40047c0:	88000215 	stw	zero,8(r17)
 40047c4:	88001915 	stw	zero,100(r17)
 40047c8:	8880038d 	sth	r2,14(r17)
 40047cc:	88000415 	stw	zero,16(r17)
 40047d0:	88000515 	stw	zero,20(r17)
 40047d4:	88000615 	stw	zero,24(r17)
 40047d8:	400630c0 	call	400630c <memset>
 40047dc:	94000317 	ldw	r16,12(r18)
 40047e0:	00800484 	movi	r2,18
 40047e4:	8c400715 	stw	r17,28(r17)
 40047e8:	8d800815 	stw	r22,32(r17)
 40047ec:	8d400915 	stw	r21,36(r17)
 40047f0:	8d000a15 	stw	r20,40(r17)
 40047f4:	8cc00b15 	stw	r19,44(r17)
 40047f8:	8080030d 	sth	r2,12(r16)
 40047fc:	00800084 	movi	r2,2
 4004800:	80000015 	stw	zero,0(r16)
 4004804:	80000115 	stw	zero,4(r16)
 4004808:	80000215 	stw	zero,8(r16)
 400480c:	80001915 	stw	zero,100(r16)
 4004810:	8080038d 	sth	r2,14(r16)
 4004814:	80000415 	stw	zero,16(r16)
 4004818:	80000515 	stw	zero,20(r16)
 400481c:	80000615 	stw	zero,24(r16)
 4004820:	b80d883a 	mov	r6,r23
 4004824:	000b883a 	mov	r5,zero
 4004828:	81001704 	addi	r4,r16,92
 400482c:	400630c0 	call	400630c <memset>
 4004830:	00800044 	movi	r2,1
 4004834:	84000715 	stw	r16,28(r16)
 4004838:	85800815 	stw	r22,32(r16)
 400483c:	85400915 	stw	r21,36(r16)
 4004840:	85000a15 	stw	r20,40(r16)
 4004844:	84c00b15 	stw	r19,44(r16)
 4004848:	90800e15 	stw	r2,56(r18)
 400484c:	dfc00817 	ldw	ra,32(sp)
 4004850:	ddc00717 	ldw	r23,28(sp)
 4004854:	dd800617 	ldw	r22,24(sp)
 4004858:	dd400517 	ldw	r21,20(sp)
 400485c:	dd000417 	ldw	r20,16(sp)
 4004860:	dcc00317 	ldw	r19,12(sp)
 4004864:	dc800217 	ldw	r18,8(sp)
 4004868:	dc400117 	ldw	r17,4(sp)
 400486c:	dc000017 	ldw	r16,0(sp)
 4004870:	dec00904 	addi	sp,sp,36
 4004874:	f800283a 	ret

04004878 <__fp_lock>:
 4004878:	0005883a 	mov	r2,zero
 400487c:	f800283a 	ret

04004880 <__sfmoreglue>:
 4004880:	defffc04 	addi	sp,sp,-16
 4004884:	dc400115 	stw	r17,4(sp)
 4004888:	2c7fffc4 	addi	r17,r5,-1
 400488c:	8c401a24 	muli	r17,r17,104
 4004890:	dc800215 	stw	r18,8(sp)
 4004894:	2825883a 	mov	r18,r5
 4004898:	89401d04 	addi	r5,r17,116
 400489c:	dc000015 	stw	r16,0(sp)
 40048a0:	dfc00315 	stw	ra,12(sp)
 40048a4:	40057780 	call	4005778 <_malloc_r>
 40048a8:	1021883a 	mov	r16,r2
 40048ac:	10000726 	beq	r2,zero,40048cc <__sfmoreglue+0x4c>
 40048b0:	11000304 	addi	r4,r2,12
 40048b4:	10000015 	stw	zero,0(r2)
 40048b8:	14800115 	stw	r18,4(r2)
 40048bc:	11000215 	stw	r4,8(r2)
 40048c0:	89801a04 	addi	r6,r17,104
 40048c4:	000b883a 	mov	r5,zero
 40048c8:	400630c0 	call	400630c <memset>
 40048cc:	8005883a 	mov	r2,r16
 40048d0:	dfc00317 	ldw	ra,12(sp)
 40048d4:	dc800217 	ldw	r18,8(sp)
 40048d8:	dc400117 	ldw	r17,4(sp)
 40048dc:	dc000017 	ldw	r16,0(sp)
 40048e0:	dec00404 	addi	sp,sp,16
 40048e4:	f800283a 	ret

040048e8 <__sfp>:
 40048e8:	defffb04 	addi	sp,sp,-20
 40048ec:	dc000015 	stw	r16,0(sp)
 40048f0:	04010074 	movhi	r16,1025
 40048f4:	84067f04 	addi	r16,r16,6652
 40048f8:	dcc00315 	stw	r19,12(sp)
 40048fc:	2027883a 	mov	r19,r4
 4004900:	81000017 	ldw	r4,0(r16)
 4004904:	dfc00415 	stw	ra,16(sp)
 4004908:	dc800215 	stw	r18,8(sp)
 400490c:	20800e17 	ldw	r2,56(r4)
 4004910:	dc400115 	stw	r17,4(sp)
 4004914:	1000021e 	bne	r2,zero,4004920 <__sfp+0x38>
 4004918:	40046dc0 	call	40046dc <__sinit.part.1>
 400491c:	81000017 	ldw	r4,0(r16)
 4004920:	2480b804 	addi	r18,r4,736
 4004924:	047fffc4 	movi	r17,-1
 4004928:	91000117 	ldw	r4,4(r18)
 400492c:	94000217 	ldw	r16,8(r18)
 4004930:	213fffc4 	addi	r4,r4,-1
 4004934:	20000a16 	blt	r4,zero,4004960 <__sfp+0x78>
 4004938:	8080030f 	ldh	r2,12(r16)
 400493c:	10000c26 	beq	r2,zero,4004970 <__sfp+0x88>
 4004940:	80c01d04 	addi	r3,r16,116
 4004944:	00000206 	br	4004950 <__sfp+0x68>
 4004948:	18bfe60f 	ldh	r2,-104(r3)
 400494c:	10000826 	beq	r2,zero,4004970 <__sfp+0x88>
 4004950:	213fffc4 	addi	r4,r4,-1
 4004954:	1c3ffd04 	addi	r16,r3,-12
 4004958:	18c01a04 	addi	r3,r3,104
 400495c:	247ffa1e 	bne	r4,r17,4004948 <__alt_data_end+0xff004948>
 4004960:	90800017 	ldw	r2,0(r18)
 4004964:	10001d26 	beq	r2,zero,40049dc <__sfp+0xf4>
 4004968:	1025883a 	mov	r18,r2
 400496c:	003fee06 	br	4004928 <__alt_data_end+0xff004928>
 4004970:	00bfffc4 	movi	r2,-1
 4004974:	8080038d 	sth	r2,14(r16)
 4004978:	00800044 	movi	r2,1
 400497c:	8080030d 	sth	r2,12(r16)
 4004980:	80001915 	stw	zero,100(r16)
 4004984:	80000015 	stw	zero,0(r16)
 4004988:	80000215 	stw	zero,8(r16)
 400498c:	80000115 	stw	zero,4(r16)
 4004990:	80000415 	stw	zero,16(r16)
 4004994:	80000515 	stw	zero,20(r16)
 4004998:	80000615 	stw	zero,24(r16)
 400499c:	01800204 	movi	r6,8
 40049a0:	000b883a 	mov	r5,zero
 40049a4:	81001704 	addi	r4,r16,92
 40049a8:	400630c0 	call	400630c <memset>
 40049ac:	8005883a 	mov	r2,r16
 40049b0:	80000c15 	stw	zero,48(r16)
 40049b4:	80000d15 	stw	zero,52(r16)
 40049b8:	80001115 	stw	zero,68(r16)
 40049bc:	80001215 	stw	zero,72(r16)
 40049c0:	dfc00417 	ldw	ra,16(sp)
 40049c4:	dcc00317 	ldw	r19,12(sp)
 40049c8:	dc800217 	ldw	r18,8(sp)
 40049cc:	dc400117 	ldw	r17,4(sp)
 40049d0:	dc000017 	ldw	r16,0(sp)
 40049d4:	dec00504 	addi	sp,sp,20
 40049d8:	f800283a 	ret
 40049dc:	01400104 	movi	r5,4
 40049e0:	9809883a 	mov	r4,r19
 40049e4:	40048800 	call	4004880 <__sfmoreglue>
 40049e8:	90800015 	stw	r2,0(r18)
 40049ec:	103fde1e 	bne	r2,zero,4004968 <__alt_data_end+0xff004968>
 40049f0:	00800304 	movi	r2,12
 40049f4:	98800015 	stw	r2,0(r19)
 40049f8:	0005883a 	mov	r2,zero
 40049fc:	003ff006 	br	40049c0 <__alt_data_end+0xff0049c0>

04004a00 <_cleanup>:
 4004a00:	00810074 	movhi	r2,1025
 4004a04:	10867f04 	addi	r2,r2,6652
 4004a08:	11000017 	ldw	r4,0(r2)
 4004a0c:	01410074 	movhi	r5,1025
 4004a10:	2965bd04 	addi	r5,r5,-26892
 4004a14:	400541c1 	jmpi	400541c <_fwalk_reent>

04004a18 <__sinit>:
 4004a18:	20800e17 	ldw	r2,56(r4)
 4004a1c:	10000126 	beq	r2,zero,4004a24 <__sinit+0xc>
 4004a20:	f800283a 	ret
 4004a24:	40046dc1 	jmpi	40046dc <__sinit.part.1>

04004a28 <__sfp_lock_acquire>:
 4004a28:	f800283a 	ret

04004a2c <__sfp_lock_release>:
 4004a2c:	f800283a 	ret

04004a30 <__sinit_lock_acquire>:
 4004a30:	f800283a 	ret

04004a34 <__sinit_lock_release>:
 4004a34:	f800283a 	ret

04004a38 <__fp_lock_all>:
 4004a38:	00810074 	movhi	r2,1025
 4004a3c:	10868004 	addi	r2,r2,6656
 4004a40:	11000017 	ldw	r4,0(r2)
 4004a44:	01410034 	movhi	r5,1024
 4004a48:	29521e04 	addi	r5,r5,18552
 4004a4c:	40053581 	jmpi	4005358 <_fwalk>

04004a50 <__fp_unlock_all>:
 4004a50:	00810074 	movhi	r2,1025
 4004a54:	10868004 	addi	r2,r2,6656
 4004a58:	11000017 	ldw	r4,0(r2)
 4004a5c:	01410034 	movhi	r5,1024
 4004a60:	2951b204 	addi	r5,r5,18120
 4004a64:	40053581 	jmpi	4005358 <_fwalk>

04004a68 <_malloc_trim_r>:
 4004a68:	defffb04 	addi	sp,sp,-20
 4004a6c:	dcc00315 	stw	r19,12(sp)
 4004a70:	04c10074 	movhi	r19,1025
 4004a74:	dc800215 	stw	r18,8(sp)
 4004a78:	dc400115 	stw	r17,4(sp)
 4004a7c:	dc000015 	stw	r16,0(sp)
 4004a80:	dfc00415 	stw	ra,16(sp)
 4004a84:	2821883a 	mov	r16,r5
 4004a88:	9cc0f404 	addi	r19,r19,976
 4004a8c:	2025883a 	mov	r18,r4
 4004a90:	400d5e80 	call	400d5e8 <__malloc_lock>
 4004a94:	98800217 	ldw	r2,8(r19)
 4004a98:	14400117 	ldw	r17,4(r2)
 4004a9c:	00bfff04 	movi	r2,-4
 4004aa0:	88a2703a 	and	r17,r17,r2
 4004aa4:	8c21c83a 	sub	r16,r17,r16
 4004aa8:	8403fbc4 	addi	r16,r16,4079
 4004aac:	8020d33a 	srli	r16,r16,12
 4004ab0:	0083ffc4 	movi	r2,4095
 4004ab4:	843fffc4 	addi	r16,r16,-1
 4004ab8:	8020933a 	slli	r16,r16,12
 4004abc:	1400060e 	bge	r2,r16,4004ad8 <_malloc_trim_r+0x70>
 4004ac0:	000b883a 	mov	r5,zero
 4004ac4:	9009883a 	mov	r4,r18
 4004ac8:	4007b700 	call	4007b70 <_sbrk_r>
 4004acc:	98c00217 	ldw	r3,8(r19)
 4004ad0:	1c47883a 	add	r3,r3,r17
 4004ad4:	10c00a26 	beq	r2,r3,4004b00 <_malloc_trim_r+0x98>
 4004ad8:	9009883a 	mov	r4,r18
 4004adc:	400d60c0 	call	400d60c <__malloc_unlock>
 4004ae0:	0005883a 	mov	r2,zero
 4004ae4:	dfc00417 	ldw	ra,16(sp)
 4004ae8:	dcc00317 	ldw	r19,12(sp)
 4004aec:	dc800217 	ldw	r18,8(sp)
 4004af0:	dc400117 	ldw	r17,4(sp)
 4004af4:	dc000017 	ldw	r16,0(sp)
 4004af8:	dec00504 	addi	sp,sp,20
 4004afc:	f800283a 	ret
 4004b00:	040bc83a 	sub	r5,zero,r16
 4004b04:	9009883a 	mov	r4,r18
 4004b08:	4007b700 	call	4007b70 <_sbrk_r>
 4004b0c:	00ffffc4 	movi	r3,-1
 4004b10:	10c00d26 	beq	r2,r3,4004b48 <_malloc_trim_r+0xe0>
 4004b14:	00c10074 	movhi	r3,1025
 4004b18:	18cd6304 	addi	r3,r3,13708
 4004b1c:	18800017 	ldw	r2,0(r3)
 4004b20:	99000217 	ldw	r4,8(r19)
 4004b24:	8c23c83a 	sub	r17,r17,r16
 4004b28:	8c400054 	ori	r17,r17,1
 4004b2c:	1421c83a 	sub	r16,r2,r16
 4004b30:	24400115 	stw	r17,4(r4)
 4004b34:	9009883a 	mov	r4,r18
 4004b38:	1c000015 	stw	r16,0(r3)
 4004b3c:	400d60c0 	call	400d60c <__malloc_unlock>
 4004b40:	00800044 	movi	r2,1
 4004b44:	003fe706 	br	4004ae4 <__alt_data_end+0xff004ae4>
 4004b48:	000b883a 	mov	r5,zero
 4004b4c:	9009883a 	mov	r4,r18
 4004b50:	4007b700 	call	4007b70 <_sbrk_r>
 4004b54:	99000217 	ldw	r4,8(r19)
 4004b58:	014003c4 	movi	r5,15
 4004b5c:	1107c83a 	sub	r3,r2,r4
 4004b60:	28ffdd0e 	bge	r5,r3,4004ad8 <__alt_data_end+0xff004ad8>
 4004b64:	01410074 	movhi	r5,1025
 4004b68:	29468204 	addi	r5,r5,6664
 4004b6c:	29400017 	ldw	r5,0(r5)
 4004b70:	18c00054 	ori	r3,r3,1
 4004b74:	20c00115 	stw	r3,4(r4)
 4004b78:	00c10074 	movhi	r3,1025
 4004b7c:	1145c83a 	sub	r2,r2,r5
 4004b80:	18cd6304 	addi	r3,r3,13708
 4004b84:	18800015 	stw	r2,0(r3)
 4004b88:	003fd306 	br	4004ad8 <__alt_data_end+0xff004ad8>

04004b8c <_free_r>:
 4004b8c:	28004126 	beq	r5,zero,4004c94 <_free_r+0x108>
 4004b90:	defffd04 	addi	sp,sp,-12
 4004b94:	dc400115 	stw	r17,4(sp)
 4004b98:	dc000015 	stw	r16,0(sp)
 4004b9c:	2023883a 	mov	r17,r4
 4004ba0:	2821883a 	mov	r16,r5
 4004ba4:	dfc00215 	stw	ra,8(sp)
 4004ba8:	400d5e80 	call	400d5e8 <__malloc_lock>
 4004bac:	81ffff17 	ldw	r7,-4(r16)
 4004bb0:	00bfff84 	movi	r2,-2
 4004bb4:	01010074 	movhi	r4,1025
 4004bb8:	81bffe04 	addi	r6,r16,-8
 4004bbc:	3884703a 	and	r2,r7,r2
 4004bc0:	2100f404 	addi	r4,r4,976
 4004bc4:	308b883a 	add	r5,r6,r2
 4004bc8:	2a400117 	ldw	r9,4(r5)
 4004bcc:	22000217 	ldw	r8,8(r4)
 4004bd0:	00ffff04 	movi	r3,-4
 4004bd4:	48c6703a 	and	r3,r9,r3
 4004bd8:	2a005726 	beq	r5,r8,4004d38 <_free_r+0x1ac>
 4004bdc:	28c00115 	stw	r3,4(r5)
 4004be0:	39c0004c 	andi	r7,r7,1
 4004be4:	3800091e 	bne	r7,zero,4004c0c <_free_r+0x80>
 4004be8:	823ffe17 	ldw	r8,-8(r16)
 4004bec:	22400204 	addi	r9,r4,8
 4004bf0:	320dc83a 	sub	r6,r6,r8
 4004bf4:	31c00217 	ldw	r7,8(r6)
 4004bf8:	1205883a 	add	r2,r2,r8
 4004bfc:	3a406526 	beq	r7,r9,4004d94 <_free_r+0x208>
 4004c00:	32000317 	ldw	r8,12(r6)
 4004c04:	3a000315 	stw	r8,12(r7)
 4004c08:	41c00215 	stw	r7,8(r8)
 4004c0c:	28cf883a 	add	r7,r5,r3
 4004c10:	39c00117 	ldw	r7,4(r7)
 4004c14:	39c0004c 	andi	r7,r7,1
 4004c18:	38003a26 	beq	r7,zero,4004d04 <_free_r+0x178>
 4004c1c:	10c00054 	ori	r3,r2,1
 4004c20:	30c00115 	stw	r3,4(r6)
 4004c24:	3087883a 	add	r3,r6,r2
 4004c28:	18800015 	stw	r2,0(r3)
 4004c2c:	00c07fc4 	movi	r3,511
 4004c30:	18801936 	bltu	r3,r2,4004c98 <_free_r+0x10c>
 4004c34:	1004d0fa 	srli	r2,r2,3
 4004c38:	01c00044 	movi	r7,1
 4004c3c:	21400117 	ldw	r5,4(r4)
 4004c40:	10c00044 	addi	r3,r2,1
 4004c44:	18c7883a 	add	r3,r3,r3
 4004c48:	1005d0ba 	srai	r2,r2,2
 4004c4c:	18c7883a 	add	r3,r3,r3
 4004c50:	18c7883a 	add	r3,r3,r3
 4004c54:	1907883a 	add	r3,r3,r4
 4004c58:	3884983a 	sll	r2,r7,r2
 4004c5c:	19c00017 	ldw	r7,0(r3)
 4004c60:	1a3ffe04 	addi	r8,r3,-8
 4004c64:	1144b03a 	or	r2,r2,r5
 4004c68:	32000315 	stw	r8,12(r6)
 4004c6c:	31c00215 	stw	r7,8(r6)
 4004c70:	20800115 	stw	r2,4(r4)
 4004c74:	19800015 	stw	r6,0(r3)
 4004c78:	39800315 	stw	r6,12(r7)
 4004c7c:	8809883a 	mov	r4,r17
 4004c80:	dfc00217 	ldw	ra,8(sp)
 4004c84:	dc400117 	ldw	r17,4(sp)
 4004c88:	dc000017 	ldw	r16,0(sp)
 4004c8c:	dec00304 	addi	sp,sp,12
 4004c90:	400d60c1 	jmpi	400d60c <__malloc_unlock>
 4004c94:	f800283a 	ret
 4004c98:	100ad27a 	srli	r5,r2,9
 4004c9c:	00c00104 	movi	r3,4
 4004ca0:	19404a36 	bltu	r3,r5,4004dcc <_free_r+0x240>
 4004ca4:	100ad1ba 	srli	r5,r2,6
 4004ca8:	28c00e44 	addi	r3,r5,57
 4004cac:	18c7883a 	add	r3,r3,r3
 4004cb0:	29400e04 	addi	r5,r5,56
 4004cb4:	18c7883a 	add	r3,r3,r3
 4004cb8:	18c7883a 	add	r3,r3,r3
 4004cbc:	1909883a 	add	r4,r3,r4
 4004cc0:	20c00017 	ldw	r3,0(r4)
 4004cc4:	01c10074 	movhi	r7,1025
 4004cc8:	213ffe04 	addi	r4,r4,-8
 4004ccc:	39c0f404 	addi	r7,r7,976
 4004cd0:	20c04426 	beq	r4,r3,4004de4 <_free_r+0x258>
 4004cd4:	01ffff04 	movi	r7,-4
 4004cd8:	19400117 	ldw	r5,4(r3)
 4004cdc:	29ca703a 	and	r5,r5,r7
 4004ce0:	1140022e 	bgeu	r2,r5,4004cec <_free_r+0x160>
 4004ce4:	18c00217 	ldw	r3,8(r3)
 4004ce8:	20fffb1e 	bne	r4,r3,4004cd8 <__alt_data_end+0xff004cd8>
 4004cec:	19000317 	ldw	r4,12(r3)
 4004cf0:	31000315 	stw	r4,12(r6)
 4004cf4:	30c00215 	stw	r3,8(r6)
 4004cf8:	21800215 	stw	r6,8(r4)
 4004cfc:	19800315 	stw	r6,12(r3)
 4004d00:	003fde06 	br	4004c7c <__alt_data_end+0xff004c7c>
 4004d04:	29c00217 	ldw	r7,8(r5)
 4004d08:	10c5883a 	add	r2,r2,r3
 4004d0c:	00c10074 	movhi	r3,1025
 4004d10:	18c0f604 	addi	r3,r3,984
 4004d14:	38c03b26 	beq	r7,r3,4004e04 <_free_r+0x278>
 4004d18:	2a000317 	ldw	r8,12(r5)
 4004d1c:	11400054 	ori	r5,r2,1
 4004d20:	3087883a 	add	r3,r6,r2
 4004d24:	3a000315 	stw	r8,12(r7)
 4004d28:	41c00215 	stw	r7,8(r8)
 4004d2c:	31400115 	stw	r5,4(r6)
 4004d30:	18800015 	stw	r2,0(r3)
 4004d34:	003fbd06 	br	4004c2c <__alt_data_end+0xff004c2c>
 4004d38:	39c0004c 	andi	r7,r7,1
 4004d3c:	10c5883a 	add	r2,r2,r3
 4004d40:	3800071e 	bne	r7,zero,4004d60 <_free_r+0x1d4>
 4004d44:	81fffe17 	ldw	r7,-8(r16)
 4004d48:	31cdc83a 	sub	r6,r6,r7
 4004d4c:	30c00317 	ldw	r3,12(r6)
 4004d50:	31400217 	ldw	r5,8(r6)
 4004d54:	11c5883a 	add	r2,r2,r7
 4004d58:	28c00315 	stw	r3,12(r5)
 4004d5c:	19400215 	stw	r5,8(r3)
 4004d60:	10c00054 	ori	r3,r2,1
 4004d64:	30c00115 	stw	r3,4(r6)
 4004d68:	00c10074 	movhi	r3,1025
 4004d6c:	18c68304 	addi	r3,r3,6668
 4004d70:	18c00017 	ldw	r3,0(r3)
 4004d74:	21800215 	stw	r6,8(r4)
 4004d78:	10ffc036 	bltu	r2,r3,4004c7c <__alt_data_end+0xff004c7c>
 4004d7c:	00810074 	movhi	r2,1025
 4004d80:	108d5a04 	addi	r2,r2,13672
 4004d84:	11400017 	ldw	r5,0(r2)
 4004d88:	8809883a 	mov	r4,r17
 4004d8c:	4004a680 	call	4004a68 <_malloc_trim_r>
 4004d90:	003fba06 	br	4004c7c <__alt_data_end+0xff004c7c>
 4004d94:	28c9883a 	add	r4,r5,r3
 4004d98:	21000117 	ldw	r4,4(r4)
 4004d9c:	2100004c 	andi	r4,r4,1
 4004da0:	2000391e 	bne	r4,zero,4004e88 <_free_r+0x2fc>
 4004da4:	29c00217 	ldw	r7,8(r5)
 4004da8:	29000317 	ldw	r4,12(r5)
 4004dac:	1885883a 	add	r2,r3,r2
 4004db0:	10c00054 	ori	r3,r2,1
 4004db4:	39000315 	stw	r4,12(r7)
 4004db8:	21c00215 	stw	r7,8(r4)
 4004dbc:	30c00115 	stw	r3,4(r6)
 4004dc0:	308d883a 	add	r6,r6,r2
 4004dc4:	30800015 	stw	r2,0(r6)
 4004dc8:	003fac06 	br	4004c7c <__alt_data_end+0xff004c7c>
 4004dcc:	00c00504 	movi	r3,20
 4004dd0:	19401536 	bltu	r3,r5,4004e28 <_free_r+0x29c>
 4004dd4:	28c01704 	addi	r3,r5,92
 4004dd8:	18c7883a 	add	r3,r3,r3
 4004ddc:	294016c4 	addi	r5,r5,91
 4004de0:	003fb406 	br	4004cb4 <__alt_data_end+0xff004cb4>
 4004de4:	280bd0ba 	srai	r5,r5,2
 4004de8:	00c00044 	movi	r3,1
 4004dec:	38800117 	ldw	r2,4(r7)
 4004df0:	194a983a 	sll	r5,r3,r5
 4004df4:	2007883a 	mov	r3,r4
 4004df8:	2884b03a 	or	r2,r5,r2
 4004dfc:	38800115 	stw	r2,4(r7)
 4004e00:	003fbb06 	br	4004cf0 <__alt_data_end+0xff004cf0>
 4004e04:	21800515 	stw	r6,20(r4)
 4004e08:	21800415 	stw	r6,16(r4)
 4004e0c:	10c00054 	ori	r3,r2,1
 4004e10:	31c00315 	stw	r7,12(r6)
 4004e14:	31c00215 	stw	r7,8(r6)
 4004e18:	30c00115 	stw	r3,4(r6)
 4004e1c:	308d883a 	add	r6,r6,r2
 4004e20:	30800015 	stw	r2,0(r6)
 4004e24:	003f9506 	br	4004c7c <__alt_data_end+0xff004c7c>
 4004e28:	00c01504 	movi	r3,84
 4004e2c:	19400536 	bltu	r3,r5,4004e44 <_free_r+0x2b8>
 4004e30:	100ad33a 	srli	r5,r2,12
 4004e34:	28c01bc4 	addi	r3,r5,111
 4004e38:	18c7883a 	add	r3,r3,r3
 4004e3c:	29401b84 	addi	r5,r5,110
 4004e40:	003f9c06 	br	4004cb4 <__alt_data_end+0xff004cb4>
 4004e44:	00c05504 	movi	r3,340
 4004e48:	19400536 	bltu	r3,r5,4004e60 <_free_r+0x2d4>
 4004e4c:	100ad3fa 	srli	r5,r2,15
 4004e50:	28c01e04 	addi	r3,r5,120
 4004e54:	18c7883a 	add	r3,r3,r3
 4004e58:	29401dc4 	addi	r5,r5,119
 4004e5c:	003f9506 	br	4004cb4 <__alt_data_end+0xff004cb4>
 4004e60:	00c15504 	movi	r3,1364
 4004e64:	19400536 	bltu	r3,r5,4004e7c <_free_r+0x2f0>
 4004e68:	100ad4ba 	srli	r5,r2,18
 4004e6c:	28c01f44 	addi	r3,r5,125
 4004e70:	18c7883a 	add	r3,r3,r3
 4004e74:	29401f04 	addi	r5,r5,124
 4004e78:	003f8e06 	br	4004cb4 <__alt_data_end+0xff004cb4>
 4004e7c:	00c03f84 	movi	r3,254
 4004e80:	01401f84 	movi	r5,126
 4004e84:	003f8b06 	br	4004cb4 <__alt_data_end+0xff004cb4>
 4004e88:	10c00054 	ori	r3,r2,1
 4004e8c:	30c00115 	stw	r3,4(r6)
 4004e90:	308d883a 	add	r6,r6,r2
 4004e94:	30800015 	stw	r2,0(r6)
 4004e98:	003f7806 	br	4004c7c <__alt_data_end+0xff004c7c>

04004e9c <__sfvwrite_r>:
 4004e9c:	30800217 	ldw	r2,8(r6)
 4004ea0:	10006726 	beq	r2,zero,4005040 <__sfvwrite_r+0x1a4>
 4004ea4:	28c0030b 	ldhu	r3,12(r5)
 4004ea8:	defff404 	addi	sp,sp,-48
 4004eac:	dd400715 	stw	r21,28(sp)
 4004eb0:	dd000615 	stw	r20,24(sp)
 4004eb4:	dc000215 	stw	r16,8(sp)
 4004eb8:	dfc00b15 	stw	ra,44(sp)
 4004ebc:	df000a15 	stw	fp,40(sp)
 4004ec0:	ddc00915 	stw	r23,36(sp)
 4004ec4:	dd800815 	stw	r22,32(sp)
 4004ec8:	dcc00515 	stw	r19,20(sp)
 4004ecc:	dc800415 	stw	r18,16(sp)
 4004ed0:	dc400315 	stw	r17,12(sp)
 4004ed4:	1880020c 	andi	r2,r3,8
 4004ed8:	2821883a 	mov	r16,r5
 4004edc:	202b883a 	mov	r21,r4
 4004ee0:	3029883a 	mov	r20,r6
 4004ee4:	10002726 	beq	r2,zero,4004f84 <__sfvwrite_r+0xe8>
 4004ee8:	28800417 	ldw	r2,16(r5)
 4004eec:	10002526 	beq	r2,zero,4004f84 <__sfvwrite_r+0xe8>
 4004ef0:	1880008c 	andi	r2,r3,2
 4004ef4:	a4400017 	ldw	r17,0(r20)
 4004ef8:	10002a26 	beq	r2,zero,4004fa4 <__sfvwrite_r+0x108>
 4004efc:	05a00034 	movhi	r22,32768
 4004f00:	0027883a 	mov	r19,zero
 4004f04:	0025883a 	mov	r18,zero
 4004f08:	b5bf0004 	addi	r22,r22,-1024
 4004f0c:	980d883a 	mov	r6,r19
 4004f10:	a809883a 	mov	r4,r21
 4004f14:	90004626 	beq	r18,zero,4005030 <__sfvwrite_r+0x194>
 4004f18:	900f883a 	mov	r7,r18
 4004f1c:	b480022e 	bgeu	r22,r18,4004f28 <__sfvwrite_r+0x8c>
 4004f20:	01e00034 	movhi	r7,32768
 4004f24:	39ff0004 	addi	r7,r7,-1024
 4004f28:	80800917 	ldw	r2,36(r16)
 4004f2c:	81400717 	ldw	r5,28(r16)
 4004f30:	103ee83a 	callr	r2
 4004f34:	0080570e 	bge	zero,r2,4005094 <__sfvwrite_r+0x1f8>
 4004f38:	a0c00217 	ldw	r3,8(r20)
 4004f3c:	98a7883a 	add	r19,r19,r2
 4004f40:	90a5c83a 	sub	r18,r18,r2
 4004f44:	1885c83a 	sub	r2,r3,r2
 4004f48:	a0800215 	stw	r2,8(r20)
 4004f4c:	103fef1e 	bne	r2,zero,4004f0c <__alt_data_end+0xff004f0c>
 4004f50:	0005883a 	mov	r2,zero
 4004f54:	dfc00b17 	ldw	ra,44(sp)
 4004f58:	df000a17 	ldw	fp,40(sp)
 4004f5c:	ddc00917 	ldw	r23,36(sp)
 4004f60:	dd800817 	ldw	r22,32(sp)
 4004f64:	dd400717 	ldw	r21,28(sp)
 4004f68:	dd000617 	ldw	r20,24(sp)
 4004f6c:	dcc00517 	ldw	r19,20(sp)
 4004f70:	dc800417 	ldw	r18,16(sp)
 4004f74:	dc400317 	ldw	r17,12(sp)
 4004f78:	dc000217 	ldw	r16,8(sp)
 4004f7c:	dec00c04 	addi	sp,sp,48
 4004f80:	f800283a 	ret
 4004f84:	800b883a 	mov	r5,r16
 4004f88:	a809883a 	mov	r4,r21
 4004f8c:	4002a440 	call	4002a44 <__swsetup_r>
 4004f90:	1000eb1e 	bne	r2,zero,4005340 <__sfvwrite_r+0x4a4>
 4004f94:	80c0030b 	ldhu	r3,12(r16)
 4004f98:	a4400017 	ldw	r17,0(r20)
 4004f9c:	1880008c 	andi	r2,r3,2
 4004fa0:	103fd61e 	bne	r2,zero,4004efc <__alt_data_end+0xff004efc>
 4004fa4:	1880004c 	andi	r2,r3,1
 4004fa8:	10003f1e 	bne	r2,zero,40050a8 <__sfvwrite_r+0x20c>
 4004fac:	0039883a 	mov	fp,zero
 4004fb0:	0025883a 	mov	r18,zero
 4004fb4:	90001a26 	beq	r18,zero,4005020 <__sfvwrite_r+0x184>
 4004fb8:	1880800c 	andi	r2,r3,512
 4004fbc:	84c00217 	ldw	r19,8(r16)
 4004fc0:	10002126 	beq	r2,zero,4005048 <__sfvwrite_r+0x1ac>
 4004fc4:	982f883a 	mov	r23,r19
 4004fc8:	94c09336 	bltu	r18,r19,4005218 <__sfvwrite_r+0x37c>
 4004fcc:	1881200c 	andi	r2,r3,1152
 4004fd0:	10009e1e 	bne	r2,zero,400524c <__sfvwrite_r+0x3b0>
 4004fd4:	81000017 	ldw	r4,0(r16)
 4004fd8:	b80d883a 	mov	r6,r23
 4004fdc:	e00b883a 	mov	r5,fp
 4004fe0:	40061b00 	call	40061b0 <memmove>
 4004fe4:	80c00217 	ldw	r3,8(r16)
 4004fe8:	81000017 	ldw	r4,0(r16)
 4004fec:	9005883a 	mov	r2,r18
 4004ff0:	1ce7c83a 	sub	r19,r3,r19
 4004ff4:	25cf883a 	add	r7,r4,r23
 4004ff8:	84c00215 	stw	r19,8(r16)
 4004ffc:	81c00015 	stw	r7,0(r16)
 4005000:	a0c00217 	ldw	r3,8(r20)
 4005004:	e0b9883a 	add	fp,fp,r2
 4005008:	90a5c83a 	sub	r18,r18,r2
 400500c:	18a7c83a 	sub	r19,r3,r2
 4005010:	a4c00215 	stw	r19,8(r20)
 4005014:	983fce26 	beq	r19,zero,4004f50 <__alt_data_end+0xff004f50>
 4005018:	80c0030b 	ldhu	r3,12(r16)
 400501c:	903fe61e 	bne	r18,zero,4004fb8 <__alt_data_end+0xff004fb8>
 4005020:	8f000017 	ldw	fp,0(r17)
 4005024:	8c800117 	ldw	r18,4(r17)
 4005028:	8c400204 	addi	r17,r17,8
 400502c:	003fe106 	br	4004fb4 <__alt_data_end+0xff004fb4>
 4005030:	8cc00017 	ldw	r19,0(r17)
 4005034:	8c800117 	ldw	r18,4(r17)
 4005038:	8c400204 	addi	r17,r17,8
 400503c:	003fb306 	br	4004f0c <__alt_data_end+0xff004f0c>
 4005040:	0005883a 	mov	r2,zero
 4005044:	f800283a 	ret
 4005048:	81000017 	ldw	r4,0(r16)
 400504c:	80800417 	ldw	r2,16(r16)
 4005050:	11005736 	bltu	r2,r4,40051b0 <__sfvwrite_r+0x314>
 4005054:	85c00517 	ldw	r23,20(r16)
 4005058:	95c05536 	bltu	r18,r23,40051b0 <__sfvwrite_r+0x314>
 400505c:	00a00034 	movhi	r2,32768
 4005060:	10bfffc4 	addi	r2,r2,-1
 4005064:	9009883a 	mov	r4,r18
 4005068:	1480012e 	bgeu	r2,r18,4005070 <__sfvwrite_r+0x1d4>
 400506c:	1009883a 	mov	r4,r2
 4005070:	b80b883a 	mov	r5,r23
 4005074:	400a8080 	call	400a808 <__divsi3>
 4005078:	15cf383a 	mul	r7,r2,r23
 400507c:	81400717 	ldw	r5,28(r16)
 4005080:	80800917 	ldw	r2,36(r16)
 4005084:	e00d883a 	mov	r6,fp
 4005088:	a809883a 	mov	r4,r21
 400508c:	103ee83a 	callr	r2
 4005090:	00bfdb16 	blt	zero,r2,4005000 <__alt_data_end+0xff005000>
 4005094:	8080030b 	ldhu	r2,12(r16)
 4005098:	10801014 	ori	r2,r2,64
 400509c:	8080030d 	sth	r2,12(r16)
 40050a0:	00bfffc4 	movi	r2,-1
 40050a4:	003fab06 	br	4004f54 <__alt_data_end+0xff004f54>
 40050a8:	0027883a 	mov	r19,zero
 40050ac:	0011883a 	mov	r8,zero
 40050b0:	0039883a 	mov	fp,zero
 40050b4:	0025883a 	mov	r18,zero
 40050b8:	90001f26 	beq	r18,zero,4005138 <__sfvwrite_r+0x29c>
 40050bc:	40005a26 	beq	r8,zero,4005228 <__sfvwrite_r+0x38c>
 40050c0:	982d883a 	mov	r22,r19
 40050c4:	94c0012e 	bgeu	r18,r19,40050cc <__sfvwrite_r+0x230>
 40050c8:	902d883a 	mov	r22,r18
 40050cc:	81000017 	ldw	r4,0(r16)
 40050d0:	80800417 	ldw	r2,16(r16)
 40050d4:	b02f883a 	mov	r23,r22
 40050d8:	81c00517 	ldw	r7,20(r16)
 40050dc:	1100032e 	bgeu	r2,r4,40050ec <__sfvwrite_r+0x250>
 40050e0:	80c00217 	ldw	r3,8(r16)
 40050e4:	38c7883a 	add	r3,r7,r3
 40050e8:	1d801816 	blt	r3,r22,400514c <__sfvwrite_r+0x2b0>
 40050ec:	b1c03e16 	blt	r22,r7,40051e8 <__sfvwrite_r+0x34c>
 40050f0:	80800917 	ldw	r2,36(r16)
 40050f4:	81400717 	ldw	r5,28(r16)
 40050f8:	e00d883a 	mov	r6,fp
 40050fc:	da000115 	stw	r8,4(sp)
 4005100:	a809883a 	mov	r4,r21
 4005104:	103ee83a 	callr	r2
 4005108:	102f883a 	mov	r23,r2
 400510c:	da000117 	ldw	r8,4(sp)
 4005110:	00bfe00e 	bge	zero,r2,4005094 <__alt_data_end+0xff005094>
 4005114:	9de7c83a 	sub	r19,r19,r23
 4005118:	98001f26 	beq	r19,zero,4005198 <__sfvwrite_r+0x2fc>
 400511c:	a0800217 	ldw	r2,8(r20)
 4005120:	e5f9883a 	add	fp,fp,r23
 4005124:	95e5c83a 	sub	r18,r18,r23
 4005128:	15efc83a 	sub	r23,r2,r23
 400512c:	a5c00215 	stw	r23,8(r20)
 4005130:	b83f8726 	beq	r23,zero,4004f50 <__alt_data_end+0xff004f50>
 4005134:	903fe11e 	bne	r18,zero,40050bc <__alt_data_end+0xff0050bc>
 4005138:	8f000017 	ldw	fp,0(r17)
 400513c:	8c800117 	ldw	r18,4(r17)
 4005140:	0011883a 	mov	r8,zero
 4005144:	8c400204 	addi	r17,r17,8
 4005148:	003fdb06 	br	40050b8 <__alt_data_end+0xff0050b8>
 400514c:	180d883a 	mov	r6,r3
 4005150:	e00b883a 	mov	r5,fp
 4005154:	da000115 	stw	r8,4(sp)
 4005158:	d8c00015 	stw	r3,0(sp)
 400515c:	40061b00 	call	40061b0 <memmove>
 4005160:	d8c00017 	ldw	r3,0(sp)
 4005164:	80800017 	ldw	r2,0(r16)
 4005168:	800b883a 	mov	r5,r16
 400516c:	a809883a 	mov	r4,r21
 4005170:	10c5883a 	add	r2,r2,r3
 4005174:	80800015 	stw	r2,0(r16)
 4005178:	d8c00015 	stw	r3,0(sp)
 400517c:	400463c0 	call	400463c <_fflush_r>
 4005180:	d8c00017 	ldw	r3,0(sp)
 4005184:	da000117 	ldw	r8,4(sp)
 4005188:	103fc21e 	bne	r2,zero,4005094 <__alt_data_end+0xff005094>
 400518c:	182f883a 	mov	r23,r3
 4005190:	9de7c83a 	sub	r19,r19,r23
 4005194:	983fe11e 	bne	r19,zero,400511c <__alt_data_end+0xff00511c>
 4005198:	800b883a 	mov	r5,r16
 400519c:	a809883a 	mov	r4,r21
 40051a0:	400463c0 	call	400463c <_fflush_r>
 40051a4:	103fbb1e 	bne	r2,zero,4005094 <__alt_data_end+0xff005094>
 40051a8:	0011883a 	mov	r8,zero
 40051ac:	003fdb06 	br	400511c <__alt_data_end+0xff00511c>
 40051b0:	94c0012e 	bgeu	r18,r19,40051b8 <__sfvwrite_r+0x31c>
 40051b4:	9027883a 	mov	r19,r18
 40051b8:	980d883a 	mov	r6,r19
 40051bc:	e00b883a 	mov	r5,fp
 40051c0:	40061b00 	call	40061b0 <memmove>
 40051c4:	80800217 	ldw	r2,8(r16)
 40051c8:	80c00017 	ldw	r3,0(r16)
 40051cc:	14c5c83a 	sub	r2,r2,r19
 40051d0:	1cc7883a 	add	r3,r3,r19
 40051d4:	80800215 	stw	r2,8(r16)
 40051d8:	80c00015 	stw	r3,0(r16)
 40051dc:	10004326 	beq	r2,zero,40052ec <__sfvwrite_r+0x450>
 40051e0:	9805883a 	mov	r2,r19
 40051e4:	003f8606 	br	4005000 <__alt_data_end+0xff005000>
 40051e8:	b00d883a 	mov	r6,r22
 40051ec:	e00b883a 	mov	r5,fp
 40051f0:	da000115 	stw	r8,4(sp)
 40051f4:	40061b00 	call	40061b0 <memmove>
 40051f8:	80800217 	ldw	r2,8(r16)
 40051fc:	80c00017 	ldw	r3,0(r16)
 4005200:	da000117 	ldw	r8,4(sp)
 4005204:	1585c83a 	sub	r2,r2,r22
 4005208:	1dad883a 	add	r22,r3,r22
 400520c:	80800215 	stw	r2,8(r16)
 4005210:	85800015 	stw	r22,0(r16)
 4005214:	003fbf06 	br	4005114 <__alt_data_end+0xff005114>
 4005218:	81000017 	ldw	r4,0(r16)
 400521c:	9027883a 	mov	r19,r18
 4005220:	902f883a 	mov	r23,r18
 4005224:	003f6c06 	br	4004fd8 <__alt_data_end+0xff004fd8>
 4005228:	900d883a 	mov	r6,r18
 400522c:	01400284 	movi	r5,10
 4005230:	e009883a 	mov	r4,fp
 4005234:	4005f840 	call	4005f84 <memchr>
 4005238:	10003e26 	beq	r2,zero,4005334 <__sfvwrite_r+0x498>
 400523c:	10800044 	addi	r2,r2,1
 4005240:	1727c83a 	sub	r19,r2,fp
 4005244:	02000044 	movi	r8,1
 4005248:	003f9d06 	br	40050c0 <__alt_data_end+0xff0050c0>
 400524c:	80800517 	ldw	r2,20(r16)
 4005250:	81400417 	ldw	r5,16(r16)
 4005254:	81c00017 	ldw	r7,0(r16)
 4005258:	10a7883a 	add	r19,r2,r2
 400525c:	9885883a 	add	r2,r19,r2
 4005260:	1026d7fa 	srli	r19,r2,31
 4005264:	396dc83a 	sub	r22,r7,r5
 4005268:	b1000044 	addi	r4,r22,1
 400526c:	9885883a 	add	r2,r19,r2
 4005270:	1027d07a 	srai	r19,r2,1
 4005274:	2485883a 	add	r2,r4,r18
 4005278:	980d883a 	mov	r6,r19
 400527c:	9880022e 	bgeu	r19,r2,4005288 <__sfvwrite_r+0x3ec>
 4005280:	1027883a 	mov	r19,r2
 4005284:	100d883a 	mov	r6,r2
 4005288:	18c1000c 	andi	r3,r3,1024
 400528c:	18001c26 	beq	r3,zero,4005300 <__sfvwrite_r+0x464>
 4005290:	300b883a 	mov	r5,r6
 4005294:	a809883a 	mov	r4,r21
 4005298:	40057780 	call	4005778 <_malloc_r>
 400529c:	102f883a 	mov	r23,r2
 40052a0:	10002926 	beq	r2,zero,4005348 <__sfvwrite_r+0x4ac>
 40052a4:	81400417 	ldw	r5,16(r16)
 40052a8:	b00d883a 	mov	r6,r22
 40052ac:	1009883a 	mov	r4,r2
 40052b0:	40060680 	call	4006068 <memcpy>
 40052b4:	8080030b 	ldhu	r2,12(r16)
 40052b8:	00fedfc4 	movi	r3,-1153
 40052bc:	10c4703a 	and	r2,r2,r3
 40052c0:	10802014 	ori	r2,r2,128
 40052c4:	8080030d 	sth	r2,12(r16)
 40052c8:	bd89883a 	add	r4,r23,r22
 40052cc:	9d8fc83a 	sub	r7,r19,r22
 40052d0:	85c00415 	stw	r23,16(r16)
 40052d4:	84c00515 	stw	r19,20(r16)
 40052d8:	81000015 	stw	r4,0(r16)
 40052dc:	9027883a 	mov	r19,r18
 40052e0:	81c00215 	stw	r7,8(r16)
 40052e4:	902f883a 	mov	r23,r18
 40052e8:	003f3b06 	br	4004fd8 <__alt_data_end+0xff004fd8>
 40052ec:	800b883a 	mov	r5,r16
 40052f0:	a809883a 	mov	r4,r21
 40052f4:	400463c0 	call	400463c <_fflush_r>
 40052f8:	103fb926 	beq	r2,zero,40051e0 <__alt_data_end+0xff0051e0>
 40052fc:	003f6506 	br	4005094 <__alt_data_end+0xff005094>
 4005300:	a809883a 	mov	r4,r21
 4005304:	40075980 	call	4007598 <_realloc_r>
 4005308:	102f883a 	mov	r23,r2
 400530c:	103fee1e 	bne	r2,zero,40052c8 <__alt_data_end+0xff0052c8>
 4005310:	81400417 	ldw	r5,16(r16)
 4005314:	a809883a 	mov	r4,r21
 4005318:	4004b8c0 	call	4004b8c <_free_r>
 400531c:	8080030b 	ldhu	r2,12(r16)
 4005320:	00ffdfc4 	movi	r3,-129
 4005324:	1884703a 	and	r2,r3,r2
 4005328:	00c00304 	movi	r3,12
 400532c:	a8c00015 	stw	r3,0(r21)
 4005330:	003f5906 	br	4005098 <__alt_data_end+0xff005098>
 4005334:	94c00044 	addi	r19,r18,1
 4005338:	02000044 	movi	r8,1
 400533c:	003f6006 	br	40050c0 <__alt_data_end+0xff0050c0>
 4005340:	00bfffc4 	movi	r2,-1
 4005344:	003f0306 	br	4004f54 <__alt_data_end+0xff004f54>
 4005348:	00800304 	movi	r2,12
 400534c:	a8800015 	stw	r2,0(r21)
 4005350:	8080030b 	ldhu	r2,12(r16)
 4005354:	003f5006 	br	4005098 <__alt_data_end+0xff005098>

04005358 <_fwalk>:
 4005358:	defff704 	addi	sp,sp,-36
 400535c:	dd000415 	stw	r20,16(sp)
 4005360:	dfc00815 	stw	ra,32(sp)
 4005364:	ddc00715 	stw	r23,28(sp)
 4005368:	dd800615 	stw	r22,24(sp)
 400536c:	dd400515 	stw	r21,20(sp)
 4005370:	dcc00315 	stw	r19,12(sp)
 4005374:	dc800215 	stw	r18,8(sp)
 4005378:	dc400115 	stw	r17,4(sp)
 400537c:	dc000015 	stw	r16,0(sp)
 4005380:	2500b804 	addi	r20,r4,736
 4005384:	a0002326 	beq	r20,zero,4005414 <_fwalk+0xbc>
 4005388:	282b883a 	mov	r21,r5
 400538c:	002f883a 	mov	r23,zero
 4005390:	05800044 	movi	r22,1
 4005394:	04ffffc4 	movi	r19,-1
 4005398:	a4400117 	ldw	r17,4(r20)
 400539c:	a4800217 	ldw	r18,8(r20)
 40053a0:	8c7fffc4 	addi	r17,r17,-1
 40053a4:	88000d16 	blt	r17,zero,40053dc <_fwalk+0x84>
 40053a8:	94000304 	addi	r16,r18,12
 40053ac:	94800384 	addi	r18,r18,14
 40053b0:	8080000b 	ldhu	r2,0(r16)
 40053b4:	8c7fffc4 	addi	r17,r17,-1
 40053b8:	813ffd04 	addi	r4,r16,-12
 40053bc:	b080042e 	bgeu	r22,r2,40053d0 <_fwalk+0x78>
 40053c0:	9080000f 	ldh	r2,0(r18)
 40053c4:	14c00226 	beq	r2,r19,40053d0 <_fwalk+0x78>
 40053c8:	a83ee83a 	callr	r21
 40053cc:	b8aeb03a 	or	r23,r23,r2
 40053d0:	84001a04 	addi	r16,r16,104
 40053d4:	94801a04 	addi	r18,r18,104
 40053d8:	8cfff51e 	bne	r17,r19,40053b0 <__alt_data_end+0xff0053b0>
 40053dc:	a5000017 	ldw	r20,0(r20)
 40053e0:	a03fed1e 	bne	r20,zero,4005398 <__alt_data_end+0xff005398>
 40053e4:	b805883a 	mov	r2,r23
 40053e8:	dfc00817 	ldw	ra,32(sp)
 40053ec:	ddc00717 	ldw	r23,28(sp)
 40053f0:	dd800617 	ldw	r22,24(sp)
 40053f4:	dd400517 	ldw	r21,20(sp)
 40053f8:	dd000417 	ldw	r20,16(sp)
 40053fc:	dcc00317 	ldw	r19,12(sp)
 4005400:	dc800217 	ldw	r18,8(sp)
 4005404:	dc400117 	ldw	r17,4(sp)
 4005408:	dc000017 	ldw	r16,0(sp)
 400540c:	dec00904 	addi	sp,sp,36
 4005410:	f800283a 	ret
 4005414:	002f883a 	mov	r23,zero
 4005418:	003ff206 	br	40053e4 <__alt_data_end+0xff0053e4>

0400541c <_fwalk_reent>:
 400541c:	defff704 	addi	sp,sp,-36
 4005420:	dd000415 	stw	r20,16(sp)
 4005424:	dfc00815 	stw	ra,32(sp)
 4005428:	ddc00715 	stw	r23,28(sp)
 400542c:	dd800615 	stw	r22,24(sp)
 4005430:	dd400515 	stw	r21,20(sp)
 4005434:	dcc00315 	stw	r19,12(sp)
 4005438:	dc800215 	stw	r18,8(sp)
 400543c:	dc400115 	stw	r17,4(sp)
 4005440:	dc000015 	stw	r16,0(sp)
 4005444:	2500b804 	addi	r20,r4,736
 4005448:	a0002326 	beq	r20,zero,40054d8 <_fwalk_reent+0xbc>
 400544c:	282b883a 	mov	r21,r5
 4005450:	2027883a 	mov	r19,r4
 4005454:	002f883a 	mov	r23,zero
 4005458:	05800044 	movi	r22,1
 400545c:	04bfffc4 	movi	r18,-1
 4005460:	a4400117 	ldw	r17,4(r20)
 4005464:	a4000217 	ldw	r16,8(r20)
 4005468:	8c7fffc4 	addi	r17,r17,-1
 400546c:	88000c16 	blt	r17,zero,40054a0 <_fwalk_reent+0x84>
 4005470:	84000304 	addi	r16,r16,12
 4005474:	8080000b 	ldhu	r2,0(r16)
 4005478:	8c7fffc4 	addi	r17,r17,-1
 400547c:	817ffd04 	addi	r5,r16,-12
 4005480:	b080052e 	bgeu	r22,r2,4005498 <_fwalk_reent+0x7c>
 4005484:	8080008f 	ldh	r2,2(r16)
 4005488:	9809883a 	mov	r4,r19
 400548c:	14800226 	beq	r2,r18,4005498 <_fwalk_reent+0x7c>
 4005490:	a83ee83a 	callr	r21
 4005494:	b8aeb03a 	or	r23,r23,r2
 4005498:	84001a04 	addi	r16,r16,104
 400549c:	8cbff51e 	bne	r17,r18,4005474 <__alt_data_end+0xff005474>
 40054a0:	a5000017 	ldw	r20,0(r20)
 40054a4:	a03fee1e 	bne	r20,zero,4005460 <__alt_data_end+0xff005460>
 40054a8:	b805883a 	mov	r2,r23
 40054ac:	dfc00817 	ldw	ra,32(sp)
 40054b0:	ddc00717 	ldw	r23,28(sp)
 40054b4:	dd800617 	ldw	r22,24(sp)
 40054b8:	dd400517 	ldw	r21,20(sp)
 40054bc:	dd000417 	ldw	r20,16(sp)
 40054c0:	dcc00317 	ldw	r19,12(sp)
 40054c4:	dc800217 	ldw	r18,8(sp)
 40054c8:	dc400117 	ldw	r17,4(sp)
 40054cc:	dc000017 	ldw	r16,0(sp)
 40054d0:	dec00904 	addi	sp,sp,36
 40054d4:	f800283a 	ret
 40054d8:	002f883a 	mov	r23,zero
 40054dc:	003ff206 	br	40054a8 <__alt_data_end+0xff0054a8>

040054e0 <_setlocale_r>:
 40054e0:	30001b26 	beq	r6,zero,4005550 <_setlocale_r+0x70>
 40054e4:	01410074 	movhi	r5,1025
 40054e8:	defffe04 	addi	sp,sp,-8
 40054ec:	297f2b04 	addi	r5,r5,-852
 40054f0:	3009883a 	mov	r4,r6
 40054f4:	dc000015 	stw	r16,0(sp)
 40054f8:	dfc00115 	stw	ra,4(sp)
 40054fc:	3021883a 	mov	r16,r6
 4005500:	4007d000 	call	4007d00 <strcmp>
 4005504:	1000061e 	bne	r2,zero,4005520 <_setlocale_r+0x40>
 4005508:	00810074 	movhi	r2,1025
 400550c:	10bf2a04 	addi	r2,r2,-856
 4005510:	dfc00117 	ldw	ra,4(sp)
 4005514:	dc000017 	ldw	r16,0(sp)
 4005518:	dec00204 	addi	sp,sp,8
 400551c:	f800283a 	ret
 4005520:	01410074 	movhi	r5,1025
 4005524:	297f2a04 	addi	r5,r5,-856
 4005528:	8009883a 	mov	r4,r16
 400552c:	4007d000 	call	4007d00 <strcmp>
 4005530:	103ff526 	beq	r2,zero,4005508 <__alt_data_end+0xff005508>
 4005534:	01410074 	movhi	r5,1025
 4005538:	297f1504 	addi	r5,r5,-940
 400553c:	8009883a 	mov	r4,r16
 4005540:	4007d000 	call	4007d00 <strcmp>
 4005544:	103ff026 	beq	r2,zero,4005508 <__alt_data_end+0xff005508>
 4005548:	0005883a 	mov	r2,zero
 400554c:	003ff006 	br	4005510 <__alt_data_end+0xff005510>
 4005550:	00810074 	movhi	r2,1025
 4005554:	10bf2a04 	addi	r2,r2,-856
 4005558:	f800283a 	ret

0400555c <__locale_charset>:
 400555c:	00810074 	movhi	r2,1025
 4005560:	1080de04 	addi	r2,r2,888
 4005564:	f800283a 	ret

04005568 <__locale_mb_cur_max>:
 4005568:	00810074 	movhi	r2,1025
 400556c:	10868104 	addi	r2,r2,6660
 4005570:	10800017 	ldw	r2,0(r2)
 4005574:	f800283a 	ret

04005578 <__locale_msgcharset>:
 4005578:	00810074 	movhi	r2,1025
 400557c:	1080d604 	addi	r2,r2,856
 4005580:	f800283a 	ret

04005584 <__locale_cjk_lang>:
 4005584:	0005883a 	mov	r2,zero
 4005588:	f800283a 	ret

0400558c <_localeconv_r>:
 400558c:	00810074 	movhi	r2,1025
 4005590:	1080e604 	addi	r2,r2,920
 4005594:	f800283a 	ret

04005598 <setlocale>:
 4005598:	00810074 	movhi	r2,1025
 400559c:	10868004 	addi	r2,r2,6656
 40055a0:	280d883a 	mov	r6,r5
 40055a4:	200b883a 	mov	r5,r4
 40055a8:	11000017 	ldw	r4,0(r2)
 40055ac:	40054e01 	jmpi	40054e0 <_setlocale_r>

040055b0 <localeconv>:
 40055b0:	00810074 	movhi	r2,1025
 40055b4:	1080e604 	addi	r2,r2,920
 40055b8:	f800283a 	ret

040055bc <__smakebuf_r>:
 40055bc:	2880030b 	ldhu	r2,12(r5)
 40055c0:	10c0008c 	andi	r3,r2,2
 40055c4:	1800411e 	bne	r3,zero,40056cc <__smakebuf_r+0x110>
 40055c8:	deffec04 	addi	sp,sp,-80
 40055cc:	dc000f15 	stw	r16,60(sp)
 40055d0:	2821883a 	mov	r16,r5
 40055d4:	2940038f 	ldh	r5,14(r5)
 40055d8:	dc401015 	stw	r17,64(sp)
 40055dc:	dfc01315 	stw	ra,76(sp)
 40055e0:	dcc01215 	stw	r19,72(sp)
 40055e4:	dc801115 	stw	r18,68(sp)
 40055e8:	2023883a 	mov	r17,r4
 40055ec:	28001c16 	blt	r5,zero,4005660 <__smakebuf_r+0xa4>
 40055f0:	d80d883a 	mov	r6,sp
 40055f4:	4009a000 	call	4009a00 <_fstat_r>
 40055f8:	10001816 	blt	r2,zero,400565c <__smakebuf_r+0xa0>
 40055fc:	d8800117 	ldw	r2,4(sp)
 4005600:	00e00014 	movui	r3,32768
 4005604:	10bc000c 	andi	r2,r2,61440
 4005608:	14c80020 	cmpeqi	r19,r2,8192
 400560c:	10c03726 	beq	r2,r3,40056ec <__smakebuf_r+0x130>
 4005610:	80c0030b 	ldhu	r3,12(r16)
 4005614:	18c20014 	ori	r3,r3,2048
 4005618:	80c0030d 	sth	r3,12(r16)
 400561c:	00c80004 	movi	r3,8192
 4005620:	10c0521e 	bne	r2,r3,400576c <__smakebuf_r+0x1b0>
 4005624:	8140038f 	ldh	r5,14(r16)
 4005628:	8809883a 	mov	r4,r17
 400562c:	4009a5c0 	call	4009a5c <_isatty_r>
 4005630:	10004c26 	beq	r2,zero,4005764 <__smakebuf_r+0x1a8>
 4005634:	8080030b 	ldhu	r2,12(r16)
 4005638:	80c010c4 	addi	r3,r16,67
 400563c:	80c00015 	stw	r3,0(r16)
 4005640:	10800054 	ori	r2,r2,1
 4005644:	8080030d 	sth	r2,12(r16)
 4005648:	00800044 	movi	r2,1
 400564c:	80c00415 	stw	r3,16(r16)
 4005650:	80800515 	stw	r2,20(r16)
 4005654:	04810004 	movi	r18,1024
 4005658:	00000706 	br	4005678 <__smakebuf_r+0xbc>
 400565c:	8080030b 	ldhu	r2,12(r16)
 4005660:	10c0200c 	andi	r3,r2,128
 4005664:	18001f1e 	bne	r3,zero,40056e4 <__smakebuf_r+0x128>
 4005668:	04810004 	movi	r18,1024
 400566c:	10820014 	ori	r2,r2,2048
 4005670:	8080030d 	sth	r2,12(r16)
 4005674:	0027883a 	mov	r19,zero
 4005678:	900b883a 	mov	r5,r18
 400567c:	8809883a 	mov	r4,r17
 4005680:	40057780 	call	4005778 <_malloc_r>
 4005684:	10002c26 	beq	r2,zero,4005738 <__smakebuf_r+0x17c>
 4005688:	80c0030b 	ldhu	r3,12(r16)
 400568c:	01010034 	movhi	r4,1024
 4005690:	2111b404 	addi	r4,r4,18128
 4005694:	89000f15 	stw	r4,60(r17)
 4005698:	18c02014 	ori	r3,r3,128
 400569c:	80c0030d 	sth	r3,12(r16)
 40056a0:	80800015 	stw	r2,0(r16)
 40056a4:	80800415 	stw	r2,16(r16)
 40056a8:	84800515 	stw	r18,20(r16)
 40056ac:	98001a1e 	bne	r19,zero,4005718 <__smakebuf_r+0x15c>
 40056b0:	dfc01317 	ldw	ra,76(sp)
 40056b4:	dcc01217 	ldw	r19,72(sp)
 40056b8:	dc801117 	ldw	r18,68(sp)
 40056bc:	dc401017 	ldw	r17,64(sp)
 40056c0:	dc000f17 	ldw	r16,60(sp)
 40056c4:	dec01404 	addi	sp,sp,80
 40056c8:	f800283a 	ret
 40056cc:	288010c4 	addi	r2,r5,67
 40056d0:	28800015 	stw	r2,0(r5)
 40056d4:	28800415 	stw	r2,16(r5)
 40056d8:	00800044 	movi	r2,1
 40056dc:	28800515 	stw	r2,20(r5)
 40056e0:	f800283a 	ret
 40056e4:	04801004 	movi	r18,64
 40056e8:	003fe006 	br	400566c <__alt_data_end+0xff00566c>
 40056ec:	81000a17 	ldw	r4,40(r16)
 40056f0:	00c10034 	movhi	r3,1024
 40056f4:	18df2704 	addi	r3,r3,31900
 40056f8:	20ffc51e 	bne	r4,r3,4005610 <__alt_data_end+0xff005610>
 40056fc:	8080030b 	ldhu	r2,12(r16)
 4005700:	04810004 	movi	r18,1024
 4005704:	84801315 	stw	r18,76(r16)
 4005708:	1484b03a 	or	r2,r2,r18
 400570c:	8080030d 	sth	r2,12(r16)
 4005710:	0027883a 	mov	r19,zero
 4005714:	003fd806 	br	4005678 <__alt_data_end+0xff005678>
 4005718:	8140038f 	ldh	r5,14(r16)
 400571c:	8809883a 	mov	r4,r17
 4005720:	4009a5c0 	call	4009a5c <_isatty_r>
 4005724:	103fe226 	beq	r2,zero,40056b0 <__alt_data_end+0xff0056b0>
 4005728:	8080030b 	ldhu	r2,12(r16)
 400572c:	10800054 	ori	r2,r2,1
 4005730:	8080030d 	sth	r2,12(r16)
 4005734:	003fde06 	br	40056b0 <__alt_data_end+0xff0056b0>
 4005738:	8080030b 	ldhu	r2,12(r16)
 400573c:	10c0800c 	andi	r3,r2,512
 4005740:	183fdb1e 	bne	r3,zero,40056b0 <__alt_data_end+0xff0056b0>
 4005744:	10800094 	ori	r2,r2,2
 4005748:	80c010c4 	addi	r3,r16,67
 400574c:	8080030d 	sth	r2,12(r16)
 4005750:	00800044 	movi	r2,1
 4005754:	80c00015 	stw	r3,0(r16)
 4005758:	80c00415 	stw	r3,16(r16)
 400575c:	80800515 	stw	r2,20(r16)
 4005760:	003fd306 	br	40056b0 <__alt_data_end+0xff0056b0>
 4005764:	04810004 	movi	r18,1024
 4005768:	003fc306 	br	4005678 <__alt_data_end+0xff005678>
 400576c:	0027883a 	mov	r19,zero
 4005770:	04810004 	movi	r18,1024
 4005774:	003fc006 	br	4005678 <__alt_data_end+0xff005678>

04005778 <_malloc_r>:
 4005778:	defff504 	addi	sp,sp,-44
 400577c:	dc800315 	stw	r18,12(sp)
 4005780:	dfc00a15 	stw	ra,40(sp)
 4005784:	df000915 	stw	fp,36(sp)
 4005788:	ddc00815 	stw	r23,32(sp)
 400578c:	dd800715 	stw	r22,28(sp)
 4005790:	dd400615 	stw	r21,24(sp)
 4005794:	dd000515 	stw	r20,20(sp)
 4005798:	dcc00415 	stw	r19,16(sp)
 400579c:	dc400215 	stw	r17,8(sp)
 40057a0:	dc000115 	stw	r16,4(sp)
 40057a4:	288002c4 	addi	r2,r5,11
 40057a8:	00c00584 	movi	r3,22
 40057ac:	2025883a 	mov	r18,r4
 40057b0:	18807f2e 	bgeu	r3,r2,40059b0 <_malloc_r+0x238>
 40057b4:	047ffe04 	movi	r17,-8
 40057b8:	1462703a 	and	r17,r2,r17
 40057bc:	8800a316 	blt	r17,zero,4005a4c <_malloc_r+0x2d4>
 40057c0:	8940a236 	bltu	r17,r5,4005a4c <_malloc_r+0x2d4>
 40057c4:	400d5e80 	call	400d5e8 <__malloc_lock>
 40057c8:	00807dc4 	movi	r2,503
 40057cc:	1441e92e 	bgeu	r2,r17,4005f74 <_malloc_r+0x7fc>
 40057d0:	8804d27a 	srli	r2,r17,9
 40057d4:	1000a126 	beq	r2,zero,4005a5c <_malloc_r+0x2e4>
 40057d8:	00c00104 	movi	r3,4
 40057dc:	18811e36 	bltu	r3,r2,4005c58 <_malloc_r+0x4e0>
 40057e0:	8804d1ba 	srli	r2,r17,6
 40057e4:	12000e44 	addi	r8,r2,57
 40057e8:	11c00e04 	addi	r7,r2,56
 40057ec:	4209883a 	add	r4,r8,r8
 40057f0:	04c10074 	movhi	r19,1025
 40057f4:	2109883a 	add	r4,r4,r4
 40057f8:	9cc0f404 	addi	r19,r19,976
 40057fc:	2109883a 	add	r4,r4,r4
 4005800:	9909883a 	add	r4,r19,r4
 4005804:	24000117 	ldw	r16,4(r4)
 4005808:	213ffe04 	addi	r4,r4,-8
 400580c:	24009726 	beq	r4,r16,4005a6c <_malloc_r+0x2f4>
 4005810:	80800117 	ldw	r2,4(r16)
 4005814:	01bfff04 	movi	r6,-4
 4005818:	014003c4 	movi	r5,15
 400581c:	1184703a 	and	r2,r2,r6
 4005820:	1447c83a 	sub	r3,r2,r17
 4005824:	28c00716 	blt	r5,r3,4005844 <_malloc_r+0xcc>
 4005828:	1800920e 	bge	r3,zero,4005a74 <_malloc_r+0x2fc>
 400582c:	84000317 	ldw	r16,12(r16)
 4005830:	24008e26 	beq	r4,r16,4005a6c <_malloc_r+0x2f4>
 4005834:	80800117 	ldw	r2,4(r16)
 4005838:	1184703a 	and	r2,r2,r6
 400583c:	1447c83a 	sub	r3,r2,r17
 4005840:	28fff90e 	bge	r5,r3,4005828 <__alt_data_end+0xff005828>
 4005844:	3809883a 	mov	r4,r7
 4005848:	01810074 	movhi	r6,1025
 400584c:	9c000417 	ldw	r16,16(r19)
 4005850:	3180f404 	addi	r6,r6,976
 4005854:	32000204 	addi	r8,r6,8
 4005858:	82013426 	beq	r16,r8,4005d2c <_malloc_r+0x5b4>
 400585c:	80c00117 	ldw	r3,4(r16)
 4005860:	00bfff04 	movi	r2,-4
 4005864:	188e703a 	and	r7,r3,r2
 4005868:	3c45c83a 	sub	r2,r7,r17
 400586c:	00c003c4 	movi	r3,15
 4005870:	18811f16 	blt	r3,r2,4005cf0 <_malloc_r+0x578>
 4005874:	32000515 	stw	r8,20(r6)
 4005878:	32000415 	stw	r8,16(r6)
 400587c:	10007f0e 	bge	r2,zero,4005a7c <_malloc_r+0x304>
 4005880:	00807fc4 	movi	r2,511
 4005884:	11c0fd36 	bltu	r2,r7,4005c7c <_malloc_r+0x504>
 4005888:	3806d0fa 	srli	r3,r7,3
 400588c:	01c00044 	movi	r7,1
 4005890:	30800117 	ldw	r2,4(r6)
 4005894:	19400044 	addi	r5,r3,1
 4005898:	294b883a 	add	r5,r5,r5
 400589c:	1807d0ba 	srai	r3,r3,2
 40058a0:	294b883a 	add	r5,r5,r5
 40058a4:	294b883a 	add	r5,r5,r5
 40058a8:	298b883a 	add	r5,r5,r6
 40058ac:	38c6983a 	sll	r3,r7,r3
 40058b0:	29c00017 	ldw	r7,0(r5)
 40058b4:	2a7ffe04 	addi	r9,r5,-8
 40058b8:	1886b03a 	or	r3,r3,r2
 40058bc:	82400315 	stw	r9,12(r16)
 40058c0:	81c00215 	stw	r7,8(r16)
 40058c4:	30c00115 	stw	r3,4(r6)
 40058c8:	2c000015 	stw	r16,0(r5)
 40058cc:	3c000315 	stw	r16,12(r7)
 40058d0:	2005d0ba 	srai	r2,r4,2
 40058d4:	01400044 	movi	r5,1
 40058d8:	288a983a 	sll	r5,r5,r2
 40058dc:	19406f36 	bltu	r3,r5,4005a9c <_malloc_r+0x324>
 40058e0:	28c4703a 	and	r2,r5,r3
 40058e4:	10000a1e 	bne	r2,zero,4005910 <_malloc_r+0x198>
 40058e8:	00bfff04 	movi	r2,-4
 40058ec:	294b883a 	add	r5,r5,r5
 40058f0:	2088703a 	and	r4,r4,r2
 40058f4:	28c4703a 	and	r2,r5,r3
 40058f8:	21000104 	addi	r4,r4,4
 40058fc:	1000041e 	bne	r2,zero,4005910 <_malloc_r+0x198>
 4005900:	294b883a 	add	r5,r5,r5
 4005904:	28c4703a 	and	r2,r5,r3
 4005908:	21000104 	addi	r4,r4,4
 400590c:	103ffc26 	beq	r2,zero,4005900 <__alt_data_end+0xff005900>
 4005910:	02bfff04 	movi	r10,-4
 4005914:	024003c4 	movi	r9,15
 4005918:	21800044 	addi	r6,r4,1
 400591c:	318d883a 	add	r6,r6,r6
 4005920:	318d883a 	add	r6,r6,r6
 4005924:	318d883a 	add	r6,r6,r6
 4005928:	998d883a 	add	r6,r19,r6
 400592c:	333ffe04 	addi	r12,r6,-8
 4005930:	2017883a 	mov	r11,r4
 4005934:	31800104 	addi	r6,r6,4
 4005938:	34000017 	ldw	r16,0(r6)
 400593c:	31fffd04 	addi	r7,r6,-12
 4005940:	81c0041e 	bne	r16,r7,4005954 <_malloc_r+0x1dc>
 4005944:	0000fb06 	br	4005d34 <_malloc_r+0x5bc>
 4005948:	1801030e 	bge	r3,zero,4005d58 <_malloc_r+0x5e0>
 400594c:	84000317 	ldw	r16,12(r16)
 4005950:	81c0f826 	beq	r16,r7,4005d34 <_malloc_r+0x5bc>
 4005954:	80800117 	ldw	r2,4(r16)
 4005958:	1284703a 	and	r2,r2,r10
 400595c:	1447c83a 	sub	r3,r2,r17
 4005960:	48fff90e 	bge	r9,r3,4005948 <__alt_data_end+0xff005948>
 4005964:	80800317 	ldw	r2,12(r16)
 4005968:	81000217 	ldw	r4,8(r16)
 400596c:	89400054 	ori	r5,r17,1
 4005970:	81400115 	stw	r5,4(r16)
 4005974:	20800315 	stw	r2,12(r4)
 4005978:	11000215 	stw	r4,8(r2)
 400597c:	8463883a 	add	r17,r16,r17
 4005980:	9c400515 	stw	r17,20(r19)
 4005984:	9c400415 	stw	r17,16(r19)
 4005988:	18800054 	ori	r2,r3,1
 400598c:	88800115 	stw	r2,4(r17)
 4005990:	8a000315 	stw	r8,12(r17)
 4005994:	8a000215 	stw	r8,8(r17)
 4005998:	88e3883a 	add	r17,r17,r3
 400599c:	88c00015 	stw	r3,0(r17)
 40059a0:	9009883a 	mov	r4,r18
 40059a4:	400d60c0 	call	400d60c <__malloc_unlock>
 40059a8:	80800204 	addi	r2,r16,8
 40059ac:	00001b06 	br	4005a1c <_malloc_r+0x2a4>
 40059b0:	04400404 	movi	r17,16
 40059b4:	89402536 	bltu	r17,r5,4005a4c <_malloc_r+0x2d4>
 40059b8:	400d5e80 	call	400d5e8 <__malloc_lock>
 40059bc:	00800184 	movi	r2,6
 40059c0:	01000084 	movi	r4,2
 40059c4:	04c10074 	movhi	r19,1025
 40059c8:	1085883a 	add	r2,r2,r2
 40059cc:	9cc0f404 	addi	r19,r19,976
 40059d0:	1085883a 	add	r2,r2,r2
 40059d4:	9885883a 	add	r2,r19,r2
 40059d8:	14000117 	ldw	r16,4(r2)
 40059dc:	10fffe04 	addi	r3,r2,-8
 40059e0:	80c0d926 	beq	r16,r3,4005d48 <_malloc_r+0x5d0>
 40059e4:	80c00117 	ldw	r3,4(r16)
 40059e8:	81000317 	ldw	r4,12(r16)
 40059ec:	00bfff04 	movi	r2,-4
 40059f0:	1884703a 	and	r2,r3,r2
 40059f4:	81400217 	ldw	r5,8(r16)
 40059f8:	8085883a 	add	r2,r16,r2
 40059fc:	10c00117 	ldw	r3,4(r2)
 4005a00:	29000315 	stw	r4,12(r5)
 4005a04:	21400215 	stw	r5,8(r4)
 4005a08:	18c00054 	ori	r3,r3,1
 4005a0c:	10c00115 	stw	r3,4(r2)
 4005a10:	9009883a 	mov	r4,r18
 4005a14:	400d60c0 	call	400d60c <__malloc_unlock>
 4005a18:	80800204 	addi	r2,r16,8
 4005a1c:	dfc00a17 	ldw	ra,40(sp)
 4005a20:	df000917 	ldw	fp,36(sp)
 4005a24:	ddc00817 	ldw	r23,32(sp)
 4005a28:	dd800717 	ldw	r22,28(sp)
 4005a2c:	dd400617 	ldw	r21,24(sp)
 4005a30:	dd000517 	ldw	r20,20(sp)
 4005a34:	dcc00417 	ldw	r19,16(sp)
 4005a38:	dc800317 	ldw	r18,12(sp)
 4005a3c:	dc400217 	ldw	r17,8(sp)
 4005a40:	dc000117 	ldw	r16,4(sp)
 4005a44:	dec00b04 	addi	sp,sp,44
 4005a48:	f800283a 	ret
 4005a4c:	00800304 	movi	r2,12
 4005a50:	90800015 	stw	r2,0(r18)
 4005a54:	0005883a 	mov	r2,zero
 4005a58:	003ff006 	br	4005a1c <__alt_data_end+0xff005a1c>
 4005a5c:	01002004 	movi	r4,128
 4005a60:	02001004 	movi	r8,64
 4005a64:	01c00fc4 	movi	r7,63
 4005a68:	003f6106 	br	40057f0 <__alt_data_end+0xff0057f0>
 4005a6c:	4009883a 	mov	r4,r8
 4005a70:	003f7506 	br	4005848 <__alt_data_end+0xff005848>
 4005a74:	81000317 	ldw	r4,12(r16)
 4005a78:	003fde06 	br	40059f4 <__alt_data_end+0xff0059f4>
 4005a7c:	81c5883a 	add	r2,r16,r7
 4005a80:	11400117 	ldw	r5,4(r2)
 4005a84:	9009883a 	mov	r4,r18
 4005a88:	29400054 	ori	r5,r5,1
 4005a8c:	11400115 	stw	r5,4(r2)
 4005a90:	400d60c0 	call	400d60c <__malloc_unlock>
 4005a94:	80800204 	addi	r2,r16,8
 4005a98:	003fe006 	br	4005a1c <__alt_data_end+0xff005a1c>
 4005a9c:	9c000217 	ldw	r16,8(r19)
 4005aa0:	00bfff04 	movi	r2,-4
 4005aa4:	85800117 	ldw	r22,4(r16)
 4005aa8:	b0ac703a 	and	r22,r22,r2
 4005aac:	b4400336 	bltu	r22,r17,4005abc <_malloc_r+0x344>
 4005ab0:	b445c83a 	sub	r2,r22,r17
 4005ab4:	00c003c4 	movi	r3,15
 4005ab8:	18805d16 	blt	r3,r2,4005c30 <_malloc_r+0x4b8>
 4005abc:	05c10074 	movhi	r23,1025
 4005ac0:	00810074 	movhi	r2,1025
 4005ac4:	108d5a04 	addi	r2,r2,13672
 4005ac8:	bdc68204 	addi	r23,r23,6664
 4005acc:	15400017 	ldw	r21,0(r2)
 4005ad0:	b8c00017 	ldw	r3,0(r23)
 4005ad4:	00bfffc4 	movi	r2,-1
 4005ad8:	858d883a 	add	r6,r16,r22
 4005adc:	8d6b883a 	add	r21,r17,r21
 4005ae0:	1880ea26 	beq	r3,r2,4005e8c <_malloc_r+0x714>
 4005ae4:	ad4403c4 	addi	r21,r21,4111
 4005ae8:	00bc0004 	movi	r2,-4096
 4005aec:	a8aa703a 	and	r21,r21,r2
 4005af0:	a80b883a 	mov	r5,r21
 4005af4:	9009883a 	mov	r4,r18
 4005af8:	d9800015 	stw	r6,0(sp)
 4005afc:	4007b700 	call	4007b70 <_sbrk_r>
 4005b00:	1029883a 	mov	r20,r2
 4005b04:	00bfffc4 	movi	r2,-1
 4005b08:	d9800017 	ldw	r6,0(sp)
 4005b0c:	a080e826 	beq	r20,r2,4005eb0 <_malloc_r+0x738>
 4005b10:	a180a636 	bltu	r20,r6,4005dac <_malloc_r+0x634>
 4005b14:	07010074 	movhi	fp,1025
 4005b18:	e70d6304 	addi	fp,fp,13708
 4005b1c:	e0800017 	ldw	r2,0(fp)
 4005b20:	a887883a 	add	r3,r21,r2
 4005b24:	e0c00015 	stw	r3,0(fp)
 4005b28:	3500e626 	beq	r6,r20,4005ec4 <_malloc_r+0x74c>
 4005b2c:	b9000017 	ldw	r4,0(r23)
 4005b30:	00bfffc4 	movi	r2,-1
 4005b34:	2080ee26 	beq	r4,r2,4005ef0 <_malloc_r+0x778>
 4005b38:	a185c83a 	sub	r2,r20,r6
 4005b3c:	10c5883a 	add	r2,r2,r3
 4005b40:	e0800015 	stw	r2,0(fp)
 4005b44:	a0c001cc 	andi	r3,r20,7
 4005b48:	1800bc26 	beq	r3,zero,4005e3c <_malloc_r+0x6c4>
 4005b4c:	a0e9c83a 	sub	r20,r20,r3
 4005b50:	00840204 	movi	r2,4104
 4005b54:	a5000204 	addi	r20,r20,8
 4005b58:	10c7c83a 	sub	r3,r2,r3
 4005b5c:	a545883a 	add	r2,r20,r21
 4005b60:	1083ffcc 	andi	r2,r2,4095
 4005b64:	18abc83a 	sub	r21,r3,r2
 4005b68:	a80b883a 	mov	r5,r21
 4005b6c:	9009883a 	mov	r4,r18
 4005b70:	4007b700 	call	4007b70 <_sbrk_r>
 4005b74:	00ffffc4 	movi	r3,-1
 4005b78:	10c0e126 	beq	r2,r3,4005f00 <_malloc_r+0x788>
 4005b7c:	1505c83a 	sub	r2,r2,r20
 4005b80:	1545883a 	add	r2,r2,r21
 4005b84:	10800054 	ori	r2,r2,1
 4005b88:	e0c00017 	ldw	r3,0(fp)
 4005b8c:	9d000215 	stw	r20,8(r19)
 4005b90:	a0800115 	stw	r2,4(r20)
 4005b94:	a8c7883a 	add	r3,r21,r3
 4005b98:	e0c00015 	stw	r3,0(fp)
 4005b9c:	84c00e26 	beq	r16,r19,4005bd8 <_malloc_r+0x460>
 4005ba0:	018003c4 	movi	r6,15
 4005ba4:	3580a72e 	bgeu	r6,r22,4005e44 <_malloc_r+0x6cc>
 4005ba8:	81400117 	ldw	r5,4(r16)
 4005bac:	013ffe04 	movi	r4,-8
 4005bb0:	b0bffd04 	addi	r2,r22,-12
 4005bb4:	1104703a 	and	r2,r2,r4
 4005bb8:	2900004c 	andi	r4,r5,1
 4005bbc:	2088b03a 	or	r4,r4,r2
 4005bc0:	81000115 	stw	r4,4(r16)
 4005bc4:	01400144 	movi	r5,5
 4005bc8:	8089883a 	add	r4,r16,r2
 4005bcc:	21400115 	stw	r5,4(r4)
 4005bd0:	21400215 	stw	r5,8(r4)
 4005bd4:	3080cd36 	bltu	r6,r2,4005f0c <_malloc_r+0x794>
 4005bd8:	00810074 	movhi	r2,1025
 4005bdc:	108d5904 	addi	r2,r2,13668
 4005be0:	11000017 	ldw	r4,0(r2)
 4005be4:	20c0012e 	bgeu	r4,r3,4005bec <_malloc_r+0x474>
 4005be8:	10c00015 	stw	r3,0(r2)
 4005bec:	00810074 	movhi	r2,1025
 4005bf0:	108d5804 	addi	r2,r2,13664
 4005bf4:	11000017 	ldw	r4,0(r2)
 4005bf8:	9c000217 	ldw	r16,8(r19)
 4005bfc:	20c0012e 	bgeu	r4,r3,4005c04 <_malloc_r+0x48c>
 4005c00:	10c00015 	stw	r3,0(r2)
 4005c04:	80c00117 	ldw	r3,4(r16)
 4005c08:	00bfff04 	movi	r2,-4
 4005c0c:	1886703a 	and	r3,r3,r2
 4005c10:	1c45c83a 	sub	r2,r3,r17
 4005c14:	1c400236 	bltu	r3,r17,4005c20 <_malloc_r+0x4a8>
 4005c18:	00c003c4 	movi	r3,15
 4005c1c:	18800416 	blt	r3,r2,4005c30 <_malloc_r+0x4b8>
 4005c20:	9009883a 	mov	r4,r18
 4005c24:	400d60c0 	call	400d60c <__malloc_unlock>
 4005c28:	0005883a 	mov	r2,zero
 4005c2c:	003f7b06 	br	4005a1c <__alt_data_end+0xff005a1c>
 4005c30:	88c00054 	ori	r3,r17,1
 4005c34:	80c00115 	stw	r3,4(r16)
 4005c38:	8463883a 	add	r17,r16,r17
 4005c3c:	10800054 	ori	r2,r2,1
 4005c40:	9c400215 	stw	r17,8(r19)
 4005c44:	88800115 	stw	r2,4(r17)
 4005c48:	9009883a 	mov	r4,r18
 4005c4c:	400d60c0 	call	400d60c <__malloc_unlock>
 4005c50:	80800204 	addi	r2,r16,8
 4005c54:	003f7106 	br	4005a1c <__alt_data_end+0xff005a1c>
 4005c58:	00c00504 	movi	r3,20
 4005c5c:	18804a2e 	bgeu	r3,r2,4005d88 <_malloc_r+0x610>
 4005c60:	00c01504 	movi	r3,84
 4005c64:	18806e36 	bltu	r3,r2,4005e20 <_malloc_r+0x6a8>
 4005c68:	8804d33a 	srli	r2,r17,12
 4005c6c:	12001bc4 	addi	r8,r2,111
 4005c70:	11c01b84 	addi	r7,r2,110
 4005c74:	4209883a 	add	r4,r8,r8
 4005c78:	003edd06 	br	40057f0 <__alt_data_end+0xff0057f0>
 4005c7c:	3804d27a 	srli	r2,r7,9
 4005c80:	00c00104 	movi	r3,4
 4005c84:	1880442e 	bgeu	r3,r2,4005d98 <_malloc_r+0x620>
 4005c88:	00c00504 	movi	r3,20
 4005c8c:	18808136 	bltu	r3,r2,4005e94 <_malloc_r+0x71c>
 4005c90:	11401704 	addi	r5,r2,92
 4005c94:	10c016c4 	addi	r3,r2,91
 4005c98:	294b883a 	add	r5,r5,r5
 4005c9c:	294b883a 	add	r5,r5,r5
 4005ca0:	294b883a 	add	r5,r5,r5
 4005ca4:	994b883a 	add	r5,r19,r5
 4005ca8:	28800017 	ldw	r2,0(r5)
 4005cac:	01810074 	movhi	r6,1025
 4005cb0:	297ffe04 	addi	r5,r5,-8
 4005cb4:	3180f404 	addi	r6,r6,976
 4005cb8:	28806526 	beq	r5,r2,4005e50 <_malloc_r+0x6d8>
 4005cbc:	01bfff04 	movi	r6,-4
 4005cc0:	10c00117 	ldw	r3,4(r2)
 4005cc4:	1986703a 	and	r3,r3,r6
 4005cc8:	38c0022e 	bgeu	r7,r3,4005cd4 <_malloc_r+0x55c>
 4005ccc:	10800217 	ldw	r2,8(r2)
 4005cd0:	28bffb1e 	bne	r5,r2,4005cc0 <__alt_data_end+0xff005cc0>
 4005cd4:	11400317 	ldw	r5,12(r2)
 4005cd8:	98c00117 	ldw	r3,4(r19)
 4005cdc:	81400315 	stw	r5,12(r16)
 4005ce0:	80800215 	stw	r2,8(r16)
 4005ce4:	2c000215 	stw	r16,8(r5)
 4005ce8:	14000315 	stw	r16,12(r2)
 4005cec:	003ef806 	br	40058d0 <__alt_data_end+0xff0058d0>
 4005cf0:	88c00054 	ori	r3,r17,1
 4005cf4:	80c00115 	stw	r3,4(r16)
 4005cf8:	8463883a 	add	r17,r16,r17
 4005cfc:	34400515 	stw	r17,20(r6)
 4005d00:	34400415 	stw	r17,16(r6)
 4005d04:	10c00054 	ori	r3,r2,1
 4005d08:	8a000315 	stw	r8,12(r17)
 4005d0c:	8a000215 	stw	r8,8(r17)
 4005d10:	88c00115 	stw	r3,4(r17)
 4005d14:	88a3883a 	add	r17,r17,r2
 4005d18:	88800015 	stw	r2,0(r17)
 4005d1c:	9009883a 	mov	r4,r18
 4005d20:	400d60c0 	call	400d60c <__malloc_unlock>
 4005d24:	80800204 	addi	r2,r16,8
 4005d28:	003f3c06 	br	4005a1c <__alt_data_end+0xff005a1c>
 4005d2c:	30c00117 	ldw	r3,4(r6)
 4005d30:	003ee706 	br	40058d0 <__alt_data_end+0xff0058d0>
 4005d34:	5ac00044 	addi	r11,r11,1
 4005d38:	588000cc 	andi	r2,r11,3
 4005d3c:	31800204 	addi	r6,r6,8
 4005d40:	103efd1e 	bne	r2,zero,4005938 <__alt_data_end+0xff005938>
 4005d44:	00002406 	br	4005dd8 <_malloc_r+0x660>
 4005d48:	14000317 	ldw	r16,12(r2)
 4005d4c:	143f251e 	bne	r2,r16,40059e4 <__alt_data_end+0xff0059e4>
 4005d50:	21000084 	addi	r4,r4,2
 4005d54:	003ebc06 	br	4005848 <__alt_data_end+0xff005848>
 4005d58:	8085883a 	add	r2,r16,r2
 4005d5c:	10c00117 	ldw	r3,4(r2)
 4005d60:	81000317 	ldw	r4,12(r16)
 4005d64:	81400217 	ldw	r5,8(r16)
 4005d68:	18c00054 	ori	r3,r3,1
 4005d6c:	10c00115 	stw	r3,4(r2)
 4005d70:	29000315 	stw	r4,12(r5)
 4005d74:	21400215 	stw	r5,8(r4)
 4005d78:	9009883a 	mov	r4,r18
 4005d7c:	400d60c0 	call	400d60c <__malloc_unlock>
 4005d80:	80800204 	addi	r2,r16,8
 4005d84:	003f2506 	br	4005a1c <__alt_data_end+0xff005a1c>
 4005d88:	12001704 	addi	r8,r2,92
 4005d8c:	11c016c4 	addi	r7,r2,91
 4005d90:	4209883a 	add	r4,r8,r8
 4005d94:	003e9606 	br	40057f0 <__alt_data_end+0xff0057f0>
 4005d98:	3804d1ba 	srli	r2,r7,6
 4005d9c:	11400e44 	addi	r5,r2,57
 4005da0:	10c00e04 	addi	r3,r2,56
 4005da4:	294b883a 	add	r5,r5,r5
 4005da8:	003fbc06 	br	4005c9c <__alt_data_end+0xff005c9c>
 4005dac:	84ff5926 	beq	r16,r19,4005b14 <__alt_data_end+0xff005b14>
 4005db0:	00810074 	movhi	r2,1025
 4005db4:	1080f404 	addi	r2,r2,976
 4005db8:	14000217 	ldw	r16,8(r2)
 4005dbc:	00bfff04 	movi	r2,-4
 4005dc0:	80c00117 	ldw	r3,4(r16)
 4005dc4:	1886703a 	and	r3,r3,r2
 4005dc8:	003f9106 	br	4005c10 <__alt_data_end+0xff005c10>
 4005dcc:	60800217 	ldw	r2,8(r12)
 4005dd0:	213fffc4 	addi	r4,r4,-1
 4005dd4:	1300651e 	bne	r2,r12,4005f6c <_malloc_r+0x7f4>
 4005dd8:	208000cc 	andi	r2,r4,3
 4005ddc:	633ffe04 	addi	r12,r12,-8
 4005de0:	103ffa1e 	bne	r2,zero,4005dcc <__alt_data_end+0xff005dcc>
 4005de4:	98800117 	ldw	r2,4(r19)
 4005de8:	0146303a 	nor	r3,zero,r5
 4005dec:	1884703a 	and	r2,r3,r2
 4005df0:	98800115 	stw	r2,4(r19)
 4005df4:	294b883a 	add	r5,r5,r5
 4005df8:	117f2836 	bltu	r2,r5,4005a9c <__alt_data_end+0xff005a9c>
 4005dfc:	283f2726 	beq	r5,zero,4005a9c <__alt_data_end+0xff005a9c>
 4005e00:	2886703a 	and	r3,r5,r2
 4005e04:	5809883a 	mov	r4,r11
 4005e08:	183ec31e 	bne	r3,zero,4005918 <__alt_data_end+0xff005918>
 4005e0c:	294b883a 	add	r5,r5,r5
 4005e10:	2886703a 	and	r3,r5,r2
 4005e14:	21000104 	addi	r4,r4,4
 4005e18:	183ffc26 	beq	r3,zero,4005e0c <__alt_data_end+0xff005e0c>
 4005e1c:	003ebe06 	br	4005918 <__alt_data_end+0xff005918>
 4005e20:	00c05504 	movi	r3,340
 4005e24:	18801236 	bltu	r3,r2,4005e70 <_malloc_r+0x6f8>
 4005e28:	8804d3fa 	srli	r2,r17,15
 4005e2c:	12001e04 	addi	r8,r2,120
 4005e30:	11c01dc4 	addi	r7,r2,119
 4005e34:	4209883a 	add	r4,r8,r8
 4005e38:	003e6d06 	br	40057f0 <__alt_data_end+0xff0057f0>
 4005e3c:	00c40004 	movi	r3,4096
 4005e40:	003f4606 	br	4005b5c <__alt_data_end+0xff005b5c>
 4005e44:	00800044 	movi	r2,1
 4005e48:	a0800115 	stw	r2,4(r20)
 4005e4c:	003f7406 	br	4005c20 <__alt_data_end+0xff005c20>
 4005e50:	1805d0ba 	srai	r2,r3,2
 4005e54:	01c00044 	movi	r7,1
 4005e58:	30c00117 	ldw	r3,4(r6)
 4005e5c:	388e983a 	sll	r7,r7,r2
 4005e60:	2805883a 	mov	r2,r5
 4005e64:	38c6b03a 	or	r3,r7,r3
 4005e68:	30c00115 	stw	r3,4(r6)
 4005e6c:	003f9b06 	br	4005cdc <__alt_data_end+0xff005cdc>
 4005e70:	00c15504 	movi	r3,1364
 4005e74:	18801a36 	bltu	r3,r2,4005ee0 <_malloc_r+0x768>
 4005e78:	8804d4ba 	srli	r2,r17,18
 4005e7c:	12001f44 	addi	r8,r2,125
 4005e80:	11c01f04 	addi	r7,r2,124
 4005e84:	4209883a 	add	r4,r8,r8
 4005e88:	003e5906 	br	40057f0 <__alt_data_end+0xff0057f0>
 4005e8c:	ad400404 	addi	r21,r21,16
 4005e90:	003f1706 	br	4005af0 <__alt_data_end+0xff005af0>
 4005e94:	00c01504 	movi	r3,84
 4005e98:	18802336 	bltu	r3,r2,4005f28 <_malloc_r+0x7b0>
 4005e9c:	3804d33a 	srli	r2,r7,12
 4005ea0:	11401bc4 	addi	r5,r2,111
 4005ea4:	10c01b84 	addi	r3,r2,110
 4005ea8:	294b883a 	add	r5,r5,r5
 4005eac:	003f7b06 	br	4005c9c <__alt_data_end+0xff005c9c>
 4005eb0:	9c000217 	ldw	r16,8(r19)
 4005eb4:	00bfff04 	movi	r2,-4
 4005eb8:	80c00117 	ldw	r3,4(r16)
 4005ebc:	1886703a 	and	r3,r3,r2
 4005ec0:	003f5306 	br	4005c10 <__alt_data_end+0xff005c10>
 4005ec4:	3083ffcc 	andi	r2,r6,4095
 4005ec8:	103f181e 	bne	r2,zero,4005b2c <__alt_data_end+0xff005b2c>
 4005ecc:	99000217 	ldw	r4,8(r19)
 4005ed0:	b545883a 	add	r2,r22,r21
 4005ed4:	10800054 	ori	r2,r2,1
 4005ed8:	20800115 	stw	r2,4(r4)
 4005edc:	003f3e06 	br	4005bd8 <__alt_data_end+0xff005bd8>
 4005ee0:	01003f84 	movi	r4,254
 4005ee4:	02001fc4 	movi	r8,127
 4005ee8:	01c01f84 	movi	r7,126
 4005eec:	003e4006 	br	40057f0 <__alt_data_end+0xff0057f0>
 4005ef0:	00810074 	movhi	r2,1025
 4005ef4:	10868204 	addi	r2,r2,6664
 4005ef8:	15000015 	stw	r20,0(r2)
 4005efc:	003f1106 	br	4005b44 <__alt_data_end+0xff005b44>
 4005f00:	00800044 	movi	r2,1
 4005f04:	002b883a 	mov	r21,zero
 4005f08:	003f1f06 	br	4005b88 <__alt_data_end+0xff005b88>
 4005f0c:	81400204 	addi	r5,r16,8
 4005f10:	9009883a 	mov	r4,r18
 4005f14:	4004b8c0 	call	4004b8c <_free_r>
 4005f18:	00810074 	movhi	r2,1025
 4005f1c:	108d6304 	addi	r2,r2,13708
 4005f20:	10c00017 	ldw	r3,0(r2)
 4005f24:	003f2c06 	br	4005bd8 <__alt_data_end+0xff005bd8>
 4005f28:	00c05504 	movi	r3,340
 4005f2c:	18800536 	bltu	r3,r2,4005f44 <_malloc_r+0x7cc>
 4005f30:	3804d3fa 	srli	r2,r7,15
 4005f34:	11401e04 	addi	r5,r2,120
 4005f38:	10c01dc4 	addi	r3,r2,119
 4005f3c:	294b883a 	add	r5,r5,r5
 4005f40:	003f5606 	br	4005c9c <__alt_data_end+0xff005c9c>
 4005f44:	00c15504 	movi	r3,1364
 4005f48:	18800536 	bltu	r3,r2,4005f60 <_malloc_r+0x7e8>
 4005f4c:	3804d4ba 	srli	r2,r7,18
 4005f50:	11401f44 	addi	r5,r2,125
 4005f54:	10c01f04 	addi	r3,r2,124
 4005f58:	294b883a 	add	r5,r5,r5
 4005f5c:	003f4f06 	br	4005c9c <__alt_data_end+0xff005c9c>
 4005f60:	01403f84 	movi	r5,254
 4005f64:	00c01f84 	movi	r3,126
 4005f68:	003f4c06 	br	4005c9c <__alt_data_end+0xff005c9c>
 4005f6c:	98800117 	ldw	r2,4(r19)
 4005f70:	003fa006 	br	4005df4 <__alt_data_end+0xff005df4>
 4005f74:	8808d0fa 	srli	r4,r17,3
 4005f78:	20800044 	addi	r2,r4,1
 4005f7c:	1085883a 	add	r2,r2,r2
 4005f80:	003e9006 	br	40059c4 <__alt_data_end+0xff0059c4>

04005f84 <memchr>:
 4005f84:	208000cc 	andi	r2,r4,3
 4005f88:	280f883a 	mov	r7,r5
 4005f8c:	10003426 	beq	r2,zero,4006060 <memchr+0xdc>
 4005f90:	30bfffc4 	addi	r2,r6,-1
 4005f94:	30001a26 	beq	r6,zero,4006000 <memchr+0x7c>
 4005f98:	20c00003 	ldbu	r3,0(r4)
 4005f9c:	29803fcc 	andi	r6,r5,255
 4005fa0:	30c0051e 	bne	r6,r3,4005fb8 <memchr+0x34>
 4005fa4:	00001806 	br	4006008 <memchr+0x84>
 4005fa8:	10001526 	beq	r2,zero,4006000 <memchr+0x7c>
 4005fac:	20c00003 	ldbu	r3,0(r4)
 4005fb0:	10bfffc4 	addi	r2,r2,-1
 4005fb4:	30c01426 	beq	r6,r3,4006008 <memchr+0x84>
 4005fb8:	21000044 	addi	r4,r4,1
 4005fbc:	20c000cc 	andi	r3,r4,3
 4005fc0:	183ff91e 	bne	r3,zero,4005fa8 <__alt_data_end+0xff005fa8>
 4005fc4:	020000c4 	movi	r8,3
 4005fc8:	40801136 	bltu	r8,r2,4006010 <memchr+0x8c>
 4005fcc:	10000c26 	beq	r2,zero,4006000 <memchr+0x7c>
 4005fd0:	20c00003 	ldbu	r3,0(r4)
 4005fd4:	29403fcc 	andi	r5,r5,255
 4005fd8:	28c00b26 	beq	r5,r3,4006008 <memchr+0x84>
 4005fdc:	20c00044 	addi	r3,r4,1
 4005fe0:	39803fcc 	andi	r6,r7,255
 4005fe4:	2089883a 	add	r4,r4,r2
 4005fe8:	00000306 	br	4005ff8 <memchr+0x74>
 4005fec:	18c00044 	addi	r3,r3,1
 4005ff0:	197fffc3 	ldbu	r5,-1(r3)
 4005ff4:	31400526 	beq	r6,r5,400600c <memchr+0x88>
 4005ff8:	1805883a 	mov	r2,r3
 4005ffc:	20fffb1e 	bne	r4,r3,4005fec <__alt_data_end+0xff005fec>
 4006000:	0005883a 	mov	r2,zero
 4006004:	f800283a 	ret
 4006008:	2005883a 	mov	r2,r4
 400600c:	f800283a 	ret
 4006010:	28c03fcc 	andi	r3,r5,255
 4006014:	1812923a 	slli	r9,r3,8
 4006018:	02ffbff4 	movhi	r11,65279
 400601c:	02a02074 	movhi	r10,32897
 4006020:	48d2b03a 	or	r9,r9,r3
 4006024:	4806943a 	slli	r3,r9,16
 4006028:	5affbfc4 	addi	r11,r11,-257
 400602c:	52a02004 	addi	r10,r10,-32640
 4006030:	48d2b03a 	or	r9,r9,r3
 4006034:	20c00017 	ldw	r3,0(r4)
 4006038:	48c6f03a 	xor	r3,r9,r3
 400603c:	1acd883a 	add	r6,r3,r11
 4006040:	00c6303a 	nor	r3,zero,r3
 4006044:	30c6703a 	and	r3,r6,r3
 4006048:	1a86703a 	and	r3,r3,r10
 400604c:	183fe01e 	bne	r3,zero,4005fd0 <__alt_data_end+0xff005fd0>
 4006050:	10bfff04 	addi	r2,r2,-4
 4006054:	21000104 	addi	r4,r4,4
 4006058:	40bff636 	bltu	r8,r2,4006034 <__alt_data_end+0xff006034>
 400605c:	003fdb06 	br	4005fcc <__alt_data_end+0xff005fcc>
 4006060:	3005883a 	mov	r2,r6
 4006064:	003fd706 	br	4005fc4 <__alt_data_end+0xff005fc4>

04006068 <memcpy>:
 4006068:	defffd04 	addi	sp,sp,-12
 400606c:	dfc00215 	stw	ra,8(sp)
 4006070:	dc400115 	stw	r17,4(sp)
 4006074:	dc000015 	stw	r16,0(sp)
 4006078:	00c003c4 	movi	r3,15
 400607c:	2005883a 	mov	r2,r4
 4006080:	1980452e 	bgeu	r3,r6,4006198 <memcpy+0x130>
 4006084:	2906b03a 	or	r3,r5,r4
 4006088:	18c000cc 	andi	r3,r3,3
 400608c:	1800441e 	bne	r3,zero,40061a0 <memcpy+0x138>
 4006090:	347ffc04 	addi	r17,r6,-16
 4006094:	8822d13a 	srli	r17,r17,4
 4006098:	28c00104 	addi	r3,r5,4
 400609c:	23400104 	addi	r13,r4,4
 40060a0:	8820913a 	slli	r16,r17,4
 40060a4:	2b000204 	addi	r12,r5,8
 40060a8:	22c00204 	addi	r11,r4,8
 40060ac:	84000504 	addi	r16,r16,20
 40060b0:	2a800304 	addi	r10,r5,12
 40060b4:	22400304 	addi	r9,r4,12
 40060b8:	2c21883a 	add	r16,r5,r16
 40060bc:	2811883a 	mov	r8,r5
 40060c0:	200f883a 	mov	r7,r4
 40060c4:	41000017 	ldw	r4,0(r8)
 40060c8:	1fc00017 	ldw	ra,0(r3)
 40060cc:	63c00017 	ldw	r15,0(r12)
 40060d0:	39000015 	stw	r4,0(r7)
 40060d4:	53800017 	ldw	r14,0(r10)
 40060d8:	6fc00015 	stw	ra,0(r13)
 40060dc:	5bc00015 	stw	r15,0(r11)
 40060e0:	4b800015 	stw	r14,0(r9)
 40060e4:	18c00404 	addi	r3,r3,16
 40060e8:	39c00404 	addi	r7,r7,16
 40060ec:	42000404 	addi	r8,r8,16
 40060f0:	6b400404 	addi	r13,r13,16
 40060f4:	63000404 	addi	r12,r12,16
 40060f8:	5ac00404 	addi	r11,r11,16
 40060fc:	52800404 	addi	r10,r10,16
 4006100:	4a400404 	addi	r9,r9,16
 4006104:	1c3fef1e 	bne	r3,r16,40060c4 <__alt_data_end+0xff0060c4>
 4006108:	89c00044 	addi	r7,r17,1
 400610c:	380e913a 	slli	r7,r7,4
 4006110:	310003cc 	andi	r4,r6,15
 4006114:	02c000c4 	movi	r11,3
 4006118:	11c7883a 	add	r3,r2,r7
 400611c:	29cb883a 	add	r5,r5,r7
 4006120:	5900212e 	bgeu	r11,r4,40061a8 <memcpy+0x140>
 4006124:	1813883a 	mov	r9,r3
 4006128:	2811883a 	mov	r8,r5
 400612c:	200f883a 	mov	r7,r4
 4006130:	42800017 	ldw	r10,0(r8)
 4006134:	4a400104 	addi	r9,r9,4
 4006138:	39ffff04 	addi	r7,r7,-4
 400613c:	4abfff15 	stw	r10,-4(r9)
 4006140:	42000104 	addi	r8,r8,4
 4006144:	59fffa36 	bltu	r11,r7,4006130 <__alt_data_end+0xff006130>
 4006148:	213fff04 	addi	r4,r4,-4
 400614c:	2008d0ba 	srli	r4,r4,2
 4006150:	318000cc 	andi	r6,r6,3
 4006154:	21000044 	addi	r4,r4,1
 4006158:	2109883a 	add	r4,r4,r4
 400615c:	2109883a 	add	r4,r4,r4
 4006160:	1907883a 	add	r3,r3,r4
 4006164:	290b883a 	add	r5,r5,r4
 4006168:	30000626 	beq	r6,zero,4006184 <memcpy+0x11c>
 400616c:	198d883a 	add	r6,r3,r6
 4006170:	29c00003 	ldbu	r7,0(r5)
 4006174:	18c00044 	addi	r3,r3,1
 4006178:	29400044 	addi	r5,r5,1
 400617c:	19ffffc5 	stb	r7,-1(r3)
 4006180:	19bffb1e 	bne	r3,r6,4006170 <__alt_data_end+0xff006170>
 4006184:	dfc00217 	ldw	ra,8(sp)
 4006188:	dc400117 	ldw	r17,4(sp)
 400618c:	dc000017 	ldw	r16,0(sp)
 4006190:	dec00304 	addi	sp,sp,12
 4006194:	f800283a 	ret
 4006198:	2007883a 	mov	r3,r4
 400619c:	003ff206 	br	4006168 <__alt_data_end+0xff006168>
 40061a0:	2007883a 	mov	r3,r4
 40061a4:	003ff106 	br	400616c <__alt_data_end+0xff00616c>
 40061a8:	200d883a 	mov	r6,r4
 40061ac:	003fee06 	br	4006168 <__alt_data_end+0xff006168>

040061b0 <memmove>:
 40061b0:	2005883a 	mov	r2,r4
 40061b4:	29000b2e 	bgeu	r5,r4,40061e4 <memmove+0x34>
 40061b8:	298f883a 	add	r7,r5,r6
 40061bc:	21c0092e 	bgeu	r4,r7,40061e4 <memmove+0x34>
 40061c0:	2187883a 	add	r3,r4,r6
 40061c4:	198bc83a 	sub	r5,r3,r6
 40061c8:	30004826 	beq	r6,zero,40062ec <memmove+0x13c>
 40061cc:	39ffffc4 	addi	r7,r7,-1
 40061d0:	39000003 	ldbu	r4,0(r7)
 40061d4:	18ffffc4 	addi	r3,r3,-1
 40061d8:	19000005 	stb	r4,0(r3)
 40061dc:	28fffb1e 	bne	r5,r3,40061cc <__alt_data_end+0xff0061cc>
 40061e0:	f800283a 	ret
 40061e4:	00c003c4 	movi	r3,15
 40061e8:	1980412e 	bgeu	r3,r6,40062f0 <memmove+0x140>
 40061ec:	2886b03a 	or	r3,r5,r2
 40061f0:	18c000cc 	andi	r3,r3,3
 40061f4:	1800401e 	bne	r3,zero,40062f8 <memmove+0x148>
 40061f8:	33fffc04 	addi	r15,r6,-16
 40061fc:	781ed13a 	srli	r15,r15,4
 4006200:	28c00104 	addi	r3,r5,4
 4006204:	13400104 	addi	r13,r2,4
 4006208:	781c913a 	slli	r14,r15,4
 400620c:	2b000204 	addi	r12,r5,8
 4006210:	12c00204 	addi	r11,r2,8
 4006214:	73800504 	addi	r14,r14,20
 4006218:	2a800304 	addi	r10,r5,12
 400621c:	12400304 	addi	r9,r2,12
 4006220:	2b9d883a 	add	r14,r5,r14
 4006224:	2811883a 	mov	r8,r5
 4006228:	100f883a 	mov	r7,r2
 400622c:	41000017 	ldw	r4,0(r8)
 4006230:	39c00404 	addi	r7,r7,16
 4006234:	18c00404 	addi	r3,r3,16
 4006238:	393ffc15 	stw	r4,-16(r7)
 400623c:	193ffc17 	ldw	r4,-16(r3)
 4006240:	6b400404 	addi	r13,r13,16
 4006244:	5ac00404 	addi	r11,r11,16
 4006248:	693ffc15 	stw	r4,-16(r13)
 400624c:	61000017 	ldw	r4,0(r12)
 4006250:	4a400404 	addi	r9,r9,16
 4006254:	42000404 	addi	r8,r8,16
 4006258:	593ffc15 	stw	r4,-16(r11)
 400625c:	51000017 	ldw	r4,0(r10)
 4006260:	63000404 	addi	r12,r12,16
 4006264:	52800404 	addi	r10,r10,16
 4006268:	493ffc15 	stw	r4,-16(r9)
 400626c:	1bbfef1e 	bne	r3,r14,400622c <__alt_data_end+0xff00622c>
 4006270:	79000044 	addi	r4,r15,1
 4006274:	2008913a 	slli	r4,r4,4
 4006278:	328003cc 	andi	r10,r6,15
 400627c:	02c000c4 	movi	r11,3
 4006280:	1107883a 	add	r3,r2,r4
 4006284:	290b883a 	add	r5,r5,r4
 4006288:	5a801e2e 	bgeu	r11,r10,4006304 <memmove+0x154>
 400628c:	1813883a 	mov	r9,r3
 4006290:	2811883a 	mov	r8,r5
 4006294:	500f883a 	mov	r7,r10
 4006298:	41000017 	ldw	r4,0(r8)
 400629c:	4a400104 	addi	r9,r9,4
 40062a0:	39ffff04 	addi	r7,r7,-4
 40062a4:	493fff15 	stw	r4,-4(r9)
 40062a8:	42000104 	addi	r8,r8,4
 40062ac:	59fffa36 	bltu	r11,r7,4006298 <__alt_data_end+0xff006298>
 40062b0:	513fff04 	addi	r4,r10,-4
 40062b4:	2008d0ba 	srli	r4,r4,2
 40062b8:	318000cc 	andi	r6,r6,3
 40062bc:	21000044 	addi	r4,r4,1
 40062c0:	2109883a 	add	r4,r4,r4
 40062c4:	2109883a 	add	r4,r4,r4
 40062c8:	1907883a 	add	r3,r3,r4
 40062cc:	290b883a 	add	r5,r5,r4
 40062d0:	30000b26 	beq	r6,zero,4006300 <memmove+0x150>
 40062d4:	198d883a 	add	r6,r3,r6
 40062d8:	29c00003 	ldbu	r7,0(r5)
 40062dc:	18c00044 	addi	r3,r3,1
 40062e0:	29400044 	addi	r5,r5,1
 40062e4:	19ffffc5 	stb	r7,-1(r3)
 40062e8:	19bffb1e 	bne	r3,r6,40062d8 <__alt_data_end+0xff0062d8>
 40062ec:	f800283a 	ret
 40062f0:	1007883a 	mov	r3,r2
 40062f4:	003ff606 	br	40062d0 <__alt_data_end+0xff0062d0>
 40062f8:	1007883a 	mov	r3,r2
 40062fc:	003ff506 	br	40062d4 <__alt_data_end+0xff0062d4>
 4006300:	f800283a 	ret
 4006304:	500d883a 	mov	r6,r10
 4006308:	003ff106 	br	40062d0 <__alt_data_end+0xff0062d0>

0400630c <memset>:
 400630c:	20c000cc 	andi	r3,r4,3
 4006310:	2005883a 	mov	r2,r4
 4006314:	18004426 	beq	r3,zero,4006428 <memset+0x11c>
 4006318:	31ffffc4 	addi	r7,r6,-1
 400631c:	30004026 	beq	r6,zero,4006420 <memset+0x114>
 4006320:	2813883a 	mov	r9,r5
 4006324:	200d883a 	mov	r6,r4
 4006328:	2007883a 	mov	r3,r4
 400632c:	00000406 	br	4006340 <memset+0x34>
 4006330:	3a3fffc4 	addi	r8,r7,-1
 4006334:	31800044 	addi	r6,r6,1
 4006338:	38003926 	beq	r7,zero,4006420 <memset+0x114>
 400633c:	400f883a 	mov	r7,r8
 4006340:	18c00044 	addi	r3,r3,1
 4006344:	32400005 	stb	r9,0(r6)
 4006348:	1a0000cc 	andi	r8,r3,3
 400634c:	403ff81e 	bne	r8,zero,4006330 <__alt_data_end+0xff006330>
 4006350:	010000c4 	movi	r4,3
 4006354:	21c02d2e 	bgeu	r4,r7,400640c <memset+0x100>
 4006358:	29003fcc 	andi	r4,r5,255
 400635c:	200c923a 	slli	r6,r4,8
 4006360:	3108b03a 	or	r4,r6,r4
 4006364:	200c943a 	slli	r6,r4,16
 4006368:	218cb03a 	or	r6,r4,r6
 400636c:	010003c4 	movi	r4,15
 4006370:	21c0182e 	bgeu	r4,r7,40063d4 <memset+0xc8>
 4006374:	3b3ffc04 	addi	r12,r7,-16
 4006378:	6018d13a 	srli	r12,r12,4
 400637c:	1a000104 	addi	r8,r3,4
 4006380:	1ac00204 	addi	r11,r3,8
 4006384:	6008913a 	slli	r4,r12,4
 4006388:	1a800304 	addi	r10,r3,12
 400638c:	1813883a 	mov	r9,r3
 4006390:	21000504 	addi	r4,r4,20
 4006394:	1909883a 	add	r4,r3,r4
 4006398:	49800015 	stw	r6,0(r9)
 400639c:	41800015 	stw	r6,0(r8)
 40063a0:	59800015 	stw	r6,0(r11)
 40063a4:	51800015 	stw	r6,0(r10)
 40063a8:	42000404 	addi	r8,r8,16
 40063ac:	4a400404 	addi	r9,r9,16
 40063b0:	5ac00404 	addi	r11,r11,16
 40063b4:	52800404 	addi	r10,r10,16
 40063b8:	413ff71e 	bne	r8,r4,4006398 <__alt_data_end+0xff006398>
 40063bc:	63000044 	addi	r12,r12,1
 40063c0:	6018913a 	slli	r12,r12,4
 40063c4:	39c003cc 	andi	r7,r7,15
 40063c8:	010000c4 	movi	r4,3
 40063cc:	1b07883a 	add	r3,r3,r12
 40063d0:	21c00e2e 	bgeu	r4,r7,400640c <memset+0x100>
 40063d4:	1813883a 	mov	r9,r3
 40063d8:	3811883a 	mov	r8,r7
 40063dc:	010000c4 	movi	r4,3
 40063e0:	49800015 	stw	r6,0(r9)
 40063e4:	423fff04 	addi	r8,r8,-4
 40063e8:	4a400104 	addi	r9,r9,4
 40063ec:	223ffc36 	bltu	r4,r8,40063e0 <__alt_data_end+0xff0063e0>
 40063f0:	393fff04 	addi	r4,r7,-4
 40063f4:	2008d0ba 	srli	r4,r4,2
 40063f8:	39c000cc 	andi	r7,r7,3
 40063fc:	21000044 	addi	r4,r4,1
 4006400:	2109883a 	add	r4,r4,r4
 4006404:	2109883a 	add	r4,r4,r4
 4006408:	1907883a 	add	r3,r3,r4
 400640c:	38000526 	beq	r7,zero,4006424 <memset+0x118>
 4006410:	19cf883a 	add	r7,r3,r7
 4006414:	19400005 	stb	r5,0(r3)
 4006418:	18c00044 	addi	r3,r3,1
 400641c:	38fffd1e 	bne	r7,r3,4006414 <__alt_data_end+0xff006414>
 4006420:	f800283a 	ret
 4006424:	f800283a 	ret
 4006428:	2007883a 	mov	r3,r4
 400642c:	300f883a 	mov	r7,r6
 4006430:	003fc706 	br	4006350 <__alt_data_end+0xff006350>

04006434 <_Balloc>:
 4006434:	20801317 	ldw	r2,76(r4)
 4006438:	defffc04 	addi	sp,sp,-16
 400643c:	dc400115 	stw	r17,4(sp)
 4006440:	dc000015 	stw	r16,0(sp)
 4006444:	dfc00315 	stw	ra,12(sp)
 4006448:	dc800215 	stw	r18,8(sp)
 400644c:	2023883a 	mov	r17,r4
 4006450:	2821883a 	mov	r16,r5
 4006454:	10000f26 	beq	r2,zero,4006494 <_Balloc+0x60>
 4006458:	8407883a 	add	r3,r16,r16
 400645c:	18c7883a 	add	r3,r3,r3
 4006460:	10c7883a 	add	r3,r2,r3
 4006464:	18800017 	ldw	r2,0(r3)
 4006468:	10001126 	beq	r2,zero,40064b0 <_Balloc+0x7c>
 400646c:	11000017 	ldw	r4,0(r2)
 4006470:	19000015 	stw	r4,0(r3)
 4006474:	10000415 	stw	zero,16(r2)
 4006478:	10000315 	stw	zero,12(r2)
 400647c:	dfc00317 	ldw	ra,12(sp)
 4006480:	dc800217 	ldw	r18,8(sp)
 4006484:	dc400117 	ldw	r17,4(sp)
 4006488:	dc000017 	ldw	r16,0(sp)
 400648c:	dec00404 	addi	sp,sp,16
 4006490:	f800283a 	ret
 4006494:	01800844 	movi	r6,33
 4006498:	01400104 	movi	r5,4
 400649c:	40096300 	call	4009630 <_calloc_r>
 40064a0:	88801315 	stw	r2,76(r17)
 40064a4:	103fec1e 	bne	r2,zero,4006458 <__alt_data_end+0xff006458>
 40064a8:	0005883a 	mov	r2,zero
 40064ac:	003ff306 	br	400647c <__alt_data_end+0xff00647c>
 40064b0:	01400044 	movi	r5,1
 40064b4:	2c24983a 	sll	r18,r5,r16
 40064b8:	8809883a 	mov	r4,r17
 40064bc:	91800144 	addi	r6,r18,5
 40064c0:	318d883a 	add	r6,r6,r6
 40064c4:	318d883a 	add	r6,r6,r6
 40064c8:	40096300 	call	4009630 <_calloc_r>
 40064cc:	103ff626 	beq	r2,zero,40064a8 <__alt_data_end+0xff0064a8>
 40064d0:	14000115 	stw	r16,4(r2)
 40064d4:	14800215 	stw	r18,8(r2)
 40064d8:	003fe606 	br	4006474 <__alt_data_end+0xff006474>

040064dc <_Bfree>:
 40064dc:	28000826 	beq	r5,zero,4006500 <_Bfree+0x24>
 40064e0:	28c00117 	ldw	r3,4(r5)
 40064e4:	20801317 	ldw	r2,76(r4)
 40064e8:	18c7883a 	add	r3,r3,r3
 40064ec:	18c7883a 	add	r3,r3,r3
 40064f0:	10c5883a 	add	r2,r2,r3
 40064f4:	10c00017 	ldw	r3,0(r2)
 40064f8:	28c00015 	stw	r3,0(r5)
 40064fc:	11400015 	stw	r5,0(r2)
 4006500:	f800283a 	ret

04006504 <__multadd>:
 4006504:	defffa04 	addi	sp,sp,-24
 4006508:	dc800315 	stw	r18,12(sp)
 400650c:	dc400215 	stw	r17,8(sp)
 4006510:	dc000115 	stw	r16,4(sp)
 4006514:	2823883a 	mov	r17,r5
 4006518:	2c000417 	ldw	r16,16(r5)
 400651c:	dfc00515 	stw	ra,20(sp)
 4006520:	dcc00415 	stw	r19,16(sp)
 4006524:	2025883a 	mov	r18,r4
 4006528:	29400504 	addi	r5,r5,20
 400652c:	0011883a 	mov	r8,zero
 4006530:	28c00017 	ldw	r3,0(r5)
 4006534:	29400104 	addi	r5,r5,4
 4006538:	42000044 	addi	r8,r8,1
 400653c:	18bfffcc 	andi	r2,r3,65535
 4006540:	1185383a 	mul	r2,r2,r6
 4006544:	1806d43a 	srli	r3,r3,16
 4006548:	11cf883a 	add	r7,r2,r7
 400654c:	3808d43a 	srli	r4,r7,16
 4006550:	1987383a 	mul	r3,r3,r6
 4006554:	38bfffcc 	andi	r2,r7,65535
 4006558:	1907883a 	add	r3,r3,r4
 400655c:	1808943a 	slli	r4,r3,16
 4006560:	180ed43a 	srli	r7,r3,16
 4006564:	2085883a 	add	r2,r4,r2
 4006568:	28bfff15 	stw	r2,-4(r5)
 400656c:	443ff016 	blt	r8,r16,4006530 <__alt_data_end+0xff006530>
 4006570:	38000926 	beq	r7,zero,4006598 <__multadd+0x94>
 4006574:	88800217 	ldw	r2,8(r17)
 4006578:	80800f0e 	bge	r16,r2,40065b8 <__multadd+0xb4>
 400657c:	80800144 	addi	r2,r16,5
 4006580:	1085883a 	add	r2,r2,r2
 4006584:	1085883a 	add	r2,r2,r2
 4006588:	8885883a 	add	r2,r17,r2
 400658c:	11c00015 	stw	r7,0(r2)
 4006590:	84000044 	addi	r16,r16,1
 4006594:	8c000415 	stw	r16,16(r17)
 4006598:	8805883a 	mov	r2,r17
 400659c:	dfc00517 	ldw	ra,20(sp)
 40065a0:	dcc00417 	ldw	r19,16(sp)
 40065a4:	dc800317 	ldw	r18,12(sp)
 40065a8:	dc400217 	ldw	r17,8(sp)
 40065ac:	dc000117 	ldw	r16,4(sp)
 40065b0:	dec00604 	addi	sp,sp,24
 40065b4:	f800283a 	ret
 40065b8:	89400117 	ldw	r5,4(r17)
 40065bc:	9009883a 	mov	r4,r18
 40065c0:	d9c00015 	stw	r7,0(sp)
 40065c4:	29400044 	addi	r5,r5,1
 40065c8:	40064340 	call	4006434 <_Balloc>
 40065cc:	89800417 	ldw	r6,16(r17)
 40065d0:	89400304 	addi	r5,r17,12
 40065d4:	11000304 	addi	r4,r2,12
 40065d8:	31800084 	addi	r6,r6,2
 40065dc:	318d883a 	add	r6,r6,r6
 40065e0:	318d883a 	add	r6,r6,r6
 40065e4:	1027883a 	mov	r19,r2
 40065e8:	40060680 	call	4006068 <memcpy>
 40065ec:	d9c00017 	ldw	r7,0(sp)
 40065f0:	88000a26 	beq	r17,zero,400661c <__multadd+0x118>
 40065f4:	88c00117 	ldw	r3,4(r17)
 40065f8:	90801317 	ldw	r2,76(r18)
 40065fc:	18c7883a 	add	r3,r3,r3
 4006600:	18c7883a 	add	r3,r3,r3
 4006604:	10c5883a 	add	r2,r2,r3
 4006608:	10c00017 	ldw	r3,0(r2)
 400660c:	88c00015 	stw	r3,0(r17)
 4006610:	14400015 	stw	r17,0(r2)
 4006614:	9823883a 	mov	r17,r19
 4006618:	003fd806 	br	400657c <__alt_data_end+0xff00657c>
 400661c:	9823883a 	mov	r17,r19
 4006620:	003fd606 	br	400657c <__alt_data_end+0xff00657c>

04006624 <__s2b>:
 4006624:	defff904 	addi	sp,sp,-28
 4006628:	dc400115 	stw	r17,4(sp)
 400662c:	dc000015 	stw	r16,0(sp)
 4006630:	2023883a 	mov	r17,r4
 4006634:	2821883a 	mov	r16,r5
 4006638:	39000204 	addi	r4,r7,8
 400663c:	01400244 	movi	r5,9
 4006640:	dcc00315 	stw	r19,12(sp)
 4006644:	dc800215 	stw	r18,8(sp)
 4006648:	dfc00615 	stw	ra,24(sp)
 400664c:	dd400515 	stw	r21,20(sp)
 4006650:	dd000415 	stw	r20,16(sp)
 4006654:	3825883a 	mov	r18,r7
 4006658:	3027883a 	mov	r19,r6
 400665c:	400a8080 	call	400a808 <__divsi3>
 4006660:	00c00044 	movi	r3,1
 4006664:	000b883a 	mov	r5,zero
 4006668:	1880030e 	bge	r3,r2,4006678 <__s2b+0x54>
 400666c:	18c7883a 	add	r3,r3,r3
 4006670:	29400044 	addi	r5,r5,1
 4006674:	18bffd16 	blt	r3,r2,400666c <__alt_data_end+0xff00666c>
 4006678:	8809883a 	mov	r4,r17
 400667c:	40064340 	call	4006434 <_Balloc>
 4006680:	d8c00717 	ldw	r3,28(sp)
 4006684:	10c00515 	stw	r3,20(r2)
 4006688:	00c00044 	movi	r3,1
 400668c:	10c00415 	stw	r3,16(r2)
 4006690:	00c00244 	movi	r3,9
 4006694:	1cc0210e 	bge	r3,r19,400671c <__s2b+0xf8>
 4006698:	80eb883a 	add	r21,r16,r3
 400669c:	a829883a 	mov	r20,r21
 40066a0:	84e1883a 	add	r16,r16,r19
 40066a4:	a1c00007 	ldb	r7,0(r20)
 40066a8:	01800284 	movi	r6,10
 40066ac:	a5000044 	addi	r20,r20,1
 40066b0:	100b883a 	mov	r5,r2
 40066b4:	39fff404 	addi	r7,r7,-48
 40066b8:	8809883a 	mov	r4,r17
 40066bc:	40065040 	call	4006504 <__multadd>
 40066c0:	a43ff81e 	bne	r20,r16,40066a4 <__alt_data_end+0xff0066a4>
 40066c4:	ace1883a 	add	r16,r21,r19
 40066c8:	843ffe04 	addi	r16,r16,-8
 40066cc:	9c800a0e 	bge	r19,r18,40066f8 <__s2b+0xd4>
 40066d0:	94e5c83a 	sub	r18,r18,r19
 40066d4:	84a5883a 	add	r18,r16,r18
 40066d8:	81c00007 	ldb	r7,0(r16)
 40066dc:	01800284 	movi	r6,10
 40066e0:	84000044 	addi	r16,r16,1
 40066e4:	100b883a 	mov	r5,r2
 40066e8:	39fff404 	addi	r7,r7,-48
 40066ec:	8809883a 	mov	r4,r17
 40066f0:	40065040 	call	4006504 <__multadd>
 40066f4:	84bff81e 	bne	r16,r18,40066d8 <__alt_data_end+0xff0066d8>
 40066f8:	dfc00617 	ldw	ra,24(sp)
 40066fc:	dd400517 	ldw	r21,20(sp)
 4006700:	dd000417 	ldw	r20,16(sp)
 4006704:	dcc00317 	ldw	r19,12(sp)
 4006708:	dc800217 	ldw	r18,8(sp)
 400670c:	dc400117 	ldw	r17,4(sp)
 4006710:	dc000017 	ldw	r16,0(sp)
 4006714:	dec00704 	addi	sp,sp,28
 4006718:	f800283a 	ret
 400671c:	84000284 	addi	r16,r16,10
 4006720:	1827883a 	mov	r19,r3
 4006724:	003fe906 	br	40066cc <__alt_data_end+0xff0066cc>

04006728 <__hi0bits>:
 4006728:	20bfffec 	andhi	r2,r4,65535
 400672c:	1000141e 	bne	r2,zero,4006780 <__hi0bits+0x58>
 4006730:	2008943a 	slli	r4,r4,16
 4006734:	00800404 	movi	r2,16
 4006738:	20ffc02c 	andhi	r3,r4,65280
 400673c:	1800021e 	bne	r3,zero,4006748 <__hi0bits+0x20>
 4006740:	2008923a 	slli	r4,r4,8
 4006744:	10800204 	addi	r2,r2,8
 4006748:	20fc002c 	andhi	r3,r4,61440
 400674c:	1800021e 	bne	r3,zero,4006758 <__hi0bits+0x30>
 4006750:	2008913a 	slli	r4,r4,4
 4006754:	10800104 	addi	r2,r2,4
 4006758:	20f0002c 	andhi	r3,r4,49152
 400675c:	1800031e 	bne	r3,zero,400676c <__hi0bits+0x44>
 4006760:	2109883a 	add	r4,r4,r4
 4006764:	10800084 	addi	r2,r2,2
 4006768:	2109883a 	add	r4,r4,r4
 400676c:	20000316 	blt	r4,zero,400677c <__hi0bits+0x54>
 4006770:	2110002c 	andhi	r4,r4,16384
 4006774:	2000041e 	bne	r4,zero,4006788 <__hi0bits+0x60>
 4006778:	00800804 	movi	r2,32
 400677c:	f800283a 	ret
 4006780:	0005883a 	mov	r2,zero
 4006784:	003fec06 	br	4006738 <__alt_data_end+0xff006738>
 4006788:	10800044 	addi	r2,r2,1
 400678c:	f800283a 	ret

04006790 <__lo0bits>:
 4006790:	20c00017 	ldw	r3,0(r4)
 4006794:	188001cc 	andi	r2,r3,7
 4006798:	10000826 	beq	r2,zero,40067bc <__lo0bits+0x2c>
 400679c:	1880004c 	andi	r2,r3,1
 40067a0:	1000211e 	bne	r2,zero,4006828 <__lo0bits+0x98>
 40067a4:	1880008c 	andi	r2,r3,2
 40067a8:	1000211e 	bne	r2,zero,4006830 <__lo0bits+0xa0>
 40067ac:	1806d0ba 	srli	r3,r3,2
 40067b0:	00800084 	movi	r2,2
 40067b4:	20c00015 	stw	r3,0(r4)
 40067b8:	f800283a 	ret
 40067bc:	18bfffcc 	andi	r2,r3,65535
 40067c0:	10001326 	beq	r2,zero,4006810 <__lo0bits+0x80>
 40067c4:	0005883a 	mov	r2,zero
 40067c8:	19403fcc 	andi	r5,r3,255
 40067cc:	2800021e 	bne	r5,zero,40067d8 <__lo0bits+0x48>
 40067d0:	1806d23a 	srli	r3,r3,8
 40067d4:	10800204 	addi	r2,r2,8
 40067d8:	194003cc 	andi	r5,r3,15
 40067dc:	2800021e 	bne	r5,zero,40067e8 <__lo0bits+0x58>
 40067e0:	1806d13a 	srli	r3,r3,4
 40067e4:	10800104 	addi	r2,r2,4
 40067e8:	194000cc 	andi	r5,r3,3
 40067ec:	2800021e 	bne	r5,zero,40067f8 <__lo0bits+0x68>
 40067f0:	1806d0ba 	srli	r3,r3,2
 40067f4:	10800084 	addi	r2,r2,2
 40067f8:	1940004c 	andi	r5,r3,1
 40067fc:	2800081e 	bne	r5,zero,4006820 <__lo0bits+0x90>
 4006800:	1806d07a 	srli	r3,r3,1
 4006804:	1800051e 	bne	r3,zero,400681c <__lo0bits+0x8c>
 4006808:	00800804 	movi	r2,32
 400680c:	f800283a 	ret
 4006810:	1806d43a 	srli	r3,r3,16
 4006814:	00800404 	movi	r2,16
 4006818:	003feb06 	br	40067c8 <__alt_data_end+0xff0067c8>
 400681c:	10800044 	addi	r2,r2,1
 4006820:	20c00015 	stw	r3,0(r4)
 4006824:	f800283a 	ret
 4006828:	0005883a 	mov	r2,zero
 400682c:	f800283a 	ret
 4006830:	1806d07a 	srli	r3,r3,1
 4006834:	00800044 	movi	r2,1
 4006838:	20c00015 	stw	r3,0(r4)
 400683c:	f800283a 	ret

04006840 <__i2b>:
 4006840:	defffd04 	addi	sp,sp,-12
 4006844:	dc000015 	stw	r16,0(sp)
 4006848:	04000044 	movi	r16,1
 400684c:	dc400115 	stw	r17,4(sp)
 4006850:	2823883a 	mov	r17,r5
 4006854:	800b883a 	mov	r5,r16
 4006858:	dfc00215 	stw	ra,8(sp)
 400685c:	40064340 	call	4006434 <_Balloc>
 4006860:	14400515 	stw	r17,20(r2)
 4006864:	14000415 	stw	r16,16(r2)
 4006868:	dfc00217 	ldw	ra,8(sp)
 400686c:	dc400117 	ldw	r17,4(sp)
 4006870:	dc000017 	ldw	r16,0(sp)
 4006874:	dec00304 	addi	sp,sp,12
 4006878:	f800283a 	ret

0400687c <__multiply>:
 400687c:	defffa04 	addi	sp,sp,-24
 4006880:	dcc00315 	stw	r19,12(sp)
 4006884:	dc800215 	stw	r18,8(sp)
 4006888:	34c00417 	ldw	r19,16(r6)
 400688c:	2c800417 	ldw	r18,16(r5)
 4006890:	dd000415 	stw	r20,16(sp)
 4006894:	dc400115 	stw	r17,4(sp)
 4006898:	dfc00515 	stw	ra,20(sp)
 400689c:	dc000015 	stw	r16,0(sp)
 40068a0:	2829883a 	mov	r20,r5
 40068a4:	3023883a 	mov	r17,r6
 40068a8:	94c0050e 	bge	r18,r19,40068c0 <__multiply+0x44>
 40068ac:	9007883a 	mov	r3,r18
 40068b0:	3029883a 	mov	r20,r6
 40068b4:	9825883a 	mov	r18,r19
 40068b8:	2823883a 	mov	r17,r5
 40068bc:	1827883a 	mov	r19,r3
 40068c0:	a0800217 	ldw	r2,8(r20)
 40068c4:	94e1883a 	add	r16,r18,r19
 40068c8:	a1400117 	ldw	r5,4(r20)
 40068cc:	1400010e 	bge	r2,r16,40068d4 <__multiply+0x58>
 40068d0:	29400044 	addi	r5,r5,1
 40068d4:	40064340 	call	4006434 <_Balloc>
 40068d8:	8415883a 	add	r10,r16,r16
 40068dc:	12c00504 	addi	r11,r2,20
 40068e0:	5295883a 	add	r10,r10,r10
 40068e4:	5a95883a 	add	r10,r11,r10
 40068e8:	5807883a 	mov	r3,r11
 40068ec:	5a80032e 	bgeu	r11,r10,40068fc <__multiply+0x80>
 40068f0:	18000015 	stw	zero,0(r3)
 40068f4:	18c00104 	addi	r3,r3,4
 40068f8:	1abffd36 	bltu	r3,r10,40068f0 <__alt_data_end+0xff0068f0>
 40068fc:	9ce7883a 	add	r19,r19,r19
 4006900:	94a5883a 	add	r18,r18,r18
 4006904:	89800504 	addi	r6,r17,20
 4006908:	9ce7883a 	add	r19,r19,r19
 400690c:	a3400504 	addi	r13,r20,20
 4006910:	94a5883a 	add	r18,r18,r18
 4006914:	34d9883a 	add	r12,r6,r19
 4006918:	6c93883a 	add	r9,r13,r18
 400691c:	3300422e 	bgeu	r6,r12,4006a28 <__multiply+0x1ac>
 4006920:	37c00017 	ldw	ra,0(r6)
 4006924:	fbffffcc 	andi	r15,ra,65535
 4006928:	78001b26 	beq	r15,zero,4006998 <__multiply+0x11c>
 400692c:	5811883a 	mov	r8,r11
 4006930:	681d883a 	mov	r14,r13
 4006934:	000f883a 	mov	r7,zero
 4006938:	71000017 	ldw	r4,0(r14)
 400693c:	40c00017 	ldw	r3,0(r8)
 4006940:	73800104 	addi	r14,r14,4
 4006944:	217fffcc 	andi	r5,r4,65535
 4006948:	2bcb383a 	mul	r5,r5,r15
 400694c:	2008d43a 	srli	r4,r4,16
 4006950:	1c7fffcc 	andi	r17,r3,65535
 4006954:	2c4b883a 	add	r5,r5,r17
 4006958:	29cb883a 	add	r5,r5,r7
 400695c:	23c9383a 	mul	r4,r4,r15
 4006960:	1806d43a 	srli	r3,r3,16
 4006964:	280ed43a 	srli	r7,r5,16
 4006968:	297fffcc 	andi	r5,r5,65535
 400696c:	20c7883a 	add	r3,r4,r3
 4006970:	19c7883a 	add	r3,r3,r7
 4006974:	1808943a 	slli	r4,r3,16
 4006978:	4023883a 	mov	r17,r8
 400697c:	180ed43a 	srli	r7,r3,16
 4006980:	214ab03a 	or	r5,r4,r5
 4006984:	41400015 	stw	r5,0(r8)
 4006988:	42000104 	addi	r8,r8,4
 400698c:	727fea36 	bltu	r14,r9,4006938 <__alt_data_end+0xff006938>
 4006990:	89c00115 	stw	r7,4(r17)
 4006994:	37c00017 	ldw	ra,0(r6)
 4006998:	f83ed43a 	srli	ra,ra,16
 400699c:	f8001f26 	beq	ra,zero,4006a1c <__multiply+0x1a0>
 40069a0:	58c00017 	ldw	r3,0(r11)
 40069a4:	681d883a 	mov	r14,r13
 40069a8:	581f883a 	mov	r15,r11
 40069ac:	1811883a 	mov	r8,r3
 40069b0:	5825883a 	mov	r18,r11
 40069b4:	000f883a 	mov	r7,zero
 40069b8:	00000106 	br	40069c0 <__multiply+0x144>
 40069bc:	8825883a 	mov	r18,r17
 40069c0:	7140000b 	ldhu	r5,0(r14)
 40069c4:	4010d43a 	srli	r8,r8,16
 40069c8:	193fffcc 	andi	r4,r3,65535
 40069cc:	2fcb383a 	mul	r5,r5,ra
 40069d0:	7bc00104 	addi	r15,r15,4
 40069d4:	73800104 	addi	r14,r14,4
 40069d8:	2a0b883a 	add	r5,r5,r8
 40069dc:	29cb883a 	add	r5,r5,r7
 40069e0:	2806943a 	slli	r3,r5,16
 40069e4:	94400104 	addi	r17,r18,4
 40069e8:	280ad43a 	srli	r5,r5,16
 40069ec:	1908b03a 	or	r4,r3,r4
 40069f0:	793fff15 	stw	r4,-4(r15)
 40069f4:	70ffff17 	ldw	r3,-4(r14)
 40069f8:	8a000017 	ldw	r8,0(r17)
 40069fc:	1806d43a 	srli	r3,r3,16
 4006a00:	413fffcc 	andi	r4,r8,65535
 4006a04:	1fc7383a 	mul	r3,r3,ra
 4006a08:	1907883a 	add	r3,r3,r4
 4006a0c:	1947883a 	add	r3,r3,r5
 4006a10:	180ed43a 	srli	r7,r3,16
 4006a14:	727fe936 	bltu	r14,r9,40069bc <__alt_data_end+0xff0069bc>
 4006a18:	90c00115 	stw	r3,4(r18)
 4006a1c:	31800104 	addi	r6,r6,4
 4006a20:	5ac00104 	addi	r11,r11,4
 4006a24:	333fbe36 	bltu	r6,r12,4006920 <__alt_data_end+0xff006920>
 4006a28:	0400090e 	bge	zero,r16,4006a50 <__multiply+0x1d4>
 4006a2c:	50ffff17 	ldw	r3,-4(r10)
 4006a30:	52bfff04 	addi	r10,r10,-4
 4006a34:	18000326 	beq	r3,zero,4006a44 <__multiply+0x1c8>
 4006a38:	00000506 	br	4006a50 <__multiply+0x1d4>
 4006a3c:	50c00017 	ldw	r3,0(r10)
 4006a40:	1800031e 	bne	r3,zero,4006a50 <__multiply+0x1d4>
 4006a44:	843fffc4 	addi	r16,r16,-1
 4006a48:	52bfff04 	addi	r10,r10,-4
 4006a4c:	803ffb1e 	bne	r16,zero,4006a3c <__alt_data_end+0xff006a3c>
 4006a50:	14000415 	stw	r16,16(r2)
 4006a54:	dfc00517 	ldw	ra,20(sp)
 4006a58:	dd000417 	ldw	r20,16(sp)
 4006a5c:	dcc00317 	ldw	r19,12(sp)
 4006a60:	dc800217 	ldw	r18,8(sp)
 4006a64:	dc400117 	ldw	r17,4(sp)
 4006a68:	dc000017 	ldw	r16,0(sp)
 4006a6c:	dec00604 	addi	sp,sp,24
 4006a70:	f800283a 	ret

04006a74 <__pow5mult>:
 4006a74:	defffa04 	addi	sp,sp,-24
 4006a78:	dcc00315 	stw	r19,12(sp)
 4006a7c:	dc000015 	stw	r16,0(sp)
 4006a80:	dfc00515 	stw	ra,20(sp)
 4006a84:	dd000415 	stw	r20,16(sp)
 4006a88:	dc800215 	stw	r18,8(sp)
 4006a8c:	dc400115 	stw	r17,4(sp)
 4006a90:	308000cc 	andi	r2,r6,3
 4006a94:	3021883a 	mov	r16,r6
 4006a98:	2027883a 	mov	r19,r4
 4006a9c:	10002f1e 	bne	r2,zero,4006b5c <__pow5mult+0xe8>
 4006aa0:	2825883a 	mov	r18,r5
 4006aa4:	8021d0ba 	srai	r16,r16,2
 4006aa8:	80001a26 	beq	r16,zero,4006b14 <__pow5mult+0xa0>
 4006aac:	9c401217 	ldw	r17,72(r19)
 4006ab0:	8800061e 	bne	r17,zero,4006acc <__pow5mult+0x58>
 4006ab4:	00003406 	br	4006b88 <__pow5mult+0x114>
 4006ab8:	8021d07a 	srai	r16,r16,1
 4006abc:	80001526 	beq	r16,zero,4006b14 <__pow5mult+0xa0>
 4006ac0:	88800017 	ldw	r2,0(r17)
 4006ac4:	10001c26 	beq	r2,zero,4006b38 <__pow5mult+0xc4>
 4006ac8:	1023883a 	mov	r17,r2
 4006acc:	8080004c 	andi	r2,r16,1
 4006ad0:	103ff926 	beq	r2,zero,4006ab8 <__alt_data_end+0xff006ab8>
 4006ad4:	880d883a 	mov	r6,r17
 4006ad8:	900b883a 	mov	r5,r18
 4006adc:	9809883a 	mov	r4,r19
 4006ae0:	400687c0 	call	400687c <__multiply>
 4006ae4:	90001b26 	beq	r18,zero,4006b54 <__pow5mult+0xe0>
 4006ae8:	91000117 	ldw	r4,4(r18)
 4006aec:	98c01317 	ldw	r3,76(r19)
 4006af0:	8021d07a 	srai	r16,r16,1
 4006af4:	2109883a 	add	r4,r4,r4
 4006af8:	2109883a 	add	r4,r4,r4
 4006afc:	1907883a 	add	r3,r3,r4
 4006b00:	19000017 	ldw	r4,0(r3)
 4006b04:	91000015 	stw	r4,0(r18)
 4006b08:	1c800015 	stw	r18,0(r3)
 4006b0c:	1025883a 	mov	r18,r2
 4006b10:	803feb1e 	bne	r16,zero,4006ac0 <__alt_data_end+0xff006ac0>
 4006b14:	9005883a 	mov	r2,r18
 4006b18:	dfc00517 	ldw	ra,20(sp)
 4006b1c:	dd000417 	ldw	r20,16(sp)
 4006b20:	dcc00317 	ldw	r19,12(sp)
 4006b24:	dc800217 	ldw	r18,8(sp)
 4006b28:	dc400117 	ldw	r17,4(sp)
 4006b2c:	dc000017 	ldw	r16,0(sp)
 4006b30:	dec00604 	addi	sp,sp,24
 4006b34:	f800283a 	ret
 4006b38:	880d883a 	mov	r6,r17
 4006b3c:	880b883a 	mov	r5,r17
 4006b40:	9809883a 	mov	r4,r19
 4006b44:	400687c0 	call	400687c <__multiply>
 4006b48:	88800015 	stw	r2,0(r17)
 4006b4c:	10000015 	stw	zero,0(r2)
 4006b50:	003fdd06 	br	4006ac8 <__alt_data_end+0xff006ac8>
 4006b54:	1025883a 	mov	r18,r2
 4006b58:	003fd706 	br	4006ab8 <__alt_data_end+0xff006ab8>
 4006b5c:	10bfffc4 	addi	r2,r2,-1
 4006b60:	1085883a 	add	r2,r2,r2
 4006b64:	00c10074 	movhi	r3,1025
 4006b68:	18ff2e04 	addi	r3,r3,-840
 4006b6c:	1085883a 	add	r2,r2,r2
 4006b70:	1885883a 	add	r2,r3,r2
 4006b74:	11800017 	ldw	r6,0(r2)
 4006b78:	000f883a 	mov	r7,zero
 4006b7c:	40065040 	call	4006504 <__multadd>
 4006b80:	1025883a 	mov	r18,r2
 4006b84:	003fc706 	br	4006aa4 <__alt_data_end+0xff006aa4>
 4006b88:	05000044 	movi	r20,1
 4006b8c:	a00b883a 	mov	r5,r20
 4006b90:	9809883a 	mov	r4,r19
 4006b94:	40064340 	call	4006434 <_Balloc>
 4006b98:	1023883a 	mov	r17,r2
 4006b9c:	00809c44 	movi	r2,625
 4006ba0:	88800515 	stw	r2,20(r17)
 4006ba4:	8d000415 	stw	r20,16(r17)
 4006ba8:	9c401215 	stw	r17,72(r19)
 4006bac:	88000015 	stw	zero,0(r17)
 4006bb0:	003fc606 	br	4006acc <__alt_data_end+0xff006acc>

04006bb4 <__lshift>:
 4006bb4:	defff904 	addi	sp,sp,-28
 4006bb8:	dd400515 	stw	r21,20(sp)
 4006bbc:	dcc00315 	stw	r19,12(sp)
 4006bc0:	302bd17a 	srai	r21,r6,5
 4006bc4:	2cc00417 	ldw	r19,16(r5)
 4006bc8:	28800217 	ldw	r2,8(r5)
 4006bcc:	dd000415 	stw	r20,16(sp)
 4006bd0:	ace7883a 	add	r19,r21,r19
 4006bd4:	dc800215 	stw	r18,8(sp)
 4006bd8:	dc400115 	stw	r17,4(sp)
 4006bdc:	dc000015 	stw	r16,0(sp)
 4006be0:	dfc00615 	stw	ra,24(sp)
 4006be4:	9c000044 	addi	r16,r19,1
 4006be8:	2823883a 	mov	r17,r5
 4006bec:	3029883a 	mov	r20,r6
 4006bf0:	2025883a 	mov	r18,r4
 4006bf4:	29400117 	ldw	r5,4(r5)
 4006bf8:	1400030e 	bge	r2,r16,4006c08 <__lshift+0x54>
 4006bfc:	1085883a 	add	r2,r2,r2
 4006c00:	29400044 	addi	r5,r5,1
 4006c04:	143ffd16 	blt	r2,r16,4006bfc <__alt_data_end+0xff006bfc>
 4006c08:	9009883a 	mov	r4,r18
 4006c0c:	40064340 	call	4006434 <_Balloc>
 4006c10:	10c00504 	addi	r3,r2,20
 4006c14:	0540070e 	bge	zero,r21,4006c34 <__lshift+0x80>
 4006c18:	ad6b883a 	add	r21,r21,r21
 4006c1c:	ad6b883a 	add	r21,r21,r21
 4006c20:	1809883a 	mov	r4,r3
 4006c24:	1d47883a 	add	r3,r3,r21
 4006c28:	20000015 	stw	zero,0(r4)
 4006c2c:	21000104 	addi	r4,r4,4
 4006c30:	193ffd1e 	bne	r3,r4,4006c28 <__alt_data_end+0xff006c28>
 4006c34:	8a000417 	ldw	r8,16(r17)
 4006c38:	89000504 	addi	r4,r17,20
 4006c3c:	a18007cc 	andi	r6,r20,31
 4006c40:	4211883a 	add	r8,r8,r8
 4006c44:	4211883a 	add	r8,r8,r8
 4006c48:	2211883a 	add	r8,r4,r8
 4006c4c:	30002326 	beq	r6,zero,4006cdc <__lshift+0x128>
 4006c50:	02400804 	movi	r9,32
 4006c54:	4993c83a 	sub	r9,r9,r6
 4006c58:	000b883a 	mov	r5,zero
 4006c5c:	21c00017 	ldw	r7,0(r4)
 4006c60:	1815883a 	mov	r10,r3
 4006c64:	18c00104 	addi	r3,r3,4
 4006c68:	398e983a 	sll	r7,r7,r6
 4006c6c:	21000104 	addi	r4,r4,4
 4006c70:	394ab03a 	or	r5,r7,r5
 4006c74:	197fff15 	stw	r5,-4(r3)
 4006c78:	217fff17 	ldw	r5,-4(r4)
 4006c7c:	2a4ad83a 	srl	r5,r5,r9
 4006c80:	223ff636 	bltu	r4,r8,4006c5c <__alt_data_end+0xff006c5c>
 4006c84:	51400115 	stw	r5,4(r10)
 4006c88:	28001a1e 	bne	r5,zero,4006cf4 <__lshift+0x140>
 4006c8c:	843fffc4 	addi	r16,r16,-1
 4006c90:	14000415 	stw	r16,16(r2)
 4006c94:	88000826 	beq	r17,zero,4006cb8 <__lshift+0x104>
 4006c98:	89000117 	ldw	r4,4(r17)
 4006c9c:	90c01317 	ldw	r3,76(r18)
 4006ca0:	2109883a 	add	r4,r4,r4
 4006ca4:	2109883a 	add	r4,r4,r4
 4006ca8:	1907883a 	add	r3,r3,r4
 4006cac:	19000017 	ldw	r4,0(r3)
 4006cb0:	89000015 	stw	r4,0(r17)
 4006cb4:	1c400015 	stw	r17,0(r3)
 4006cb8:	dfc00617 	ldw	ra,24(sp)
 4006cbc:	dd400517 	ldw	r21,20(sp)
 4006cc0:	dd000417 	ldw	r20,16(sp)
 4006cc4:	dcc00317 	ldw	r19,12(sp)
 4006cc8:	dc800217 	ldw	r18,8(sp)
 4006ccc:	dc400117 	ldw	r17,4(sp)
 4006cd0:	dc000017 	ldw	r16,0(sp)
 4006cd4:	dec00704 	addi	sp,sp,28
 4006cd8:	f800283a 	ret
 4006cdc:	21400017 	ldw	r5,0(r4)
 4006ce0:	18c00104 	addi	r3,r3,4
 4006ce4:	21000104 	addi	r4,r4,4
 4006ce8:	197fff15 	stw	r5,-4(r3)
 4006cec:	223ffb36 	bltu	r4,r8,4006cdc <__alt_data_end+0xff006cdc>
 4006cf0:	003fe606 	br	4006c8c <__alt_data_end+0xff006c8c>
 4006cf4:	9c000084 	addi	r16,r19,2
 4006cf8:	003fe406 	br	4006c8c <__alt_data_end+0xff006c8c>

04006cfc <__mcmp>:
 4006cfc:	20800417 	ldw	r2,16(r4)
 4006d00:	28c00417 	ldw	r3,16(r5)
 4006d04:	10c5c83a 	sub	r2,r2,r3
 4006d08:	1000111e 	bne	r2,zero,4006d50 <__mcmp+0x54>
 4006d0c:	18c7883a 	add	r3,r3,r3
 4006d10:	18c7883a 	add	r3,r3,r3
 4006d14:	21000504 	addi	r4,r4,20
 4006d18:	29400504 	addi	r5,r5,20
 4006d1c:	20c5883a 	add	r2,r4,r3
 4006d20:	28cb883a 	add	r5,r5,r3
 4006d24:	00000106 	br	4006d2c <__mcmp+0x30>
 4006d28:	20800a2e 	bgeu	r4,r2,4006d54 <__mcmp+0x58>
 4006d2c:	10bfff04 	addi	r2,r2,-4
 4006d30:	297fff04 	addi	r5,r5,-4
 4006d34:	11800017 	ldw	r6,0(r2)
 4006d38:	28c00017 	ldw	r3,0(r5)
 4006d3c:	30fffa26 	beq	r6,r3,4006d28 <__alt_data_end+0xff006d28>
 4006d40:	30c00236 	bltu	r6,r3,4006d4c <__mcmp+0x50>
 4006d44:	00800044 	movi	r2,1
 4006d48:	f800283a 	ret
 4006d4c:	00bfffc4 	movi	r2,-1
 4006d50:	f800283a 	ret
 4006d54:	0005883a 	mov	r2,zero
 4006d58:	f800283a 	ret

04006d5c <__mdiff>:
 4006d5c:	28c00417 	ldw	r3,16(r5)
 4006d60:	30800417 	ldw	r2,16(r6)
 4006d64:	defffa04 	addi	sp,sp,-24
 4006d68:	dcc00315 	stw	r19,12(sp)
 4006d6c:	dc800215 	stw	r18,8(sp)
 4006d70:	dfc00515 	stw	ra,20(sp)
 4006d74:	dd000415 	stw	r20,16(sp)
 4006d78:	dc400115 	stw	r17,4(sp)
 4006d7c:	dc000015 	stw	r16,0(sp)
 4006d80:	1887c83a 	sub	r3,r3,r2
 4006d84:	2825883a 	mov	r18,r5
 4006d88:	3027883a 	mov	r19,r6
 4006d8c:	1800141e 	bne	r3,zero,4006de0 <__mdiff+0x84>
 4006d90:	1085883a 	add	r2,r2,r2
 4006d94:	1085883a 	add	r2,r2,r2
 4006d98:	2a000504 	addi	r8,r5,20
 4006d9c:	34000504 	addi	r16,r6,20
 4006da0:	4087883a 	add	r3,r8,r2
 4006da4:	8085883a 	add	r2,r16,r2
 4006da8:	00000106 	br	4006db0 <__mdiff+0x54>
 4006dac:	40c0592e 	bgeu	r8,r3,4006f14 <__mdiff+0x1b8>
 4006db0:	18ffff04 	addi	r3,r3,-4
 4006db4:	10bfff04 	addi	r2,r2,-4
 4006db8:	19c00017 	ldw	r7,0(r3)
 4006dbc:	11400017 	ldw	r5,0(r2)
 4006dc0:	397ffa26 	beq	r7,r5,4006dac <__alt_data_end+0xff006dac>
 4006dc4:	3940592e 	bgeu	r7,r5,4006f2c <__mdiff+0x1d0>
 4006dc8:	9005883a 	mov	r2,r18
 4006dcc:	4023883a 	mov	r17,r8
 4006dd0:	9825883a 	mov	r18,r19
 4006dd4:	05000044 	movi	r20,1
 4006dd8:	1027883a 	mov	r19,r2
 4006ddc:	00000406 	br	4006df0 <__mdiff+0x94>
 4006de0:	18005616 	blt	r3,zero,4006f3c <__mdiff+0x1e0>
 4006de4:	34400504 	addi	r17,r6,20
 4006de8:	2c000504 	addi	r16,r5,20
 4006dec:	0029883a 	mov	r20,zero
 4006df0:	91400117 	ldw	r5,4(r18)
 4006df4:	40064340 	call	4006434 <_Balloc>
 4006df8:	92400417 	ldw	r9,16(r18)
 4006dfc:	9b000417 	ldw	r12,16(r19)
 4006e00:	12c00504 	addi	r11,r2,20
 4006e04:	4a51883a 	add	r8,r9,r9
 4006e08:	6319883a 	add	r12,r12,r12
 4006e0c:	4211883a 	add	r8,r8,r8
 4006e10:	6319883a 	add	r12,r12,r12
 4006e14:	15000315 	stw	r20,12(r2)
 4006e18:	8211883a 	add	r8,r16,r8
 4006e1c:	8b19883a 	add	r12,r17,r12
 4006e20:	0007883a 	mov	r3,zero
 4006e24:	81400017 	ldw	r5,0(r16)
 4006e28:	89c00017 	ldw	r7,0(r17)
 4006e2c:	59800104 	addi	r6,r11,4
 4006e30:	293fffcc 	andi	r4,r5,65535
 4006e34:	20c7883a 	add	r3,r4,r3
 4006e38:	393fffcc 	andi	r4,r7,65535
 4006e3c:	1909c83a 	sub	r4,r3,r4
 4006e40:	280ad43a 	srli	r5,r5,16
 4006e44:	380ed43a 	srli	r7,r7,16
 4006e48:	2007d43a 	srai	r3,r4,16
 4006e4c:	213fffcc 	andi	r4,r4,65535
 4006e50:	29cbc83a 	sub	r5,r5,r7
 4006e54:	28c7883a 	add	r3,r5,r3
 4006e58:	180a943a 	slli	r5,r3,16
 4006e5c:	8c400104 	addi	r17,r17,4
 4006e60:	84000104 	addi	r16,r16,4
 4006e64:	2908b03a 	or	r4,r5,r4
 4006e68:	59000015 	stw	r4,0(r11)
 4006e6c:	1807d43a 	srai	r3,r3,16
 4006e70:	3015883a 	mov	r10,r6
 4006e74:	3017883a 	mov	r11,r6
 4006e78:	8b3fea36 	bltu	r17,r12,4006e24 <__alt_data_end+0xff006e24>
 4006e7c:	8200162e 	bgeu	r16,r8,4006ed8 <__mdiff+0x17c>
 4006e80:	8017883a 	mov	r11,r16
 4006e84:	59400017 	ldw	r5,0(r11)
 4006e88:	31800104 	addi	r6,r6,4
 4006e8c:	5ac00104 	addi	r11,r11,4
 4006e90:	293fffcc 	andi	r4,r5,65535
 4006e94:	20c7883a 	add	r3,r4,r3
 4006e98:	280ed43a 	srli	r7,r5,16
 4006e9c:	180bd43a 	srai	r5,r3,16
 4006ea0:	193fffcc 	andi	r4,r3,65535
 4006ea4:	3947883a 	add	r3,r7,r5
 4006ea8:	180a943a 	slli	r5,r3,16
 4006eac:	1807d43a 	srai	r3,r3,16
 4006eb0:	2908b03a 	or	r4,r5,r4
 4006eb4:	313fff15 	stw	r4,-4(r6)
 4006eb8:	5a3ff236 	bltu	r11,r8,4006e84 <__alt_data_end+0xff006e84>
 4006ebc:	0406303a 	nor	r3,zero,r16
 4006ec0:	1a07883a 	add	r3,r3,r8
 4006ec4:	1806d0ba 	srli	r3,r3,2
 4006ec8:	18c00044 	addi	r3,r3,1
 4006ecc:	18c7883a 	add	r3,r3,r3
 4006ed0:	18c7883a 	add	r3,r3,r3
 4006ed4:	50d5883a 	add	r10,r10,r3
 4006ed8:	50ffff04 	addi	r3,r10,-4
 4006edc:	2000041e 	bne	r4,zero,4006ef0 <__mdiff+0x194>
 4006ee0:	18ffff04 	addi	r3,r3,-4
 4006ee4:	19000017 	ldw	r4,0(r3)
 4006ee8:	4a7fffc4 	addi	r9,r9,-1
 4006eec:	203ffc26 	beq	r4,zero,4006ee0 <__alt_data_end+0xff006ee0>
 4006ef0:	12400415 	stw	r9,16(r2)
 4006ef4:	dfc00517 	ldw	ra,20(sp)
 4006ef8:	dd000417 	ldw	r20,16(sp)
 4006efc:	dcc00317 	ldw	r19,12(sp)
 4006f00:	dc800217 	ldw	r18,8(sp)
 4006f04:	dc400117 	ldw	r17,4(sp)
 4006f08:	dc000017 	ldw	r16,0(sp)
 4006f0c:	dec00604 	addi	sp,sp,24
 4006f10:	f800283a 	ret
 4006f14:	000b883a 	mov	r5,zero
 4006f18:	40064340 	call	4006434 <_Balloc>
 4006f1c:	00c00044 	movi	r3,1
 4006f20:	10c00415 	stw	r3,16(r2)
 4006f24:	10000515 	stw	zero,20(r2)
 4006f28:	003ff206 	br	4006ef4 <__alt_data_end+0xff006ef4>
 4006f2c:	8023883a 	mov	r17,r16
 4006f30:	0029883a 	mov	r20,zero
 4006f34:	4021883a 	mov	r16,r8
 4006f38:	003fad06 	br	4006df0 <__alt_data_end+0xff006df0>
 4006f3c:	9005883a 	mov	r2,r18
 4006f40:	94400504 	addi	r17,r18,20
 4006f44:	9c000504 	addi	r16,r19,20
 4006f48:	9825883a 	mov	r18,r19
 4006f4c:	05000044 	movi	r20,1
 4006f50:	1027883a 	mov	r19,r2
 4006f54:	003fa606 	br	4006df0 <__alt_data_end+0xff006df0>

04006f58 <__ulp>:
 4006f58:	295ffc2c 	andhi	r5,r5,32752
 4006f5c:	00bf3034 	movhi	r2,64704
 4006f60:	2887883a 	add	r3,r5,r2
 4006f64:	00c0020e 	bge	zero,r3,4006f70 <__ulp+0x18>
 4006f68:	0005883a 	mov	r2,zero
 4006f6c:	f800283a 	ret
 4006f70:	00c7c83a 	sub	r3,zero,r3
 4006f74:	1807d53a 	srai	r3,r3,20
 4006f78:	008004c4 	movi	r2,19
 4006f7c:	10c00b0e 	bge	r2,r3,4006fac <__ulp+0x54>
 4006f80:	18bffb04 	addi	r2,r3,-20
 4006f84:	01000784 	movi	r4,30
 4006f88:	0007883a 	mov	r3,zero
 4006f8c:	20800516 	blt	r4,r2,4006fa4 <__ulp+0x4c>
 4006f90:	010007c4 	movi	r4,31
 4006f94:	2089c83a 	sub	r4,r4,r2
 4006f98:	00800044 	movi	r2,1
 4006f9c:	1104983a 	sll	r2,r2,r4
 4006fa0:	f800283a 	ret
 4006fa4:	00800044 	movi	r2,1
 4006fa8:	f800283a 	ret
 4006fac:	01400234 	movhi	r5,8
 4006fb0:	28c7d83a 	sra	r3,r5,r3
 4006fb4:	0005883a 	mov	r2,zero
 4006fb8:	f800283a 	ret

04006fbc <__b2d>:
 4006fbc:	defffa04 	addi	sp,sp,-24
 4006fc0:	dc000015 	stw	r16,0(sp)
 4006fc4:	24000417 	ldw	r16,16(r4)
 4006fc8:	dc400115 	stw	r17,4(sp)
 4006fcc:	24400504 	addi	r17,r4,20
 4006fd0:	8421883a 	add	r16,r16,r16
 4006fd4:	8421883a 	add	r16,r16,r16
 4006fd8:	8c21883a 	add	r16,r17,r16
 4006fdc:	dc800215 	stw	r18,8(sp)
 4006fe0:	84bfff17 	ldw	r18,-4(r16)
 4006fe4:	dd000415 	stw	r20,16(sp)
 4006fe8:	dcc00315 	stw	r19,12(sp)
 4006fec:	9009883a 	mov	r4,r18
 4006ff0:	2829883a 	mov	r20,r5
 4006ff4:	dfc00515 	stw	ra,20(sp)
 4006ff8:	40067280 	call	4006728 <__hi0bits>
 4006ffc:	00c00804 	movi	r3,32
 4007000:	1889c83a 	sub	r4,r3,r2
 4007004:	a1000015 	stw	r4,0(r20)
 4007008:	01000284 	movi	r4,10
 400700c:	84ffff04 	addi	r19,r16,-4
 4007010:	20801216 	blt	r4,r2,400705c <__b2d+0xa0>
 4007014:	018002c4 	movi	r6,11
 4007018:	308dc83a 	sub	r6,r6,r2
 400701c:	9186d83a 	srl	r3,r18,r6
 4007020:	18cffc34 	orhi	r3,r3,16368
 4007024:	8cc0212e 	bgeu	r17,r19,40070ac <__b2d+0xf0>
 4007028:	813ffe17 	ldw	r4,-8(r16)
 400702c:	218cd83a 	srl	r6,r4,r6
 4007030:	10800544 	addi	r2,r2,21
 4007034:	9084983a 	sll	r2,r18,r2
 4007038:	1184b03a 	or	r2,r2,r6
 400703c:	dfc00517 	ldw	ra,20(sp)
 4007040:	dd000417 	ldw	r20,16(sp)
 4007044:	dcc00317 	ldw	r19,12(sp)
 4007048:	dc800217 	ldw	r18,8(sp)
 400704c:	dc400117 	ldw	r17,4(sp)
 4007050:	dc000017 	ldw	r16,0(sp)
 4007054:	dec00604 	addi	sp,sp,24
 4007058:	f800283a 	ret
 400705c:	8cc00f2e 	bgeu	r17,r19,400709c <__b2d+0xe0>
 4007060:	117ffd44 	addi	r5,r2,-11
 4007064:	80bffe17 	ldw	r2,-8(r16)
 4007068:	28000e26 	beq	r5,zero,40070a4 <__b2d+0xe8>
 400706c:	1949c83a 	sub	r4,r3,r5
 4007070:	9164983a 	sll	r18,r18,r5
 4007074:	1106d83a 	srl	r3,r2,r4
 4007078:	81bffe04 	addi	r6,r16,-8
 400707c:	948ffc34 	orhi	r18,r18,16368
 4007080:	90c6b03a 	or	r3,r18,r3
 4007084:	89800e2e 	bgeu	r17,r6,40070c0 <__b2d+0x104>
 4007088:	81bffd17 	ldw	r6,-12(r16)
 400708c:	1144983a 	sll	r2,r2,r5
 4007090:	310ad83a 	srl	r5,r6,r4
 4007094:	2884b03a 	or	r2,r5,r2
 4007098:	003fe806 	br	400703c <__alt_data_end+0xff00703c>
 400709c:	10bffd44 	addi	r2,r2,-11
 40070a0:	1000041e 	bne	r2,zero,40070b4 <__b2d+0xf8>
 40070a4:	90cffc34 	orhi	r3,r18,16368
 40070a8:	003fe406 	br	400703c <__alt_data_end+0xff00703c>
 40070ac:	000d883a 	mov	r6,zero
 40070b0:	003fdf06 	br	4007030 <__alt_data_end+0xff007030>
 40070b4:	90a4983a 	sll	r18,r18,r2
 40070b8:	0005883a 	mov	r2,zero
 40070bc:	003ff906 	br	40070a4 <__alt_data_end+0xff0070a4>
 40070c0:	1144983a 	sll	r2,r2,r5
 40070c4:	003fdd06 	br	400703c <__alt_data_end+0xff00703c>

040070c8 <__d2b>:
 40070c8:	defff804 	addi	sp,sp,-32
 40070cc:	dc000215 	stw	r16,8(sp)
 40070d0:	3021883a 	mov	r16,r6
 40070d4:	dc400315 	stw	r17,12(sp)
 40070d8:	8022907a 	slli	r17,r16,1
 40070dc:	dd000615 	stw	r20,24(sp)
 40070e0:	2829883a 	mov	r20,r5
 40070e4:	01400044 	movi	r5,1
 40070e8:	dcc00515 	stw	r19,20(sp)
 40070ec:	dc800415 	stw	r18,16(sp)
 40070f0:	dfc00715 	stw	ra,28(sp)
 40070f4:	3825883a 	mov	r18,r7
 40070f8:	8822d57a 	srli	r17,r17,21
 40070fc:	40064340 	call	4006434 <_Balloc>
 4007100:	1027883a 	mov	r19,r2
 4007104:	00800434 	movhi	r2,16
 4007108:	10bfffc4 	addi	r2,r2,-1
 400710c:	808c703a 	and	r6,r16,r2
 4007110:	88000126 	beq	r17,zero,4007118 <__d2b+0x50>
 4007114:	31800434 	orhi	r6,r6,16
 4007118:	d9800015 	stw	r6,0(sp)
 400711c:	a0002426 	beq	r20,zero,40071b0 <__d2b+0xe8>
 4007120:	d9000104 	addi	r4,sp,4
 4007124:	dd000115 	stw	r20,4(sp)
 4007128:	40067900 	call	4006790 <__lo0bits>
 400712c:	d8c00017 	ldw	r3,0(sp)
 4007130:	10002f1e 	bne	r2,zero,40071f0 <__d2b+0x128>
 4007134:	d9000117 	ldw	r4,4(sp)
 4007138:	99000515 	stw	r4,20(r19)
 400713c:	1821003a 	cmpeq	r16,r3,zero
 4007140:	01000084 	movi	r4,2
 4007144:	2421c83a 	sub	r16,r4,r16
 4007148:	98c00615 	stw	r3,24(r19)
 400714c:	9c000415 	stw	r16,16(r19)
 4007150:	88001f1e 	bne	r17,zero,40071d0 <__d2b+0x108>
 4007154:	10bef384 	addi	r2,r2,-1074
 4007158:	90800015 	stw	r2,0(r18)
 400715c:	00900034 	movhi	r2,16384
 4007160:	10bfffc4 	addi	r2,r2,-1
 4007164:	8085883a 	add	r2,r16,r2
 4007168:	1085883a 	add	r2,r2,r2
 400716c:	1085883a 	add	r2,r2,r2
 4007170:	9885883a 	add	r2,r19,r2
 4007174:	11000517 	ldw	r4,20(r2)
 4007178:	8020917a 	slli	r16,r16,5
 400717c:	40067280 	call	4006728 <__hi0bits>
 4007180:	d8c00817 	ldw	r3,32(sp)
 4007184:	8085c83a 	sub	r2,r16,r2
 4007188:	18800015 	stw	r2,0(r3)
 400718c:	9805883a 	mov	r2,r19
 4007190:	dfc00717 	ldw	ra,28(sp)
 4007194:	dd000617 	ldw	r20,24(sp)
 4007198:	dcc00517 	ldw	r19,20(sp)
 400719c:	dc800417 	ldw	r18,16(sp)
 40071a0:	dc400317 	ldw	r17,12(sp)
 40071a4:	dc000217 	ldw	r16,8(sp)
 40071a8:	dec00804 	addi	sp,sp,32
 40071ac:	f800283a 	ret
 40071b0:	d809883a 	mov	r4,sp
 40071b4:	40067900 	call	4006790 <__lo0bits>
 40071b8:	d8c00017 	ldw	r3,0(sp)
 40071bc:	04000044 	movi	r16,1
 40071c0:	9c000415 	stw	r16,16(r19)
 40071c4:	98c00515 	stw	r3,20(r19)
 40071c8:	10800804 	addi	r2,r2,32
 40071cc:	883fe126 	beq	r17,zero,4007154 <__alt_data_end+0xff007154>
 40071d0:	00c00d44 	movi	r3,53
 40071d4:	8c7ef344 	addi	r17,r17,-1075
 40071d8:	88a3883a 	add	r17,r17,r2
 40071dc:	1885c83a 	sub	r2,r3,r2
 40071e0:	d8c00817 	ldw	r3,32(sp)
 40071e4:	94400015 	stw	r17,0(r18)
 40071e8:	18800015 	stw	r2,0(r3)
 40071ec:	003fe706 	br	400718c <__alt_data_end+0xff00718c>
 40071f0:	01000804 	movi	r4,32
 40071f4:	2089c83a 	sub	r4,r4,r2
 40071f8:	1908983a 	sll	r4,r3,r4
 40071fc:	d9400117 	ldw	r5,4(sp)
 4007200:	1886d83a 	srl	r3,r3,r2
 4007204:	2148b03a 	or	r4,r4,r5
 4007208:	99000515 	stw	r4,20(r19)
 400720c:	d8c00015 	stw	r3,0(sp)
 4007210:	003fca06 	br	400713c <__alt_data_end+0xff00713c>

04007214 <__ratio>:
 4007214:	defff904 	addi	sp,sp,-28
 4007218:	dc400315 	stw	r17,12(sp)
 400721c:	2823883a 	mov	r17,r5
 4007220:	d9400104 	addi	r5,sp,4
 4007224:	dfc00615 	stw	ra,24(sp)
 4007228:	dcc00515 	stw	r19,20(sp)
 400722c:	dc800415 	stw	r18,16(sp)
 4007230:	2027883a 	mov	r19,r4
 4007234:	dc000215 	stw	r16,8(sp)
 4007238:	4006fbc0 	call	4006fbc <__b2d>
 400723c:	d80b883a 	mov	r5,sp
 4007240:	8809883a 	mov	r4,r17
 4007244:	1025883a 	mov	r18,r2
 4007248:	1821883a 	mov	r16,r3
 400724c:	4006fbc0 	call	4006fbc <__b2d>
 4007250:	8a000417 	ldw	r8,16(r17)
 4007254:	99000417 	ldw	r4,16(r19)
 4007258:	d9400117 	ldw	r5,4(sp)
 400725c:	2209c83a 	sub	r4,r4,r8
 4007260:	2010917a 	slli	r8,r4,5
 4007264:	d9000017 	ldw	r4,0(sp)
 4007268:	2909c83a 	sub	r4,r5,r4
 400726c:	4109883a 	add	r4,r8,r4
 4007270:	01000e0e 	bge	zero,r4,40072ac <__ratio+0x98>
 4007274:	2008953a 	slli	r4,r4,20
 4007278:	2421883a 	add	r16,r4,r16
 400727c:	100d883a 	mov	r6,r2
 4007280:	180f883a 	mov	r7,r3
 4007284:	9009883a 	mov	r4,r18
 4007288:	800b883a 	mov	r5,r16
 400728c:	400b2680 	call	400b268 <__divdf3>
 4007290:	dfc00617 	ldw	ra,24(sp)
 4007294:	dcc00517 	ldw	r19,20(sp)
 4007298:	dc800417 	ldw	r18,16(sp)
 400729c:	dc400317 	ldw	r17,12(sp)
 40072a0:	dc000217 	ldw	r16,8(sp)
 40072a4:	dec00704 	addi	sp,sp,28
 40072a8:	f800283a 	ret
 40072ac:	2008953a 	slli	r4,r4,20
 40072b0:	1907c83a 	sub	r3,r3,r4
 40072b4:	003ff106 	br	400727c <__alt_data_end+0xff00727c>

040072b8 <_mprec_log10>:
 40072b8:	defffe04 	addi	sp,sp,-8
 40072bc:	dc000015 	stw	r16,0(sp)
 40072c0:	dfc00115 	stw	ra,4(sp)
 40072c4:	008005c4 	movi	r2,23
 40072c8:	2021883a 	mov	r16,r4
 40072cc:	11000d0e 	bge	r2,r4,4007304 <_mprec_log10+0x4c>
 40072d0:	0005883a 	mov	r2,zero
 40072d4:	00cffc34 	movhi	r3,16368
 40072d8:	843fffc4 	addi	r16,r16,-1
 40072dc:	000d883a 	mov	r6,zero
 40072e0:	01d00934 	movhi	r7,16420
 40072e4:	1009883a 	mov	r4,r2
 40072e8:	180b883a 	mov	r5,r3
 40072ec:	400bda80 	call	400bda8 <__muldf3>
 40072f0:	803ff91e 	bne	r16,zero,40072d8 <__alt_data_end+0xff0072d8>
 40072f4:	dfc00117 	ldw	ra,4(sp)
 40072f8:	dc000017 	ldw	r16,0(sp)
 40072fc:	dec00204 	addi	sp,sp,8
 4007300:	f800283a 	ret
 4007304:	202090fa 	slli	r16,r4,3
 4007308:	00810074 	movhi	r2,1025
 400730c:	10bf4504 	addi	r2,r2,-748
 4007310:	1421883a 	add	r16,r2,r16
 4007314:	80800017 	ldw	r2,0(r16)
 4007318:	80c00117 	ldw	r3,4(r16)
 400731c:	dfc00117 	ldw	ra,4(sp)
 4007320:	dc000017 	ldw	r16,0(sp)
 4007324:	dec00204 	addi	sp,sp,8
 4007328:	f800283a 	ret

0400732c <__copybits>:
 400732c:	297fffc4 	addi	r5,r5,-1
 4007330:	280fd17a 	srai	r7,r5,5
 4007334:	30c00417 	ldw	r3,16(r6)
 4007338:	30800504 	addi	r2,r6,20
 400733c:	39c00044 	addi	r7,r7,1
 4007340:	18c7883a 	add	r3,r3,r3
 4007344:	39cf883a 	add	r7,r7,r7
 4007348:	18c7883a 	add	r3,r3,r3
 400734c:	39cf883a 	add	r7,r7,r7
 4007350:	10c7883a 	add	r3,r2,r3
 4007354:	21cf883a 	add	r7,r4,r7
 4007358:	10c00d2e 	bgeu	r2,r3,4007390 <__copybits+0x64>
 400735c:	200b883a 	mov	r5,r4
 4007360:	12000017 	ldw	r8,0(r2)
 4007364:	29400104 	addi	r5,r5,4
 4007368:	10800104 	addi	r2,r2,4
 400736c:	2a3fff15 	stw	r8,-4(r5)
 4007370:	10fffb36 	bltu	r2,r3,4007360 <__alt_data_end+0xff007360>
 4007374:	1985c83a 	sub	r2,r3,r6
 4007378:	10bffac4 	addi	r2,r2,-21
 400737c:	1004d0ba 	srli	r2,r2,2
 4007380:	10800044 	addi	r2,r2,1
 4007384:	1085883a 	add	r2,r2,r2
 4007388:	1085883a 	add	r2,r2,r2
 400738c:	2089883a 	add	r4,r4,r2
 4007390:	21c0032e 	bgeu	r4,r7,40073a0 <__copybits+0x74>
 4007394:	20000015 	stw	zero,0(r4)
 4007398:	21000104 	addi	r4,r4,4
 400739c:	21fffd36 	bltu	r4,r7,4007394 <__alt_data_end+0xff007394>
 40073a0:	f800283a 	ret

040073a4 <__any_on>:
 40073a4:	20c00417 	ldw	r3,16(r4)
 40073a8:	2805d17a 	srai	r2,r5,5
 40073ac:	21000504 	addi	r4,r4,20
 40073b0:	18800d0e 	bge	r3,r2,40073e8 <__any_on+0x44>
 40073b4:	18c7883a 	add	r3,r3,r3
 40073b8:	18c7883a 	add	r3,r3,r3
 40073bc:	20c7883a 	add	r3,r4,r3
 40073c0:	20c0192e 	bgeu	r4,r3,4007428 <__any_on+0x84>
 40073c4:	18bfff17 	ldw	r2,-4(r3)
 40073c8:	18ffff04 	addi	r3,r3,-4
 40073cc:	1000041e 	bne	r2,zero,40073e0 <__any_on+0x3c>
 40073d0:	20c0142e 	bgeu	r4,r3,4007424 <__any_on+0x80>
 40073d4:	18ffff04 	addi	r3,r3,-4
 40073d8:	19400017 	ldw	r5,0(r3)
 40073dc:	283ffc26 	beq	r5,zero,40073d0 <__alt_data_end+0xff0073d0>
 40073e0:	00800044 	movi	r2,1
 40073e4:	f800283a 	ret
 40073e8:	10c00a0e 	bge	r2,r3,4007414 <__any_on+0x70>
 40073ec:	1085883a 	add	r2,r2,r2
 40073f0:	1085883a 	add	r2,r2,r2
 40073f4:	294007cc 	andi	r5,r5,31
 40073f8:	2087883a 	add	r3,r4,r2
 40073fc:	283ff026 	beq	r5,zero,40073c0 <__alt_data_end+0xff0073c0>
 4007400:	19800017 	ldw	r6,0(r3)
 4007404:	3144d83a 	srl	r2,r6,r5
 4007408:	114a983a 	sll	r5,r2,r5
 400740c:	317ff41e 	bne	r6,r5,40073e0 <__alt_data_end+0xff0073e0>
 4007410:	003feb06 	br	40073c0 <__alt_data_end+0xff0073c0>
 4007414:	1085883a 	add	r2,r2,r2
 4007418:	1085883a 	add	r2,r2,r2
 400741c:	2087883a 	add	r3,r4,r2
 4007420:	003fe706 	br	40073c0 <__alt_data_end+0xff0073c0>
 4007424:	f800283a 	ret
 4007428:	0005883a 	mov	r2,zero
 400742c:	f800283a 	ret

04007430 <_putc_r>:
 4007430:	defffc04 	addi	sp,sp,-16
 4007434:	dc000215 	stw	r16,8(sp)
 4007438:	dfc00315 	stw	ra,12(sp)
 400743c:	2021883a 	mov	r16,r4
 4007440:	20000226 	beq	r4,zero,400744c <_putc_r+0x1c>
 4007444:	20800e17 	ldw	r2,56(r4)
 4007448:	10001b26 	beq	r2,zero,40074b8 <_putc_r+0x88>
 400744c:	30800217 	ldw	r2,8(r6)
 4007450:	10bfffc4 	addi	r2,r2,-1
 4007454:	30800215 	stw	r2,8(r6)
 4007458:	10000a16 	blt	r2,zero,4007484 <_putc_r+0x54>
 400745c:	30800017 	ldw	r2,0(r6)
 4007460:	11400005 	stb	r5,0(r2)
 4007464:	30800017 	ldw	r2,0(r6)
 4007468:	10c00044 	addi	r3,r2,1
 400746c:	30c00015 	stw	r3,0(r6)
 4007470:	10800003 	ldbu	r2,0(r2)
 4007474:	dfc00317 	ldw	ra,12(sp)
 4007478:	dc000217 	ldw	r16,8(sp)
 400747c:	dec00404 	addi	sp,sp,16
 4007480:	f800283a 	ret
 4007484:	30c00617 	ldw	r3,24(r6)
 4007488:	10c00616 	blt	r2,r3,40074a4 <_putc_r+0x74>
 400748c:	30800017 	ldw	r2,0(r6)
 4007490:	00c00284 	movi	r3,10
 4007494:	11400005 	stb	r5,0(r2)
 4007498:	30800017 	ldw	r2,0(r6)
 400749c:	11400003 	ldbu	r5,0(r2)
 40074a0:	28fff11e 	bne	r5,r3,4007468 <__alt_data_end+0xff007468>
 40074a4:	8009883a 	mov	r4,r16
 40074a8:	dfc00317 	ldw	ra,12(sp)
 40074ac:	dc000217 	ldw	r16,8(sp)
 40074b0:	dec00404 	addi	sp,sp,16
 40074b4:	40094241 	jmpi	4009424 <__swbuf_r>
 40074b8:	d9400015 	stw	r5,0(sp)
 40074bc:	d9800115 	stw	r6,4(sp)
 40074c0:	4004a180 	call	4004a18 <__sinit>
 40074c4:	d9800117 	ldw	r6,4(sp)
 40074c8:	d9400017 	ldw	r5,0(sp)
 40074cc:	003fdf06 	br	400744c <__alt_data_end+0xff00744c>

040074d0 <putc>:
 40074d0:	00810074 	movhi	r2,1025
 40074d4:	defffc04 	addi	sp,sp,-16
 40074d8:	10868004 	addi	r2,r2,6656
 40074dc:	dc000115 	stw	r16,4(sp)
 40074e0:	14000017 	ldw	r16,0(r2)
 40074e4:	dc400215 	stw	r17,8(sp)
 40074e8:	dfc00315 	stw	ra,12(sp)
 40074ec:	2023883a 	mov	r17,r4
 40074f0:	80000226 	beq	r16,zero,40074fc <putc+0x2c>
 40074f4:	80800e17 	ldw	r2,56(r16)
 40074f8:	10001a26 	beq	r2,zero,4007564 <putc+0x94>
 40074fc:	28800217 	ldw	r2,8(r5)
 4007500:	10bfffc4 	addi	r2,r2,-1
 4007504:	28800215 	stw	r2,8(r5)
 4007508:	10000b16 	blt	r2,zero,4007538 <putc+0x68>
 400750c:	28800017 	ldw	r2,0(r5)
 4007510:	14400005 	stb	r17,0(r2)
 4007514:	28800017 	ldw	r2,0(r5)
 4007518:	10c00044 	addi	r3,r2,1
 400751c:	28c00015 	stw	r3,0(r5)
 4007520:	10800003 	ldbu	r2,0(r2)
 4007524:	dfc00317 	ldw	ra,12(sp)
 4007528:	dc400217 	ldw	r17,8(sp)
 400752c:	dc000117 	ldw	r16,4(sp)
 4007530:	dec00404 	addi	sp,sp,16
 4007534:	f800283a 	ret
 4007538:	28c00617 	ldw	r3,24(r5)
 400753c:	10c00e16 	blt	r2,r3,4007578 <putc+0xa8>
 4007540:	28800017 	ldw	r2,0(r5)
 4007544:	01000284 	movi	r4,10
 4007548:	14400005 	stb	r17,0(r2)
 400754c:	28800017 	ldw	r2,0(r5)
 4007550:	10c00003 	ldbu	r3,0(r2)
 4007554:	193ff01e 	bne	r3,r4,4007518 <__alt_data_end+0xff007518>
 4007558:	280d883a 	mov	r6,r5
 400755c:	180b883a 	mov	r5,r3
 4007560:	00000706 	br	4007580 <putc+0xb0>
 4007564:	8009883a 	mov	r4,r16
 4007568:	d9400015 	stw	r5,0(sp)
 400756c:	4004a180 	call	4004a18 <__sinit>
 4007570:	d9400017 	ldw	r5,0(sp)
 4007574:	003fe106 	br	40074fc <__alt_data_end+0xff0074fc>
 4007578:	280d883a 	mov	r6,r5
 400757c:	880b883a 	mov	r5,r17
 4007580:	8009883a 	mov	r4,r16
 4007584:	dfc00317 	ldw	ra,12(sp)
 4007588:	dc400217 	ldw	r17,8(sp)
 400758c:	dc000117 	ldw	r16,4(sp)
 4007590:	dec00404 	addi	sp,sp,16
 4007594:	40094241 	jmpi	4009424 <__swbuf_r>

04007598 <_realloc_r>:
 4007598:	defff604 	addi	sp,sp,-40
 400759c:	dc800215 	stw	r18,8(sp)
 40075a0:	dfc00915 	stw	ra,36(sp)
 40075a4:	df000815 	stw	fp,32(sp)
 40075a8:	ddc00715 	stw	r23,28(sp)
 40075ac:	dd800615 	stw	r22,24(sp)
 40075b0:	dd400515 	stw	r21,20(sp)
 40075b4:	dd000415 	stw	r20,16(sp)
 40075b8:	dcc00315 	stw	r19,12(sp)
 40075bc:	dc400115 	stw	r17,4(sp)
 40075c0:	dc000015 	stw	r16,0(sp)
 40075c4:	3025883a 	mov	r18,r6
 40075c8:	2800b726 	beq	r5,zero,40078a8 <_realloc_r+0x310>
 40075cc:	282b883a 	mov	r21,r5
 40075d0:	2029883a 	mov	r20,r4
 40075d4:	400d5e80 	call	400d5e8 <__malloc_lock>
 40075d8:	a8bfff17 	ldw	r2,-4(r21)
 40075dc:	043fff04 	movi	r16,-4
 40075e0:	90c002c4 	addi	r3,r18,11
 40075e4:	01000584 	movi	r4,22
 40075e8:	acfffe04 	addi	r19,r21,-8
 40075ec:	1420703a 	and	r16,r2,r16
 40075f0:	20c0332e 	bgeu	r4,r3,40076c0 <_realloc_r+0x128>
 40075f4:	047ffe04 	movi	r17,-8
 40075f8:	1c62703a 	and	r17,r3,r17
 40075fc:	8807883a 	mov	r3,r17
 4007600:	88005816 	blt	r17,zero,4007764 <_realloc_r+0x1cc>
 4007604:	8c805736 	bltu	r17,r18,4007764 <_realloc_r+0x1cc>
 4007608:	80c0300e 	bge	r16,r3,40076cc <_realloc_r+0x134>
 400760c:	07010074 	movhi	fp,1025
 4007610:	e700f404 	addi	fp,fp,976
 4007614:	e1c00217 	ldw	r7,8(fp)
 4007618:	9c09883a 	add	r4,r19,r16
 400761c:	22000117 	ldw	r8,4(r4)
 4007620:	21c06326 	beq	r4,r7,40077b0 <_realloc_r+0x218>
 4007624:	017fff84 	movi	r5,-2
 4007628:	414a703a 	and	r5,r8,r5
 400762c:	214b883a 	add	r5,r4,r5
 4007630:	29800117 	ldw	r6,4(r5)
 4007634:	3180004c 	andi	r6,r6,1
 4007638:	30003f26 	beq	r6,zero,4007738 <_realloc_r+0x1a0>
 400763c:	1080004c 	andi	r2,r2,1
 4007640:	10008326 	beq	r2,zero,4007850 <_realloc_r+0x2b8>
 4007644:	900b883a 	mov	r5,r18
 4007648:	a009883a 	mov	r4,r20
 400764c:	40057780 	call	4005778 <_malloc_r>
 4007650:	1025883a 	mov	r18,r2
 4007654:	10011e26 	beq	r2,zero,4007ad0 <_realloc_r+0x538>
 4007658:	a93fff17 	ldw	r4,-4(r21)
 400765c:	10fffe04 	addi	r3,r2,-8
 4007660:	00bfff84 	movi	r2,-2
 4007664:	2084703a 	and	r2,r4,r2
 4007668:	9885883a 	add	r2,r19,r2
 400766c:	1880ee26 	beq	r3,r2,4007a28 <_realloc_r+0x490>
 4007670:	81bfff04 	addi	r6,r16,-4
 4007674:	00800904 	movi	r2,36
 4007678:	1180b836 	bltu	r2,r6,400795c <_realloc_r+0x3c4>
 400767c:	00c004c4 	movi	r3,19
 4007680:	19809636 	bltu	r3,r6,40078dc <_realloc_r+0x344>
 4007684:	9005883a 	mov	r2,r18
 4007688:	a807883a 	mov	r3,r21
 400768c:	19000017 	ldw	r4,0(r3)
 4007690:	11000015 	stw	r4,0(r2)
 4007694:	19000117 	ldw	r4,4(r3)
 4007698:	11000115 	stw	r4,4(r2)
 400769c:	18c00217 	ldw	r3,8(r3)
 40076a0:	10c00215 	stw	r3,8(r2)
 40076a4:	a80b883a 	mov	r5,r21
 40076a8:	a009883a 	mov	r4,r20
 40076ac:	4004b8c0 	call	4004b8c <_free_r>
 40076b0:	a009883a 	mov	r4,r20
 40076b4:	400d60c0 	call	400d60c <__malloc_unlock>
 40076b8:	9005883a 	mov	r2,r18
 40076bc:	00001206 	br	4007708 <_realloc_r+0x170>
 40076c0:	00c00404 	movi	r3,16
 40076c4:	1823883a 	mov	r17,r3
 40076c8:	003fce06 	br	4007604 <__alt_data_end+0xff007604>
 40076cc:	a825883a 	mov	r18,r21
 40076d0:	8445c83a 	sub	r2,r16,r17
 40076d4:	00c003c4 	movi	r3,15
 40076d8:	18802636 	bltu	r3,r2,4007774 <_realloc_r+0x1dc>
 40076dc:	99800117 	ldw	r6,4(r19)
 40076e0:	9c07883a 	add	r3,r19,r16
 40076e4:	3180004c 	andi	r6,r6,1
 40076e8:	3420b03a 	or	r16,r6,r16
 40076ec:	9c000115 	stw	r16,4(r19)
 40076f0:	18800117 	ldw	r2,4(r3)
 40076f4:	10800054 	ori	r2,r2,1
 40076f8:	18800115 	stw	r2,4(r3)
 40076fc:	a009883a 	mov	r4,r20
 4007700:	400d60c0 	call	400d60c <__malloc_unlock>
 4007704:	9005883a 	mov	r2,r18
 4007708:	dfc00917 	ldw	ra,36(sp)
 400770c:	df000817 	ldw	fp,32(sp)
 4007710:	ddc00717 	ldw	r23,28(sp)
 4007714:	dd800617 	ldw	r22,24(sp)
 4007718:	dd400517 	ldw	r21,20(sp)
 400771c:	dd000417 	ldw	r20,16(sp)
 4007720:	dcc00317 	ldw	r19,12(sp)
 4007724:	dc800217 	ldw	r18,8(sp)
 4007728:	dc400117 	ldw	r17,4(sp)
 400772c:	dc000017 	ldw	r16,0(sp)
 4007730:	dec00a04 	addi	sp,sp,40
 4007734:	f800283a 	ret
 4007738:	017fff04 	movi	r5,-4
 400773c:	414a703a 	and	r5,r8,r5
 4007740:	814d883a 	add	r6,r16,r5
 4007744:	30c01f16 	blt	r6,r3,40077c4 <_realloc_r+0x22c>
 4007748:	20800317 	ldw	r2,12(r4)
 400774c:	20c00217 	ldw	r3,8(r4)
 4007750:	a825883a 	mov	r18,r21
 4007754:	3021883a 	mov	r16,r6
 4007758:	18800315 	stw	r2,12(r3)
 400775c:	10c00215 	stw	r3,8(r2)
 4007760:	003fdb06 	br	40076d0 <__alt_data_end+0xff0076d0>
 4007764:	00800304 	movi	r2,12
 4007768:	a0800015 	stw	r2,0(r20)
 400776c:	0005883a 	mov	r2,zero
 4007770:	003fe506 	br	4007708 <__alt_data_end+0xff007708>
 4007774:	98c00117 	ldw	r3,4(r19)
 4007778:	9c4b883a 	add	r5,r19,r17
 400777c:	11000054 	ori	r4,r2,1
 4007780:	18c0004c 	andi	r3,r3,1
 4007784:	1c62b03a 	or	r17,r3,r17
 4007788:	9c400115 	stw	r17,4(r19)
 400778c:	29000115 	stw	r4,4(r5)
 4007790:	2885883a 	add	r2,r5,r2
 4007794:	10c00117 	ldw	r3,4(r2)
 4007798:	29400204 	addi	r5,r5,8
 400779c:	a009883a 	mov	r4,r20
 40077a0:	18c00054 	ori	r3,r3,1
 40077a4:	10c00115 	stw	r3,4(r2)
 40077a8:	4004b8c0 	call	4004b8c <_free_r>
 40077ac:	003fd306 	br	40076fc <__alt_data_end+0xff0076fc>
 40077b0:	017fff04 	movi	r5,-4
 40077b4:	414a703a 	and	r5,r8,r5
 40077b8:	89800404 	addi	r6,r17,16
 40077bc:	8151883a 	add	r8,r16,r5
 40077c0:	4180590e 	bge	r8,r6,4007928 <_realloc_r+0x390>
 40077c4:	1080004c 	andi	r2,r2,1
 40077c8:	103f9e1e 	bne	r2,zero,4007644 <__alt_data_end+0xff007644>
 40077cc:	adbffe17 	ldw	r22,-8(r21)
 40077d0:	00bfff04 	movi	r2,-4
 40077d4:	9dadc83a 	sub	r22,r19,r22
 40077d8:	b1800117 	ldw	r6,4(r22)
 40077dc:	3084703a 	and	r2,r6,r2
 40077e0:	20002026 	beq	r4,zero,4007864 <_realloc_r+0x2cc>
 40077e4:	80af883a 	add	r23,r16,r2
 40077e8:	b96f883a 	add	r23,r23,r5
 40077ec:	21c05f26 	beq	r4,r7,400796c <_realloc_r+0x3d4>
 40077f0:	b8c01c16 	blt	r23,r3,4007864 <_realloc_r+0x2cc>
 40077f4:	20800317 	ldw	r2,12(r4)
 40077f8:	20c00217 	ldw	r3,8(r4)
 40077fc:	81bfff04 	addi	r6,r16,-4
 4007800:	01000904 	movi	r4,36
 4007804:	18800315 	stw	r2,12(r3)
 4007808:	10c00215 	stw	r3,8(r2)
 400780c:	b0c00217 	ldw	r3,8(r22)
 4007810:	b0800317 	ldw	r2,12(r22)
 4007814:	b4800204 	addi	r18,r22,8
 4007818:	18800315 	stw	r2,12(r3)
 400781c:	10c00215 	stw	r3,8(r2)
 4007820:	21801b36 	bltu	r4,r6,4007890 <_realloc_r+0x2f8>
 4007824:	008004c4 	movi	r2,19
 4007828:	1180352e 	bgeu	r2,r6,4007900 <_realloc_r+0x368>
 400782c:	a8800017 	ldw	r2,0(r21)
 4007830:	b0800215 	stw	r2,8(r22)
 4007834:	a8800117 	ldw	r2,4(r21)
 4007838:	b0800315 	stw	r2,12(r22)
 400783c:	008006c4 	movi	r2,27
 4007840:	11807f36 	bltu	r2,r6,4007a40 <_realloc_r+0x4a8>
 4007844:	b0800404 	addi	r2,r22,16
 4007848:	ad400204 	addi	r21,r21,8
 400784c:	00002d06 	br	4007904 <_realloc_r+0x36c>
 4007850:	adbffe17 	ldw	r22,-8(r21)
 4007854:	00bfff04 	movi	r2,-4
 4007858:	9dadc83a 	sub	r22,r19,r22
 400785c:	b1000117 	ldw	r4,4(r22)
 4007860:	2084703a 	and	r2,r4,r2
 4007864:	b03f7726 	beq	r22,zero,4007644 <__alt_data_end+0xff007644>
 4007868:	80af883a 	add	r23,r16,r2
 400786c:	b8ff7516 	blt	r23,r3,4007644 <__alt_data_end+0xff007644>
 4007870:	b0800317 	ldw	r2,12(r22)
 4007874:	b0c00217 	ldw	r3,8(r22)
 4007878:	81bfff04 	addi	r6,r16,-4
 400787c:	01000904 	movi	r4,36
 4007880:	18800315 	stw	r2,12(r3)
 4007884:	10c00215 	stw	r3,8(r2)
 4007888:	b4800204 	addi	r18,r22,8
 400788c:	21bfe52e 	bgeu	r4,r6,4007824 <__alt_data_end+0xff007824>
 4007890:	a80b883a 	mov	r5,r21
 4007894:	9009883a 	mov	r4,r18
 4007898:	40061b00 	call	40061b0 <memmove>
 400789c:	b821883a 	mov	r16,r23
 40078a0:	b027883a 	mov	r19,r22
 40078a4:	003f8a06 	br	40076d0 <__alt_data_end+0xff0076d0>
 40078a8:	300b883a 	mov	r5,r6
 40078ac:	dfc00917 	ldw	ra,36(sp)
 40078b0:	df000817 	ldw	fp,32(sp)
 40078b4:	ddc00717 	ldw	r23,28(sp)
 40078b8:	dd800617 	ldw	r22,24(sp)
 40078bc:	dd400517 	ldw	r21,20(sp)
 40078c0:	dd000417 	ldw	r20,16(sp)
 40078c4:	dcc00317 	ldw	r19,12(sp)
 40078c8:	dc800217 	ldw	r18,8(sp)
 40078cc:	dc400117 	ldw	r17,4(sp)
 40078d0:	dc000017 	ldw	r16,0(sp)
 40078d4:	dec00a04 	addi	sp,sp,40
 40078d8:	40057781 	jmpi	4005778 <_malloc_r>
 40078dc:	a8c00017 	ldw	r3,0(r21)
 40078e0:	90c00015 	stw	r3,0(r18)
 40078e4:	a8c00117 	ldw	r3,4(r21)
 40078e8:	90c00115 	stw	r3,4(r18)
 40078ec:	00c006c4 	movi	r3,27
 40078f0:	19804536 	bltu	r3,r6,4007a08 <_realloc_r+0x470>
 40078f4:	90800204 	addi	r2,r18,8
 40078f8:	a8c00204 	addi	r3,r21,8
 40078fc:	003f6306 	br	400768c <__alt_data_end+0xff00768c>
 4007900:	9005883a 	mov	r2,r18
 4007904:	a8c00017 	ldw	r3,0(r21)
 4007908:	b821883a 	mov	r16,r23
 400790c:	b027883a 	mov	r19,r22
 4007910:	10c00015 	stw	r3,0(r2)
 4007914:	a8c00117 	ldw	r3,4(r21)
 4007918:	10c00115 	stw	r3,4(r2)
 400791c:	a8c00217 	ldw	r3,8(r21)
 4007920:	10c00215 	stw	r3,8(r2)
 4007924:	003f6a06 	br	40076d0 <__alt_data_end+0xff0076d0>
 4007928:	9c67883a 	add	r19,r19,r17
 400792c:	4445c83a 	sub	r2,r8,r17
 4007930:	e4c00215 	stw	r19,8(fp)
 4007934:	10800054 	ori	r2,r2,1
 4007938:	98800115 	stw	r2,4(r19)
 400793c:	a8bfff17 	ldw	r2,-4(r21)
 4007940:	a009883a 	mov	r4,r20
 4007944:	1080004c 	andi	r2,r2,1
 4007948:	1462b03a 	or	r17,r2,r17
 400794c:	ac7fff15 	stw	r17,-4(r21)
 4007950:	400d60c0 	call	400d60c <__malloc_unlock>
 4007954:	a805883a 	mov	r2,r21
 4007958:	003f6b06 	br	4007708 <__alt_data_end+0xff007708>
 400795c:	a80b883a 	mov	r5,r21
 4007960:	9009883a 	mov	r4,r18
 4007964:	40061b00 	call	40061b0 <memmove>
 4007968:	003f4e06 	br	40076a4 <__alt_data_end+0xff0076a4>
 400796c:	89000404 	addi	r4,r17,16
 4007970:	b93fbc16 	blt	r23,r4,4007864 <__alt_data_end+0xff007864>
 4007974:	b0800317 	ldw	r2,12(r22)
 4007978:	b0c00217 	ldw	r3,8(r22)
 400797c:	81bfff04 	addi	r6,r16,-4
 4007980:	01000904 	movi	r4,36
 4007984:	18800315 	stw	r2,12(r3)
 4007988:	10c00215 	stw	r3,8(r2)
 400798c:	b4800204 	addi	r18,r22,8
 4007990:	21804336 	bltu	r4,r6,4007aa0 <_realloc_r+0x508>
 4007994:	008004c4 	movi	r2,19
 4007998:	11803f2e 	bgeu	r2,r6,4007a98 <_realloc_r+0x500>
 400799c:	a8800017 	ldw	r2,0(r21)
 40079a0:	b0800215 	stw	r2,8(r22)
 40079a4:	a8800117 	ldw	r2,4(r21)
 40079a8:	b0800315 	stw	r2,12(r22)
 40079ac:	008006c4 	movi	r2,27
 40079b0:	11803f36 	bltu	r2,r6,4007ab0 <_realloc_r+0x518>
 40079b4:	b0800404 	addi	r2,r22,16
 40079b8:	ad400204 	addi	r21,r21,8
 40079bc:	a8c00017 	ldw	r3,0(r21)
 40079c0:	10c00015 	stw	r3,0(r2)
 40079c4:	a8c00117 	ldw	r3,4(r21)
 40079c8:	10c00115 	stw	r3,4(r2)
 40079cc:	a8c00217 	ldw	r3,8(r21)
 40079d0:	10c00215 	stw	r3,8(r2)
 40079d4:	b447883a 	add	r3,r22,r17
 40079d8:	bc45c83a 	sub	r2,r23,r17
 40079dc:	e0c00215 	stw	r3,8(fp)
 40079e0:	10800054 	ori	r2,r2,1
 40079e4:	18800115 	stw	r2,4(r3)
 40079e8:	b0800117 	ldw	r2,4(r22)
 40079ec:	a009883a 	mov	r4,r20
 40079f0:	1080004c 	andi	r2,r2,1
 40079f4:	1462b03a 	or	r17,r2,r17
 40079f8:	b4400115 	stw	r17,4(r22)
 40079fc:	400d60c0 	call	400d60c <__malloc_unlock>
 4007a00:	9005883a 	mov	r2,r18
 4007a04:	003f4006 	br	4007708 <__alt_data_end+0xff007708>
 4007a08:	a8c00217 	ldw	r3,8(r21)
 4007a0c:	90c00215 	stw	r3,8(r18)
 4007a10:	a8c00317 	ldw	r3,12(r21)
 4007a14:	90c00315 	stw	r3,12(r18)
 4007a18:	30801126 	beq	r6,r2,4007a60 <_realloc_r+0x4c8>
 4007a1c:	90800404 	addi	r2,r18,16
 4007a20:	a8c00404 	addi	r3,r21,16
 4007a24:	003f1906 	br	400768c <__alt_data_end+0xff00768c>
 4007a28:	90ffff17 	ldw	r3,-4(r18)
 4007a2c:	00bfff04 	movi	r2,-4
 4007a30:	a825883a 	mov	r18,r21
 4007a34:	1884703a 	and	r2,r3,r2
 4007a38:	80a1883a 	add	r16,r16,r2
 4007a3c:	003f2406 	br	40076d0 <__alt_data_end+0xff0076d0>
 4007a40:	a8800217 	ldw	r2,8(r21)
 4007a44:	b0800415 	stw	r2,16(r22)
 4007a48:	a8800317 	ldw	r2,12(r21)
 4007a4c:	b0800515 	stw	r2,20(r22)
 4007a50:	31000a26 	beq	r6,r4,4007a7c <_realloc_r+0x4e4>
 4007a54:	b0800604 	addi	r2,r22,24
 4007a58:	ad400404 	addi	r21,r21,16
 4007a5c:	003fa906 	br	4007904 <__alt_data_end+0xff007904>
 4007a60:	a9000417 	ldw	r4,16(r21)
 4007a64:	90800604 	addi	r2,r18,24
 4007a68:	a8c00604 	addi	r3,r21,24
 4007a6c:	91000415 	stw	r4,16(r18)
 4007a70:	a9000517 	ldw	r4,20(r21)
 4007a74:	91000515 	stw	r4,20(r18)
 4007a78:	003f0406 	br	400768c <__alt_data_end+0xff00768c>
 4007a7c:	a8c00417 	ldw	r3,16(r21)
 4007a80:	ad400604 	addi	r21,r21,24
 4007a84:	b0800804 	addi	r2,r22,32
 4007a88:	b0c00615 	stw	r3,24(r22)
 4007a8c:	a8ffff17 	ldw	r3,-4(r21)
 4007a90:	b0c00715 	stw	r3,28(r22)
 4007a94:	003f9b06 	br	4007904 <__alt_data_end+0xff007904>
 4007a98:	9005883a 	mov	r2,r18
 4007a9c:	003fc706 	br	40079bc <__alt_data_end+0xff0079bc>
 4007aa0:	a80b883a 	mov	r5,r21
 4007aa4:	9009883a 	mov	r4,r18
 4007aa8:	40061b00 	call	40061b0 <memmove>
 4007aac:	003fc906 	br	40079d4 <__alt_data_end+0xff0079d4>
 4007ab0:	a8800217 	ldw	r2,8(r21)
 4007ab4:	b0800415 	stw	r2,16(r22)
 4007ab8:	a8800317 	ldw	r2,12(r21)
 4007abc:	b0800515 	stw	r2,20(r22)
 4007ac0:	31000726 	beq	r6,r4,4007ae0 <_realloc_r+0x548>
 4007ac4:	b0800604 	addi	r2,r22,24
 4007ac8:	ad400404 	addi	r21,r21,16
 4007acc:	003fbb06 	br	40079bc <__alt_data_end+0xff0079bc>
 4007ad0:	a009883a 	mov	r4,r20
 4007ad4:	400d60c0 	call	400d60c <__malloc_unlock>
 4007ad8:	0005883a 	mov	r2,zero
 4007adc:	003f0a06 	br	4007708 <__alt_data_end+0xff007708>
 4007ae0:	a8c00417 	ldw	r3,16(r21)
 4007ae4:	ad400604 	addi	r21,r21,24
 4007ae8:	b0800804 	addi	r2,r22,32
 4007aec:	b0c00615 	stw	r3,24(r22)
 4007af0:	a8ffff17 	ldw	r3,-4(r21)
 4007af4:	b0c00715 	stw	r3,28(r22)
 4007af8:	003fb006 	br	40079bc <__alt_data_end+0xff0079bc>

04007afc <__fpclassifyd>:
 4007afc:	00a00034 	movhi	r2,32768
 4007b00:	10bfffc4 	addi	r2,r2,-1
 4007b04:	2884703a 	and	r2,r5,r2
 4007b08:	10000726 	beq	r2,zero,4007b28 <__fpclassifyd+0x2c>
 4007b0c:	00fffc34 	movhi	r3,65520
 4007b10:	019ff834 	movhi	r6,32736
 4007b14:	28c7883a 	add	r3,r5,r3
 4007b18:	31bfffc4 	addi	r6,r6,-1
 4007b1c:	30c00536 	bltu	r6,r3,4007b34 <__fpclassifyd+0x38>
 4007b20:	00800104 	movi	r2,4
 4007b24:	f800283a 	ret
 4007b28:	2000021e 	bne	r4,zero,4007b34 <__fpclassifyd+0x38>
 4007b2c:	00800084 	movi	r2,2
 4007b30:	f800283a 	ret
 4007b34:	00dffc34 	movhi	r3,32752
 4007b38:	019ff834 	movhi	r6,32736
 4007b3c:	28cb883a 	add	r5,r5,r3
 4007b40:	31bfffc4 	addi	r6,r6,-1
 4007b44:	317ff62e 	bgeu	r6,r5,4007b20 <__alt_data_end+0xff007b20>
 4007b48:	01400434 	movhi	r5,16
 4007b4c:	297fffc4 	addi	r5,r5,-1
 4007b50:	28800236 	bltu	r5,r2,4007b5c <__fpclassifyd+0x60>
 4007b54:	008000c4 	movi	r2,3
 4007b58:	f800283a 	ret
 4007b5c:	10c00226 	beq	r2,r3,4007b68 <__fpclassifyd+0x6c>
 4007b60:	0005883a 	mov	r2,zero
 4007b64:	f800283a 	ret
 4007b68:	2005003a 	cmpeq	r2,r4,zero
 4007b6c:	f800283a 	ret

04007b70 <_sbrk_r>:
 4007b70:	defffd04 	addi	sp,sp,-12
 4007b74:	dc000015 	stw	r16,0(sp)
 4007b78:	04010074 	movhi	r16,1025
 4007b7c:	dc400115 	stw	r17,4(sp)
 4007b80:	840d5b04 	addi	r16,r16,13676
 4007b84:	2023883a 	mov	r17,r4
 4007b88:	2809883a 	mov	r4,r5
 4007b8c:	dfc00215 	stw	ra,8(sp)
 4007b90:	80000015 	stw	zero,0(r16)
 4007b94:	400d7cc0 	call	400d7cc <sbrk>
 4007b98:	00ffffc4 	movi	r3,-1
 4007b9c:	10c00526 	beq	r2,r3,4007bb4 <_sbrk_r+0x44>
 4007ba0:	dfc00217 	ldw	ra,8(sp)
 4007ba4:	dc400117 	ldw	r17,4(sp)
 4007ba8:	dc000017 	ldw	r16,0(sp)
 4007bac:	dec00304 	addi	sp,sp,12
 4007bb0:	f800283a 	ret
 4007bb4:	80c00017 	ldw	r3,0(r16)
 4007bb8:	183ff926 	beq	r3,zero,4007ba0 <__alt_data_end+0xff007ba0>
 4007bbc:	88c00015 	stw	r3,0(r17)
 4007bc0:	003ff706 	br	4007ba0 <__alt_data_end+0xff007ba0>

04007bc4 <__sread>:
 4007bc4:	defffe04 	addi	sp,sp,-8
 4007bc8:	dc000015 	stw	r16,0(sp)
 4007bcc:	2821883a 	mov	r16,r5
 4007bd0:	2940038f 	ldh	r5,14(r5)
 4007bd4:	dfc00115 	stw	ra,4(sp)
 4007bd8:	4009b100 	call	4009b10 <_read_r>
 4007bdc:	10000716 	blt	r2,zero,4007bfc <__sread+0x38>
 4007be0:	80c01417 	ldw	r3,80(r16)
 4007be4:	1887883a 	add	r3,r3,r2
 4007be8:	80c01415 	stw	r3,80(r16)
 4007bec:	dfc00117 	ldw	ra,4(sp)
 4007bf0:	dc000017 	ldw	r16,0(sp)
 4007bf4:	dec00204 	addi	sp,sp,8
 4007bf8:	f800283a 	ret
 4007bfc:	80c0030b 	ldhu	r3,12(r16)
 4007c00:	18fbffcc 	andi	r3,r3,61439
 4007c04:	80c0030d 	sth	r3,12(r16)
 4007c08:	dfc00117 	ldw	ra,4(sp)
 4007c0c:	dc000017 	ldw	r16,0(sp)
 4007c10:	dec00204 	addi	sp,sp,8
 4007c14:	f800283a 	ret

04007c18 <__seofread>:
 4007c18:	0005883a 	mov	r2,zero
 4007c1c:	f800283a 	ret

04007c20 <__swrite>:
 4007c20:	2880030b 	ldhu	r2,12(r5)
 4007c24:	defffb04 	addi	sp,sp,-20
 4007c28:	dcc00315 	stw	r19,12(sp)
 4007c2c:	dc800215 	stw	r18,8(sp)
 4007c30:	dc400115 	stw	r17,4(sp)
 4007c34:	dc000015 	stw	r16,0(sp)
 4007c38:	dfc00415 	stw	ra,16(sp)
 4007c3c:	10c0400c 	andi	r3,r2,256
 4007c40:	2821883a 	mov	r16,r5
 4007c44:	2023883a 	mov	r17,r4
 4007c48:	3025883a 	mov	r18,r6
 4007c4c:	3827883a 	mov	r19,r7
 4007c50:	18000526 	beq	r3,zero,4007c68 <__swrite+0x48>
 4007c54:	2940038f 	ldh	r5,14(r5)
 4007c58:	01c00084 	movi	r7,2
 4007c5c:	000d883a 	mov	r6,zero
 4007c60:	4009ab00 	call	4009ab0 <_lseek_r>
 4007c64:	8080030b 	ldhu	r2,12(r16)
 4007c68:	8140038f 	ldh	r5,14(r16)
 4007c6c:	10bbffcc 	andi	r2,r2,61439
 4007c70:	980f883a 	mov	r7,r19
 4007c74:	900d883a 	mov	r6,r18
 4007c78:	8809883a 	mov	r4,r17
 4007c7c:	8080030d 	sth	r2,12(r16)
 4007c80:	dfc00417 	ldw	ra,16(sp)
 4007c84:	dcc00317 	ldw	r19,12(sp)
 4007c88:	dc800217 	ldw	r18,8(sp)
 4007c8c:	dc400117 	ldw	r17,4(sp)
 4007c90:	dc000017 	ldw	r16,0(sp)
 4007c94:	dec00504 	addi	sp,sp,20
 4007c98:	400957c1 	jmpi	400957c <_write_r>

04007c9c <__sseek>:
 4007c9c:	defffe04 	addi	sp,sp,-8
 4007ca0:	dc000015 	stw	r16,0(sp)
 4007ca4:	2821883a 	mov	r16,r5
 4007ca8:	2940038f 	ldh	r5,14(r5)
 4007cac:	dfc00115 	stw	ra,4(sp)
 4007cb0:	4009ab00 	call	4009ab0 <_lseek_r>
 4007cb4:	00ffffc4 	movi	r3,-1
 4007cb8:	10c00826 	beq	r2,r3,4007cdc <__sseek+0x40>
 4007cbc:	80c0030b 	ldhu	r3,12(r16)
 4007cc0:	80801415 	stw	r2,80(r16)
 4007cc4:	18c40014 	ori	r3,r3,4096
 4007cc8:	80c0030d 	sth	r3,12(r16)
 4007ccc:	dfc00117 	ldw	ra,4(sp)
 4007cd0:	dc000017 	ldw	r16,0(sp)
 4007cd4:	dec00204 	addi	sp,sp,8
 4007cd8:	f800283a 	ret
 4007cdc:	80c0030b 	ldhu	r3,12(r16)
 4007ce0:	18fbffcc 	andi	r3,r3,61439
 4007ce4:	80c0030d 	sth	r3,12(r16)
 4007ce8:	dfc00117 	ldw	ra,4(sp)
 4007cec:	dc000017 	ldw	r16,0(sp)
 4007cf0:	dec00204 	addi	sp,sp,8
 4007cf4:	f800283a 	ret

04007cf8 <__sclose>:
 4007cf8:	2940038f 	ldh	r5,14(r5)
 4007cfc:	40095dc1 	jmpi	40095dc <_close_r>

04007d00 <strcmp>:
 4007d00:	2144b03a 	or	r2,r4,r5
 4007d04:	108000cc 	andi	r2,r2,3
 4007d08:	1000171e 	bne	r2,zero,4007d68 <strcmp+0x68>
 4007d0c:	20800017 	ldw	r2,0(r4)
 4007d10:	28c00017 	ldw	r3,0(r5)
 4007d14:	10c0141e 	bne	r2,r3,4007d68 <strcmp+0x68>
 4007d18:	027fbff4 	movhi	r9,65279
 4007d1c:	4a7fbfc4 	addi	r9,r9,-257
 4007d20:	0086303a 	nor	r3,zero,r2
 4007d24:	02202074 	movhi	r8,32897
 4007d28:	1245883a 	add	r2,r2,r9
 4007d2c:	42202004 	addi	r8,r8,-32640
 4007d30:	10c4703a 	and	r2,r2,r3
 4007d34:	1204703a 	and	r2,r2,r8
 4007d38:	10000226 	beq	r2,zero,4007d44 <strcmp+0x44>
 4007d3c:	00002306 	br	4007dcc <strcmp+0xcc>
 4007d40:	1000221e 	bne	r2,zero,4007dcc <strcmp+0xcc>
 4007d44:	21000104 	addi	r4,r4,4
 4007d48:	20c00017 	ldw	r3,0(r4)
 4007d4c:	29400104 	addi	r5,r5,4
 4007d50:	29800017 	ldw	r6,0(r5)
 4007d54:	1a4f883a 	add	r7,r3,r9
 4007d58:	00c4303a 	nor	r2,zero,r3
 4007d5c:	3884703a 	and	r2,r7,r2
 4007d60:	1204703a 	and	r2,r2,r8
 4007d64:	19bff626 	beq	r3,r6,4007d40 <__alt_data_end+0xff007d40>
 4007d68:	20800003 	ldbu	r2,0(r4)
 4007d6c:	10c03fcc 	andi	r3,r2,255
 4007d70:	18c0201c 	xori	r3,r3,128
 4007d74:	18ffe004 	addi	r3,r3,-128
 4007d78:	18000c26 	beq	r3,zero,4007dac <strcmp+0xac>
 4007d7c:	29800007 	ldb	r6,0(r5)
 4007d80:	19800326 	beq	r3,r6,4007d90 <strcmp+0x90>
 4007d84:	00001306 	br	4007dd4 <strcmp+0xd4>
 4007d88:	29800007 	ldb	r6,0(r5)
 4007d8c:	11800b1e 	bne	r2,r6,4007dbc <strcmp+0xbc>
 4007d90:	21000044 	addi	r4,r4,1
 4007d94:	20c00003 	ldbu	r3,0(r4)
 4007d98:	29400044 	addi	r5,r5,1
 4007d9c:	18803fcc 	andi	r2,r3,255
 4007da0:	1080201c 	xori	r2,r2,128
 4007da4:	10bfe004 	addi	r2,r2,-128
 4007da8:	103ff71e 	bne	r2,zero,4007d88 <__alt_data_end+0xff007d88>
 4007dac:	0007883a 	mov	r3,zero
 4007db0:	28800003 	ldbu	r2,0(r5)
 4007db4:	1885c83a 	sub	r2,r3,r2
 4007db8:	f800283a 	ret
 4007dbc:	28800003 	ldbu	r2,0(r5)
 4007dc0:	18c03fcc 	andi	r3,r3,255
 4007dc4:	1885c83a 	sub	r2,r3,r2
 4007dc8:	f800283a 	ret
 4007dcc:	0005883a 	mov	r2,zero
 4007dd0:	f800283a 	ret
 4007dd4:	10c03fcc 	andi	r3,r2,255
 4007dd8:	003ff506 	br	4007db0 <__alt_data_end+0xff007db0>

04007ddc <__sprint_r.part.0>:
 4007ddc:	28801917 	ldw	r2,100(r5)
 4007de0:	defff604 	addi	sp,sp,-40
 4007de4:	dd400515 	stw	r21,20(sp)
 4007de8:	dfc00915 	stw	ra,36(sp)
 4007dec:	df000815 	stw	fp,32(sp)
 4007df0:	ddc00715 	stw	r23,28(sp)
 4007df4:	dd800615 	stw	r22,24(sp)
 4007df8:	dd000415 	stw	r20,16(sp)
 4007dfc:	dcc00315 	stw	r19,12(sp)
 4007e00:	dc800215 	stw	r18,8(sp)
 4007e04:	dc400115 	stw	r17,4(sp)
 4007e08:	dc000015 	stw	r16,0(sp)
 4007e0c:	1088000c 	andi	r2,r2,8192
 4007e10:	302b883a 	mov	r21,r6
 4007e14:	10002e26 	beq	r2,zero,4007ed0 <__sprint_r.part.0+0xf4>
 4007e18:	30800217 	ldw	r2,8(r6)
 4007e1c:	35800017 	ldw	r22,0(r6)
 4007e20:	10002926 	beq	r2,zero,4007ec8 <__sprint_r.part.0+0xec>
 4007e24:	2827883a 	mov	r19,r5
 4007e28:	2029883a 	mov	r20,r4
 4007e2c:	b5c00104 	addi	r23,r22,4
 4007e30:	04bfffc4 	movi	r18,-1
 4007e34:	bc400017 	ldw	r17,0(r23)
 4007e38:	b4000017 	ldw	r16,0(r22)
 4007e3c:	0039883a 	mov	fp,zero
 4007e40:	8822d0ba 	srli	r17,r17,2
 4007e44:	8800031e 	bne	r17,zero,4007e54 <__sprint_r.part.0+0x78>
 4007e48:	00001806 	br	4007eac <__sprint_r.part.0+0xd0>
 4007e4c:	84000104 	addi	r16,r16,4
 4007e50:	8f001526 	beq	r17,fp,4007ea8 <__sprint_r.part.0+0xcc>
 4007e54:	81400017 	ldw	r5,0(r16)
 4007e58:	980d883a 	mov	r6,r19
 4007e5c:	a009883a 	mov	r4,r20
 4007e60:	400995c0 	call	400995c <_fputwc_r>
 4007e64:	e7000044 	addi	fp,fp,1
 4007e68:	14bff81e 	bne	r2,r18,4007e4c <__alt_data_end+0xff007e4c>
 4007e6c:	9005883a 	mov	r2,r18
 4007e70:	a8000215 	stw	zero,8(r21)
 4007e74:	a8000115 	stw	zero,4(r21)
 4007e78:	dfc00917 	ldw	ra,36(sp)
 4007e7c:	df000817 	ldw	fp,32(sp)
 4007e80:	ddc00717 	ldw	r23,28(sp)
 4007e84:	dd800617 	ldw	r22,24(sp)
 4007e88:	dd400517 	ldw	r21,20(sp)
 4007e8c:	dd000417 	ldw	r20,16(sp)
 4007e90:	dcc00317 	ldw	r19,12(sp)
 4007e94:	dc800217 	ldw	r18,8(sp)
 4007e98:	dc400117 	ldw	r17,4(sp)
 4007e9c:	dc000017 	ldw	r16,0(sp)
 4007ea0:	dec00a04 	addi	sp,sp,40
 4007ea4:	f800283a 	ret
 4007ea8:	a8800217 	ldw	r2,8(r21)
 4007eac:	8c63883a 	add	r17,r17,r17
 4007eb0:	8c63883a 	add	r17,r17,r17
 4007eb4:	1445c83a 	sub	r2,r2,r17
 4007eb8:	a8800215 	stw	r2,8(r21)
 4007ebc:	b5800204 	addi	r22,r22,8
 4007ec0:	bdc00204 	addi	r23,r23,8
 4007ec4:	103fdb1e 	bne	r2,zero,4007e34 <__alt_data_end+0xff007e34>
 4007ec8:	0005883a 	mov	r2,zero
 4007ecc:	003fe806 	br	4007e70 <__alt_data_end+0xff007e70>
 4007ed0:	4004e9c0 	call	4004e9c <__sfvwrite_r>
 4007ed4:	003fe606 	br	4007e70 <__alt_data_end+0xff007e70>

04007ed8 <__sprint_r>:
 4007ed8:	30c00217 	ldw	r3,8(r6)
 4007edc:	18000126 	beq	r3,zero,4007ee4 <__sprint_r+0xc>
 4007ee0:	4007ddc1 	jmpi	4007ddc <__sprint_r.part.0>
 4007ee4:	30000115 	stw	zero,4(r6)
 4007ee8:	0005883a 	mov	r2,zero
 4007eec:	f800283a 	ret

04007ef0 <___vfiprintf_internal_r>:
 4007ef0:	deffc904 	addi	sp,sp,-220
 4007ef4:	df003515 	stw	fp,212(sp)
 4007ef8:	dd003115 	stw	r20,196(sp)
 4007efc:	dfc03615 	stw	ra,216(sp)
 4007f00:	ddc03415 	stw	r23,208(sp)
 4007f04:	dd803315 	stw	r22,204(sp)
 4007f08:	dd403215 	stw	r21,200(sp)
 4007f0c:	dcc03015 	stw	r19,192(sp)
 4007f10:	dc802f15 	stw	r18,188(sp)
 4007f14:	dc402e15 	stw	r17,184(sp)
 4007f18:	dc002d15 	stw	r16,180(sp)
 4007f1c:	d9002015 	stw	r4,128(sp)
 4007f20:	d9c02215 	stw	r7,136(sp)
 4007f24:	2829883a 	mov	r20,r5
 4007f28:	3039883a 	mov	fp,r6
 4007f2c:	20000226 	beq	r4,zero,4007f38 <___vfiprintf_internal_r+0x48>
 4007f30:	20800e17 	ldw	r2,56(r4)
 4007f34:	1000cf26 	beq	r2,zero,4008274 <___vfiprintf_internal_r+0x384>
 4007f38:	a080030b 	ldhu	r2,12(r20)
 4007f3c:	10c8000c 	andi	r3,r2,8192
 4007f40:	1800061e 	bne	r3,zero,4007f5c <___vfiprintf_internal_r+0x6c>
 4007f44:	a1001917 	ldw	r4,100(r20)
 4007f48:	00f7ffc4 	movi	r3,-8193
 4007f4c:	10880014 	ori	r2,r2,8192
 4007f50:	20c6703a 	and	r3,r4,r3
 4007f54:	a080030d 	sth	r2,12(r20)
 4007f58:	a0c01915 	stw	r3,100(r20)
 4007f5c:	10c0020c 	andi	r3,r2,8
 4007f60:	1800a926 	beq	r3,zero,4008208 <___vfiprintf_internal_r+0x318>
 4007f64:	a0c00417 	ldw	r3,16(r20)
 4007f68:	1800a726 	beq	r3,zero,4008208 <___vfiprintf_internal_r+0x318>
 4007f6c:	1080068c 	andi	r2,r2,26
 4007f70:	00c00284 	movi	r3,10
 4007f74:	10c0ac26 	beq	r2,r3,4008228 <___vfiprintf_internal_r+0x338>
 4007f78:	da801a04 	addi	r10,sp,104
 4007f7c:	da801e15 	stw	r10,120(sp)
 4007f80:	d8801e17 	ldw	r2,120(sp)
 4007f84:	da8019c4 	addi	r10,sp,103
 4007f88:	05810074 	movhi	r22,1025
 4007f8c:	05c10074 	movhi	r23,1025
 4007f90:	da801f15 	stw	r10,124(sp)
 4007f94:	1295c83a 	sub	r10,r2,r10
 4007f98:	b5bf7b04 	addi	r22,r22,-532
 4007f9c:	bdff7704 	addi	r23,r23,-548
 4007fa0:	dec01a15 	stw	sp,104(sp)
 4007fa4:	d8001c15 	stw	zero,112(sp)
 4007fa8:	d8001b15 	stw	zero,108(sp)
 4007fac:	d8002615 	stw	zero,152(sp)
 4007fb0:	d8002315 	stw	zero,140(sp)
 4007fb4:	da802715 	stw	r10,156(sp)
 4007fb8:	d811883a 	mov	r8,sp
 4007fbc:	dd002115 	stw	r20,132(sp)
 4007fc0:	e021883a 	mov	r16,fp
 4007fc4:	80800007 	ldb	r2,0(r16)
 4007fc8:	1003ea26 	beq	r2,zero,4008f74 <___vfiprintf_internal_r+0x1084>
 4007fcc:	00c00944 	movi	r3,37
 4007fd0:	8025883a 	mov	r18,r16
 4007fd4:	10c0021e 	bne	r2,r3,4007fe0 <___vfiprintf_internal_r+0xf0>
 4007fd8:	00001606 	br	4008034 <___vfiprintf_internal_r+0x144>
 4007fdc:	10c00326 	beq	r2,r3,4007fec <___vfiprintf_internal_r+0xfc>
 4007fe0:	94800044 	addi	r18,r18,1
 4007fe4:	90800007 	ldb	r2,0(r18)
 4007fe8:	103ffc1e 	bne	r2,zero,4007fdc <__alt_data_end+0xff007fdc>
 4007fec:	9423c83a 	sub	r17,r18,r16
 4007ff0:	88001026 	beq	r17,zero,4008034 <___vfiprintf_internal_r+0x144>
 4007ff4:	d8c01c17 	ldw	r3,112(sp)
 4007ff8:	d8801b17 	ldw	r2,108(sp)
 4007ffc:	44000015 	stw	r16,0(r8)
 4008000:	88c7883a 	add	r3,r17,r3
 4008004:	10800044 	addi	r2,r2,1
 4008008:	44400115 	stw	r17,4(r8)
 400800c:	d8c01c15 	stw	r3,112(sp)
 4008010:	d8801b15 	stw	r2,108(sp)
 4008014:	010001c4 	movi	r4,7
 4008018:	2080760e 	bge	r4,r2,40081f4 <___vfiprintf_internal_r+0x304>
 400801c:	1803821e 	bne	r3,zero,4008e28 <___vfiprintf_internal_r+0xf38>
 4008020:	da802317 	ldw	r10,140(sp)
 4008024:	d8001b15 	stw	zero,108(sp)
 4008028:	d811883a 	mov	r8,sp
 400802c:	5455883a 	add	r10,r10,r17
 4008030:	da802315 	stw	r10,140(sp)
 4008034:	90800007 	ldb	r2,0(r18)
 4008038:	10044626 	beq	r2,zero,4009154 <___vfiprintf_internal_r+0x1264>
 400803c:	90c00047 	ldb	r3,1(r18)
 4008040:	94000044 	addi	r16,r18,1
 4008044:	d8001d85 	stb	zero,118(sp)
 4008048:	0009883a 	mov	r4,zero
 400804c:	000f883a 	mov	r7,zero
 4008050:	027fffc4 	movi	r9,-1
 4008054:	0023883a 	mov	r17,zero
 4008058:	0029883a 	mov	r20,zero
 400805c:	01401604 	movi	r5,88
 4008060:	01800244 	movi	r6,9
 4008064:	03400a84 	movi	r13,42
 4008068:	03001b04 	movi	r12,108
 400806c:	84000044 	addi	r16,r16,1
 4008070:	18bff804 	addi	r2,r3,-32
 4008074:	28827336 	bltu	r5,r2,4008a44 <___vfiprintf_internal_r+0xb54>
 4008078:	100490ba 	slli	r2,r2,2
 400807c:	02810074 	movhi	r10,1025
 4008080:	52a02404 	addi	r10,r10,-32624
 4008084:	1285883a 	add	r2,r2,r10
 4008088:	10800017 	ldw	r2,0(r2)
 400808c:	1000683a 	jmp	r2
 4008090:	04008778 	rdprs	r16,zero,541
 4008094:	04008a44 	movi	r16,553
 4008098:	04008a44 	movi	r16,553
 400809c:	04008798 	cmpnei	r16,zero,542
 40080a0:	04008a44 	movi	r16,553
 40080a4:	04008a44 	movi	r16,553
 40080a8:	04008a44 	movi	r16,553
 40080ac:	04008a44 	movi	r16,553
 40080b0:	04008a44 	movi	r16,553
 40080b4:	04008a44 	movi	r16,553
 40080b8:	04008980 	call	400898 <__alt_mem_sdram-0x3bff768>
 40080bc:	0400899c 	xori	r16,zero,550
 40080c0:	04008a44 	movi	r16,553
 40080c4:	04008284 	movi	r16,522
 40080c8:	040089ac 	andhi	r16,zero,550
 40080cc:	04008a44 	movi	r16,553
 40080d0:	040087a4 	muli	r16,zero,542
 40080d4:	040087b0 	cmpltui	r16,zero,542
 40080d8:	040087b0 	cmpltui	r16,zero,542
 40080dc:	040087b0 	cmpltui	r16,zero,542
 40080e0:	040087b0 	cmpltui	r16,zero,542
 40080e4:	040087b0 	cmpltui	r16,zero,542
 40080e8:	040087b0 	cmpltui	r16,zero,542
 40080ec:	040087b0 	cmpltui	r16,zero,542
 40080f0:	040087b0 	cmpltui	r16,zero,542
 40080f4:	040087b0 	cmpltui	r16,zero,542
 40080f8:	04008a44 	movi	r16,553
 40080fc:	04008a44 	movi	r16,553
 4008100:	04008a44 	movi	r16,553
 4008104:	04008a44 	movi	r16,553
 4008108:	04008a44 	movi	r16,553
 400810c:	04008a44 	movi	r16,553
 4008110:	04008a44 	movi	r16,553
 4008114:	04008a44 	movi	r16,553
 4008118:	04008a44 	movi	r16,553
 400811c:	04008a44 	movi	r16,553
 4008120:	040087dc 	xori	r16,zero,543
 4008124:	04008a44 	movi	r16,553
 4008128:	04008a44 	movi	r16,553
 400812c:	04008a44 	movi	r16,553
 4008130:	04008a44 	movi	r16,553
 4008134:	04008a44 	movi	r16,553
 4008138:	04008a44 	movi	r16,553
 400813c:	04008a44 	movi	r16,553
 4008140:	04008a44 	movi	r16,553
 4008144:	04008a44 	movi	r16,553
 4008148:	04008a44 	movi	r16,553
 400814c:	04008814 	movui	r16,544
 4008150:	04008a44 	movi	r16,553
 4008154:	04008a44 	movi	r16,553
 4008158:	04008a44 	movi	r16,553
 400815c:	04008a44 	movi	r16,553
 4008160:	04008a44 	movi	r16,553
 4008164:	0400886c 	andhi	r16,zero,545
 4008168:	04008a44 	movi	r16,553
 400816c:	04008a44 	movi	r16,553
 4008170:	040088dc 	xori	r16,zero,547
 4008174:	04008a44 	movi	r16,553
 4008178:	04008a44 	movi	r16,553
 400817c:	04008a44 	movi	r16,553
 4008180:	04008a44 	movi	r16,553
 4008184:	04008a44 	movi	r16,553
 4008188:	04008a44 	movi	r16,553
 400818c:	04008a44 	movi	r16,553
 4008190:	04008a44 	movi	r16,553
 4008194:	04008a44 	movi	r16,553
 4008198:	04008a44 	movi	r16,553
 400819c:	04008688 	cmpgei	r16,zero,538
 40081a0:	040086b4 	movhi	r16,538
 40081a4:	04008a44 	movi	r16,553
 40081a8:	04008a44 	movi	r16,553
 40081ac:	04008a44 	movi	r16,553
 40081b0:	040089ec 	andhi	r16,zero,551
 40081b4:	040086b4 	movhi	r16,538
 40081b8:	04008a44 	movi	r16,553
 40081bc:	04008a44 	movi	r16,553
 40081c0:	04008548 	cmpgei	r16,zero,533
 40081c4:	04008a44 	movi	r16,553
 40081c8:	04008558 	cmpnei	r16,zero,533
 40081cc:	04008594 	movui	r16,534
 40081d0:	04008290 	cmplti	r16,zero,522
 40081d4:	0400853c 	xorhi	r16,zero,532
 40081d8:	04008a44 	movi	r16,553
 40081dc:	04008918 	cmpnei	r16,zero,548
 40081e0:	04008a44 	movi	r16,553
 40081e4:	04008970 	cmpltui	r16,zero,549
 40081e8:	04008a44 	movi	r16,553
 40081ec:	04008a44 	movi	r16,553
 40081f0:	04008634 	movhi	r16,536
 40081f4:	42000204 	addi	r8,r8,8
 40081f8:	da802317 	ldw	r10,140(sp)
 40081fc:	5455883a 	add	r10,r10,r17
 4008200:	da802315 	stw	r10,140(sp)
 4008204:	003f8b06 	br	4008034 <__alt_data_end+0xff008034>
 4008208:	d9002017 	ldw	r4,128(sp)
 400820c:	a00b883a 	mov	r5,r20
 4008210:	4002a440 	call	4002a44 <__swsetup_r>
 4008214:	1003b11e 	bne	r2,zero,40090dc <___vfiprintf_internal_r+0x11ec>
 4008218:	a080030b 	ldhu	r2,12(r20)
 400821c:	00c00284 	movi	r3,10
 4008220:	1080068c 	andi	r2,r2,26
 4008224:	10ff541e 	bne	r2,r3,4007f78 <__alt_data_end+0xff007f78>
 4008228:	a080038f 	ldh	r2,14(r20)
 400822c:	103f5216 	blt	r2,zero,4007f78 <__alt_data_end+0xff007f78>
 4008230:	d9c02217 	ldw	r7,136(sp)
 4008234:	d9002017 	ldw	r4,128(sp)
 4008238:	e00d883a 	mov	r6,fp
 400823c:	a00b883a 	mov	r5,r20
 4008240:	40093680 	call	4009368 <__sbprintf>
 4008244:	dfc03617 	ldw	ra,216(sp)
 4008248:	df003517 	ldw	fp,212(sp)
 400824c:	ddc03417 	ldw	r23,208(sp)
 4008250:	dd803317 	ldw	r22,204(sp)
 4008254:	dd403217 	ldw	r21,200(sp)
 4008258:	dd003117 	ldw	r20,196(sp)
 400825c:	dcc03017 	ldw	r19,192(sp)
 4008260:	dc802f17 	ldw	r18,188(sp)
 4008264:	dc402e17 	ldw	r17,184(sp)
 4008268:	dc002d17 	ldw	r16,180(sp)
 400826c:	dec03704 	addi	sp,sp,220
 4008270:	f800283a 	ret
 4008274:	4004a180 	call	4004a18 <__sinit>
 4008278:	003f2f06 	br	4007f38 <__alt_data_end+0xff007f38>
 400827c:	0463c83a 	sub	r17,zero,r17
 4008280:	d8802215 	stw	r2,136(sp)
 4008284:	a5000114 	ori	r20,r20,4
 4008288:	80c00007 	ldb	r3,0(r16)
 400828c:	003f7706 	br	400806c <__alt_data_end+0xff00806c>
 4008290:	00800c04 	movi	r2,48
 4008294:	da802217 	ldw	r10,136(sp)
 4008298:	d8801d05 	stb	r2,116(sp)
 400829c:	00801e04 	movi	r2,120
 40082a0:	d8801d45 	stb	r2,117(sp)
 40082a4:	d8001d85 	stb	zero,118(sp)
 40082a8:	50c00104 	addi	r3,r10,4
 40082ac:	54800017 	ldw	r18,0(r10)
 40082b0:	0027883a 	mov	r19,zero
 40082b4:	a0800094 	ori	r2,r20,2
 40082b8:	48030b16 	blt	r9,zero,4008ee8 <___vfiprintf_internal_r+0xff8>
 40082bc:	00bfdfc4 	movi	r2,-129
 40082c0:	a096703a 	and	r11,r20,r2
 40082c4:	d8c02215 	stw	r3,136(sp)
 40082c8:	5d000094 	ori	r20,r11,2
 40082cc:	90032b1e 	bne	r18,zero,4008f7c <___vfiprintf_internal_r+0x108c>
 40082d0:	00810074 	movhi	r2,1025
 40082d4:	10bf1604 	addi	r2,r2,-936
 40082d8:	d8802615 	stw	r2,152(sp)
 40082dc:	0039883a 	mov	fp,zero
 40082e0:	48017b1e 	bne	r9,zero,40088d0 <___vfiprintf_internal_r+0x9e0>
 40082e4:	0013883a 	mov	r9,zero
 40082e8:	0027883a 	mov	r19,zero
 40082ec:	dd401a04 	addi	r21,sp,104
 40082f0:	4825883a 	mov	r18,r9
 40082f4:	4cc0010e 	bge	r9,r19,40082fc <___vfiprintf_internal_r+0x40c>
 40082f8:	9825883a 	mov	r18,r19
 40082fc:	e7003fcc 	andi	fp,fp,255
 4008300:	e700201c 	xori	fp,fp,128
 4008304:	e73fe004 	addi	fp,fp,-128
 4008308:	e0000126 	beq	fp,zero,4008310 <___vfiprintf_internal_r+0x420>
 400830c:	94800044 	addi	r18,r18,1
 4008310:	a380008c 	andi	r14,r20,2
 4008314:	70000126 	beq	r14,zero,400831c <___vfiprintf_internal_r+0x42c>
 4008318:	94800084 	addi	r18,r18,2
 400831c:	a700210c 	andi	fp,r20,132
 4008320:	e001df1e 	bne	fp,zero,4008aa0 <___vfiprintf_internal_r+0xbb0>
 4008324:	8c87c83a 	sub	r3,r17,r18
 4008328:	00c1dd0e 	bge	zero,r3,4008aa0 <___vfiprintf_internal_r+0xbb0>
 400832c:	01c00404 	movi	r7,16
 4008330:	d8801c17 	ldw	r2,112(sp)
 4008334:	38c3ad0e 	bge	r7,r3,40091ec <___vfiprintf_internal_r+0x12fc>
 4008338:	02810074 	movhi	r10,1025
 400833c:	52bf7b04 	addi	r10,r10,-532
 4008340:	dc002915 	stw	r16,164(sp)
 4008344:	d9801b17 	ldw	r6,108(sp)
 4008348:	da802415 	stw	r10,144(sp)
 400834c:	03c001c4 	movi	r15,7
 4008350:	da402515 	stw	r9,148(sp)
 4008354:	db802815 	stw	r14,160(sp)
 4008358:	1821883a 	mov	r16,r3
 400835c:	00000506 	br	4008374 <___vfiprintf_internal_r+0x484>
 4008360:	31400084 	addi	r5,r6,2
 4008364:	42000204 	addi	r8,r8,8
 4008368:	200d883a 	mov	r6,r4
 400836c:	843ffc04 	addi	r16,r16,-16
 4008370:	3c000d0e 	bge	r7,r16,40083a8 <___vfiprintf_internal_r+0x4b8>
 4008374:	10800404 	addi	r2,r2,16
 4008378:	31000044 	addi	r4,r6,1
 400837c:	45800015 	stw	r22,0(r8)
 4008380:	41c00115 	stw	r7,4(r8)
 4008384:	d8801c15 	stw	r2,112(sp)
 4008388:	d9001b15 	stw	r4,108(sp)
 400838c:	793ff40e 	bge	r15,r4,4008360 <__alt_data_end+0xff008360>
 4008390:	1001b51e 	bne	r2,zero,4008a68 <___vfiprintf_internal_r+0xb78>
 4008394:	843ffc04 	addi	r16,r16,-16
 4008398:	000d883a 	mov	r6,zero
 400839c:	01400044 	movi	r5,1
 40083a0:	d811883a 	mov	r8,sp
 40083a4:	3c3ff316 	blt	r7,r16,4008374 <__alt_data_end+0xff008374>
 40083a8:	8007883a 	mov	r3,r16
 40083ac:	da402517 	ldw	r9,148(sp)
 40083b0:	db802817 	ldw	r14,160(sp)
 40083b4:	dc002917 	ldw	r16,164(sp)
 40083b8:	da802417 	ldw	r10,144(sp)
 40083bc:	1885883a 	add	r2,r3,r2
 40083c0:	40c00115 	stw	r3,4(r8)
 40083c4:	42800015 	stw	r10,0(r8)
 40083c8:	d8801c15 	stw	r2,112(sp)
 40083cc:	d9401b15 	stw	r5,108(sp)
 40083d0:	00c001c4 	movi	r3,7
 40083d4:	19426016 	blt	r3,r5,4008d58 <___vfiprintf_internal_r+0xe68>
 40083d8:	d8c01d87 	ldb	r3,118(sp)
 40083dc:	42000204 	addi	r8,r8,8
 40083e0:	29000044 	addi	r4,r5,1
 40083e4:	1801b31e 	bne	r3,zero,4008ab4 <___vfiprintf_internal_r+0xbc4>
 40083e8:	7001c026 	beq	r14,zero,4008aec <___vfiprintf_internal_r+0xbfc>
 40083ec:	d8c01d04 	addi	r3,sp,116
 40083f0:	10800084 	addi	r2,r2,2
 40083f4:	40c00015 	stw	r3,0(r8)
 40083f8:	00c00084 	movi	r3,2
 40083fc:	40c00115 	stw	r3,4(r8)
 4008400:	d8801c15 	stw	r2,112(sp)
 4008404:	d9001b15 	stw	r4,108(sp)
 4008408:	00c001c4 	movi	r3,7
 400840c:	1902650e 	bge	r3,r4,4008da4 <___vfiprintf_internal_r+0xeb4>
 4008410:	10029a1e 	bne	r2,zero,4008e7c <___vfiprintf_internal_r+0xf8c>
 4008414:	00c02004 	movi	r3,128
 4008418:	01000044 	movi	r4,1
 400841c:	000b883a 	mov	r5,zero
 4008420:	d811883a 	mov	r8,sp
 4008424:	e0c1b31e 	bne	fp,r3,4008af4 <___vfiprintf_internal_r+0xc04>
 4008428:	8cb9c83a 	sub	fp,r17,r18
 400842c:	0701b10e 	bge	zero,fp,4008af4 <___vfiprintf_internal_r+0xc04>
 4008430:	01c00404 	movi	r7,16
 4008434:	3f03890e 	bge	r7,fp,400925c <___vfiprintf_internal_r+0x136c>
 4008438:	00c10074 	movhi	r3,1025
 400843c:	18ff7704 	addi	r3,r3,-548
 4008440:	d8c02415 	stw	r3,144(sp)
 4008444:	8007883a 	mov	r3,r16
 4008448:	034001c4 	movi	r13,7
 400844c:	e021883a 	mov	r16,fp
 4008450:	da402515 	stw	r9,148(sp)
 4008454:	1839883a 	mov	fp,r3
 4008458:	00000506 	br	4008470 <___vfiprintf_internal_r+0x580>
 400845c:	29800084 	addi	r6,r5,2
 4008460:	42000204 	addi	r8,r8,8
 4008464:	180b883a 	mov	r5,r3
 4008468:	843ffc04 	addi	r16,r16,-16
 400846c:	3c000d0e 	bge	r7,r16,40084a4 <___vfiprintf_internal_r+0x5b4>
 4008470:	10800404 	addi	r2,r2,16
 4008474:	28c00044 	addi	r3,r5,1
 4008478:	45c00015 	stw	r23,0(r8)
 400847c:	41c00115 	stw	r7,4(r8)
 4008480:	d8801c15 	stw	r2,112(sp)
 4008484:	d8c01b15 	stw	r3,108(sp)
 4008488:	68fff40e 	bge	r13,r3,400845c <__alt_data_end+0xff00845c>
 400848c:	1002241e 	bne	r2,zero,4008d20 <___vfiprintf_internal_r+0xe30>
 4008490:	843ffc04 	addi	r16,r16,-16
 4008494:	01800044 	movi	r6,1
 4008498:	000b883a 	mov	r5,zero
 400849c:	d811883a 	mov	r8,sp
 40084a0:	3c3ff316 	blt	r7,r16,4008470 <__alt_data_end+0xff008470>
 40084a4:	da402517 	ldw	r9,148(sp)
 40084a8:	e007883a 	mov	r3,fp
 40084ac:	8039883a 	mov	fp,r16
 40084b0:	1821883a 	mov	r16,r3
 40084b4:	d8c02417 	ldw	r3,144(sp)
 40084b8:	1705883a 	add	r2,r2,fp
 40084bc:	47000115 	stw	fp,4(r8)
 40084c0:	40c00015 	stw	r3,0(r8)
 40084c4:	d8801c15 	stw	r2,112(sp)
 40084c8:	d9801b15 	stw	r6,108(sp)
 40084cc:	00c001c4 	movi	r3,7
 40084d0:	19827616 	blt	r3,r6,4008eac <___vfiprintf_internal_r+0xfbc>
 40084d4:	4cf9c83a 	sub	fp,r9,r19
 40084d8:	42000204 	addi	r8,r8,8
 40084dc:	31000044 	addi	r4,r6,1
 40084e0:	300b883a 	mov	r5,r6
 40084e4:	07018516 	blt	zero,fp,4008afc <___vfiprintf_internal_r+0xc0c>
 40084e8:	9885883a 	add	r2,r19,r2
 40084ec:	45400015 	stw	r21,0(r8)
 40084f0:	44c00115 	stw	r19,4(r8)
 40084f4:	d8801c15 	stw	r2,112(sp)
 40084f8:	d9001b15 	stw	r4,108(sp)
 40084fc:	00c001c4 	movi	r3,7
 4008500:	1901dd0e 	bge	r3,r4,4008c78 <___vfiprintf_internal_r+0xd88>
 4008504:	1002401e 	bne	r2,zero,4008e08 <___vfiprintf_internal_r+0xf18>
 4008508:	d8001b15 	stw	zero,108(sp)
 400850c:	a2c0010c 	andi	r11,r20,4
 4008510:	58000226 	beq	r11,zero,400851c <___vfiprintf_internal_r+0x62c>
 4008514:	8ca7c83a 	sub	r19,r17,r18
 4008518:	04c2f216 	blt	zero,r19,40090e4 <___vfiprintf_internal_r+0x11f4>
 400851c:	8c80010e 	bge	r17,r18,4008524 <___vfiprintf_internal_r+0x634>
 4008520:	9023883a 	mov	r17,r18
 4008524:	da802317 	ldw	r10,140(sp)
 4008528:	5455883a 	add	r10,r10,r17
 400852c:	da802315 	stw	r10,140(sp)
 4008530:	d8001b15 	stw	zero,108(sp)
 4008534:	d811883a 	mov	r8,sp
 4008538:	003ea206 	br	4007fc4 <__alt_data_end+0xff007fc4>
 400853c:	a5000814 	ori	r20,r20,32
 4008540:	80c00007 	ldb	r3,0(r16)
 4008544:	003ec906 	br	400806c <__alt_data_end+0xff00806c>
 4008548:	80c00007 	ldb	r3,0(r16)
 400854c:	1b030926 	beq	r3,r12,4009174 <___vfiprintf_internal_r+0x1284>
 4008550:	a5000414 	ori	r20,r20,16
 4008554:	003ec506 	br	400806c <__alt_data_end+0xff00806c>
 4008558:	21003fcc 	andi	r4,r4,255
 400855c:	20035e1e 	bne	r4,zero,40092d8 <___vfiprintf_internal_r+0x13e8>
 4008560:	a080080c 	andi	r2,r20,32
 4008564:	1002a526 	beq	r2,zero,4008ffc <___vfiprintf_internal_r+0x110c>
 4008568:	da802217 	ldw	r10,136(sp)
 400856c:	50800017 	ldw	r2,0(r10)
 4008570:	da802317 	ldw	r10,140(sp)
 4008574:	5007d7fa 	srai	r3,r10,31
 4008578:	da802217 	ldw	r10,136(sp)
 400857c:	10c00115 	stw	r3,4(r2)
 4008580:	52800104 	addi	r10,r10,4
 4008584:	da802215 	stw	r10,136(sp)
 4008588:	da802317 	ldw	r10,140(sp)
 400858c:	12800015 	stw	r10,0(r2)
 4008590:	003e8c06 	br	4007fc4 <__alt_data_end+0xff007fc4>
 4008594:	21003fcc 	andi	r4,r4,255
 4008598:	2003511e 	bne	r4,zero,40092e0 <___vfiprintf_internal_r+0x13f0>
 400859c:	a080080c 	andi	r2,r20,32
 40085a0:	1000a126 	beq	r2,zero,4008828 <___vfiprintf_internal_r+0x938>
 40085a4:	da802217 	ldw	r10,136(sp)
 40085a8:	d8001d85 	stb	zero,118(sp)
 40085ac:	50800204 	addi	r2,r10,8
 40085b0:	54800017 	ldw	r18,0(r10)
 40085b4:	54c00117 	ldw	r19,4(r10)
 40085b8:	4802b416 	blt	r9,zero,400908c <___vfiprintf_internal_r+0x119c>
 40085bc:	013fdfc4 	movi	r4,-129
 40085c0:	94c6b03a 	or	r3,r18,r19
 40085c4:	d8802215 	stw	r2,136(sp)
 40085c8:	a128703a 	and	r20,r20,r4
 40085cc:	1800a226 	beq	r3,zero,4008858 <___vfiprintf_internal_r+0x968>
 40085d0:	0039883a 	mov	fp,zero
 40085d4:	dd401a04 	addi	r21,sp,104
 40085d8:	9006d0fa 	srli	r3,r18,3
 40085dc:	9808977a 	slli	r4,r19,29
 40085e0:	9826d0fa 	srli	r19,r19,3
 40085e4:	948001cc 	andi	r18,r18,7
 40085e8:	90800c04 	addi	r2,r18,48
 40085ec:	ad7fffc4 	addi	r21,r21,-1
 40085f0:	20e4b03a 	or	r18,r4,r3
 40085f4:	a8800005 	stb	r2,0(r21)
 40085f8:	94c6b03a 	or	r3,r18,r19
 40085fc:	183ff61e 	bne	r3,zero,40085d8 <__alt_data_end+0xff0085d8>
 4008600:	a0c0004c 	andi	r3,r20,1
 4008604:	18005926 	beq	r3,zero,400876c <___vfiprintf_internal_r+0x87c>
 4008608:	10803fcc 	andi	r2,r2,255
 400860c:	1080201c 	xori	r2,r2,128
 4008610:	10bfe004 	addi	r2,r2,-128
 4008614:	00c00c04 	movi	r3,48
 4008618:	10c05426 	beq	r2,r3,400876c <___vfiprintf_internal_r+0x87c>
 400861c:	da801e17 	ldw	r10,120(sp)
 4008620:	a8bfffc4 	addi	r2,r21,-1
 4008624:	a8ffffc5 	stb	r3,-1(r21)
 4008628:	50a7c83a 	sub	r19,r10,r2
 400862c:	102b883a 	mov	r21,r2
 4008630:	003f2f06 	br	40082f0 <__alt_data_end+0xff0082f0>
 4008634:	21003fcc 	andi	r4,r4,255
 4008638:	2003421e 	bne	r4,zero,4009344 <___vfiprintf_internal_r+0x1454>
 400863c:	00810074 	movhi	r2,1025
 4008640:	10bf1604 	addi	r2,r2,-936
 4008644:	d8802615 	stw	r2,152(sp)
 4008648:	a080080c 	andi	r2,r20,32
 400864c:	1000aa26 	beq	r2,zero,40088f8 <___vfiprintf_internal_r+0xa08>
 4008650:	da802217 	ldw	r10,136(sp)
 4008654:	54800017 	ldw	r18,0(r10)
 4008658:	54c00117 	ldw	r19,4(r10)
 400865c:	52800204 	addi	r10,r10,8
 4008660:	da802215 	stw	r10,136(sp)
 4008664:	a080004c 	andi	r2,r20,1
 4008668:	1001d226 	beq	r2,zero,4008db4 <___vfiprintf_internal_r+0xec4>
 400866c:	94c4b03a 	or	r2,r18,r19
 4008670:	1002351e 	bne	r2,zero,4008f48 <___vfiprintf_internal_r+0x1058>
 4008674:	d8001d85 	stb	zero,118(sp)
 4008678:	48022216 	blt	r9,zero,4008f04 <___vfiprintf_internal_r+0x1014>
 400867c:	00bfdfc4 	movi	r2,-129
 4008680:	a0a8703a 	and	r20,r20,r2
 4008684:	003f1506 	br	40082dc <__alt_data_end+0xff0082dc>
 4008688:	da802217 	ldw	r10,136(sp)
 400868c:	04800044 	movi	r18,1
 4008690:	d8001d85 	stb	zero,118(sp)
 4008694:	50800017 	ldw	r2,0(r10)
 4008698:	52800104 	addi	r10,r10,4
 400869c:	da802215 	stw	r10,136(sp)
 40086a0:	d8801005 	stb	r2,64(sp)
 40086a4:	9027883a 	mov	r19,r18
 40086a8:	dd401004 	addi	r21,sp,64
 40086ac:	0013883a 	mov	r9,zero
 40086b0:	003f1706 	br	4008310 <__alt_data_end+0xff008310>
 40086b4:	21003fcc 	andi	r4,r4,255
 40086b8:	2003201e 	bne	r4,zero,400933c <___vfiprintf_internal_r+0x144c>
 40086bc:	a080080c 	andi	r2,r20,32
 40086c0:	10004b26 	beq	r2,zero,40087f0 <___vfiprintf_internal_r+0x900>
 40086c4:	da802217 	ldw	r10,136(sp)
 40086c8:	50800117 	ldw	r2,4(r10)
 40086cc:	54800017 	ldw	r18,0(r10)
 40086d0:	52800204 	addi	r10,r10,8
 40086d4:	da802215 	stw	r10,136(sp)
 40086d8:	1027883a 	mov	r19,r2
 40086dc:	10022c16 	blt	r2,zero,4008f90 <___vfiprintf_internal_r+0x10a0>
 40086e0:	df001d83 	ldbu	fp,118(sp)
 40086e4:	48007216 	blt	r9,zero,40088b0 <___vfiprintf_internal_r+0x9c0>
 40086e8:	00ffdfc4 	movi	r3,-129
 40086ec:	94c4b03a 	or	r2,r18,r19
 40086f0:	a0e8703a 	and	r20,r20,r3
 40086f4:	1000cc26 	beq	r2,zero,4008a28 <___vfiprintf_internal_r+0xb38>
 40086f8:	98021026 	beq	r19,zero,4008f3c <___vfiprintf_internal_r+0x104c>
 40086fc:	dc402415 	stw	r17,144(sp)
 4008700:	dc002515 	stw	r16,148(sp)
 4008704:	9823883a 	mov	r17,r19
 4008708:	9021883a 	mov	r16,r18
 400870c:	dd401a04 	addi	r21,sp,104
 4008710:	4825883a 	mov	r18,r9
 4008714:	4027883a 	mov	r19,r8
 4008718:	8009883a 	mov	r4,r16
 400871c:	880b883a 	mov	r5,r17
 4008720:	01800284 	movi	r6,10
 4008724:	000f883a 	mov	r7,zero
 4008728:	400a2d00 	call	400a2d0 <__umoddi3>
 400872c:	10800c04 	addi	r2,r2,48
 4008730:	ad7fffc4 	addi	r21,r21,-1
 4008734:	8009883a 	mov	r4,r16
 4008738:	880b883a 	mov	r5,r17
 400873c:	a8800005 	stb	r2,0(r21)
 4008740:	01800284 	movi	r6,10
 4008744:	000f883a 	mov	r7,zero
 4008748:	4009d580 	call	4009d58 <__udivdi3>
 400874c:	1021883a 	mov	r16,r2
 4008750:	10c4b03a 	or	r2,r2,r3
 4008754:	1823883a 	mov	r17,r3
 4008758:	103fef1e 	bne	r2,zero,4008718 <__alt_data_end+0xff008718>
 400875c:	dc402417 	ldw	r17,144(sp)
 4008760:	dc002517 	ldw	r16,148(sp)
 4008764:	9013883a 	mov	r9,r18
 4008768:	9811883a 	mov	r8,r19
 400876c:	da801e17 	ldw	r10,120(sp)
 4008770:	5567c83a 	sub	r19,r10,r21
 4008774:	003ede06 	br	40082f0 <__alt_data_end+0xff0082f0>
 4008778:	38803fcc 	andi	r2,r7,255
 400877c:	1080201c 	xori	r2,r2,128
 4008780:	10bfe004 	addi	r2,r2,-128
 4008784:	1002371e 	bne	r2,zero,4009064 <___vfiprintf_internal_r+0x1174>
 4008788:	01000044 	movi	r4,1
 400878c:	01c00804 	movi	r7,32
 4008790:	80c00007 	ldb	r3,0(r16)
 4008794:	003e3506 	br	400806c <__alt_data_end+0xff00806c>
 4008798:	a5000054 	ori	r20,r20,1
 400879c:	80c00007 	ldb	r3,0(r16)
 40087a0:	003e3206 	br	400806c <__alt_data_end+0xff00806c>
 40087a4:	a5002014 	ori	r20,r20,128
 40087a8:	80c00007 	ldb	r3,0(r16)
 40087ac:	003e2f06 	br	400806c <__alt_data_end+0xff00806c>
 40087b0:	8015883a 	mov	r10,r16
 40087b4:	0023883a 	mov	r17,zero
 40087b8:	18bff404 	addi	r2,r3,-48
 40087bc:	50c00007 	ldb	r3,0(r10)
 40087c0:	8c4002a4 	muli	r17,r17,10
 40087c4:	84000044 	addi	r16,r16,1
 40087c8:	8015883a 	mov	r10,r16
 40087cc:	1463883a 	add	r17,r2,r17
 40087d0:	18bff404 	addi	r2,r3,-48
 40087d4:	30bff92e 	bgeu	r6,r2,40087bc <__alt_data_end+0xff0087bc>
 40087d8:	003e2506 	br	4008070 <__alt_data_end+0xff008070>
 40087dc:	21003fcc 	andi	r4,r4,255
 40087e0:	2002d41e 	bne	r4,zero,4009334 <___vfiprintf_internal_r+0x1444>
 40087e4:	a5000414 	ori	r20,r20,16
 40087e8:	a080080c 	andi	r2,r20,32
 40087ec:	103fb51e 	bne	r2,zero,40086c4 <__alt_data_end+0xff0086c4>
 40087f0:	a080040c 	andi	r2,r20,16
 40087f4:	1001f826 	beq	r2,zero,4008fd8 <___vfiprintf_internal_r+0x10e8>
 40087f8:	da802217 	ldw	r10,136(sp)
 40087fc:	54800017 	ldw	r18,0(r10)
 4008800:	52800104 	addi	r10,r10,4
 4008804:	da802215 	stw	r10,136(sp)
 4008808:	9027d7fa 	srai	r19,r18,31
 400880c:	9805883a 	mov	r2,r19
 4008810:	003fb206 	br	40086dc <__alt_data_end+0xff0086dc>
 4008814:	21003fcc 	andi	r4,r4,255
 4008818:	2002c41e 	bne	r4,zero,400932c <___vfiprintf_internal_r+0x143c>
 400881c:	a5000414 	ori	r20,r20,16
 4008820:	a080080c 	andi	r2,r20,32
 4008824:	103f5f1e 	bne	r2,zero,40085a4 <__alt_data_end+0xff0085a4>
 4008828:	a080040c 	andi	r2,r20,16
 400882c:	10020f26 	beq	r2,zero,400906c <___vfiprintf_internal_r+0x117c>
 4008830:	da802217 	ldw	r10,136(sp)
 4008834:	d8001d85 	stb	zero,118(sp)
 4008838:	0027883a 	mov	r19,zero
 400883c:	50800104 	addi	r2,r10,4
 4008840:	54800017 	ldw	r18,0(r10)
 4008844:	48021116 	blt	r9,zero,400908c <___vfiprintf_internal_r+0x119c>
 4008848:	00ffdfc4 	movi	r3,-129
 400884c:	d8802215 	stw	r2,136(sp)
 4008850:	a0e8703a 	and	r20,r20,r3
 4008854:	903f5e1e 	bne	r18,zero,40085d0 <__alt_data_end+0xff0085d0>
 4008858:	0039883a 	mov	fp,zero
 400885c:	4802a626 	beq	r9,zero,40092f8 <___vfiprintf_internal_r+0x1408>
 4008860:	0025883a 	mov	r18,zero
 4008864:	0027883a 	mov	r19,zero
 4008868:	003f5a06 	br	40085d4 <__alt_data_end+0xff0085d4>
 400886c:	21003fcc 	andi	r4,r4,255
 4008870:	20029f1e 	bne	r4,zero,40092f0 <___vfiprintf_internal_r+0x1400>
 4008874:	a5000414 	ori	r20,r20,16
 4008878:	a080080c 	andi	r2,r20,32
 400887c:	10005e1e 	bne	r2,zero,40089f8 <___vfiprintf_internal_r+0xb08>
 4008880:	a080040c 	andi	r2,r20,16
 4008884:	1001a21e 	bne	r2,zero,4008f10 <___vfiprintf_internal_r+0x1020>
 4008888:	a080100c 	andi	r2,r20,64
 400888c:	d8001d85 	stb	zero,118(sp)
 4008890:	da802217 	ldw	r10,136(sp)
 4008894:	1002231e 	bne	r2,zero,4009124 <___vfiprintf_internal_r+0x1234>
 4008898:	50800104 	addi	r2,r10,4
 400889c:	54800017 	ldw	r18,0(r10)
 40088a0:	0027883a 	mov	r19,zero
 40088a4:	4801a00e 	bge	r9,zero,4008f28 <___vfiprintf_internal_r+0x1038>
 40088a8:	d8802215 	stw	r2,136(sp)
 40088ac:	0039883a 	mov	fp,zero
 40088b0:	94c4b03a 	or	r2,r18,r19
 40088b4:	103f901e 	bne	r2,zero,40086f8 <__alt_data_end+0xff0086f8>
 40088b8:	00800044 	movi	r2,1
 40088bc:	10803fcc 	andi	r2,r2,255
 40088c0:	00c00044 	movi	r3,1
 40088c4:	10c05926 	beq	r2,r3,4008a2c <___vfiprintf_internal_r+0xb3c>
 40088c8:	00c00084 	movi	r3,2
 40088cc:	10ffe41e 	bne	r2,r3,4008860 <__alt_data_end+0xff008860>
 40088d0:	0025883a 	mov	r18,zero
 40088d4:	0027883a 	mov	r19,zero
 40088d8:	00013d06 	br	4008dd0 <___vfiprintf_internal_r+0xee0>
 40088dc:	21003fcc 	andi	r4,r4,255
 40088e0:	2002811e 	bne	r4,zero,40092e8 <___vfiprintf_internal_r+0x13f8>
 40088e4:	00810074 	movhi	r2,1025
 40088e8:	10bf1104 	addi	r2,r2,-956
 40088ec:	d8802615 	stw	r2,152(sp)
 40088f0:	a080080c 	andi	r2,r20,32
 40088f4:	103f561e 	bne	r2,zero,4008650 <__alt_data_end+0xff008650>
 40088f8:	a080040c 	andi	r2,r20,16
 40088fc:	1001d126 	beq	r2,zero,4009044 <___vfiprintf_internal_r+0x1154>
 4008900:	da802217 	ldw	r10,136(sp)
 4008904:	0027883a 	mov	r19,zero
 4008908:	54800017 	ldw	r18,0(r10)
 400890c:	52800104 	addi	r10,r10,4
 4008910:	da802215 	stw	r10,136(sp)
 4008914:	003f5306 	br	4008664 <__alt_data_end+0xff008664>
 4008918:	da802217 	ldw	r10,136(sp)
 400891c:	d8001d85 	stb	zero,118(sp)
 4008920:	55400017 	ldw	r21,0(r10)
 4008924:	50c00104 	addi	r3,r10,4
 4008928:	a8024226 	beq	r21,zero,4009234 <___vfiprintf_internal_r+0x1344>
 400892c:	48021816 	blt	r9,zero,4009190 <___vfiprintf_internal_r+0x12a0>
 4008930:	480d883a 	mov	r6,r9
 4008934:	000b883a 	mov	r5,zero
 4008938:	a809883a 	mov	r4,r21
 400893c:	d8c02a15 	stw	r3,168(sp)
 4008940:	da002b15 	stw	r8,172(sp)
 4008944:	da402c15 	stw	r9,176(sp)
 4008948:	4005f840 	call	4005f84 <memchr>
 400894c:	d8c02a17 	ldw	r3,168(sp)
 4008950:	da002b17 	ldw	r8,172(sp)
 4008954:	da402c17 	ldw	r9,176(sp)
 4008958:	10024826 	beq	r2,zero,400927c <___vfiprintf_internal_r+0x138c>
 400895c:	1567c83a 	sub	r19,r2,r21
 4008960:	df001d83 	ldbu	fp,118(sp)
 4008964:	d8c02215 	stw	r3,136(sp)
 4008968:	0013883a 	mov	r9,zero
 400896c:	003e6006 	br	40082f0 <__alt_data_end+0xff0082f0>
 4008970:	21003fcc 	andi	r4,r4,255
 4008974:	203fc026 	beq	r4,zero,4008878 <__alt_data_end+0xff008878>
 4008978:	d9c01d85 	stb	r7,118(sp)
 400897c:	003fbe06 	br	4008878 <__alt_data_end+0xff008878>
 4008980:	da802217 	ldw	r10,136(sp)
 4008984:	54400017 	ldw	r17,0(r10)
 4008988:	50800104 	addi	r2,r10,4
 400898c:	883e3b16 	blt	r17,zero,400827c <__alt_data_end+0xff00827c>
 4008990:	d8802215 	stw	r2,136(sp)
 4008994:	80c00007 	ldb	r3,0(r16)
 4008998:	003db406 	br	400806c <__alt_data_end+0xff00806c>
 400899c:	01000044 	movi	r4,1
 40089a0:	01c00ac4 	movi	r7,43
 40089a4:	80c00007 	ldb	r3,0(r16)
 40089a8:	003db006 	br	400806c <__alt_data_end+0xff00806c>
 40089ac:	80c00007 	ldb	r3,0(r16)
 40089b0:	82800044 	addi	r10,r16,1
 40089b4:	1b423c26 	beq	r3,r13,40092a8 <___vfiprintf_internal_r+0x13b8>
 40089b8:	18bff404 	addi	r2,r3,-48
 40089bc:	0013883a 	mov	r9,zero
 40089c0:	30822b36 	bltu	r6,r2,4009270 <___vfiprintf_internal_r+0x1380>
 40089c4:	50c00007 	ldb	r3,0(r10)
 40089c8:	4a4002a4 	muli	r9,r9,10
 40089cc:	54000044 	addi	r16,r10,1
 40089d0:	8015883a 	mov	r10,r16
 40089d4:	4893883a 	add	r9,r9,r2
 40089d8:	18bff404 	addi	r2,r3,-48
 40089dc:	30bff92e 	bgeu	r6,r2,40089c4 <__alt_data_end+0xff0089c4>
 40089e0:	483da30e 	bge	r9,zero,4008070 <__alt_data_end+0xff008070>
 40089e4:	027fffc4 	movi	r9,-1
 40089e8:	003da106 	br	4008070 <__alt_data_end+0xff008070>
 40089ec:	a5001014 	ori	r20,r20,64
 40089f0:	80c00007 	ldb	r3,0(r16)
 40089f4:	003d9d06 	br	400806c <__alt_data_end+0xff00806c>
 40089f8:	da802217 	ldw	r10,136(sp)
 40089fc:	d8001d85 	stb	zero,118(sp)
 4008a00:	50c00204 	addi	r3,r10,8
 4008a04:	54800017 	ldw	r18,0(r10)
 4008a08:	54c00117 	ldw	r19,4(r10)
 4008a0c:	4801ca16 	blt	r9,zero,4009138 <___vfiprintf_internal_r+0x1248>
 4008a10:	013fdfc4 	movi	r4,-129
 4008a14:	94c4b03a 	or	r2,r18,r19
 4008a18:	d8c02215 	stw	r3,136(sp)
 4008a1c:	a128703a 	and	r20,r20,r4
 4008a20:	0039883a 	mov	fp,zero
 4008a24:	103f341e 	bne	r2,zero,40086f8 <__alt_data_end+0xff0086f8>
 4008a28:	483e2e26 	beq	r9,zero,40082e4 <__alt_data_end+0xff0082e4>
 4008a2c:	0025883a 	mov	r18,zero
 4008a30:	94800c04 	addi	r18,r18,48
 4008a34:	dc8019c5 	stb	r18,103(sp)
 4008a38:	dcc02717 	ldw	r19,156(sp)
 4008a3c:	dd4019c4 	addi	r21,sp,103
 4008a40:	003e2b06 	br	40082f0 <__alt_data_end+0xff0082f0>
 4008a44:	21003fcc 	andi	r4,r4,255
 4008a48:	2002361e 	bne	r4,zero,4009324 <___vfiprintf_internal_r+0x1434>
 4008a4c:	1801c126 	beq	r3,zero,4009154 <___vfiprintf_internal_r+0x1264>
 4008a50:	04800044 	movi	r18,1
 4008a54:	d8c01005 	stb	r3,64(sp)
 4008a58:	d8001d85 	stb	zero,118(sp)
 4008a5c:	9027883a 	mov	r19,r18
 4008a60:	dd401004 	addi	r21,sp,64
 4008a64:	003f1106 	br	40086ac <__alt_data_end+0xff0086ac>
 4008a68:	d9402117 	ldw	r5,132(sp)
 4008a6c:	d9002017 	ldw	r4,128(sp)
 4008a70:	d9801a04 	addi	r6,sp,104
 4008a74:	d9c02b15 	stw	r7,172(sp)
 4008a78:	dbc02a15 	stw	r15,168(sp)
 4008a7c:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008a80:	d9c02b17 	ldw	r7,172(sp)
 4008a84:	dbc02a17 	ldw	r15,168(sp)
 4008a88:	10006d1e 	bne	r2,zero,4008c40 <___vfiprintf_internal_r+0xd50>
 4008a8c:	d9801b17 	ldw	r6,108(sp)
 4008a90:	d8801c17 	ldw	r2,112(sp)
 4008a94:	d811883a 	mov	r8,sp
 4008a98:	31400044 	addi	r5,r6,1
 4008a9c:	003e3306 	br	400836c <__alt_data_end+0xff00836c>
 4008aa0:	d9401b17 	ldw	r5,108(sp)
 4008aa4:	d8801c17 	ldw	r2,112(sp)
 4008aa8:	29000044 	addi	r4,r5,1
 4008aac:	d8c01d87 	ldb	r3,118(sp)
 4008ab0:	183e4d26 	beq	r3,zero,40083e8 <__alt_data_end+0xff0083e8>
 4008ab4:	00c00044 	movi	r3,1
 4008ab8:	d9401d84 	addi	r5,sp,118
 4008abc:	10c5883a 	add	r2,r2,r3
 4008ac0:	41400015 	stw	r5,0(r8)
 4008ac4:	40c00115 	stw	r3,4(r8)
 4008ac8:	d8801c15 	stw	r2,112(sp)
 4008acc:	d9001b15 	stw	r4,108(sp)
 4008ad0:	014001c4 	movi	r5,7
 4008ad4:	2900a90e 	bge	r5,r4,4008d7c <___vfiprintf_internal_r+0xe8c>
 4008ad8:	1000da1e 	bne	r2,zero,4008e44 <___vfiprintf_internal_r+0xf54>
 4008adc:	7000ab1e 	bne	r14,zero,4008d8c <___vfiprintf_internal_r+0xe9c>
 4008ae0:	000b883a 	mov	r5,zero
 4008ae4:	1809883a 	mov	r4,r3
 4008ae8:	d811883a 	mov	r8,sp
 4008aec:	00c02004 	movi	r3,128
 4008af0:	e0fe4d26 	beq	fp,r3,4008428 <__alt_data_end+0xff008428>
 4008af4:	4cf9c83a 	sub	fp,r9,r19
 4008af8:	073e7b0e 	bge	zero,fp,40084e8 <__alt_data_end+0xff0084e8>
 4008afc:	01c00404 	movi	r7,16
 4008b00:	3f01900e 	bge	r7,fp,4009144 <___vfiprintf_internal_r+0x1254>
 4008b04:	00c10074 	movhi	r3,1025
 4008b08:	18ff7704 	addi	r3,r3,-548
 4008b0c:	d8c02415 	stw	r3,144(sp)
 4008b10:	034001c4 	movi	r13,7
 4008b14:	00000506 	br	4008b2c <___vfiprintf_internal_r+0xc3c>
 4008b18:	29000084 	addi	r4,r5,2
 4008b1c:	42000204 	addi	r8,r8,8
 4008b20:	180b883a 	mov	r5,r3
 4008b24:	e73ffc04 	addi	fp,fp,-16
 4008b28:	3f000d0e 	bge	r7,fp,4008b60 <___vfiprintf_internal_r+0xc70>
 4008b2c:	10800404 	addi	r2,r2,16
 4008b30:	28c00044 	addi	r3,r5,1
 4008b34:	45c00015 	stw	r23,0(r8)
 4008b38:	41c00115 	stw	r7,4(r8)
 4008b3c:	d8801c15 	stw	r2,112(sp)
 4008b40:	d8c01b15 	stw	r3,108(sp)
 4008b44:	68fff40e 	bge	r13,r3,4008b18 <__alt_data_end+0xff008b18>
 4008b48:	1000101e 	bne	r2,zero,4008b8c <___vfiprintf_internal_r+0xc9c>
 4008b4c:	e73ffc04 	addi	fp,fp,-16
 4008b50:	01000044 	movi	r4,1
 4008b54:	000b883a 	mov	r5,zero
 4008b58:	d811883a 	mov	r8,sp
 4008b5c:	3f3ff316 	blt	r7,fp,4008b2c <__alt_data_end+0xff008b2c>
 4008b60:	da802417 	ldw	r10,144(sp)
 4008b64:	1705883a 	add	r2,r2,fp
 4008b68:	47000115 	stw	fp,4(r8)
 4008b6c:	42800015 	stw	r10,0(r8)
 4008b70:	d8801c15 	stw	r2,112(sp)
 4008b74:	d9001b15 	stw	r4,108(sp)
 4008b78:	00c001c4 	movi	r3,7
 4008b7c:	19003616 	blt	r3,r4,4008c58 <___vfiprintf_internal_r+0xd68>
 4008b80:	42000204 	addi	r8,r8,8
 4008b84:	21000044 	addi	r4,r4,1
 4008b88:	003e5706 	br	40084e8 <__alt_data_end+0xff0084e8>
 4008b8c:	d9402117 	ldw	r5,132(sp)
 4008b90:	d9002017 	ldw	r4,128(sp)
 4008b94:	d9801a04 	addi	r6,sp,104
 4008b98:	d9c02b15 	stw	r7,172(sp)
 4008b9c:	db402a15 	stw	r13,168(sp)
 4008ba0:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008ba4:	d9c02b17 	ldw	r7,172(sp)
 4008ba8:	db402a17 	ldw	r13,168(sp)
 4008bac:	1000241e 	bne	r2,zero,4008c40 <___vfiprintf_internal_r+0xd50>
 4008bb0:	d9401b17 	ldw	r5,108(sp)
 4008bb4:	d8801c17 	ldw	r2,112(sp)
 4008bb8:	d811883a 	mov	r8,sp
 4008bbc:	29000044 	addi	r4,r5,1
 4008bc0:	003fd806 	br	4008b24 <__alt_data_end+0xff008b24>
 4008bc4:	d9401b17 	ldw	r5,108(sp)
 4008bc8:	00c10074 	movhi	r3,1025
 4008bcc:	18ff7b04 	addi	r3,r3,-532
 4008bd0:	d8c02415 	stw	r3,144(sp)
 4008bd4:	29400044 	addi	r5,r5,1
 4008bd8:	d8c02417 	ldw	r3,144(sp)
 4008bdc:	14c5883a 	add	r2,r2,r19
 4008be0:	44c00115 	stw	r19,4(r8)
 4008be4:	40c00015 	stw	r3,0(r8)
 4008be8:	d8801c15 	stw	r2,112(sp)
 4008bec:	d9401b15 	stw	r5,108(sp)
 4008bf0:	00c001c4 	movi	r3,7
 4008bf4:	1940070e 	bge	r3,r5,4008c14 <___vfiprintf_internal_r+0xd24>
 4008bf8:	103e4826 	beq	r2,zero,400851c <__alt_data_end+0xff00851c>
 4008bfc:	d9402117 	ldw	r5,132(sp)
 4008c00:	d9002017 	ldw	r4,128(sp)
 4008c04:	d9801a04 	addi	r6,sp,104
 4008c08:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008c0c:	10000c1e 	bne	r2,zero,4008c40 <___vfiprintf_internal_r+0xd50>
 4008c10:	d8801c17 	ldw	r2,112(sp)
 4008c14:	8c80010e 	bge	r17,r18,4008c1c <___vfiprintf_internal_r+0xd2c>
 4008c18:	9023883a 	mov	r17,r18
 4008c1c:	da802317 	ldw	r10,140(sp)
 4008c20:	5455883a 	add	r10,r10,r17
 4008c24:	da802315 	stw	r10,140(sp)
 4008c28:	103e4126 	beq	r2,zero,4008530 <__alt_data_end+0xff008530>
 4008c2c:	d9402117 	ldw	r5,132(sp)
 4008c30:	d9002017 	ldw	r4,128(sp)
 4008c34:	d9801a04 	addi	r6,sp,104
 4008c38:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008c3c:	103e3c26 	beq	r2,zero,4008530 <__alt_data_end+0xff008530>
 4008c40:	dd002117 	ldw	r20,132(sp)
 4008c44:	a080030b 	ldhu	r2,12(r20)
 4008c48:	1080100c 	andi	r2,r2,64
 4008c4c:	1001231e 	bne	r2,zero,40090dc <___vfiprintf_internal_r+0x11ec>
 4008c50:	d8802317 	ldw	r2,140(sp)
 4008c54:	003d7b06 	br	4008244 <__alt_data_end+0xff008244>
 4008c58:	1000991e 	bne	r2,zero,4008ec0 <___vfiprintf_internal_r+0xfd0>
 4008c5c:	00c00044 	movi	r3,1
 4008c60:	9805883a 	mov	r2,r19
 4008c64:	dd400015 	stw	r21,0(sp)
 4008c68:	dcc00115 	stw	r19,4(sp)
 4008c6c:	dcc01c15 	stw	r19,112(sp)
 4008c70:	d8c01b15 	stw	r3,108(sp)
 4008c74:	d811883a 	mov	r8,sp
 4008c78:	42000204 	addi	r8,r8,8
 4008c7c:	a2c0010c 	andi	r11,r20,4
 4008c80:	583fe426 	beq	r11,zero,4008c14 <__alt_data_end+0xff008c14>
 4008c84:	8ca7c83a 	sub	r19,r17,r18
 4008c88:	04ffe20e 	bge	zero,r19,4008c14 <__alt_data_end+0xff008c14>
 4008c8c:	01c00404 	movi	r7,16
 4008c90:	3cffcc0e 	bge	r7,r19,4008bc4 <__alt_data_end+0xff008bc4>
 4008c94:	02810074 	movhi	r10,1025
 4008c98:	52bf7b04 	addi	r10,r10,-532
 4008c9c:	d9001b17 	ldw	r4,108(sp)
 4008ca0:	da802415 	stw	r10,144(sp)
 4008ca4:	382b883a 	mov	r21,r7
 4008ca8:	050001c4 	movi	r20,7
 4008cac:	df002017 	ldw	fp,128(sp)
 4008cb0:	00000506 	br	4008cc8 <___vfiprintf_internal_r+0xdd8>
 4008cb4:	21400084 	addi	r5,r4,2
 4008cb8:	42000204 	addi	r8,r8,8
 4008cbc:	1809883a 	mov	r4,r3
 4008cc0:	9cfffc04 	addi	r19,r19,-16
 4008cc4:	acffc40e 	bge	r21,r19,4008bd8 <__alt_data_end+0xff008bd8>
 4008cc8:	10800404 	addi	r2,r2,16
 4008ccc:	20c00044 	addi	r3,r4,1
 4008cd0:	45800015 	stw	r22,0(r8)
 4008cd4:	45400115 	stw	r21,4(r8)
 4008cd8:	d8801c15 	stw	r2,112(sp)
 4008cdc:	d8c01b15 	stw	r3,108(sp)
 4008ce0:	a0fff40e 	bge	r20,r3,4008cb4 <__alt_data_end+0xff008cb4>
 4008ce4:	1000041e 	bne	r2,zero,4008cf8 <___vfiprintf_internal_r+0xe08>
 4008ce8:	01400044 	movi	r5,1
 4008cec:	0009883a 	mov	r4,zero
 4008cf0:	d811883a 	mov	r8,sp
 4008cf4:	003ff206 	br	4008cc0 <__alt_data_end+0xff008cc0>
 4008cf8:	d9402117 	ldw	r5,132(sp)
 4008cfc:	d9801a04 	addi	r6,sp,104
 4008d00:	e009883a 	mov	r4,fp
 4008d04:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008d08:	103fcd1e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 4008d0c:	d9001b17 	ldw	r4,108(sp)
 4008d10:	d8801c17 	ldw	r2,112(sp)
 4008d14:	d811883a 	mov	r8,sp
 4008d18:	21400044 	addi	r5,r4,1
 4008d1c:	003fe806 	br	4008cc0 <__alt_data_end+0xff008cc0>
 4008d20:	d9402117 	ldw	r5,132(sp)
 4008d24:	d9002017 	ldw	r4,128(sp)
 4008d28:	d9801a04 	addi	r6,sp,104
 4008d2c:	d9c02b15 	stw	r7,172(sp)
 4008d30:	db402a15 	stw	r13,168(sp)
 4008d34:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008d38:	d9c02b17 	ldw	r7,172(sp)
 4008d3c:	db402a17 	ldw	r13,168(sp)
 4008d40:	103fbf1e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 4008d44:	d9401b17 	ldw	r5,108(sp)
 4008d48:	d8801c17 	ldw	r2,112(sp)
 4008d4c:	d811883a 	mov	r8,sp
 4008d50:	29800044 	addi	r6,r5,1
 4008d54:	003dc406 	br	4008468 <__alt_data_end+0xff008468>
 4008d58:	1000d21e 	bne	r2,zero,40090a4 <___vfiprintf_internal_r+0x11b4>
 4008d5c:	d8c01d87 	ldb	r3,118(sp)
 4008d60:	18009526 	beq	r3,zero,4008fb8 <___vfiprintf_internal_r+0x10c8>
 4008d64:	00800044 	movi	r2,1
 4008d68:	d8c01d84 	addi	r3,sp,118
 4008d6c:	1009883a 	mov	r4,r2
 4008d70:	d8c00015 	stw	r3,0(sp)
 4008d74:	d8800115 	stw	r2,4(sp)
 4008d78:	d811883a 	mov	r8,sp
 4008d7c:	200b883a 	mov	r5,r4
 4008d80:	42000204 	addi	r8,r8,8
 4008d84:	21000044 	addi	r4,r4,1
 4008d88:	003d9706 	br	40083e8 <__alt_data_end+0xff0083e8>
 4008d8c:	d9001d04 	addi	r4,sp,116
 4008d90:	00800084 	movi	r2,2
 4008d94:	d9000015 	stw	r4,0(sp)
 4008d98:	d8800115 	stw	r2,4(sp)
 4008d9c:	1809883a 	mov	r4,r3
 4008da0:	d811883a 	mov	r8,sp
 4008da4:	200b883a 	mov	r5,r4
 4008da8:	42000204 	addi	r8,r8,8
 4008dac:	21000044 	addi	r4,r4,1
 4008db0:	003f4e06 	br	4008aec <__alt_data_end+0xff008aec>
 4008db4:	d8001d85 	stb	zero,118(sp)
 4008db8:	48005016 	blt	r9,zero,4008efc <___vfiprintf_internal_r+0x100c>
 4008dbc:	00ffdfc4 	movi	r3,-129
 4008dc0:	94c4b03a 	or	r2,r18,r19
 4008dc4:	a0e8703a 	and	r20,r20,r3
 4008dc8:	103d4426 	beq	r2,zero,40082dc <__alt_data_end+0xff0082dc>
 4008dcc:	0039883a 	mov	fp,zero
 4008dd0:	d9002617 	ldw	r4,152(sp)
 4008dd4:	dd401a04 	addi	r21,sp,104
 4008dd8:	908003cc 	andi	r2,r18,15
 4008ddc:	9806973a 	slli	r3,r19,28
 4008de0:	2085883a 	add	r2,r4,r2
 4008de4:	9024d13a 	srli	r18,r18,4
 4008de8:	10800003 	ldbu	r2,0(r2)
 4008dec:	9826d13a 	srli	r19,r19,4
 4008df0:	ad7fffc4 	addi	r21,r21,-1
 4008df4:	1ca4b03a 	or	r18,r3,r18
 4008df8:	a8800005 	stb	r2,0(r21)
 4008dfc:	94c4b03a 	or	r2,r18,r19
 4008e00:	103ff51e 	bne	r2,zero,4008dd8 <__alt_data_end+0xff008dd8>
 4008e04:	003e5906 	br	400876c <__alt_data_end+0xff00876c>
 4008e08:	d9402117 	ldw	r5,132(sp)
 4008e0c:	d9002017 	ldw	r4,128(sp)
 4008e10:	d9801a04 	addi	r6,sp,104
 4008e14:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008e18:	103f891e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 4008e1c:	d8801c17 	ldw	r2,112(sp)
 4008e20:	d811883a 	mov	r8,sp
 4008e24:	003f9506 	br	4008c7c <__alt_data_end+0xff008c7c>
 4008e28:	d9402117 	ldw	r5,132(sp)
 4008e2c:	d9002017 	ldw	r4,128(sp)
 4008e30:	d9801a04 	addi	r6,sp,104
 4008e34:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008e38:	103f811e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 4008e3c:	d811883a 	mov	r8,sp
 4008e40:	003ced06 	br	40081f8 <__alt_data_end+0xff0081f8>
 4008e44:	d9402117 	ldw	r5,132(sp)
 4008e48:	d9002017 	ldw	r4,128(sp)
 4008e4c:	d9801a04 	addi	r6,sp,104
 4008e50:	da402c15 	stw	r9,176(sp)
 4008e54:	db802a15 	stw	r14,168(sp)
 4008e58:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008e5c:	da402c17 	ldw	r9,176(sp)
 4008e60:	db802a17 	ldw	r14,168(sp)
 4008e64:	103f761e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 4008e68:	d9401b17 	ldw	r5,108(sp)
 4008e6c:	d8801c17 	ldw	r2,112(sp)
 4008e70:	d811883a 	mov	r8,sp
 4008e74:	29000044 	addi	r4,r5,1
 4008e78:	003d5b06 	br	40083e8 <__alt_data_end+0xff0083e8>
 4008e7c:	d9402117 	ldw	r5,132(sp)
 4008e80:	d9002017 	ldw	r4,128(sp)
 4008e84:	d9801a04 	addi	r6,sp,104
 4008e88:	da402c15 	stw	r9,176(sp)
 4008e8c:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008e90:	da402c17 	ldw	r9,176(sp)
 4008e94:	103f6a1e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 4008e98:	d9401b17 	ldw	r5,108(sp)
 4008e9c:	d8801c17 	ldw	r2,112(sp)
 4008ea0:	d811883a 	mov	r8,sp
 4008ea4:	29000044 	addi	r4,r5,1
 4008ea8:	003f1006 	br	4008aec <__alt_data_end+0xff008aec>
 4008eac:	1000c31e 	bne	r2,zero,40091bc <___vfiprintf_internal_r+0x12cc>
 4008eb0:	01000044 	movi	r4,1
 4008eb4:	000b883a 	mov	r5,zero
 4008eb8:	d811883a 	mov	r8,sp
 4008ebc:	003f0d06 	br	4008af4 <__alt_data_end+0xff008af4>
 4008ec0:	d9402117 	ldw	r5,132(sp)
 4008ec4:	d9002017 	ldw	r4,128(sp)
 4008ec8:	d9801a04 	addi	r6,sp,104
 4008ecc:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4008ed0:	103f5b1e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 4008ed4:	d9001b17 	ldw	r4,108(sp)
 4008ed8:	d8801c17 	ldw	r2,112(sp)
 4008edc:	d811883a 	mov	r8,sp
 4008ee0:	21000044 	addi	r4,r4,1
 4008ee4:	003d8006 	br	40084e8 <__alt_data_end+0xff0084e8>
 4008ee8:	01010074 	movhi	r4,1025
 4008eec:	213f1604 	addi	r4,r4,-936
 4008ef0:	d9002615 	stw	r4,152(sp)
 4008ef4:	d8c02215 	stw	r3,136(sp)
 4008ef8:	1029883a 	mov	r20,r2
 4008efc:	94c4b03a 	or	r2,r18,r19
 4008f00:	103fb21e 	bne	r2,zero,4008dcc <__alt_data_end+0xff008dcc>
 4008f04:	0039883a 	mov	fp,zero
 4008f08:	00800084 	movi	r2,2
 4008f0c:	003e6b06 	br	40088bc <__alt_data_end+0xff0088bc>
 4008f10:	da802217 	ldw	r10,136(sp)
 4008f14:	d8001d85 	stb	zero,118(sp)
 4008f18:	0027883a 	mov	r19,zero
 4008f1c:	50800104 	addi	r2,r10,4
 4008f20:	54800017 	ldw	r18,0(r10)
 4008f24:	483e6016 	blt	r9,zero,40088a8 <__alt_data_end+0xff0088a8>
 4008f28:	00ffdfc4 	movi	r3,-129
 4008f2c:	d8802215 	stw	r2,136(sp)
 4008f30:	a0e8703a 	and	r20,r20,r3
 4008f34:	0039883a 	mov	fp,zero
 4008f38:	903ebb26 	beq	r18,zero,4008a28 <__alt_data_end+0xff008a28>
 4008f3c:	00800244 	movi	r2,9
 4008f40:	14bdee36 	bltu	r2,r18,40086fc <__alt_data_end+0xff0086fc>
 4008f44:	003eba06 	br	4008a30 <__alt_data_end+0xff008a30>
 4008f48:	00800c04 	movi	r2,48
 4008f4c:	d8c01d45 	stb	r3,117(sp)
 4008f50:	d8801d05 	stb	r2,116(sp)
 4008f54:	d8001d85 	stb	zero,118(sp)
 4008f58:	a0c00094 	ori	r3,r20,2
 4008f5c:	4800a916 	blt	r9,zero,4009204 <___vfiprintf_internal_r+0x1314>
 4008f60:	00bfdfc4 	movi	r2,-129
 4008f64:	a096703a 	and	r11,r20,r2
 4008f68:	5d000094 	ori	r20,r11,2
 4008f6c:	0039883a 	mov	fp,zero
 4008f70:	003f9706 	br	4008dd0 <__alt_data_end+0xff008dd0>
 4008f74:	8025883a 	mov	r18,r16
 4008f78:	003c2e06 	br	4008034 <__alt_data_end+0xff008034>
 4008f7c:	00810074 	movhi	r2,1025
 4008f80:	10bf1604 	addi	r2,r2,-936
 4008f84:	0039883a 	mov	fp,zero
 4008f88:	d8802615 	stw	r2,152(sp)
 4008f8c:	003f9006 	br	4008dd0 <__alt_data_end+0xff008dd0>
 4008f90:	04a5c83a 	sub	r18,zero,r18
 4008f94:	07000b44 	movi	fp,45
 4008f98:	9004c03a 	cmpne	r2,r18,zero
 4008f9c:	04e7c83a 	sub	r19,zero,r19
 4008fa0:	df001d85 	stb	fp,118(sp)
 4008fa4:	98a7c83a 	sub	r19,r19,r2
 4008fa8:	48009f16 	blt	r9,zero,4009228 <___vfiprintf_internal_r+0x1338>
 4008fac:	00bfdfc4 	movi	r2,-129
 4008fb0:	a0a8703a 	and	r20,r20,r2
 4008fb4:	003dd006 	br	40086f8 <__alt_data_end+0xff0086f8>
 4008fb8:	70004c26 	beq	r14,zero,40090ec <___vfiprintf_internal_r+0x11fc>
 4008fbc:	00800084 	movi	r2,2
 4008fc0:	d8c01d04 	addi	r3,sp,116
 4008fc4:	d8c00015 	stw	r3,0(sp)
 4008fc8:	d8800115 	stw	r2,4(sp)
 4008fcc:	01000044 	movi	r4,1
 4008fd0:	d811883a 	mov	r8,sp
 4008fd4:	003f7306 	br	4008da4 <__alt_data_end+0xff008da4>
 4008fd8:	a080100c 	andi	r2,r20,64
 4008fdc:	da802217 	ldw	r10,136(sp)
 4008fe0:	103e0626 	beq	r2,zero,40087fc <__alt_data_end+0xff0087fc>
 4008fe4:	5480000f 	ldh	r18,0(r10)
 4008fe8:	52800104 	addi	r10,r10,4
 4008fec:	da802215 	stw	r10,136(sp)
 4008ff0:	9027d7fa 	srai	r19,r18,31
 4008ff4:	9805883a 	mov	r2,r19
 4008ff8:	003db806 	br	40086dc <__alt_data_end+0xff0086dc>
 4008ffc:	a080040c 	andi	r2,r20,16
 4009000:	1000091e 	bne	r2,zero,4009028 <___vfiprintf_internal_r+0x1138>
 4009004:	a2c0100c 	andi	r11,r20,64
 4009008:	58000726 	beq	r11,zero,4009028 <___vfiprintf_internal_r+0x1138>
 400900c:	da802217 	ldw	r10,136(sp)
 4009010:	50800017 	ldw	r2,0(r10)
 4009014:	52800104 	addi	r10,r10,4
 4009018:	da802215 	stw	r10,136(sp)
 400901c:	da802317 	ldw	r10,140(sp)
 4009020:	1280000d 	sth	r10,0(r2)
 4009024:	003be706 	br	4007fc4 <__alt_data_end+0xff007fc4>
 4009028:	da802217 	ldw	r10,136(sp)
 400902c:	50800017 	ldw	r2,0(r10)
 4009030:	52800104 	addi	r10,r10,4
 4009034:	da802215 	stw	r10,136(sp)
 4009038:	da802317 	ldw	r10,140(sp)
 400903c:	12800015 	stw	r10,0(r2)
 4009040:	003be006 	br	4007fc4 <__alt_data_end+0xff007fc4>
 4009044:	a080100c 	andi	r2,r20,64
 4009048:	da802217 	ldw	r10,136(sp)
 400904c:	10003026 	beq	r2,zero,4009110 <___vfiprintf_internal_r+0x1220>
 4009050:	5480000b 	ldhu	r18,0(r10)
 4009054:	52800104 	addi	r10,r10,4
 4009058:	0027883a 	mov	r19,zero
 400905c:	da802215 	stw	r10,136(sp)
 4009060:	003d8006 	br	4008664 <__alt_data_end+0xff008664>
 4009064:	80c00007 	ldb	r3,0(r16)
 4009068:	003c0006 	br	400806c <__alt_data_end+0xff00806c>
 400906c:	a080100c 	andi	r2,r20,64
 4009070:	d8001d85 	stb	zero,118(sp)
 4009074:	da802217 	ldw	r10,136(sp)
 4009078:	1000201e 	bne	r2,zero,40090fc <___vfiprintf_internal_r+0x120c>
 400907c:	50800104 	addi	r2,r10,4
 4009080:	54800017 	ldw	r18,0(r10)
 4009084:	0027883a 	mov	r19,zero
 4009088:	483def0e 	bge	r9,zero,4008848 <__alt_data_end+0xff008848>
 400908c:	94c6b03a 	or	r3,r18,r19
 4009090:	d8802215 	stw	r2,136(sp)
 4009094:	183d4e1e 	bne	r3,zero,40085d0 <__alt_data_end+0xff0085d0>
 4009098:	0039883a 	mov	fp,zero
 400909c:	0005883a 	mov	r2,zero
 40090a0:	003e0606 	br	40088bc <__alt_data_end+0xff0088bc>
 40090a4:	d9402117 	ldw	r5,132(sp)
 40090a8:	d9002017 	ldw	r4,128(sp)
 40090ac:	d9801a04 	addi	r6,sp,104
 40090b0:	da402c15 	stw	r9,176(sp)
 40090b4:	db802a15 	stw	r14,168(sp)
 40090b8:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 40090bc:	da402c17 	ldw	r9,176(sp)
 40090c0:	db802a17 	ldw	r14,168(sp)
 40090c4:	103ede1e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 40090c8:	d9401b17 	ldw	r5,108(sp)
 40090cc:	d8801c17 	ldw	r2,112(sp)
 40090d0:	d811883a 	mov	r8,sp
 40090d4:	29000044 	addi	r4,r5,1
 40090d8:	003e7406 	br	4008aac <__alt_data_end+0xff008aac>
 40090dc:	00bfffc4 	movi	r2,-1
 40090e0:	003c5806 	br	4008244 <__alt_data_end+0xff008244>
 40090e4:	d811883a 	mov	r8,sp
 40090e8:	003ee806 	br	4008c8c <__alt_data_end+0xff008c8c>
 40090ec:	000b883a 	mov	r5,zero
 40090f0:	01000044 	movi	r4,1
 40090f4:	d811883a 	mov	r8,sp
 40090f8:	003e7c06 	br	4008aec <__alt_data_end+0xff008aec>
 40090fc:	50800104 	addi	r2,r10,4
 4009100:	5480000b 	ldhu	r18,0(r10)
 4009104:	0027883a 	mov	r19,zero
 4009108:	483dcf0e 	bge	r9,zero,4008848 <__alt_data_end+0xff008848>
 400910c:	003fdf06 	br	400908c <__alt_data_end+0xff00908c>
 4009110:	54800017 	ldw	r18,0(r10)
 4009114:	52800104 	addi	r10,r10,4
 4009118:	0027883a 	mov	r19,zero
 400911c:	da802215 	stw	r10,136(sp)
 4009120:	003d5006 	br	4008664 <__alt_data_end+0xff008664>
 4009124:	50800104 	addi	r2,r10,4
 4009128:	5480000b 	ldhu	r18,0(r10)
 400912c:	0027883a 	mov	r19,zero
 4009130:	483f7d0e 	bge	r9,zero,4008f28 <__alt_data_end+0xff008f28>
 4009134:	003ddc06 	br	40088a8 <__alt_data_end+0xff0088a8>
 4009138:	d8c02215 	stw	r3,136(sp)
 400913c:	0039883a 	mov	fp,zero
 4009140:	003ddb06 	br	40088b0 <__alt_data_end+0xff0088b0>
 4009144:	02810074 	movhi	r10,1025
 4009148:	52bf7704 	addi	r10,r10,-548
 400914c:	da802415 	stw	r10,144(sp)
 4009150:	003e8306 	br	4008b60 <__alt_data_end+0xff008b60>
 4009154:	d8801c17 	ldw	r2,112(sp)
 4009158:	dd002117 	ldw	r20,132(sp)
 400915c:	103eb926 	beq	r2,zero,4008c44 <__alt_data_end+0xff008c44>
 4009160:	d9002017 	ldw	r4,128(sp)
 4009164:	d9801a04 	addi	r6,sp,104
 4009168:	a00b883a 	mov	r5,r20
 400916c:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 4009170:	003eb406 	br	4008c44 <__alt_data_end+0xff008c44>
 4009174:	80c00043 	ldbu	r3,1(r16)
 4009178:	a5000814 	ori	r20,r20,32
 400917c:	84000044 	addi	r16,r16,1
 4009180:	18c03fcc 	andi	r3,r3,255
 4009184:	18c0201c 	xori	r3,r3,128
 4009188:	18ffe004 	addi	r3,r3,-128
 400918c:	003bb706 	br	400806c <__alt_data_end+0xff00806c>
 4009190:	a809883a 	mov	r4,r21
 4009194:	d8c02a15 	stw	r3,168(sp)
 4009198:	da002b15 	stw	r8,172(sp)
 400919c:	40006dc0 	call	40006dc <strlen>
 40091a0:	d8c02a17 	ldw	r3,168(sp)
 40091a4:	1027883a 	mov	r19,r2
 40091a8:	df001d83 	ldbu	fp,118(sp)
 40091ac:	d8c02215 	stw	r3,136(sp)
 40091b0:	0013883a 	mov	r9,zero
 40091b4:	da002b17 	ldw	r8,172(sp)
 40091b8:	003c4d06 	br	40082f0 <__alt_data_end+0xff0082f0>
 40091bc:	d9402117 	ldw	r5,132(sp)
 40091c0:	d9002017 	ldw	r4,128(sp)
 40091c4:	d9801a04 	addi	r6,sp,104
 40091c8:	da402c15 	stw	r9,176(sp)
 40091cc:	4007ddc0 	call	4007ddc <__sprint_r.part.0>
 40091d0:	da402c17 	ldw	r9,176(sp)
 40091d4:	103e9a1e 	bne	r2,zero,4008c40 <__alt_data_end+0xff008c40>
 40091d8:	d9401b17 	ldw	r5,108(sp)
 40091dc:	d8801c17 	ldw	r2,112(sp)
 40091e0:	d811883a 	mov	r8,sp
 40091e4:	29000044 	addi	r4,r5,1
 40091e8:	003e4206 	br	4008af4 <__alt_data_end+0xff008af4>
 40091ec:	d9401b17 	ldw	r5,108(sp)
 40091f0:	01010074 	movhi	r4,1025
 40091f4:	213f7b04 	addi	r4,r4,-532
 40091f8:	d9002415 	stw	r4,144(sp)
 40091fc:	29400044 	addi	r5,r5,1
 4009200:	003c6d06 	br	40083b8 <__alt_data_end+0xff0083b8>
 4009204:	0039883a 	mov	fp,zero
 4009208:	00800084 	movi	r2,2
 400920c:	10803fcc 	andi	r2,r2,255
 4009210:	01000044 	movi	r4,1
 4009214:	11001e26 	beq	r2,r4,4009290 <___vfiprintf_internal_r+0x13a0>
 4009218:	01000084 	movi	r4,2
 400921c:	11001e1e 	bne	r2,r4,4009298 <___vfiprintf_internal_r+0x13a8>
 4009220:	1829883a 	mov	r20,r3
 4009224:	003eea06 	br	4008dd0 <__alt_data_end+0xff008dd0>
 4009228:	a007883a 	mov	r3,r20
 400922c:	00800044 	movi	r2,1
 4009230:	003ff606 	br	400920c <__alt_data_end+0xff00920c>
 4009234:	00800184 	movi	r2,6
 4009238:	1240012e 	bgeu	r2,r9,4009240 <___vfiprintf_internal_r+0x1350>
 400923c:	1013883a 	mov	r9,r2
 4009240:	4827883a 	mov	r19,r9
 4009244:	4825883a 	mov	r18,r9
 4009248:	48001516 	blt	r9,zero,40092a0 <___vfiprintf_internal_r+0x13b0>
 400924c:	05410074 	movhi	r21,1025
 4009250:	d8c02215 	stw	r3,136(sp)
 4009254:	ad7f1b04 	addi	r21,r21,-916
 4009258:	003d1406 	br	40086ac <__alt_data_end+0xff0086ac>
 400925c:	02810074 	movhi	r10,1025
 4009260:	52bf7704 	addi	r10,r10,-548
 4009264:	da802415 	stw	r10,144(sp)
 4009268:	200d883a 	mov	r6,r4
 400926c:	003c9106 	br	40084b4 <__alt_data_end+0xff0084b4>
 4009270:	5021883a 	mov	r16,r10
 4009274:	0013883a 	mov	r9,zero
 4009278:	003b7d06 	br	4008070 <__alt_data_end+0xff008070>
 400927c:	4827883a 	mov	r19,r9
 4009280:	df001d83 	ldbu	fp,118(sp)
 4009284:	d8c02215 	stw	r3,136(sp)
 4009288:	0013883a 	mov	r9,zero
 400928c:	003c1806 	br	40082f0 <__alt_data_end+0xff0082f0>
 4009290:	1829883a 	mov	r20,r3
 4009294:	003d1806 	br	40086f8 <__alt_data_end+0xff0086f8>
 4009298:	1829883a 	mov	r20,r3
 400929c:	003ccd06 	br	40085d4 <__alt_data_end+0xff0085d4>
 40092a0:	0025883a 	mov	r18,zero
 40092a4:	003fe906 	br	400924c <__alt_data_end+0xff00924c>
 40092a8:	d8802217 	ldw	r2,136(sp)
 40092ac:	80c00043 	ldbu	r3,1(r16)
 40092b0:	5021883a 	mov	r16,r10
 40092b4:	12400017 	ldw	r9,0(r2)
 40092b8:	10800104 	addi	r2,r2,4
 40092bc:	d8802215 	stw	r2,136(sp)
 40092c0:	483faf0e 	bge	r9,zero,4009180 <__alt_data_end+0xff009180>
 40092c4:	18c03fcc 	andi	r3,r3,255
 40092c8:	18c0201c 	xori	r3,r3,128
 40092cc:	027fffc4 	movi	r9,-1
 40092d0:	18ffe004 	addi	r3,r3,-128
 40092d4:	003b6506 	br	400806c <__alt_data_end+0xff00806c>
 40092d8:	d9c01d85 	stb	r7,118(sp)
 40092dc:	003ca006 	br	4008560 <__alt_data_end+0xff008560>
 40092e0:	d9c01d85 	stb	r7,118(sp)
 40092e4:	003cad06 	br	400859c <__alt_data_end+0xff00859c>
 40092e8:	d9c01d85 	stb	r7,118(sp)
 40092ec:	003d7d06 	br	40088e4 <__alt_data_end+0xff0088e4>
 40092f0:	d9c01d85 	stb	r7,118(sp)
 40092f4:	003d5f06 	br	4008874 <__alt_data_end+0xff008874>
 40092f8:	a080004c 	andi	r2,r20,1
 40092fc:	0039883a 	mov	fp,zero
 4009300:	10000526 	beq	r2,zero,4009318 <___vfiprintf_internal_r+0x1428>
 4009304:	00800c04 	movi	r2,48
 4009308:	d88019c5 	stb	r2,103(sp)
 400930c:	dcc02717 	ldw	r19,156(sp)
 4009310:	dd4019c4 	addi	r21,sp,103
 4009314:	003bf606 	br	40082f0 <__alt_data_end+0xff0082f0>
 4009318:	0027883a 	mov	r19,zero
 400931c:	dd401a04 	addi	r21,sp,104
 4009320:	003bf306 	br	40082f0 <__alt_data_end+0xff0082f0>
 4009324:	d9c01d85 	stb	r7,118(sp)
 4009328:	003dc806 	br	4008a4c <__alt_data_end+0xff008a4c>
 400932c:	d9c01d85 	stb	r7,118(sp)
 4009330:	003d3a06 	br	400881c <__alt_data_end+0xff00881c>
 4009334:	d9c01d85 	stb	r7,118(sp)
 4009338:	003d2a06 	br	40087e4 <__alt_data_end+0xff0087e4>
 400933c:	d9c01d85 	stb	r7,118(sp)
 4009340:	003cde06 	br	40086bc <__alt_data_end+0xff0086bc>
 4009344:	d9c01d85 	stb	r7,118(sp)
 4009348:	003cbc06 	br	400863c <__alt_data_end+0xff00863c>

0400934c <__vfiprintf_internal>:
 400934c:	00810074 	movhi	r2,1025
 4009350:	10868004 	addi	r2,r2,6656
 4009354:	300f883a 	mov	r7,r6
 4009358:	280d883a 	mov	r6,r5
 400935c:	200b883a 	mov	r5,r4
 4009360:	11000017 	ldw	r4,0(r2)
 4009364:	4007ef01 	jmpi	4007ef0 <___vfiprintf_internal_r>

04009368 <__sbprintf>:
 4009368:	2880030b 	ldhu	r2,12(r5)
 400936c:	2ac01917 	ldw	r11,100(r5)
 4009370:	2a80038b 	ldhu	r10,14(r5)
 4009374:	2a400717 	ldw	r9,28(r5)
 4009378:	2a000917 	ldw	r8,36(r5)
 400937c:	defee204 	addi	sp,sp,-1144
 4009380:	00c10004 	movi	r3,1024
 4009384:	dc011a15 	stw	r16,1128(sp)
 4009388:	10bfff4c 	andi	r2,r2,65533
 400938c:	2821883a 	mov	r16,r5
 4009390:	d8cb883a 	add	r5,sp,r3
 4009394:	dc811c15 	stw	r18,1136(sp)
 4009398:	dc411b15 	stw	r17,1132(sp)
 400939c:	dfc11d15 	stw	ra,1140(sp)
 40093a0:	2025883a 	mov	r18,r4
 40093a4:	d881030d 	sth	r2,1036(sp)
 40093a8:	dac11915 	stw	r11,1124(sp)
 40093ac:	da81038d 	sth	r10,1038(sp)
 40093b0:	da410715 	stw	r9,1052(sp)
 40093b4:	da010915 	stw	r8,1060(sp)
 40093b8:	dec10015 	stw	sp,1024(sp)
 40093bc:	dec10415 	stw	sp,1040(sp)
 40093c0:	d8c10215 	stw	r3,1032(sp)
 40093c4:	d8c10515 	stw	r3,1044(sp)
 40093c8:	d8010615 	stw	zero,1048(sp)
 40093cc:	4007ef00 	call	4007ef0 <___vfiprintf_internal_r>
 40093d0:	1023883a 	mov	r17,r2
 40093d4:	10000416 	blt	r2,zero,40093e8 <__sbprintf+0x80>
 40093d8:	d9410004 	addi	r5,sp,1024
 40093dc:	9009883a 	mov	r4,r18
 40093e0:	400463c0 	call	400463c <_fflush_r>
 40093e4:	10000d1e 	bne	r2,zero,400941c <__sbprintf+0xb4>
 40093e8:	d881030b 	ldhu	r2,1036(sp)
 40093ec:	1080100c 	andi	r2,r2,64
 40093f0:	10000326 	beq	r2,zero,4009400 <__sbprintf+0x98>
 40093f4:	8080030b 	ldhu	r2,12(r16)
 40093f8:	10801014 	ori	r2,r2,64
 40093fc:	8080030d 	sth	r2,12(r16)
 4009400:	8805883a 	mov	r2,r17
 4009404:	dfc11d17 	ldw	ra,1140(sp)
 4009408:	dc811c17 	ldw	r18,1136(sp)
 400940c:	dc411b17 	ldw	r17,1132(sp)
 4009410:	dc011a17 	ldw	r16,1128(sp)
 4009414:	dec11e04 	addi	sp,sp,1144
 4009418:	f800283a 	ret
 400941c:	047fffc4 	movi	r17,-1
 4009420:	003ff106 	br	40093e8 <__alt_data_end+0xff0093e8>

04009424 <__swbuf_r>:
 4009424:	defffb04 	addi	sp,sp,-20
 4009428:	dcc00315 	stw	r19,12(sp)
 400942c:	dc800215 	stw	r18,8(sp)
 4009430:	dc000015 	stw	r16,0(sp)
 4009434:	dfc00415 	stw	ra,16(sp)
 4009438:	dc400115 	stw	r17,4(sp)
 400943c:	2025883a 	mov	r18,r4
 4009440:	2827883a 	mov	r19,r5
 4009444:	3021883a 	mov	r16,r6
 4009448:	20000226 	beq	r4,zero,4009454 <__swbuf_r+0x30>
 400944c:	20800e17 	ldw	r2,56(r4)
 4009450:	10004226 	beq	r2,zero,400955c <__swbuf_r+0x138>
 4009454:	80800617 	ldw	r2,24(r16)
 4009458:	8100030b 	ldhu	r4,12(r16)
 400945c:	80800215 	stw	r2,8(r16)
 4009460:	2080020c 	andi	r2,r4,8
 4009464:	10003626 	beq	r2,zero,4009540 <__swbuf_r+0x11c>
 4009468:	80c00417 	ldw	r3,16(r16)
 400946c:	18003426 	beq	r3,zero,4009540 <__swbuf_r+0x11c>
 4009470:	2088000c 	andi	r2,r4,8192
 4009474:	9c403fcc 	andi	r17,r19,255
 4009478:	10001a26 	beq	r2,zero,40094e4 <__swbuf_r+0xc0>
 400947c:	80800017 	ldw	r2,0(r16)
 4009480:	81000517 	ldw	r4,20(r16)
 4009484:	10c7c83a 	sub	r3,r2,r3
 4009488:	1900200e 	bge	r3,r4,400950c <__swbuf_r+0xe8>
 400948c:	18c00044 	addi	r3,r3,1
 4009490:	81000217 	ldw	r4,8(r16)
 4009494:	11400044 	addi	r5,r2,1
 4009498:	81400015 	stw	r5,0(r16)
 400949c:	213fffc4 	addi	r4,r4,-1
 40094a0:	81000215 	stw	r4,8(r16)
 40094a4:	14c00005 	stb	r19,0(r2)
 40094a8:	80800517 	ldw	r2,20(r16)
 40094ac:	10c01e26 	beq	r2,r3,4009528 <__swbuf_r+0x104>
 40094b0:	8080030b 	ldhu	r2,12(r16)
 40094b4:	1080004c 	andi	r2,r2,1
 40094b8:	10000226 	beq	r2,zero,40094c4 <__swbuf_r+0xa0>
 40094bc:	00800284 	movi	r2,10
 40094c0:	88801926 	beq	r17,r2,4009528 <__swbuf_r+0x104>
 40094c4:	8805883a 	mov	r2,r17
 40094c8:	dfc00417 	ldw	ra,16(sp)
 40094cc:	dcc00317 	ldw	r19,12(sp)
 40094d0:	dc800217 	ldw	r18,8(sp)
 40094d4:	dc400117 	ldw	r17,4(sp)
 40094d8:	dc000017 	ldw	r16,0(sp)
 40094dc:	dec00504 	addi	sp,sp,20
 40094e0:	f800283a 	ret
 40094e4:	81401917 	ldw	r5,100(r16)
 40094e8:	00b7ffc4 	movi	r2,-8193
 40094ec:	21080014 	ori	r4,r4,8192
 40094f0:	2884703a 	and	r2,r5,r2
 40094f4:	80801915 	stw	r2,100(r16)
 40094f8:	80800017 	ldw	r2,0(r16)
 40094fc:	8100030d 	sth	r4,12(r16)
 4009500:	81000517 	ldw	r4,20(r16)
 4009504:	10c7c83a 	sub	r3,r2,r3
 4009508:	193fe016 	blt	r3,r4,400948c <__alt_data_end+0xff00948c>
 400950c:	800b883a 	mov	r5,r16
 4009510:	9009883a 	mov	r4,r18
 4009514:	400463c0 	call	400463c <_fflush_r>
 4009518:	1000071e 	bne	r2,zero,4009538 <__swbuf_r+0x114>
 400951c:	80800017 	ldw	r2,0(r16)
 4009520:	00c00044 	movi	r3,1
 4009524:	003fda06 	br	4009490 <__alt_data_end+0xff009490>
 4009528:	800b883a 	mov	r5,r16
 400952c:	9009883a 	mov	r4,r18
 4009530:	400463c0 	call	400463c <_fflush_r>
 4009534:	103fe326 	beq	r2,zero,40094c4 <__alt_data_end+0xff0094c4>
 4009538:	00bfffc4 	movi	r2,-1
 400953c:	003fe206 	br	40094c8 <__alt_data_end+0xff0094c8>
 4009540:	800b883a 	mov	r5,r16
 4009544:	9009883a 	mov	r4,r18
 4009548:	4002a440 	call	4002a44 <__swsetup_r>
 400954c:	103ffa1e 	bne	r2,zero,4009538 <__alt_data_end+0xff009538>
 4009550:	8100030b 	ldhu	r4,12(r16)
 4009554:	80c00417 	ldw	r3,16(r16)
 4009558:	003fc506 	br	4009470 <__alt_data_end+0xff009470>
 400955c:	4004a180 	call	4004a18 <__sinit>
 4009560:	003fbc06 	br	4009454 <__alt_data_end+0xff009454>

04009564 <__swbuf>:
 4009564:	00810074 	movhi	r2,1025
 4009568:	10868004 	addi	r2,r2,6656
 400956c:	280d883a 	mov	r6,r5
 4009570:	200b883a 	mov	r5,r4
 4009574:	11000017 	ldw	r4,0(r2)
 4009578:	40094241 	jmpi	4009424 <__swbuf_r>

0400957c <_write_r>:
 400957c:	defffd04 	addi	sp,sp,-12
 4009580:	2805883a 	mov	r2,r5
 4009584:	dc000015 	stw	r16,0(sp)
 4009588:	04010074 	movhi	r16,1025
 400958c:	dc400115 	stw	r17,4(sp)
 4009590:	300b883a 	mov	r5,r6
 4009594:	840d5b04 	addi	r16,r16,13676
 4009598:	2023883a 	mov	r17,r4
 400959c:	380d883a 	mov	r6,r7
 40095a0:	1009883a 	mov	r4,r2
 40095a4:	dfc00215 	stw	ra,8(sp)
 40095a8:	80000015 	stw	zero,0(r16)
 40095ac:	400d8b80 	call	400d8b8 <write>
 40095b0:	00ffffc4 	movi	r3,-1
 40095b4:	10c00526 	beq	r2,r3,40095cc <_write_r+0x50>
 40095b8:	dfc00217 	ldw	ra,8(sp)
 40095bc:	dc400117 	ldw	r17,4(sp)
 40095c0:	dc000017 	ldw	r16,0(sp)
 40095c4:	dec00304 	addi	sp,sp,12
 40095c8:	f800283a 	ret
 40095cc:	80c00017 	ldw	r3,0(r16)
 40095d0:	183ff926 	beq	r3,zero,40095b8 <__alt_data_end+0xff0095b8>
 40095d4:	88c00015 	stw	r3,0(r17)
 40095d8:	003ff706 	br	40095b8 <__alt_data_end+0xff0095b8>

040095dc <_close_r>:
 40095dc:	defffd04 	addi	sp,sp,-12
 40095e0:	dc000015 	stw	r16,0(sp)
 40095e4:	04010074 	movhi	r16,1025
 40095e8:	dc400115 	stw	r17,4(sp)
 40095ec:	840d5b04 	addi	r16,r16,13676
 40095f0:	2023883a 	mov	r17,r4
 40095f4:	2809883a 	mov	r4,r5
 40095f8:	dfc00215 	stw	ra,8(sp)
 40095fc:	80000015 	stw	zero,0(r16)
 4009600:	400d0600 	call	400d060 <close>
 4009604:	00ffffc4 	movi	r3,-1
 4009608:	10c00526 	beq	r2,r3,4009620 <_close_r+0x44>
 400960c:	dfc00217 	ldw	ra,8(sp)
 4009610:	dc400117 	ldw	r17,4(sp)
 4009614:	dc000017 	ldw	r16,0(sp)
 4009618:	dec00304 	addi	sp,sp,12
 400961c:	f800283a 	ret
 4009620:	80c00017 	ldw	r3,0(r16)
 4009624:	183ff926 	beq	r3,zero,400960c <__alt_data_end+0xff00960c>
 4009628:	88c00015 	stw	r3,0(r17)
 400962c:	003ff706 	br	400960c <__alt_data_end+0xff00960c>

04009630 <_calloc_r>:
 4009630:	298b383a 	mul	r5,r5,r6
 4009634:	defffe04 	addi	sp,sp,-8
 4009638:	dfc00115 	stw	ra,4(sp)
 400963c:	dc000015 	stw	r16,0(sp)
 4009640:	40057780 	call	4005778 <_malloc_r>
 4009644:	10002926 	beq	r2,zero,40096ec <_calloc_r+0xbc>
 4009648:	11bfff17 	ldw	r6,-4(r2)
 400964c:	1021883a 	mov	r16,r2
 4009650:	00bfff04 	movi	r2,-4
 4009654:	308c703a 	and	r6,r6,r2
 4009658:	00c00904 	movi	r3,36
 400965c:	308d883a 	add	r6,r6,r2
 4009660:	19801636 	bltu	r3,r6,40096bc <_calloc_r+0x8c>
 4009664:	008004c4 	movi	r2,19
 4009668:	11800b2e 	bgeu	r2,r6,4009698 <_calloc_r+0x68>
 400966c:	80000015 	stw	zero,0(r16)
 4009670:	80000115 	stw	zero,4(r16)
 4009674:	008006c4 	movi	r2,27
 4009678:	11801a2e 	bgeu	r2,r6,40096e4 <_calloc_r+0xb4>
 400967c:	80000215 	stw	zero,8(r16)
 4009680:	80000315 	stw	zero,12(r16)
 4009684:	30c0151e 	bne	r6,r3,40096dc <_calloc_r+0xac>
 4009688:	80000415 	stw	zero,16(r16)
 400968c:	80800604 	addi	r2,r16,24
 4009690:	80000515 	stw	zero,20(r16)
 4009694:	00000106 	br	400969c <_calloc_r+0x6c>
 4009698:	8005883a 	mov	r2,r16
 400969c:	10000015 	stw	zero,0(r2)
 40096a0:	10000115 	stw	zero,4(r2)
 40096a4:	10000215 	stw	zero,8(r2)
 40096a8:	8005883a 	mov	r2,r16
 40096ac:	dfc00117 	ldw	ra,4(sp)
 40096b0:	dc000017 	ldw	r16,0(sp)
 40096b4:	dec00204 	addi	sp,sp,8
 40096b8:	f800283a 	ret
 40096bc:	000b883a 	mov	r5,zero
 40096c0:	8009883a 	mov	r4,r16
 40096c4:	400630c0 	call	400630c <memset>
 40096c8:	8005883a 	mov	r2,r16
 40096cc:	dfc00117 	ldw	ra,4(sp)
 40096d0:	dc000017 	ldw	r16,0(sp)
 40096d4:	dec00204 	addi	sp,sp,8
 40096d8:	f800283a 	ret
 40096dc:	80800404 	addi	r2,r16,16
 40096e0:	003fee06 	br	400969c <__alt_data_end+0xff00969c>
 40096e4:	80800204 	addi	r2,r16,8
 40096e8:	003fec06 	br	400969c <__alt_data_end+0xff00969c>
 40096ec:	0005883a 	mov	r2,zero
 40096f0:	003fee06 	br	40096ac <__alt_data_end+0xff0096ac>

040096f4 <_fclose_r>:
 40096f4:	28003926 	beq	r5,zero,40097dc <_fclose_r+0xe8>
 40096f8:	defffc04 	addi	sp,sp,-16
 40096fc:	dc400115 	stw	r17,4(sp)
 4009700:	dc000015 	stw	r16,0(sp)
 4009704:	dfc00315 	stw	ra,12(sp)
 4009708:	dc800215 	stw	r18,8(sp)
 400970c:	2023883a 	mov	r17,r4
 4009710:	2821883a 	mov	r16,r5
 4009714:	20000226 	beq	r4,zero,4009720 <_fclose_r+0x2c>
 4009718:	20800e17 	ldw	r2,56(r4)
 400971c:	10002726 	beq	r2,zero,40097bc <_fclose_r+0xc8>
 4009720:	8080030f 	ldh	r2,12(r16)
 4009724:	1000071e 	bne	r2,zero,4009744 <_fclose_r+0x50>
 4009728:	0005883a 	mov	r2,zero
 400972c:	dfc00317 	ldw	ra,12(sp)
 4009730:	dc800217 	ldw	r18,8(sp)
 4009734:	dc400117 	ldw	r17,4(sp)
 4009738:	dc000017 	ldw	r16,0(sp)
 400973c:	dec00404 	addi	sp,sp,16
 4009740:	f800283a 	ret
 4009744:	800b883a 	mov	r5,r16
 4009748:	8809883a 	mov	r4,r17
 400974c:	40044200 	call	4004420 <__sflush_r>
 4009750:	1025883a 	mov	r18,r2
 4009754:	80800b17 	ldw	r2,44(r16)
 4009758:	10000426 	beq	r2,zero,400976c <_fclose_r+0x78>
 400975c:	81400717 	ldw	r5,28(r16)
 4009760:	8809883a 	mov	r4,r17
 4009764:	103ee83a 	callr	r2
 4009768:	10001616 	blt	r2,zero,40097c4 <_fclose_r+0xd0>
 400976c:	8080030b 	ldhu	r2,12(r16)
 4009770:	1080200c 	andi	r2,r2,128
 4009774:	1000151e 	bne	r2,zero,40097cc <_fclose_r+0xd8>
 4009778:	81400c17 	ldw	r5,48(r16)
 400977c:	28000526 	beq	r5,zero,4009794 <_fclose_r+0xa0>
 4009780:	80801004 	addi	r2,r16,64
 4009784:	28800226 	beq	r5,r2,4009790 <_fclose_r+0x9c>
 4009788:	8809883a 	mov	r4,r17
 400978c:	4004b8c0 	call	4004b8c <_free_r>
 4009790:	80000c15 	stw	zero,48(r16)
 4009794:	81401117 	ldw	r5,68(r16)
 4009798:	28000326 	beq	r5,zero,40097a8 <_fclose_r+0xb4>
 400979c:	8809883a 	mov	r4,r17
 40097a0:	4004b8c0 	call	4004b8c <_free_r>
 40097a4:	80001115 	stw	zero,68(r16)
 40097a8:	4004a280 	call	4004a28 <__sfp_lock_acquire>
 40097ac:	8000030d 	sth	zero,12(r16)
 40097b0:	4004a2c0 	call	4004a2c <__sfp_lock_release>
 40097b4:	9005883a 	mov	r2,r18
 40097b8:	003fdc06 	br	400972c <__alt_data_end+0xff00972c>
 40097bc:	4004a180 	call	4004a18 <__sinit>
 40097c0:	003fd706 	br	4009720 <__alt_data_end+0xff009720>
 40097c4:	04bfffc4 	movi	r18,-1
 40097c8:	003fe806 	br	400976c <__alt_data_end+0xff00976c>
 40097cc:	81400417 	ldw	r5,16(r16)
 40097d0:	8809883a 	mov	r4,r17
 40097d4:	4004b8c0 	call	4004b8c <_free_r>
 40097d8:	003fe706 	br	4009778 <__alt_data_end+0xff009778>
 40097dc:	0005883a 	mov	r2,zero
 40097e0:	f800283a 	ret

040097e4 <fclose>:
 40097e4:	00810074 	movhi	r2,1025
 40097e8:	10868004 	addi	r2,r2,6656
 40097ec:	200b883a 	mov	r5,r4
 40097f0:	11000017 	ldw	r4,0(r2)
 40097f4:	40096f41 	jmpi	40096f4 <_fclose_r>

040097f8 <__fputwc>:
 40097f8:	defff804 	addi	sp,sp,-32
 40097fc:	dcc00415 	stw	r19,16(sp)
 4009800:	dc800315 	stw	r18,12(sp)
 4009804:	dc000115 	stw	r16,4(sp)
 4009808:	dfc00715 	stw	ra,28(sp)
 400980c:	dd400615 	stw	r21,24(sp)
 4009810:	dd000515 	stw	r20,20(sp)
 4009814:	dc400215 	stw	r17,8(sp)
 4009818:	2027883a 	mov	r19,r4
 400981c:	2825883a 	mov	r18,r5
 4009820:	3021883a 	mov	r16,r6
 4009824:	40055680 	call	4005568 <__locale_mb_cur_max>
 4009828:	00c00044 	movi	r3,1
 400982c:	10c03e26 	beq	r2,r3,4009928 <__fputwc+0x130>
 4009830:	81c01704 	addi	r7,r16,92
 4009834:	900d883a 	mov	r6,r18
 4009838:	d80b883a 	mov	r5,sp
 400983c:	9809883a 	mov	r4,r19
 4009840:	4009b700 	call	4009b70 <_wcrtomb_r>
 4009844:	1029883a 	mov	r20,r2
 4009848:	00bfffc4 	movi	r2,-1
 400984c:	a0802026 	beq	r20,r2,40098d0 <__fputwc+0xd8>
 4009850:	d9400003 	ldbu	r5,0(sp)
 4009854:	a0001c26 	beq	r20,zero,40098c8 <__fputwc+0xd0>
 4009858:	0023883a 	mov	r17,zero
 400985c:	05400284 	movi	r21,10
 4009860:	00000906 	br	4009888 <__fputwc+0x90>
 4009864:	80800017 	ldw	r2,0(r16)
 4009868:	11400005 	stb	r5,0(r2)
 400986c:	80c00017 	ldw	r3,0(r16)
 4009870:	18c00044 	addi	r3,r3,1
 4009874:	80c00015 	stw	r3,0(r16)
 4009878:	8c400044 	addi	r17,r17,1
 400987c:	dc45883a 	add	r2,sp,r17
 4009880:	8d00112e 	bgeu	r17,r20,40098c8 <__fputwc+0xd0>
 4009884:	11400003 	ldbu	r5,0(r2)
 4009888:	80c00217 	ldw	r3,8(r16)
 400988c:	18ffffc4 	addi	r3,r3,-1
 4009890:	80c00215 	stw	r3,8(r16)
 4009894:	183ff30e 	bge	r3,zero,4009864 <__alt_data_end+0xff009864>
 4009898:	80800617 	ldw	r2,24(r16)
 400989c:	18801916 	blt	r3,r2,4009904 <__fputwc+0x10c>
 40098a0:	80800017 	ldw	r2,0(r16)
 40098a4:	11400005 	stb	r5,0(r2)
 40098a8:	80800017 	ldw	r2,0(r16)
 40098ac:	10c00003 	ldbu	r3,0(r2)
 40098b0:	10800044 	addi	r2,r2,1
 40098b4:	1d402326 	beq	r3,r21,4009944 <__fputwc+0x14c>
 40098b8:	80800015 	stw	r2,0(r16)
 40098bc:	8c400044 	addi	r17,r17,1
 40098c0:	dc45883a 	add	r2,sp,r17
 40098c4:	8d3fef36 	bltu	r17,r20,4009884 <__alt_data_end+0xff009884>
 40098c8:	9005883a 	mov	r2,r18
 40098cc:	00000406 	br	40098e0 <__fputwc+0xe8>
 40098d0:	80c0030b 	ldhu	r3,12(r16)
 40098d4:	a005883a 	mov	r2,r20
 40098d8:	18c01014 	ori	r3,r3,64
 40098dc:	80c0030d 	sth	r3,12(r16)
 40098e0:	dfc00717 	ldw	ra,28(sp)
 40098e4:	dd400617 	ldw	r21,24(sp)
 40098e8:	dd000517 	ldw	r20,20(sp)
 40098ec:	dcc00417 	ldw	r19,16(sp)
 40098f0:	dc800317 	ldw	r18,12(sp)
 40098f4:	dc400217 	ldw	r17,8(sp)
 40098f8:	dc000117 	ldw	r16,4(sp)
 40098fc:	dec00804 	addi	sp,sp,32
 4009900:	f800283a 	ret
 4009904:	800d883a 	mov	r6,r16
 4009908:	29403fcc 	andi	r5,r5,255
 400990c:	9809883a 	mov	r4,r19
 4009910:	40094240 	call	4009424 <__swbuf_r>
 4009914:	10bfffe0 	cmpeqi	r2,r2,-1
 4009918:	10803fcc 	andi	r2,r2,255
 400991c:	103fd626 	beq	r2,zero,4009878 <__alt_data_end+0xff009878>
 4009920:	00bfffc4 	movi	r2,-1
 4009924:	003fee06 	br	40098e0 <__alt_data_end+0xff0098e0>
 4009928:	90ffffc4 	addi	r3,r18,-1
 400992c:	01003f84 	movi	r4,254
 4009930:	20ffbf36 	bltu	r4,r3,4009830 <__alt_data_end+0xff009830>
 4009934:	900b883a 	mov	r5,r18
 4009938:	dc800005 	stb	r18,0(sp)
 400993c:	1029883a 	mov	r20,r2
 4009940:	003fc506 	br	4009858 <__alt_data_end+0xff009858>
 4009944:	800d883a 	mov	r6,r16
 4009948:	a80b883a 	mov	r5,r21
 400994c:	9809883a 	mov	r4,r19
 4009950:	40094240 	call	4009424 <__swbuf_r>
 4009954:	10bfffe0 	cmpeqi	r2,r2,-1
 4009958:	003fef06 	br	4009918 <__alt_data_end+0xff009918>

0400995c <_fputwc_r>:
 400995c:	3080030b 	ldhu	r2,12(r6)
 4009960:	10c8000c 	andi	r3,r2,8192
 4009964:	1800051e 	bne	r3,zero,400997c <_fputwc_r+0x20>
 4009968:	30c01917 	ldw	r3,100(r6)
 400996c:	10880014 	ori	r2,r2,8192
 4009970:	3080030d 	sth	r2,12(r6)
 4009974:	18880014 	ori	r2,r3,8192
 4009978:	30801915 	stw	r2,100(r6)
 400997c:	40097f81 	jmpi	40097f8 <__fputwc>

04009980 <fputwc>:
 4009980:	00810074 	movhi	r2,1025
 4009984:	defffc04 	addi	sp,sp,-16
 4009988:	10868004 	addi	r2,r2,6656
 400998c:	dc000115 	stw	r16,4(sp)
 4009990:	14000017 	ldw	r16,0(r2)
 4009994:	dc400215 	stw	r17,8(sp)
 4009998:	dfc00315 	stw	ra,12(sp)
 400999c:	2023883a 	mov	r17,r4
 40099a0:	80000226 	beq	r16,zero,40099ac <fputwc+0x2c>
 40099a4:	80800e17 	ldw	r2,56(r16)
 40099a8:	10001026 	beq	r2,zero,40099ec <fputwc+0x6c>
 40099ac:	2880030b 	ldhu	r2,12(r5)
 40099b0:	10c8000c 	andi	r3,r2,8192
 40099b4:	1800051e 	bne	r3,zero,40099cc <fputwc+0x4c>
 40099b8:	28c01917 	ldw	r3,100(r5)
 40099bc:	10880014 	ori	r2,r2,8192
 40099c0:	2880030d 	sth	r2,12(r5)
 40099c4:	18880014 	ori	r2,r3,8192
 40099c8:	28801915 	stw	r2,100(r5)
 40099cc:	280d883a 	mov	r6,r5
 40099d0:	8009883a 	mov	r4,r16
 40099d4:	880b883a 	mov	r5,r17
 40099d8:	dfc00317 	ldw	ra,12(sp)
 40099dc:	dc400217 	ldw	r17,8(sp)
 40099e0:	dc000117 	ldw	r16,4(sp)
 40099e4:	dec00404 	addi	sp,sp,16
 40099e8:	40097f81 	jmpi	40097f8 <__fputwc>
 40099ec:	8009883a 	mov	r4,r16
 40099f0:	d9400015 	stw	r5,0(sp)
 40099f4:	4004a180 	call	4004a18 <__sinit>
 40099f8:	d9400017 	ldw	r5,0(sp)
 40099fc:	003feb06 	br	40099ac <__alt_data_end+0xff0099ac>

04009a00 <_fstat_r>:
 4009a00:	defffd04 	addi	sp,sp,-12
 4009a04:	2805883a 	mov	r2,r5
 4009a08:	dc000015 	stw	r16,0(sp)
 4009a0c:	04010074 	movhi	r16,1025
 4009a10:	dc400115 	stw	r17,4(sp)
 4009a14:	840d5b04 	addi	r16,r16,13676
 4009a18:	2023883a 	mov	r17,r4
 4009a1c:	300b883a 	mov	r5,r6
 4009a20:	1009883a 	mov	r4,r2
 4009a24:	dfc00215 	stw	ra,8(sp)
 4009a28:	80000015 	stw	zero,0(r16)
 4009a2c:	400d1e00 	call	400d1e0 <fstat>
 4009a30:	00ffffc4 	movi	r3,-1
 4009a34:	10c00526 	beq	r2,r3,4009a4c <_fstat_r+0x4c>
 4009a38:	dfc00217 	ldw	ra,8(sp)
 4009a3c:	dc400117 	ldw	r17,4(sp)
 4009a40:	dc000017 	ldw	r16,0(sp)
 4009a44:	dec00304 	addi	sp,sp,12
 4009a48:	f800283a 	ret
 4009a4c:	80c00017 	ldw	r3,0(r16)
 4009a50:	183ff926 	beq	r3,zero,4009a38 <__alt_data_end+0xff009a38>
 4009a54:	88c00015 	stw	r3,0(r17)
 4009a58:	003ff706 	br	4009a38 <__alt_data_end+0xff009a38>

04009a5c <_isatty_r>:
 4009a5c:	defffd04 	addi	sp,sp,-12
 4009a60:	dc000015 	stw	r16,0(sp)
 4009a64:	04010074 	movhi	r16,1025
 4009a68:	dc400115 	stw	r17,4(sp)
 4009a6c:	840d5b04 	addi	r16,r16,13676
 4009a70:	2023883a 	mov	r17,r4
 4009a74:	2809883a 	mov	r4,r5
 4009a78:	dfc00215 	stw	ra,8(sp)
 4009a7c:	80000015 	stw	zero,0(r16)
 4009a80:	400d2cc0 	call	400d2cc <isatty>
 4009a84:	00ffffc4 	movi	r3,-1
 4009a88:	10c00526 	beq	r2,r3,4009aa0 <_isatty_r+0x44>
 4009a8c:	dfc00217 	ldw	ra,8(sp)
 4009a90:	dc400117 	ldw	r17,4(sp)
 4009a94:	dc000017 	ldw	r16,0(sp)
 4009a98:	dec00304 	addi	sp,sp,12
 4009a9c:	f800283a 	ret
 4009aa0:	80c00017 	ldw	r3,0(r16)
 4009aa4:	183ff926 	beq	r3,zero,4009a8c <__alt_data_end+0xff009a8c>
 4009aa8:	88c00015 	stw	r3,0(r17)
 4009aac:	003ff706 	br	4009a8c <__alt_data_end+0xff009a8c>

04009ab0 <_lseek_r>:
 4009ab0:	defffd04 	addi	sp,sp,-12
 4009ab4:	2805883a 	mov	r2,r5
 4009ab8:	dc000015 	stw	r16,0(sp)
 4009abc:	04010074 	movhi	r16,1025
 4009ac0:	dc400115 	stw	r17,4(sp)
 4009ac4:	300b883a 	mov	r5,r6
 4009ac8:	840d5b04 	addi	r16,r16,13676
 4009acc:	2023883a 	mov	r17,r4
 4009ad0:	380d883a 	mov	r6,r7
 4009ad4:	1009883a 	mov	r4,r2
 4009ad8:	dfc00215 	stw	ra,8(sp)
 4009adc:	80000015 	stw	zero,0(r16)
 4009ae0:	400d4980 	call	400d498 <lseek>
 4009ae4:	00ffffc4 	movi	r3,-1
 4009ae8:	10c00526 	beq	r2,r3,4009b00 <_lseek_r+0x50>
 4009aec:	dfc00217 	ldw	ra,8(sp)
 4009af0:	dc400117 	ldw	r17,4(sp)
 4009af4:	dc000017 	ldw	r16,0(sp)
 4009af8:	dec00304 	addi	sp,sp,12
 4009afc:	f800283a 	ret
 4009b00:	80c00017 	ldw	r3,0(r16)
 4009b04:	183ff926 	beq	r3,zero,4009aec <__alt_data_end+0xff009aec>
 4009b08:	88c00015 	stw	r3,0(r17)
 4009b0c:	003ff706 	br	4009aec <__alt_data_end+0xff009aec>

04009b10 <_read_r>:
 4009b10:	defffd04 	addi	sp,sp,-12
 4009b14:	2805883a 	mov	r2,r5
 4009b18:	dc000015 	stw	r16,0(sp)
 4009b1c:	04010074 	movhi	r16,1025
 4009b20:	dc400115 	stw	r17,4(sp)
 4009b24:	300b883a 	mov	r5,r6
 4009b28:	840d5b04 	addi	r16,r16,13676
 4009b2c:	2023883a 	mov	r17,r4
 4009b30:	380d883a 	mov	r6,r7
 4009b34:	1009883a 	mov	r4,r2
 4009b38:	dfc00215 	stw	ra,8(sp)
 4009b3c:	80000015 	stw	zero,0(r16)
 4009b40:	400d66c0 	call	400d66c <read>
 4009b44:	00ffffc4 	movi	r3,-1
 4009b48:	10c00526 	beq	r2,r3,4009b60 <_read_r+0x50>
 4009b4c:	dfc00217 	ldw	ra,8(sp)
 4009b50:	dc400117 	ldw	r17,4(sp)
 4009b54:	dc000017 	ldw	r16,0(sp)
 4009b58:	dec00304 	addi	sp,sp,12
 4009b5c:	f800283a 	ret
 4009b60:	80c00017 	ldw	r3,0(r16)
 4009b64:	183ff926 	beq	r3,zero,4009b4c <__alt_data_end+0xff009b4c>
 4009b68:	88c00015 	stw	r3,0(r17)
 4009b6c:	003ff706 	br	4009b4c <__alt_data_end+0xff009b4c>

04009b70 <_wcrtomb_r>:
 4009b70:	defff604 	addi	sp,sp,-40
 4009b74:	00810074 	movhi	r2,1025
 4009b78:	dc800815 	stw	r18,32(sp)
 4009b7c:	dc400715 	stw	r17,28(sp)
 4009b80:	dc000615 	stw	r16,24(sp)
 4009b84:	10868404 	addi	r2,r2,6672
 4009b88:	dfc00915 	stw	ra,36(sp)
 4009b8c:	2021883a 	mov	r16,r4
 4009b90:	3823883a 	mov	r17,r7
 4009b94:	14800017 	ldw	r18,0(r2)
 4009b98:	28001426 	beq	r5,zero,4009bec <_wcrtomb_r+0x7c>
 4009b9c:	d9400415 	stw	r5,16(sp)
 4009ba0:	d9800515 	stw	r6,20(sp)
 4009ba4:	400555c0 	call	400555c <__locale_charset>
 4009ba8:	d9800517 	ldw	r6,20(sp)
 4009bac:	d9400417 	ldw	r5,16(sp)
 4009bb0:	100f883a 	mov	r7,r2
 4009bb4:	dc400015 	stw	r17,0(sp)
 4009bb8:	8009883a 	mov	r4,r16
 4009bbc:	903ee83a 	callr	r18
 4009bc0:	00ffffc4 	movi	r3,-1
 4009bc4:	10c0031e 	bne	r2,r3,4009bd4 <_wcrtomb_r+0x64>
 4009bc8:	88000015 	stw	zero,0(r17)
 4009bcc:	00c02284 	movi	r3,138
 4009bd0:	80c00015 	stw	r3,0(r16)
 4009bd4:	dfc00917 	ldw	ra,36(sp)
 4009bd8:	dc800817 	ldw	r18,32(sp)
 4009bdc:	dc400717 	ldw	r17,28(sp)
 4009be0:	dc000617 	ldw	r16,24(sp)
 4009be4:	dec00a04 	addi	sp,sp,40
 4009be8:	f800283a 	ret
 4009bec:	400555c0 	call	400555c <__locale_charset>
 4009bf0:	100f883a 	mov	r7,r2
 4009bf4:	dc400015 	stw	r17,0(sp)
 4009bf8:	000d883a 	mov	r6,zero
 4009bfc:	d9400104 	addi	r5,sp,4
 4009c00:	8009883a 	mov	r4,r16
 4009c04:	903ee83a 	callr	r18
 4009c08:	003fed06 	br	4009bc0 <__alt_data_end+0xff009bc0>

04009c0c <wcrtomb>:
 4009c0c:	defff604 	addi	sp,sp,-40
 4009c10:	00810074 	movhi	r2,1025
 4009c14:	dc800615 	stw	r18,24(sp)
 4009c18:	dc400515 	stw	r17,20(sp)
 4009c1c:	10868004 	addi	r2,r2,6656
 4009c20:	dfc00915 	stw	ra,36(sp)
 4009c24:	dd000815 	stw	r20,32(sp)
 4009c28:	dcc00715 	stw	r19,28(sp)
 4009c2c:	dc000415 	stw	r16,16(sp)
 4009c30:	3025883a 	mov	r18,r6
 4009c34:	14400017 	ldw	r17,0(r2)
 4009c38:	20001926 	beq	r4,zero,4009ca0 <wcrtomb+0x94>
 4009c3c:	00810074 	movhi	r2,1025
 4009c40:	10868404 	addi	r2,r2,6672
 4009c44:	15000017 	ldw	r20,0(r2)
 4009c48:	2021883a 	mov	r16,r4
 4009c4c:	2827883a 	mov	r19,r5
 4009c50:	400555c0 	call	400555c <__locale_charset>
 4009c54:	100f883a 	mov	r7,r2
 4009c58:	dc800015 	stw	r18,0(sp)
 4009c5c:	980d883a 	mov	r6,r19
 4009c60:	800b883a 	mov	r5,r16
 4009c64:	8809883a 	mov	r4,r17
 4009c68:	a03ee83a 	callr	r20
 4009c6c:	00ffffc4 	movi	r3,-1
 4009c70:	10c0031e 	bne	r2,r3,4009c80 <wcrtomb+0x74>
 4009c74:	90000015 	stw	zero,0(r18)
 4009c78:	00c02284 	movi	r3,138
 4009c7c:	88c00015 	stw	r3,0(r17)
 4009c80:	dfc00917 	ldw	ra,36(sp)
 4009c84:	dd000817 	ldw	r20,32(sp)
 4009c88:	dcc00717 	ldw	r19,28(sp)
 4009c8c:	dc800617 	ldw	r18,24(sp)
 4009c90:	dc400517 	ldw	r17,20(sp)
 4009c94:	dc000417 	ldw	r16,16(sp)
 4009c98:	dec00a04 	addi	sp,sp,40
 4009c9c:	f800283a 	ret
 4009ca0:	00810074 	movhi	r2,1025
 4009ca4:	10868404 	addi	r2,r2,6672
 4009ca8:	14000017 	ldw	r16,0(r2)
 4009cac:	400555c0 	call	400555c <__locale_charset>
 4009cb0:	100f883a 	mov	r7,r2
 4009cb4:	dc800015 	stw	r18,0(sp)
 4009cb8:	000d883a 	mov	r6,zero
 4009cbc:	d9400104 	addi	r5,sp,4
 4009cc0:	8809883a 	mov	r4,r17
 4009cc4:	803ee83a 	callr	r16
 4009cc8:	003fe806 	br	4009c6c <__alt_data_end+0xff009c6c>

04009ccc <__ascii_wctomb>:
 4009ccc:	28000526 	beq	r5,zero,4009ce4 <__ascii_wctomb+0x18>
 4009cd0:	00803fc4 	movi	r2,255
 4009cd4:	11800536 	bltu	r2,r6,4009cec <__ascii_wctomb+0x20>
 4009cd8:	29800005 	stb	r6,0(r5)
 4009cdc:	00800044 	movi	r2,1
 4009ce0:	f800283a 	ret
 4009ce4:	0005883a 	mov	r2,zero
 4009ce8:	f800283a 	ret
 4009cec:	00802284 	movi	r2,138
 4009cf0:	20800015 	stw	r2,0(r4)
 4009cf4:	00bfffc4 	movi	r2,-1
 4009cf8:	f800283a 	ret

04009cfc <_wctomb_r>:
 4009cfc:	00810074 	movhi	r2,1025
 4009d00:	defff904 	addi	sp,sp,-28
 4009d04:	10868404 	addi	r2,r2,6672
 4009d08:	dfc00615 	stw	ra,24(sp)
 4009d0c:	dc400515 	stw	r17,20(sp)
 4009d10:	dc000415 	stw	r16,16(sp)
 4009d14:	3823883a 	mov	r17,r7
 4009d18:	14000017 	ldw	r16,0(r2)
 4009d1c:	d9000115 	stw	r4,4(sp)
 4009d20:	d9400215 	stw	r5,8(sp)
 4009d24:	d9800315 	stw	r6,12(sp)
 4009d28:	400555c0 	call	400555c <__locale_charset>
 4009d2c:	d9800317 	ldw	r6,12(sp)
 4009d30:	d9400217 	ldw	r5,8(sp)
 4009d34:	d9000117 	ldw	r4,4(sp)
 4009d38:	100f883a 	mov	r7,r2
 4009d3c:	dc400015 	stw	r17,0(sp)
 4009d40:	803ee83a 	callr	r16
 4009d44:	dfc00617 	ldw	ra,24(sp)
 4009d48:	dc400517 	ldw	r17,20(sp)
 4009d4c:	dc000417 	ldw	r16,16(sp)
 4009d50:	dec00704 	addi	sp,sp,28
 4009d54:	f800283a 	ret

04009d58 <__udivdi3>:
 4009d58:	defff504 	addi	sp,sp,-44
 4009d5c:	dcc00415 	stw	r19,16(sp)
 4009d60:	dc000115 	stw	r16,4(sp)
 4009d64:	dfc00a15 	stw	ra,40(sp)
 4009d68:	df000915 	stw	fp,36(sp)
 4009d6c:	ddc00815 	stw	r23,32(sp)
 4009d70:	dd800715 	stw	r22,28(sp)
 4009d74:	dd400615 	stw	r21,24(sp)
 4009d78:	dd000515 	stw	r20,20(sp)
 4009d7c:	dc800315 	stw	r18,12(sp)
 4009d80:	dc400215 	stw	r17,8(sp)
 4009d84:	2027883a 	mov	r19,r4
 4009d88:	2821883a 	mov	r16,r5
 4009d8c:	3800411e 	bne	r7,zero,4009e94 <__udivdi3+0x13c>
 4009d90:	3023883a 	mov	r17,r6
 4009d94:	2025883a 	mov	r18,r4
 4009d98:	2980522e 	bgeu	r5,r6,4009ee4 <__udivdi3+0x18c>
 4009d9c:	00bfffd4 	movui	r2,65535
 4009da0:	282d883a 	mov	r22,r5
 4009da4:	1180a836 	bltu	r2,r6,400a048 <__udivdi3+0x2f0>
 4009da8:	00803fc4 	movi	r2,255
 4009dac:	1185803a 	cmpltu	r2,r2,r6
 4009db0:	100490fa 	slli	r2,r2,3
 4009db4:	3086d83a 	srl	r3,r6,r2
 4009db8:	01010074 	movhi	r4,1025
 4009dbc:	213f7f04 	addi	r4,r4,-516
 4009dc0:	20c7883a 	add	r3,r4,r3
 4009dc4:	18c00003 	ldbu	r3,0(r3)
 4009dc8:	1885883a 	add	r2,r3,r2
 4009dcc:	00c00804 	movi	r3,32
 4009dd0:	1887c83a 	sub	r3,r3,r2
 4009dd4:	18000526 	beq	r3,zero,4009dec <__udivdi3+0x94>
 4009dd8:	80e0983a 	sll	r16,r16,r3
 4009ddc:	9884d83a 	srl	r2,r19,r2
 4009de0:	30e2983a 	sll	r17,r6,r3
 4009de4:	98e4983a 	sll	r18,r19,r3
 4009de8:	142cb03a 	or	r22,r2,r16
 4009dec:	882ad43a 	srli	r21,r17,16
 4009df0:	b009883a 	mov	r4,r22
 4009df4:	8d3fffcc 	andi	r20,r17,65535
 4009df8:	a80b883a 	mov	r5,r21
 4009dfc:	400a9640 	call	400a964 <__umodsi3>
 4009e00:	b009883a 	mov	r4,r22
 4009e04:	a80b883a 	mov	r5,r21
 4009e08:	1027883a 	mov	r19,r2
 4009e0c:	400a9000 	call	400a900 <__udivsi3>
 4009e10:	102d883a 	mov	r22,r2
 4009e14:	9826943a 	slli	r19,r19,16
 4009e18:	9004d43a 	srli	r2,r18,16
 4009e1c:	a5a1383a 	mul	r16,r20,r22
 4009e20:	14c4b03a 	or	r2,r2,r19
 4009e24:	1400052e 	bgeu	r2,r16,4009e3c <__udivdi3+0xe4>
 4009e28:	1445883a 	add	r2,r2,r17
 4009e2c:	b0ffffc4 	addi	r3,r22,-1
 4009e30:	14400136 	bltu	r2,r17,4009e38 <__udivdi3+0xe0>
 4009e34:	14012336 	bltu	r2,r16,400a2c4 <__udivdi3+0x56c>
 4009e38:	182d883a 	mov	r22,r3
 4009e3c:	1421c83a 	sub	r16,r2,r16
 4009e40:	a80b883a 	mov	r5,r21
 4009e44:	8009883a 	mov	r4,r16
 4009e48:	400a9640 	call	400a964 <__umodsi3>
 4009e4c:	1027883a 	mov	r19,r2
 4009e50:	a80b883a 	mov	r5,r21
 4009e54:	8009883a 	mov	r4,r16
 4009e58:	400a9000 	call	400a900 <__udivsi3>
 4009e5c:	9826943a 	slli	r19,r19,16
 4009e60:	a0a9383a 	mul	r20,r20,r2
 4009e64:	94bfffcc 	andi	r18,r18,65535
 4009e68:	94e4b03a 	or	r18,r18,r19
 4009e6c:	9500052e 	bgeu	r18,r20,4009e84 <__udivdi3+0x12c>
 4009e70:	8ca5883a 	add	r18,r17,r18
 4009e74:	10ffffc4 	addi	r3,r2,-1
 4009e78:	9440f136 	bltu	r18,r17,400a240 <__udivdi3+0x4e8>
 4009e7c:	9500f02e 	bgeu	r18,r20,400a240 <__udivdi3+0x4e8>
 4009e80:	10bfff84 	addi	r2,r2,-2
 4009e84:	b00c943a 	slli	r6,r22,16
 4009e88:	0007883a 	mov	r3,zero
 4009e8c:	3084b03a 	or	r2,r6,r2
 4009e90:	00005906 	br	4009ff8 <__udivdi3+0x2a0>
 4009e94:	29c05636 	bltu	r5,r7,4009ff0 <__udivdi3+0x298>
 4009e98:	00bfffd4 	movui	r2,65535
 4009e9c:	11c0622e 	bgeu	r2,r7,400a028 <__udivdi3+0x2d0>
 4009ea0:	00804034 	movhi	r2,256
 4009ea4:	10bfffc4 	addi	r2,r2,-1
 4009ea8:	11c0ee36 	bltu	r2,r7,400a264 <__udivdi3+0x50c>
 4009eac:	00800404 	movi	r2,16
 4009eb0:	3886d83a 	srl	r3,r7,r2
 4009eb4:	01010074 	movhi	r4,1025
 4009eb8:	213f7f04 	addi	r4,r4,-516
 4009ebc:	20c7883a 	add	r3,r4,r3
 4009ec0:	18c00003 	ldbu	r3,0(r3)
 4009ec4:	05400804 	movi	r21,32
 4009ec8:	1885883a 	add	r2,r3,r2
 4009ecc:	a8abc83a 	sub	r21,r21,r2
 4009ed0:	a800621e 	bne	r21,zero,400a05c <__udivdi3+0x304>
 4009ed4:	3c00e936 	bltu	r7,r16,400a27c <__udivdi3+0x524>
 4009ed8:	9985403a 	cmpgeu	r2,r19,r6
 4009edc:	0007883a 	mov	r3,zero
 4009ee0:	00004506 	br	4009ff8 <__udivdi3+0x2a0>
 4009ee4:	3000041e 	bne	r6,zero,4009ef8 <__udivdi3+0x1a0>
 4009ee8:	000b883a 	mov	r5,zero
 4009eec:	01000044 	movi	r4,1
 4009ef0:	400a9000 	call	400a900 <__udivsi3>
 4009ef4:	1023883a 	mov	r17,r2
 4009ef8:	00bfffd4 	movui	r2,65535
 4009efc:	14404e2e 	bgeu	r2,r17,400a038 <__udivdi3+0x2e0>
 4009f00:	00804034 	movhi	r2,256
 4009f04:	10bfffc4 	addi	r2,r2,-1
 4009f08:	1440d836 	bltu	r2,r17,400a26c <__udivdi3+0x514>
 4009f0c:	00800404 	movi	r2,16
 4009f10:	8886d83a 	srl	r3,r17,r2
 4009f14:	01010074 	movhi	r4,1025
 4009f18:	213f7f04 	addi	r4,r4,-516
 4009f1c:	20c7883a 	add	r3,r4,r3
 4009f20:	18c00003 	ldbu	r3,0(r3)
 4009f24:	1885883a 	add	r2,r3,r2
 4009f28:	00c00804 	movi	r3,32
 4009f2c:	1887c83a 	sub	r3,r3,r2
 4009f30:	18008f1e 	bne	r3,zero,400a170 <__udivdi3+0x418>
 4009f34:	882ad43a 	srli	r21,r17,16
 4009f38:	8461c83a 	sub	r16,r16,r17
 4009f3c:	8d3fffcc 	andi	r20,r17,65535
 4009f40:	00c00044 	movi	r3,1
 4009f44:	8009883a 	mov	r4,r16
 4009f48:	a80b883a 	mov	r5,r21
 4009f4c:	d8c00015 	stw	r3,0(sp)
 4009f50:	400a9640 	call	400a964 <__umodsi3>
 4009f54:	8009883a 	mov	r4,r16
 4009f58:	a80b883a 	mov	r5,r21
 4009f5c:	1027883a 	mov	r19,r2
 4009f60:	400a9000 	call	400a900 <__udivsi3>
 4009f64:	9826943a 	slli	r19,r19,16
 4009f68:	9008d43a 	srli	r4,r18,16
 4009f6c:	1521383a 	mul	r16,r2,r20
 4009f70:	102d883a 	mov	r22,r2
 4009f74:	24c8b03a 	or	r4,r4,r19
 4009f78:	d8c00017 	ldw	r3,0(sp)
 4009f7c:	2400052e 	bgeu	r4,r16,4009f94 <__udivdi3+0x23c>
 4009f80:	2449883a 	add	r4,r4,r17
 4009f84:	b0bfffc4 	addi	r2,r22,-1
 4009f88:	24400136 	bltu	r4,r17,4009f90 <__udivdi3+0x238>
 4009f8c:	2400ca36 	bltu	r4,r16,400a2b8 <__udivdi3+0x560>
 4009f90:	102d883a 	mov	r22,r2
 4009f94:	2421c83a 	sub	r16,r4,r16
 4009f98:	a80b883a 	mov	r5,r21
 4009f9c:	8009883a 	mov	r4,r16
 4009fa0:	d8c00015 	stw	r3,0(sp)
 4009fa4:	400a9640 	call	400a964 <__umodsi3>
 4009fa8:	1027883a 	mov	r19,r2
 4009fac:	a80b883a 	mov	r5,r21
 4009fb0:	8009883a 	mov	r4,r16
 4009fb4:	400a9000 	call	400a900 <__udivsi3>
 4009fb8:	9826943a 	slli	r19,r19,16
 4009fbc:	1529383a 	mul	r20,r2,r20
 4009fc0:	94bfffcc 	andi	r18,r18,65535
 4009fc4:	94e4b03a 	or	r18,r18,r19
 4009fc8:	d8c00017 	ldw	r3,0(sp)
 4009fcc:	9500052e 	bgeu	r18,r20,4009fe4 <__udivdi3+0x28c>
 4009fd0:	8ca5883a 	add	r18,r17,r18
 4009fd4:	113fffc4 	addi	r4,r2,-1
 4009fd8:	94409736 	bltu	r18,r17,400a238 <__udivdi3+0x4e0>
 4009fdc:	9500962e 	bgeu	r18,r20,400a238 <__udivdi3+0x4e0>
 4009fe0:	10bfff84 	addi	r2,r2,-2
 4009fe4:	b00c943a 	slli	r6,r22,16
 4009fe8:	3084b03a 	or	r2,r6,r2
 4009fec:	00000206 	br	4009ff8 <__udivdi3+0x2a0>
 4009ff0:	0007883a 	mov	r3,zero
 4009ff4:	0005883a 	mov	r2,zero
 4009ff8:	dfc00a17 	ldw	ra,40(sp)
 4009ffc:	df000917 	ldw	fp,36(sp)
 400a000:	ddc00817 	ldw	r23,32(sp)
 400a004:	dd800717 	ldw	r22,28(sp)
 400a008:	dd400617 	ldw	r21,24(sp)
 400a00c:	dd000517 	ldw	r20,20(sp)
 400a010:	dcc00417 	ldw	r19,16(sp)
 400a014:	dc800317 	ldw	r18,12(sp)
 400a018:	dc400217 	ldw	r17,8(sp)
 400a01c:	dc000117 	ldw	r16,4(sp)
 400a020:	dec00b04 	addi	sp,sp,44
 400a024:	f800283a 	ret
 400a028:	00803fc4 	movi	r2,255
 400a02c:	11c5803a 	cmpltu	r2,r2,r7
 400a030:	100490fa 	slli	r2,r2,3
 400a034:	003f9e06 	br	4009eb0 <__alt_data_end+0xff009eb0>
 400a038:	00803fc4 	movi	r2,255
 400a03c:	1445803a 	cmpltu	r2,r2,r17
 400a040:	100490fa 	slli	r2,r2,3
 400a044:	003fb206 	br	4009f10 <__alt_data_end+0xff009f10>
 400a048:	00804034 	movhi	r2,256
 400a04c:	10bfffc4 	addi	r2,r2,-1
 400a050:	11808836 	bltu	r2,r6,400a274 <__udivdi3+0x51c>
 400a054:	00800404 	movi	r2,16
 400a058:	003f5606 	br	4009db4 <__alt_data_end+0xff009db4>
 400a05c:	30aed83a 	srl	r23,r6,r2
 400a060:	3d4e983a 	sll	r7,r7,r21
 400a064:	80acd83a 	srl	r22,r16,r2
 400a068:	9884d83a 	srl	r2,r19,r2
 400a06c:	3deeb03a 	or	r23,r7,r23
 400a070:	b824d43a 	srli	r18,r23,16
 400a074:	8560983a 	sll	r16,r16,r21
 400a078:	b009883a 	mov	r4,r22
 400a07c:	900b883a 	mov	r5,r18
 400a080:	3568983a 	sll	r20,r6,r21
 400a084:	1420b03a 	or	r16,r2,r16
 400a088:	400a9640 	call	400a964 <__umodsi3>
 400a08c:	b009883a 	mov	r4,r22
 400a090:	900b883a 	mov	r5,r18
 400a094:	1023883a 	mov	r17,r2
 400a098:	400a9000 	call	400a900 <__udivsi3>
 400a09c:	8808943a 	slli	r4,r17,16
 400a0a0:	bf3fffcc 	andi	fp,r23,65535
 400a0a4:	8006d43a 	srli	r3,r16,16
 400a0a8:	e0a3383a 	mul	r17,fp,r2
 400a0ac:	100d883a 	mov	r6,r2
 400a0b0:	1906b03a 	or	r3,r3,r4
 400a0b4:	1c40042e 	bgeu	r3,r17,400a0c8 <__udivdi3+0x370>
 400a0b8:	1dc7883a 	add	r3,r3,r23
 400a0bc:	10bfffc4 	addi	r2,r2,-1
 400a0c0:	1dc0752e 	bgeu	r3,r23,400a298 <__udivdi3+0x540>
 400a0c4:	100d883a 	mov	r6,r2
 400a0c8:	1c63c83a 	sub	r17,r3,r17
 400a0cc:	900b883a 	mov	r5,r18
 400a0d0:	8809883a 	mov	r4,r17
 400a0d4:	d9800015 	stw	r6,0(sp)
 400a0d8:	400a9640 	call	400a964 <__umodsi3>
 400a0dc:	102d883a 	mov	r22,r2
 400a0e0:	8809883a 	mov	r4,r17
 400a0e4:	900b883a 	mov	r5,r18
 400a0e8:	400a9000 	call	400a900 <__udivsi3>
 400a0ec:	b02c943a 	slli	r22,r22,16
 400a0f0:	e089383a 	mul	r4,fp,r2
 400a0f4:	843fffcc 	andi	r16,r16,65535
 400a0f8:	85a0b03a 	or	r16,r16,r22
 400a0fc:	d9800017 	ldw	r6,0(sp)
 400a100:	8100042e 	bgeu	r16,r4,400a114 <__udivdi3+0x3bc>
 400a104:	85e1883a 	add	r16,r16,r23
 400a108:	10ffffc4 	addi	r3,r2,-1
 400a10c:	85c05e2e 	bgeu	r16,r23,400a288 <__udivdi3+0x530>
 400a110:	1805883a 	mov	r2,r3
 400a114:	300c943a 	slli	r6,r6,16
 400a118:	a17fffcc 	andi	r5,r20,65535
 400a11c:	a028d43a 	srli	r20,r20,16
 400a120:	3084b03a 	or	r2,r6,r2
 400a124:	10ffffcc 	andi	r3,r2,65535
 400a128:	100cd43a 	srli	r6,r2,16
 400a12c:	194f383a 	mul	r7,r3,r5
 400a130:	1d07383a 	mul	r3,r3,r20
 400a134:	314b383a 	mul	r5,r6,r5
 400a138:	3810d43a 	srli	r8,r7,16
 400a13c:	8121c83a 	sub	r16,r16,r4
 400a140:	1947883a 	add	r3,r3,r5
 400a144:	40c7883a 	add	r3,r8,r3
 400a148:	350d383a 	mul	r6,r6,r20
 400a14c:	1940022e 	bgeu	r3,r5,400a158 <__udivdi3+0x400>
 400a150:	01000074 	movhi	r4,1
 400a154:	310d883a 	add	r6,r6,r4
 400a158:	1828d43a 	srli	r20,r3,16
 400a15c:	a18d883a 	add	r6,r20,r6
 400a160:	81803e36 	bltu	r16,r6,400a25c <__udivdi3+0x504>
 400a164:	81803826 	beq	r16,r6,400a248 <__udivdi3+0x4f0>
 400a168:	0007883a 	mov	r3,zero
 400a16c:	003fa206 	br	4009ff8 <__alt_data_end+0xff009ff8>
 400a170:	88e2983a 	sll	r17,r17,r3
 400a174:	80a8d83a 	srl	r20,r16,r2
 400a178:	80e0983a 	sll	r16,r16,r3
 400a17c:	882ad43a 	srli	r21,r17,16
 400a180:	9884d83a 	srl	r2,r19,r2
 400a184:	a009883a 	mov	r4,r20
 400a188:	a80b883a 	mov	r5,r21
 400a18c:	142eb03a 	or	r23,r2,r16
 400a190:	98e4983a 	sll	r18,r19,r3
 400a194:	400a9640 	call	400a964 <__umodsi3>
 400a198:	a009883a 	mov	r4,r20
 400a19c:	a80b883a 	mov	r5,r21
 400a1a0:	1021883a 	mov	r16,r2
 400a1a4:	400a9000 	call	400a900 <__udivsi3>
 400a1a8:	1039883a 	mov	fp,r2
 400a1ac:	8d3fffcc 	andi	r20,r17,65535
 400a1b0:	8020943a 	slli	r16,r16,16
 400a1b4:	b804d43a 	srli	r2,r23,16
 400a1b8:	a72d383a 	mul	r22,r20,fp
 400a1bc:	1404b03a 	or	r2,r2,r16
 400a1c0:	1580062e 	bgeu	r2,r22,400a1dc <__udivdi3+0x484>
 400a1c4:	1445883a 	add	r2,r2,r17
 400a1c8:	e0ffffc4 	addi	r3,fp,-1
 400a1cc:	14403836 	bltu	r2,r17,400a2b0 <__udivdi3+0x558>
 400a1d0:	1580372e 	bgeu	r2,r22,400a2b0 <__udivdi3+0x558>
 400a1d4:	e73fff84 	addi	fp,fp,-2
 400a1d8:	1445883a 	add	r2,r2,r17
 400a1dc:	15adc83a 	sub	r22,r2,r22
 400a1e0:	a80b883a 	mov	r5,r21
 400a1e4:	b009883a 	mov	r4,r22
 400a1e8:	400a9640 	call	400a964 <__umodsi3>
 400a1ec:	1027883a 	mov	r19,r2
 400a1f0:	b009883a 	mov	r4,r22
 400a1f4:	a80b883a 	mov	r5,r21
 400a1f8:	400a9000 	call	400a900 <__udivsi3>
 400a1fc:	9826943a 	slli	r19,r19,16
 400a200:	a0a1383a 	mul	r16,r20,r2
 400a204:	b93fffcc 	andi	r4,r23,65535
 400a208:	24c8b03a 	or	r4,r4,r19
 400a20c:	2400062e 	bgeu	r4,r16,400a228 <__udivdi3+0x4d0>
 400a210:	2449883a 	add	r4,r4,r17
 400a214:	10ffffc4 	addi	r3,r2,-1
 400a218:	24402336 	bltu	r4,r17,400a2a8 <__udivdi3+0x550>
 400a21c:	2400222e 	bgeu	r4,r16,400a2a8 <__udivdi3+0x550>
 400a220:	10bfff84 	addi	r2,r2,-2
 400a224:	2449883a 	add	r4,r4,r17
 400a228:	e038943a 	slli	fp,fp,16
 400a22c:	2421c83a 	sub	r16,r4,r16
 400a230:	e086b03a 	or	r3,fp,r2
 400a234:	003f4306 	br	4009f44 <__alt_data_end+0xff009f44>
 400a238:	2005883a 	mov	r2,r4
 400a23c:	003f6906 	br	4009fe4 <__alt_data_end+0xff009fe4>
 400a240:	1805883a 	mov	r2,r3
 400a244:	003f0f06 	br	4009e84 <__alt_data_end+0xff009e84>
 400a248:	1806943a 	slli	r3,r3,16
 400a24c:	9d66983a 	sll	r19,r19,r21
 400a250:	39ffffcc 	andi	r7,r7,65535
 400a254:	19c7883a 	add	r3,r3,r7
 400a258:	98ffc32e 	bgeu	r19,r3,400a168 <__alt_data_end+0xff00a168>
 400a25c:	10bfffc4 	addi	r2,r2,-1
 400a260:	003fc106 	br	400a168 <__alt_data_end+0xff00a168>
 400a264:	00800604 	movi	r2,24
 400a268:	003f1106 	br	4009eb0 <__alt_data_end+0xff009eb0>
 400a26c:	00800604 	movi	r2,24
 400a270:	003f2706 	br	4009f10 <__alt_data_end+0xff009f10>
 400a274:	00800604 	movi	r2,24
 400a278:	003ece06 	br	4009db4 <__alt_data_end+0xff009db4>
 400a27c:	0007883a 	mov	r3,zero
 400a280:	00800044 	movi	r2,1
 400a284:	003f5c06 	br	4009ff8 <__alt_data_end+0xff009ff8>
 400a288:	813fa12e 	bgeu	r16,r4,400a110 <__alt_data_end+0xff00a110>
 400a28c:	10bfff84 	addi	r2,r2,-2
 400a290:	85e1883a 	add	r16,r16,r23
 400a294:	003f9f06 	br	400a114 <__alt_data_end+0xff00a114>
 400a298:	1c7f8a2e 	bgeu	r3,r17,400a0c4 <__alt_data_end+0xff00a0c4>
 400a29c:	31bfff84 	addi	r6,r6,-2
 400a2a0:	1dc7883a 	add	r3,r3,r23
 400a2a4:	003f8806 	br	400a0c8 <__alt_data_end+0xff00a0c8>
 400a2a8:	1805883a 	mov	r2,r3
 400a2ac:	003fde06 	br	400a228 <__alt_data_end+0xff00a228>
 400a2b0:	1839883a 	mov	fp,r3
 400a2b4:	003fc906 	br	400a1dc <__alt_data_end+0xff00a1dc>
 400a2b8:	b5bfff84 	addi	r22,r22,-2
 400a2bc:	2449883a 	add	r4,r4,r17
 400a2c0:	003f3406 	br	4009f94 <__alt_data_end+0xff009f94>
 400a2c4:	b5bfff84 	addi	r22,r22,-2
 400a2c8:	1445883a 	add	r2,r2,r17
 400a2cc:	003edb06 	br	4009e3c <__alt_data_end+0xff009e3c>

0400a2d0 <__umoddi3>:
 400a2d0:	defff404 	addi	sp,sp,-48
 400a2d4:	df000a15 	stw	fp,40(sp)
 400a2d8:	dc400315 	stw	r17,12(sp)
 400a2dc:	dc000215 	stw	r16,8(sp)
 400a2e0:	dfc00b15 	stw	ra,44(sp)
 400a2e4:	ddc00915 	stw	r23,36(sp)
 400a2e8:	dd800815 	stw	r22,32(sp)
 400a2ec:	dd400715 	stw	r21,28(sp)
 400a2f0:	dd000615 	stw	r20,24(sp)
 400a2f4:	dcc00515 	stw	r19,20(sp)
 400a2f8:	dc800415 	stw	r18,16(sp)
 400a2fc:	2021883a 	mov	r16,r4
 400a300:	2823883a 	mov	r17,r5
 400a304:	2839883a 	mov	fp,r5
 400a308:	38003c1e 	bne	r7,zero,400a3fc <__umoddi3+0x12c>
 400a30c:	3027883a 	mov	r19,r6
 400a310:	2029883a 	mov	r20,r4
 400a314:	2980512e 	bgeu	r5,r6,400a45c <__umoddi3+0x18c>
 400a318:	00bfffd4 	movui	r2,65535
 400a31c:	11809a36 	bltu	r2,r6,400a588 <__umoddi3+0x2b8>
 400a320:	01003fc4 	movi	r4,255
 400a324:	2189803a 	cmpltu	r4,r4,r6
 400a328:	200890fa 	slli	r4,r4,3
 400a32c:	3104d83a 	srl	r2,r6,r4
 400a330:	00c10074 	movhi	r3,1025
 400a334:	18ff7f04 	addi	r3,r3,-516
 400a338:	1885883a 	add	r2,r3,r2
 400a33c:	10c00003 	ldbu	r3,0(r2)
 400a340:	00800804 	movi	r2,32
 400a344:	1909883a 	add	r4,r3,r4
 400a348:	1125c83a 	sub	r18,r2,r4
 400a34c:	90000526 	beq	r18,zero,400a364 <__umoddi3+0x94>
 400a350:	8ca2983a 	sll	r17,r17,r18
 400a354:	8108d83a 	srl	r4,r16,r4
 400a358:	34a6983a 	sll	r19,r6,r18
 400a35c:	84a8983a 	sll	r20,r16,r18
 400a360:	2478b03a 	or	fp,r4,r17
 400a364:	982ed43a 	srli	r23,r19,16
 400a368:	e009883a 	mov	r4,fp
 400a36c:	9dbfffcc 	andi	r22,r19,65535
 400a370:	b80b883a 	mov	r5,r23
 400a374:	400a9640 	call	400a964 <__umodsi3>
 400a378:	e009883a 	mov	r4,fp
 400a37c:	b80b883a 	mov	r5,r23
 400a380:	102b883a 	mov	r21,r2
 400a384:	400a9000 	call	400a900 <__udivsi3>
 400a388:	a806943a 	slli	r3,r21,16
 400a38c:	a008d43a 	srli	r4,r20,16
 400a390:	b085383a 	mul	r2,r22,r2
 400a394:	20c8b03a 	or	r4,r4,r3
 400a398:	2080032e 	bgeu	r4,r2,400a3a8 <__umoddi3+0xd8>
 400a39c:	24c9883a 	add	r4,r4,r19
 400a3a0:	24c00136 	bltu	r4,r19,400a3a8 <__umoddi3+0xd8>
 400a3a4:	20811036 	bltu	r4,r2,400a7e8 <__umoddi3+0x518>
 400a3a8:	20abc83a 	sub	r21,r4,r2
 400a3ac:	b80b883a 	mov	r5,r23
 400a3b0:	a809883a 	mov	r4,r21
 400a3b4:	400a9640 	call	400a964 <__umodsi3>
 400a3b8:	1023883a 	mov	r17,r2
 400a3bc:	b80b883a 	mov	r5,r23
 400a3c0:	a809883a 	mov	r4,r21
 400a3c4:	400a9000 	call	400a900 <__udivsi3>
 400a3c8:	8822943a 	slli	r17,r17,16
 400a3cc:	b085383a 	mul	r2,r22,r2
 400a3d0:	a0ffffcc 	andi	r3,r20,65535
 400a3d4:	1c46b03a 	or	r3,r3,r17
 400a3d8:	1880042e 	bgeu	r3,r2,400a3ec <__umoddi3+0x11c>
 400a3dc:	1cc7883a 	add	r3,r3,r19
 400a3e0:	1cc00236 	bltu	r3,r19,400a3ec <__umoddi3+0x11c>
 400a3e4:	1880012e 	bgeu	r3,r2,400a3ec <__umoddi3+0x11c>
 400a3e8:	1cc7883a 	add	r3,r3,r19
 400a3ec:	1885c83a 	sub	r2,r3,r2
 400a3f0:	1484d83a 	srl	r2,r2,r18
 400a3f4:	0007883a 	mov	r3,zero
 400a3f8:	00004f06 	br	400a538 <__umoddi3+0x268>
 400a3fc:	29c04c36 	bltu	r5,r7,400a530 <__umoddi3+0x260>
 400a400:	00bfffd4 	movui	r2,65535
 400a404:	11c0582e 	bgeu	r2,r7,400a568 <__umoddi3+0x298>
 400a408:	00804034 	movhi	r2,256
 400a40c:	10bfffc4 	addi	r2,r2,-1
 400a410:	11c0e736 	bltu	r2,r7,400a7b0 <__umoddi3+0x4e0>
 400a414:	01000404 	movi	r4,16
 400a418:	3904d83a 	srl	r2,r7,r4
 400a41c:	00c10074 	movhi	r3,1025
 400a420:	18ff7f04 	addi	r3,r3,-516
 400a424:	1885883a 	add	r2,r3,r2
 400a428:	14c00003 	ldbu	r19,0(r2)
 400a42c:	00c00804 	movi	r3,32
 400a430:	9927883a 	add	r19,r19,r4
 400a434:	1ce9c83a 	sub	r20,r3,r19
 400a438:	a000581e 	bne	r20,zero,400a59c <__umoddi3+0x2cc>
 400a43c:	3c400136 	bltu	r7,r17,400a444 <__umoddi3+0x174>
 400a440:	8180eb36 	bltu	r16,r6,400a7f0 <__umoddi3+0x520>
 400a444:	8185c83a 	sub	r2,r16,r6
 400a448:	89e3c83a 	sub	r17,r17,r7
 400a44c:	8089803a 	cmpltu	r4,r16,r2
 400a450:	8939c83a 	sub	fp,r17,r4
 400a454:	e007883a 	mov	r3,fp
 400a458:	00003706 	br	400a538 <__umoddi3+0x268>
 400a45c:	3000041e 	bne	r6,zero,400a470 <__umoddi3+0x1a0>
 400a460:	000b883a 	mov	r5,zero
 400a464:	01000044 	movi	r4,1
 400a468:	400a9000 	call	400a900 <__udivsi3>
 400a46c:	1027883a 	mov	r19,r2
 400a470:	00bfffd4 	movui	r2,65535
 400a474:	14c0402e 	bgeu	r2,r19,400a578 <__umoddi3+0x2a8>
 400a478:	00804034 	movhi	r2,256
 400a47c:	10bfffc4 	addi	r2,r2,-1
 400a480:	14c0cd36 	bltu	r2,r19,400a7b8 <__umoddi3+0x4e8>
 400a484:	00800404 	movi	r2,16
 400a488:	9886d83a 	srl	r3,r19,r2
 400a48c:	01010074 	movhi	r4,1025
 400a490:	213f7f04 	addi	r4,r4,-516
 400a494:	20c7883a 	add	r3,r4,r3
 400a498:	18c00003 	ldbu	r3,0(r3)
 400a49c:	1887883a 	add	r3,r3,r2
 400a4a0:	00800804 	movi	r2,32
 400a4a4:	10e5c83a 	sub	r18,r2,r3
 400a4a8:	9000901e 	bne	r18,zero,400a6ec <__umoddi3+0x41c>
 400a4ac:	982cd43a 	srli	r22,r19,16
 400a4b0:	8ce3c83a 	sub	r17,r17,r19
 400a4b4:	9d7fffcc 	andi	r21,r19,65535
 400a4b8:	b00b883a 	mov	r5,r22
 400a4bc:	8809883a 	mov	r4,r17
 400a4c0:	400a9640 	call	400a964 <__umodsi3>
 400a4c4:	8809883a 	mov	r4,r17
 400a4c8:	b00b883a 	mov	r5,r22
 400a4cc:	1021883a 	mov	r16,r2
 400a4d0:	400a9000 	call	400a900 <__udivsi3>
 400a4d4:	8006943a 	slli	r3,r16,16
 400a4d8:	a008d43a 	srli	r4,r20,16
 400a4dc:	1545383a 	mul	r2,r2,r21
 400a4e0:	20c8b03a 	or	r4,r4,r3
 400a4e4:	2080042e 	bgeu	r4,r2,400a4f8 <__umoddi3+0x228>
 400a4e8:	24c9883a 	add	r4,r4,r19
 400a4ec:	24c00236 	bltu	r4,r19,400a4f8 <__umoddi3+0x228>
 400a4f0:	2080012e 	bgeu	r4,r2,400a4f8 <__umoddi3+0x228>
 400a4f4:	24c9883a 	add	r4,r4,r19
 400a4f8:	20a1c83a 	sub	r16,r4,r2
 400a4fc:	b00b883a 	mov	r5,r22
 400a500:	8009883a 	mov	r4,r16
 400a504:	400a9640 	call	400a964 <__umodsi3>
 400a508:	1023883a 	mov	r17,r2
 400a50c:	b00b883a 	mov	r5,r22
 400a510:	8009883a 	mov	r4,r16
 400a514:	400a9000 	call	400a900 <__udivsi3>
 400a518:	8822943a 	slli	r17,r17,16
 400a51c:	1545383a 	mul	r2,r2,r21
 400a520:	a53fffcc 	andi	r20,r20,65535
 400a524:	a446b03a 	or	r3,r20,r17
 400a528:	18bfb02e 	bgeu	r3,r2,400a3ec <__alt_data_end+0xff00a3ec>
 400a52c:	003fab06 	br	400a3dc <__alt_data_end+0xff00a3dc>
 400a530:	2005883a 	mov	r2,r4
 400a534:	2807883a 	mov	r3,r5
 400a538:	dfc00b17 	ldw	ra,44(sp)
 400a53c:	df000a17 	ldw	fp,40(sp)
 400a540:	ddc00917 	ldw	r23,36(sp)
 400a544:	dd800817 	ldw	r22,32(sp)
 400a548:	dd400717 	ldw	r21,28(sp)
 400a54c:	dd000617 	ldw	r20,24(sp)
 400a550:	dcc00517 	ldw	r19,20(sp)
 400a554:	dc800417 	ldw	r18,16(sp)
 400a558:	dc400317 	ldw	r17,12(sp)
 400a55c:	dc000217 	ldw	r16,8(sp)
 400a560:	dec00c04 	addi	sp,sp,48
 400a564:	f800283a 	ret
 400a568:	04c03fc4 	movi	r19,255
 400a56c:	99c9803a 	cmpltu	r4,r19,r7
 400a570:	200890fa 	slli	r4,r4,3
 400a574:	003fa806 	br	400a418 <__alt_data_end+0xff00a418>
 400a578:	00803fc4 	movi	r2,255
 400a57c:	14c5803a 	cmpltu	r2,r2,r19
 400a580:	100490fa 	slli	r2,r2,3
 400a584:	003fc006 	br	400a488 <__alt_data_end+0xff00a488>
 400a588:	00804034 	movhi	r2,256
 400a58c:	10bfffc4 	addi	r2,r2,-1
 400a590:	11808b36 	bltu	r2,r6,400a7c0 <__umoddi3+0x4f0>
 400a594:	01000404 	movi	r4,16
 400a598:	003f6406 	br	400a32c <__alt_data_end+0xff00a32c>
 400a59c:	34c4d83a 	srl	r2,r6,r19
 400a5a0:	3d0e983a 	sll	r7,r7,r20
 400a5a4:	8cf8d83a 	srl	fp,r17,r19
 400a5a8:	8d10983a 	sll	r8,r17,r20
 400a5ac:	38aab03a 	or	r21,r7,r2
 400a5b0:	a82cd43a 	srli	r22,r21,16
 400a5b4:	84e2d83a 	srl	r17,r16,r19
 400a5b8:	e009883a 	mov	r4,fp
 400a5bc:	b00b883a 	mov	r5,r22
 400a5c0:	8a22b03a 	or	r17,r17,r8
 400a5c4:	3524983a 	sll	r18,r6,r20
 400a5c8:	400a9640 	call	400a964 <__umodsi3>
 400a5cc:	e009883a 	mov	r4,fp
 400a5d0:	b00b883a 	mov	r5,r22
 400a5d4:	102f883a 	mov	r23,r2
 400a5d8:	400a9000 	call	400a900 <__udivsi3>
 400a5dc:	100d883a 	mov	r6,r2
 400a5e0:	b808943a 	slli	r4,r23,16
 400a5e4:	aa3fffcc 	andi	r8,r21,65535
 400a5e8:	8804d43a 	srli	r2,r17,16
 400a5ec:	41af383a 	mul	r23,r8,r6
 400a5f0:	8520983a 	sll	r16,r16,r20
 400a5f4:	1104b03a 	or	r2,r2,r4
 400a5f8:	15c0042e 	bgeu	r2,r23,400a60c <__umoddi3+0x33c>
 400a5fc:	1545883a 	add	r2,r2,r21
 400a600:	30ffffc4 	addi	r3,r6,-1
 400a604:	1540742e 	bgeu	r2,r21,400a7d8 <__umoddi3+0x508>
 400a608:	180d883a 	mov	r6,r3
 400a60c:	15efc83a 	sub	r23,r2,r23
 400a610:	b00b883a 	mov	r5,r22
 400a614:	b809883a 	mov	r4,r23
 400a618:	d9800115 	stw	r6,4(sp)
 400a61c:	da000015 	stw	r8,0(sp)
 400a620:	400a9640 	call	400a964 <__umodsi3>
 400a624:	b00b883a 	mov	r5,r22
 400a628:	b809883a 	mov	r4,r23
 400a62c:	1039883a 	mov	fp,r2
 400a630:	400a9000 	call	400a900 <__udivsi3>
 400a634:	da000017 	ldw	r8,0(sp)
 400a638:	e038943a 	slli	fp,fp,16
 400a63c:	100b883a 	mov	r5,r2
 400a640:	4089383a 	mul	r4,r8,r2
 400a644:	8a3fffcc 	andi	r8,r17,65535
 400a648:	4710b03a 	or	r8,r8,fp
 400a64c:	d9800117 	ldw	r6,4(sp)
 400a650:	4100042e 	bgeu	r8,r4,400a664 <__umoddi3+0x394>
 400a654:	4551883a 	add	r8,r8,r21
 400a658:	10bfffc4 	addi	r2,r2,-1
 400a65c:	45405a2e 	bgeu	r8,r21,400a7c8 <__umoddi3+0x4f8>
 400a660:	100b883a 	mov	r5,r2
 400a664:	300c943a 	slli	r6,r6,16
 400a668:	91ffffcc 	andi	r7,r18,65535
 400a66c:	9004d43a 	srli	r2,r18,16
 400a670:	314cb03a 	or	r6,r6,r5
 400a674:	317fffcc 	andi	r5,r6,65535
 400a678:	300cd43a 	srli	r6,r6,16
 400a67c:	29d3383a 	mul	r9,r5,r7
 400a680:	288b383a 	mul	r5,r5,r2
 400a684:	31cf383a 	mul	r7,r6,r7
 400a688:	4806d43a 	srli	r3,r9,16
 400a68c:	4111c83a 	sub	r8,r8,r4
 400a690:	29cb883a 	add	r5,r5,r7
 400a694:	194b883a 	add	r5,r3,r5
 400a698:	3085383a 	mul	r2,r6,r2
 400a69c:	29c0022e 	bgeu	r5,r7,400a6a8 <__umoddi3+0x3d8>
 400a6a0:	00c00074 	movhi	r3,1
 400a6a4:	10c5883a 	add	r2,r2,r3
 400a6a8:	2808d43a 	srli	r4,r5,16
 400a6ac:	280a943a 	slli	r5,r5,16
 400a6b0:	4a7fffcc 	andi	r9,r9,65535
 400a6b4:	2085883a 	add	r2,r4,r2
 400a6b8:	2a4b883a 	add	r5,r5,r9
 400a6bc:	40803636 	bltu	r8,r2,400a798 <__umoddi3+0x4c8>
 400a6c0:	40804d26 	beq	r8,r2,400a7f8 <__umoddi3+0x528>
 400a6c4:	4089c83a 	sub	r4,r8,r2
 400a6c8:	280f883a 	mov	r7,r5
 400a6cc:	81cfc83a 	sub	r7,r16,r7
 400a6d0:	81c7803a 	cmpltu	r3,r16,r7
 400a6d4:	20c7c83a 	sub	r3,r4,r3
 400a6d8:	1cc4983a 	sll	r2,r3,r19
 400a6dc:	3d0ed83a 	srl	r7,r7,r20
 400a6e0:	1d06d83a 	srl	r3,r3,r20
 400a6e4:	11c4b03a 	or	r2,r2,r7
 400a6e8:	003f9306 	br	400a538 <__alt_data_end+0xff00a538>
 400a6ec:	9ca6983a 	sll	r19,r19,r18
 400a6f0:	88e8d83a 	srl	r20,r17,r3
 400a6f4:	80c4d83a 	srl	r2,r16,r3
 400a6f8:	982cd43a 	srli	r22,r19,16
 400a6fc:	8ca2983a 	sll	r17,r17,r18
 400a700:	a009883a 	mov	r4,r20
 400a704:	b00b883a 	mov	r5,r22
 400a708:	1478b03a 	or	fp,r2,r17
 400a70c:	400a9640 	call	400a964 <__umodsi3>
 400a710:	a009883a 	mov	r4,r20
 400a714:	b00b883a 	mov	r5,r22
 400a718:	1023883a 	mov	r17,r2
 400a71c:	400a9000 	call	400a900 <__udivsi3>
 400a720:	9d7fffcc 	andi	r21,r19,65535
 400a724:	880a943a 	slli	r5,r17,16
 400a728:	e008d43a 	srli	r4,fp,16
 400a72c:	a885383a 	mul	r2,r21,r2
 400a730:	84a8983a 	sll	r20,r16,r18
 400a734:	2148b03a 	or	r4,r4,r5
 400a738:	2080042e 	bgeu	r4,r2,400a74c <__umoddi3+0x47c>
 400a73c:	24c9883a 	add	r4,r4,r19
 400a740:	24c00236 	bltu	r4,r19,400a74c <__umoddi3+0x47c>
 400a744:	2080012e 	bgeu	r4,r2,400a74c <__umoddi3+0x47c>
 400a748:	24c9883a 	add	r4,r4,r19
 400a74c:	20a3c83a 	sub	r17,r4,r2
 400a750:	b00b883a 	mov	r5,r22
 400a754:	8809883a 	mov	r4,r17
 400a758:	400a9640 	call	400a964 <__umodsi3>
 400a75c:	102f883a 	mov	r23,r2
 400a760:	8809883a 	mov	r4,r17
 400a764:	b00b883a 	mov	r5,r22
 400a768:	400a9000 	call	400a900 <__udivsi3>
 400a76c:	b82e943a 	slli	r23,r23,16
 400a770:	a885383a 	mul	r2,r21,r2
 400a774:	e13fffcc 	andi	r4,fp,65535
 400a778:	25c8b03a 	or	r4,r4,r23
 400a77c:	2080042e 	bgeu	r4,r2,400a790 <__umoddi3+0x4c0>
 400a780:	24c9883a 	add	r4,r4,r19
 400a784:	24c00236 	bltu	r4,r19,400a790 <__umoddi3+0x4c0>
 400a788:	2080012e 	bgeu	r4,r2,400a790 <__umoddi3+0x4c0>
 400a78c:	24c9883a 	add	r4,r4,r19
 400a790:	20a3c83a 	sub	r17,r4,r2
 400a794:	003f4806 	br	400a4b8 <__alt_data_end+0xff00a4b8>
 400a798:	2c8fc83a 	sub	r7,r5,r18
 400a79c:	1545c83a 	sub	r2,r2,r21
 400a7a0:	29cb803a 	cmpltu	r5,r5,r7
 400a7a4:	1145c83a 	sub	r2,r2,r5
 400a7a8:	4089c83a 	sub	r4,r8,r2
 400a7ac:	003fc706 	br	400a6cc <__alt_data_end+0xff00a6cc>
 400a7b0:	01000604 	movi	r4,24
 400a7b4:	003f1806 	br	400a418 <__alt_data_end+0xff00a418>
 400a7b8:	00800604 	movi	r2,24
 400a7bc:	003f3206 	br	400a488 <__alt_data_end+0xff00a488>
 400a7c0:	01000604 	movi	r4,24
 400a7c4:	003ed906 	br	400a32c <__alt_data_end+0xff00a32c>
 400a7c8:	413fa52e 	bgeu	r8,r4,400a660 <__alt_data_end+0xff00a660>
 400a7cc:	297fff84 	addi	r5,r5,-2
 400a7d0:	4551883a 	add	r8,r8,r21
 400a7d4:	003fa306 	br	400a664 <__alt_data_end+0xff00a664>
 400a7d8:	15ff8b2e 	bgeu	r2,r23,400a608 <__alt_data_end+0xff00a608>
 400a7dc:	31bfff84 	addi	r6,r6,-2
 400a7e0:	1545883a 	add	r2,r2,r21
 400a7e4:	003f8906 	br	400a60c <__alt_data_end+0xff00a60c>
 400a7e8:	24c9883a 	add	r4,r4,r19
 400a7ec:	003eee06 	br	400a3a8 <__alt_data_end+0xff00a3a8>
 400a7f0:	8005883a 	mov	r2,r16
 400a7f4:	003f1706 	br	400a454 <__alt_data_end+0xff00a454>
 400a7f8:	817fe736 	bltu	r16,r5,400a798 <__alt_data_end+0xff00a798>
 400a7fc:	280f883a 	mov	r7,r5
 400a800:	0009883a 	mov	r4,zero
 400a804:	003fb106 	br	400a6cc <__alt_data_end+0xff00a6cc>

0400a808 <__divsi3>:
 400a808:	20001b16 	blt	r4,zero,400a878 <__divsi3+0x70>
 400a80c:	000f883a 	mov	r7,zero
 400a810:	28001616 	blt	r5,zero,400a86c <__divsi3+0x64>
 400a814:	200d883a 	mov	r6,r4
 400a818:	29001a2e 	bgeu	r5,r4,400a884 <__divsi3+0x7c>
 400a81c:	00800804 	movi	r2,32
 400a820:	00c00044 	movi	r3,1
 400a824:	00000106 	br	400a82c <__divsi3+0x24>
 400a828:	10000d26 	beq	r2,zero,400a860 <__divsi3+0x58>
 400a82c:	294b883a 	add	r5,r5,r5
 400a830:	10bfffc4 	addi	r2,r2,-1
 400a834:	18c7883a 	add	r3,r3,r3
 400a838:	293ffb36 	bltu	r5,r4,400a828 <__alt_data_end+0xff00a828>
 400a83c:	0005883a 	mov	r2,zero
 400a840:	18000726 	beq	r3,zero,400a860 <__divsi3+0x58>
 400a844:	0005883a 	mov	r2,zero
 400a848:	31400236 	bltu	r6,r5,400a854 <__divsi3+0x4c>
 400a84c:	314dc83a 	sub	r6,r6,r5
 400a850:	10c4b03a 	or	r2,r2,r3
 400a854:	1806d07a 	srli	r3,r3,1
 400a858:	280ad07a 	srli	r5,r5,1
 400a85c:	183ffa1e 	bne	r3,zero,400a848 <__alt_data_end+0xff00a848>
 400a860:	38000126 	beq	r7,zero,400a868 <__divsi3+0x60>
 400a864:	0085c83a 	sub	r2,zero,r2
 400a868:	f800283a 	ret
 400a86c:	014bc83a 	sub	r5,zero,r5
 400a870:	39c0005c 	xori	r7,r7,1
 400a874:	003fe706 	br	400a814 <__alt_data_end+0xff00a814>
 400a878:	0109c83a 	sub	r4,zero,r4
 400a87c:	01c00044 	movi	r7,1
 400a880:	003fe306 	br	400a810 <__alt_data_end+0xff00a810>
 400a884:	00c00044 	movi	r3,1
 400a888:	003fee06 	br	400a844 <__alt_data_end+0xff00a844>

0400a88c <__modsi3>:
 400a88c:	20001716 	blt	r4,zero,400a8ec <__modsi3+0x60>
 400a890:	000f883a 	mov	r7,zero
 400a894:	2005883a 	mov	r2,r4
 400a898:	28001216 	blt	r5,zero,400a8e4 <__modsi3+0x58>
 400a89c:	2900162e 	bgeu	r5,r4,400a8f8 <__modsi3+0x6c>
 400a8a0:	01800804 	movi	r6,32
 400a8a4:	00c00044 	movi	r3,1
 400a8a8:	00000106 	br	400a8b0 <__modsi3+0x24>
 400a8ac:	30000a26 	beq	r6,zero,400a8d8 <__modsi3+0x4c>
 400a8b0:	294b883a 	add	r5,r5,r5
 400a8b4:	31bfffc4 	addi	r6,r6,-1
 400a8b8:	18c7883a 	add	r3,r3,r3
 400a8bc:	293ffb36 	bltu	r5,r4,400a8ac <__alt_data_end+0xff00a8ac>
 400a8c0:	18000526 	beq	r3,zero,400a8d8 <__modsi3+0x4c>
 400a8c4:	1806d07a 	srli	r3,r3,1
 400a8c8:	11400136 	bltu	r2,r5,400a8d0 <__modsi3+0x44>
 400a8cc:	1145c83a 	sub	r2,r2,r5
 400a8d0:	280ad07a 	srli	r5,r5,1
 400a8d4:	183ffb1e 	bne	r3,zero,400a8c4 <__alt_data_end+0xff00a8c4>
 400a8d8:	38000126 	beq	r7,zero,400a8e0 <__modsi3+0x54>
 400a8dc:	0085c83a 	sub	r2,zero,r2
 400a8e0:	f800283a 	ret
 400a8e4:	014bc83a 	sub	r5,zero,r5
 400a8e8:	003fec06 	br	400a89c <__alt_data_end+0xff00a89c>
 400a8ec:	0109c83a 	sub	r4,zero,r4
 400a8f0:	01c00044 	movi	r7,1
 400a8f4:	003fe706 	br	400a894 <__alt_data_end+0xff00a894>
 400a8f8:	00c00044 	movi	r3,1
 400a8fc:	003ff106 	br	400a8c4 <__alt_data_end+0xff00a8c4>

0400a900 <__udivsi3>:
 400a900:	200d883a 	mov	r6,r4
 400a904:	2900152e 	bgeu	r5,r4,400a95c <__udivsi3+0x5c>
 400a908:	28001416 	blt	r5,zero,400a95c <__udivsi3+0x5c>
 400a90c:	00800804 	movi	r2,32
 400a910:	00c00044 	movi	r3,1
 400a914:	00000206 	br	400a920 <__udivsi3+0x20>
 400a918:	10000e26 	beq	r2,zero,400a954 <__udivsi3+0x54>
 400a91c:	28000516 	blt	r5,zero,400a934 <__udivsi3+0x34>
 400a920:	294b883a 	add	r5,r5,r5
 400a924:	10bfffc4 	addi	r2,r2,-1
 400a928:	18c7883a 	add	r3,r3,r3
 400a92c:	293ffa36 	bltu	r5,r4,400a918 <__alt_data_end+0xff00a918>
 400a930:	18000826 	beq	r3,zero,400a954 <__udivsi3+0x54>
 400a934:	0005883a 	mov	r2,zero
 400a938:	31400236 	bltu	r6,r5,400a944 <__udivsi3+0x44>
 400a93c:	314dc83a 	sub	r6,r6,r5
 400a940:	10c4b03a 	or	r2,r2,r3
 400a944:	1806d07a 	srli	r3,r3,1
 400a948:	280ad07a 	srli	r5,r5,1
 400a94c:	183ffa1e 	bne	r3,zero,400a938 <__alt_data_end+0xff00a938>
 400a950:	f800283a 	ret
 400a954:	0005883a 	mov	r2,zero
 400a958:	f800283a 	ret
 400a95c:	00c00044 	movi	r3,1
 400a960:	003ff406 	br	400a934 <__alt_data_end+0xff00a934>

0400a964 <__umodsi3>:
 400a964:	2005883a 	mov	r2,r4
 400a968:	2900122e 	bgeu	r5,r4,400a9b4 <__umodsi3+0x50>
 400a96c:	28001116 	blt	r5,zero,400a9b4 <__umodsi3+0x50>
 400a970:	01800804 	movi	r6,32
 400a974:	00c00044 	movi	r3,1
 400a978:	00000206 	br	400a984 <__umodsi3+0x20>
 400a97c:	30000c26 	beq	r6,zero,400a9b0 <__umodsi3+0x4c>
 400a980:	28000516 	blt	r5,zero,400a998 <__umodsi3+0x34>
 400a984:	294b883a 	add	r5,r5,r5
 400a988:	31bfffc4 	addi	r6,r6,-1
 400a98c:	18c7883a 	add	r3,r3,r3
 400a990:	293ffa36 	bltu	r5,r4,400a97c <__alt_data_end+0xff00a97c>
 400a994:	18000626 	beq	r3,zero,400a9b0 <__umodsi3+0x4c>
 400a998:	1806d07a 	srli	r3,r3,1
 400a99c:	11400136 	bltu	r2,r5,400a9a4 <__umodsi3+0x40>
 400a9a0:	1145c83a 	sub	r2,r2,r5
 400a9a4:	280ad07a 	srli	r5,r5,1
 400a9a8:	183ffb1e 	bne	r3,zero,400a998 <__alt_data_end+0xff00a998>
 400a9ac:	f800283a 	ret
 400a9b0:	f800283a 	ret
 400a9b4:	00c00044 	movi	r3,1
 400a9b8:	003ff706 	br	400a998 <__alt_data_end+0xff00a998>

0400a9bc <__adddf3>:
 400a9bc:	02c00434 	movhi	r11,16
 400a9c0:	5affffc4 	addi	r11,r11,-1
 400a9c4:	2806d7fa 	srli	r3,r5,31
 400a9c8:	2ad4703a 	and	r10,r5,r11
 400a9cc:	3ad2703a 	and	r9,r7,r11
 400a9d0:	3804d53a 	srli	r2,r7,20
 400a9d4:	3018d77a 	srli	r12,r6,29
 400a9d8:	280ad53a 	srli	r5,r5,20
 400a9dc:	501490fa 	slli	r10,r10,3
 400a9e0:	2010d77a 	srli	r8,r4,29
 400a9e4:	481290fa 	slli	r9,r9,3
 400a9e8:	380ed7fa 	srli	r7,r7,31
 400a9ec:	defffb04 	addi	sp,sp,-20
 400a9f0:	dc800215 	stw	r18,8(sp)
 400a9f4:	dc400115 	stw	r17,4(sp)
 400a9f8:	dc000015 	stw	r16,0(sp)
 400a9fc:	dfc00415 	stw	ra,16(sp)
 400aa00:	dcc00315 	stw	r19,12(sp)
 400aa04:	1c803fcc 	andi	r18,r3,255
 400aa08:	2c01ffcc 	andi	r16,r5,2047
 400aa0c:	5210b03a 	or	r8,r10,r8
 400aa10:	202290fa 	slli	r17,r4,3
 400aa14:	1081ffcc 	andi	r2,r2,2047
 400aa18:	4b12b03a 	or	r9,r9,r12
 400aa1c:	300c90fa 	slli	r6,r6,3
 400aa20:	91c07526 	beq	r18,r7,400abf8 <__adddf3+0x23c>
 400aa24:	8087c83a 	sub	r3,r16,r2
 400aa28:	00c0ab0e 	bge	zero,r3,400acd8 <__adddf3+0x31c>
 400aa2c:	10002a1e 	bne	r2,zero,400aad8 <__adddf3+0x11c>
 400aa30:	4984b03a 	or	r2,r9,r6
 400aa34:	1000961e 	bne	r2,zero,400ac90 <__adddf3+0x2d4>
 400aa38:	888001cc 	andi	r2,r17,7
 400aa3c:	10000726 	beq	r2,zero,400aa5c <__adddf3+0xa0>
 400aa40:	888003cc 	andi	r2,r17,15
 400aa44:	00c00104 	movi	r3,4
 400aa48:	10c00426 	beq	r2,r3,400aa5c <__adddf3+0xa0>
 400aa4c:	88c7883a 	add	r3,r17,r3
 400aa50:	1c63803a 	cmpltu	r17,r3,r17
 400aa54:	4451883a 	add	r8,r8,r17
 400aa58:	1823883a 	mov	r17,r3
 400aa5c:	4080202c 	andhi	r2,r8,128
 400aa60:	10005926 	beq	r2,zero,400abc8 <__adddf3+0x20c>
 400aa64:	84000044 	addi	r16,r16,1
 400aa68:	0081ffc4 	movi	r2,2047
 400aa6c:	8080ba26 	beq	r16,r2,400ad58 <__adddf3+0x39c>
 400aa70:	00bfe034 	movhi	r2,65408
 400aa74:	10bfffc4 	addi	r2,r2,-1
 400aa78:	4090703a 	and	r8,r8,r2
 400aa7c:	4004977a 	slli	r2,r8,29
 400aa80:	4010927a 	slli	r8,r8,9
 400aa84:	8822d0fa 	srli	r17,r17,3
 400aa88:	8401ffcc 	andi	r16,r16,2047
 400aa8c:	4010d33a 	srli	r8,r8,12
 400aa90:	9007883a 	mov	r3,r18
 400aa94:	1444b03a 	or	r2,r2,r17
 400aa98:	8401ffcc 	andi	r16,r16,2047
 400aa9c:	8020953a 	slli	r16,r16,20
 400aaa0:	18c03fcc 	andi	r3,r3,255
 400aaa4:	01000434 	movhi	r4,16
 400aaa8:	213fffc4 	addi	r4,r4,-1
 400aaac:	180697fa 	slli	r3,r3,31
 400aab0:	4110703a 	and	r8,r8,r4
 400aab4:	4410b03a 	or	r8,r8,r16
 400aab8:	40c6b03a 	or	r3,r8,r3
 400aabc:	dfc00417 	ldw	ra,16(sp)
 400aac0:	dcc00317 	ldw	r19,12(sp)
 400aac4:	dc800217 	ldw	r18,8(sp)
 400aac8:	dc400117 	ldw	r17,4(sp)
 400aacc:	dc000017 	ldw	r16,0(sp)
 400aad0:	dec00504 	addi	sp,sp,20
 400aad4:	f800283a 	ret
 400aad8:	0081ffc4 	movi	r2,2047
 400aadc:	80bfd626 	beq	r16,r2,400aa38 <__alt_data_end+0xff00aa38>
 400aae0:	4a402034 	orhi	r9,r9,128
 400aae4:	00800e04 	movi	r2,56
 400aae8:	10c09f16 	blt	r2,r3,400ad68 <__adddf3+0x3ac>
 400aaec:	008007c4 	movi	r2,31
 400aaf0:	10c0c216 	blt	r2,r3,400adfc <__adddf3+0x440>
 400aaf4:	00800804 	movi	r2,32
 400aaf8:	10c5c83a 	sub	r2,r2,r3
 400aafc:	488a983a 	sll	r5,r9,r2
 400ab00:	30c8d83a 	srl	r4,r6,r3
 400ab04:	3084983a 	sll	r2,r6,r2
 400ab08:	48c6d83a 	srl	r3,r9,r3
 400ab0c:	290cb03a 	or	r6,r5,r4
 400ab10:	1004c03a 	cmpne	r2,r2,zero
 400ab14:	308cb03a 	or	r6,r6,r2
 400ab18:	898dc83a 	sub	r6,r17,r6
 400ab1c:	89a3803a 	cmpltu	r17,r17,r6
 400ab20:	40d1c83a 	sub	r8,r8,r3
 400ab24:	4451c83a 	sub	r8,r8,r17
 400ab28:	3023883a 	mov	r17,r6
 400ab2c:	4080202c 	andhi	r2,r8,128
 400ab30:	10002326 	beq	r2,zero,400abc0 <__adddf3+0x204>
 400ab34:	04c02034 	movhi	r19,128
 400ab38:	9cffffc4 	addi	r19,r19,-1
 400ab3c:	44e6703a 	and	r19,r8,r19
 400ab40:	98007626 	beq	r19,zero,400ad1c <__adddf3+0x360>
 400ab44:	9809883a 	mov	r4,r19
 400ab48:	400cfc00 	call	400cfc0 <__clzsi2>
 400ab4c:	10fffe04 	addi	r3,r2,-8
 400ab50:	010007c4 	movi	r4,31
 400ab54:	20c07716 	blt	r4,r3,400ad34 <__adddf3+0x378>
 400ab58:	00800804 	movi	r2,32
 400ab5c:	10c5c83a 	sub	r2,r2,r3
 400ab60:	8884d83a 	srl	r2,r17,r2
 400ab64:	98d0983a 	sll	r8,r19,r3
 400ab68:	88e2983a 	sll	r17,r17,r3
 400ab6c:	1204b03a 	or	r2,r2,r8
 400ab70:	1c007416 	blt	r3,r16,400ad44 <__adddf3+0x388>
 400ab74:	1c21c83a 	sub	r16,r3,r16
 400ab78:	82000044 	addi	r8,r16,1
 400ab7c:	00c007c4 	movi	r3,31
 400ab80:	1a009116 	blt	r3,r8,400adc8 <__adddf3+0x40c>
 400ab84:	00c00804 	movi	r3,32
 400ab88:	1a07c83a 	sub	r3,r3,r8
 400ab8c:	8a08d83a 	srl	r4,r17,r8
 400ab90:	88e2983a 	sll	r17,r17,r3
 400ab94:	10c6983a 	sll	r3,r2,r3
 400ab98:	1210d83a 	srl	r8,r2,r8
 400ab9c:	8804c03a 	cmpne	r2,r17,zero
 400aba0:	1906b03a 	or	r3,r3,r4
 400aba4:	18a2b03a 	or	r17,r3,r2
 400aba8:	0021883a 	mov	r16,zero
 400abac:	003fa206 	br	400aa38 <__alt_data_end+0xff00aa38>
 400abb0:	1890b03a 	or	r8,r3,r2
 400abb4:	40017d26 	beq	r8,zero,400b1ac <__adddf3+0x7f0>
 400abb8:	1011883a 	mov	r8,r2
 400abbc:	1823883a 	mov	r17,r3
 400abc0:	888001cc 	andi	r2,r17,7
 400abc4:	103f9e1e 	bne	r2,zero,400aa40 <__alt_data_end+0xff00aa40>
 400abc8:	4004977a 	slli	r2,r8,29
 400abcc:	8822d0fa 	srli	r17,r17,3
 400abd0:	4010d0fa 	srli	r8,r8,3
 400abd4:	9007883a 	mov	r3,r18
 400abd8:	1444b03a 	or	r2,r2,r17
 400abdc:	0101ffc4 	movi	r4,2047
 400abe0:	81002426 	beq	r16,r4,400ac74 <__adddf3+0x2b8>
 400abe4:	8120703a 	and	r16,r16,r4
 400abe8:	01000434 	movhi	r4,16
 400abec:	213fffc4 	addi	r4,r4,-1
 400abf0:	4110703a 	and	r8,r8,r4
 400abf4:	003fa806 	br	400aa98 <__alt_data_end+0xff00aa98>
 400abf8:	8089c83a 	sub	r4,r16,r2
 400abfc:	01005e0e 	bge	zero,r4,400ad78 <__adddf3+0x3bc>
 400ac00:	10002b26 	beq	r2,zero,400acb0 <__adddf3+0x2f4>
 400ac04:	0081ffc4 	movi	r2,2047
 400ac08:	80bf8b26 	beq	r16,r2,400aa38 <__alt_data_end+0xff00aa38>
 400ac0c:	4a402034 	orhi	r9,r9,128
 400ac10:	00800e04 	movi	r2,56
 400ac14:	1100a40e 	bge	r2,r4,400aea8 <__adddf3+0x4ec>
 400ac18:	498cb03a 	or	r6,r9,r6
 400ac1c:	300ac03a 	cmpne	r5,r6,zero
 400ac20:	0013883a 	mov	r9,zero
 400ac24:	2c4b883a 	add	r5,r5,r17
 400ac28:	2c63803a 	cmpltu	r17,r5,r17
 400ac2c:	4a11883a 	add	r8,r9,r8
 400ac30:	8a11883a 	add	r8,r17,r8
 400ac34:	2823883a 	mov	r17,r5
 400ac38:	4080202c 	andhi	r2,r8,128
 400ac3c:	103fe026 	beq	r2,zero,400abc0 <__alt_data_end+0xff00abc0>
 400ac40:	84000044 	addi	r16,r16,1
 400ac44:	0081ffc4 	movi	r2,2047
 400ac48:	8080d226 	beq	r16,r2,400af94 <__adddf3+0x5d8>
 400ac4c:	00bfe034 	movhi	r2,65408
 400ac50:	10bfffc4 	addi	r2,r2,-1
 400ac54:	4090703a 	and	r8,r8,r2
 400ac58:	880ad07a 	srli	r5,r17,1
 400ac5c:	400897fa 	slli	r4,r8,31
 400ac60:	88c0004c 	andi	r3,r17,1
 400ac64:	28e2b03a 	or	r17,r5,r3
 400ac68:	4010d07a 	srli	r8,r8,1
 400ac6c:	2462b03a 	or	r17,r4,r17
 400ac70:	003f7106 	br	400aa38 <__alt_data_end+0xff00aa38>
 400ac74:	4088b03a 	or	r4,r8,r2
 400ac78:	20014526 	beq	r4,zero,400b190 <__adddf3+0x7d4>
 400ac7c:	01000434 	movhi	r4,16
 400ac80:	42000234 	orhi	r8,r8,8
 400ac84:	213fffc4 	addi	r4,r4,-1
 400ac88:	4110703a 	and	r8,r8,r4
 400ac8c:	003f8206 	br	400aa98 <__alt_data_end+0xff00aa98>
 400ac90:	18ffffc4 	addi	r3,r3,-1
 400ac94:	1800491e 	bne	r3,zero,400adbc <__adddf3+0x400>
 400ac98:	898bc83a 	sub	r5,r17,r6
 400ac9c:	8963803a 	cmpltu	r17,r17,r5
 400aca0:	4251c83a 	sub	r8,r8,r9
 400aca4:	4451c83a 	sub	r8,r8,r17
 400aca8:	2823883a 	mov	r17,r5
 400acac:	003f9f06 	br	400ab2c <__alt_data_end+0xff00ab2c>
 400acb0:	4984b03a 	or	r2,r9,r6
 400acb4:	103f6026 	beq	r2,zero,400aa38 <__alt_data_end+0xff00aa38>
 400acb8:	213fffc4 	addi	r4,r4,-1
 400acbc:	2000931e 	bne	r4,zero,400af0c <__adddf3+0x550>
 400acc0:	898d883a 	add	r6,r17,r6
 400acc4:	3463803a 	cmpltu	r17,r6,r17
 400acc8:	4251883a 	add	r8,r8,r9
 400accc:	8a11883a 	add	r8,r17,r8
 400acd0:	3023883a 	mov	r17,r6
 400acd4:	003fd806 	br	400ac38 <__alt_data_end+0xff00ac38>
 400acd8:	1800541e 	bne	r3,zero,400ae2c <__adddf3+0x470>
 400acdc:	80800044 	addi	r2,r16,1
 400ace0:	1081ffcc 	andi	r2,r2,2047
 400ace4:	00c00044 	movi	r3,1
 400ace8:	1880a00e 	bge	r3,r2,400af6c <__adddf3+0x5b0>
 400acec:	8989c83a 	sub	r4,r17,r6
 400acf0:	8905803a 	cmpltu	r2,r17,r4
 400acf4:	4267c83a 	sub	r19,r8,r9
 400acf8:	98a7c83a 	sub	r19,r19,r2
 400acfc:	9880202c 	andhi	r2,r19,128
 400ad00:	10006326 	beq	r2,zero,400ae90 <__adddf3+0x4d4>
 400ad04:	3463c83a 	sub	r17,r6,r17
 400ad08:	4a07c83a 	sub	r3,r9,r8
 400ad0c:	344d803a 	cmpltu	r6,r6,r17
 400ad10:	19a7c83a 	sub	r19,r3,r6
 400ad14:	3825883a 	mov	r18,r7
 400ad18:	983f8a1e 	bne	r19,zero,400ab44 <__alt_data_end+0xff00ab44>
 400ad1c:	8809883a 	mov	r4,r17
 400ad20:	400cfc00 	call	400cfc0 <__clzsi2>
 400ad24:	10800804 	addi	r2,r2,32
 400ad28:	10fffe04 	addi	r3,r2,-8
 400ad2c:	010007c4 	movi	r4,31
 400ad30:	20ff890e 	bge	r4,r3,400ab58 <__alt_data_end+0xff00ab58>
 400ad34:	10bff604 	addi	r2,r2,-40
 400ad38:	8884983a 	sll	r2,r17,r2
 400ad3c:	0023883a 	mov	r17,zero
 400ad40:	1c3f8c0e 	bge	r3,r16,400ab74 <__alt_data_end+0xff00ab74>
 400ad44:	023fe034 	movhi	r8,65408
 400ad48:	423fffc4 	addi	r8,r8,-1
 400ad4c:	80e1c83a 	sub	r16,r16,r3
 400ad50:	1210703a 	and	r8,r2,r8
 400ad54:	003f3806 	br	400aa38 <__alt_data_end+0xff00aa38>
 400ad58:	9007883a 	mov	r3,r18
 400ad5c:	0011883a 	mov	r8,zero
 400ad60:	0005883a 	mov	r2,zero
 400ad64:	003f4c06 	br	400aa98 <__alt_data_end+0xff00aa98>
 400ad68:	498cb03a 	or	r6,r9,r6
 400ad6c:	300cc03a 	cmpne	r6,r6,zero
 400ad70:	0007883a 	mov	r3,zero
 400ad74:	003f6806 	br	400ab18 <__alt_data_end+0xff00ab18>
 400ad78:	20009c1e 	bne	r4,zero,400afec <__adddf3+0x630>
 400ad7c:	80800044 	addi	r2,r16,1
 400ad80:	1141ffcc 	andi	r5,r2,2047
 400ad84:	01000044 	movi	r4,1
 400ad88:	2140670e 	bge	r4,r5,400af28 <__adddf3+0x56c>
 400ad8c:	0101ffc4 	movi	r4,2047
 400ad90:	11007f26 	beq	r2,r4,400af90 <__adddf3+0x5d4>
 400ad94:	898d883a 	add	r6,r17,r6
 400ad98:	4247883a 	add	r3,r8,r9
 400ad9c:	3451803a 	cmpltu	r8,r6,r17
 400ada0:	40d1883a 	add	r8,r8,r3
 400ada4:	402297fa 	slli	r17,r8,31
 400ada8:	300cd07a 	srli	r6,r6,1
 400adac:	4010d07a 	srli	r8,r8,1
 400adb0:	1021883a 	mov	r16,r2
 400adb4:	89a2b03a 	or	r17,r17,r6
 400adb8:	003f1f06 	br	400aa38 <__alt_data_end+0xff00aa38>
 400adbc:	0081ffc4 	movi	r2,2047
 400adc0:	80bf481e 	bne	r16,r2,400aae4 <__alt_data_end+0xff00aae4>
 400adc4:	003f1c06 	br	400aa38 <__alt_data_end+0xff00aa38>
 400adc8:	843ff844 	addi	r16,r16,-31
 400adcc:	01000804 	movi	r4,32
 400add0:	1406d83a 	srl	r3,r2,r16
 400add4:	41005026 	beq	r8,r4,400af18 <__adddf3+0x55c>
 400add8:	01001004 	movi	r4,64
 400addc:	2211c83a 	sub	r8,r4,r8
 400ade0:	1204983a 	sll	r2,r2,r8
 400ade4:	88a2b03a 	or	r17,r17,r2
 400ade8:	8822c03a 	cmpne	r17,r17,zero
 400adec:	1c62b03a 	or	r17,r3,r17
 400adf0:	0011883a 	mov	r8,zero
 400adf4:	0021883a 	mov	r16,zero
 400adf8:	003f7106 	br	400abc0 <__alt_data_end+0xff00abc0>
 400adfc:	193ff804 	addi	r4,r3,-32
 400ae00:	00800804 	movi	r2,32
 400ae04:	4908d83a 	srl	r4,r9,r4
 400ae08:	18804526 	beq	r3,r2,400af20 <__adddf3+0x564>
 400ae0c:	00801004 	movi	r2,64
 400ae10:	10c5c83a 	sub	r2,r2,r3
 400ae14:	4886983a 	sll	r3,r9,r2
 400ae18:	198cb03a 	or	r6,r3,r6
 400ae1c:	300cc03a 	cmpne	r6,r6,zero
 400ae20:	218cb03a 	or	r6,r4,r6
 400ae24:	0007883a 	mov	r3,zero
 400ae28:	003f3b06 	br	400ab18 <__alt_data_end+0xff00ab18>
 400ae2c:	80002a26 	beq	r16,zero,400aed8 <__adddf3+0x51c>
 400ae30:	0101ffc4 	movi	r4,2047
 400ae34:	11006826 	beq	r2,r4,400afd8 <__adddf3+0x61c>
 400ae38:	00c7c83a 	sub	r3,zero,r3
 400ae3c:	42002034 	orhi	r8,r8,128
 400ae40:	01000e04 	movi	r4,56
 400ae44:	20c07c16 	blt	r4,r3,400b038 <__adddf3+0x67c>
 400ae48:	010007c4 	movi	r4,31
 400ae4c:	20c0da16 	blt	r4,r3,400b1b8 <__adddf3+0x7fc>
 400ae50:	01000804 	movi	r4,32
 400ae54:	20c9c83a 	sub	r4,r4,r3
 400ae58:	4114983a 	sll	r10,r8,r4
 400ae5c:	88cad83a 	srl	r5,r17,r3
 400ae60:	8908983a 	sll	r4,r17,r4
 400ae64:	40c6d83a 	srl	r3,r8,r3
 400ae68:	5162b03a 	or	r17,r10,r5
 400ae6c:	2008c03a 	cmpne	r4,r4,zero
 400ae70:	8922b03a 	or	r17,r17,r4
 400ae74:	3463c83a 	sub	r17,r6,r17
 400ae78:	48c7c83a 	sub	r3,r9,r3
 400ae7c:	344d803a 	cmpltu	r6,r6,r17
 400ae80:	1991c83a 	sub	r8,r3,r6
 400ae84:	1021883a 	mov	r16,r2
 400ae88:	3825883a 	mov	r18,r7
 400ae8c:	003f2706 	br	400ab2c <__alt_data_end+0xff00ab2c>
 400ae90:	24d0b03a 	or	r8,r4,r19
 400ae94:	40001b1e 	bne	r8,zero,400af04 <__adddf3+0x548>
 400ae98:	0005883a 	mov	r2,zero
 400ae9c:	0007883a 	mov	r3,zero
 400aea0:	0021883a 	mov	r16,zero
 400aea4:	003f4d06 	br	400abdc <__alt_data_end+0xff00abdc>
 400aea8:	008007c4 	movi	r2,31
 400aeac:	11003c16 	blt	r2,r4,400afa0 <__adddf3+0x5e4>
 400aeb0:	00800804 	movi	r2,32
 400aeb4:	1105c83a 	sub	r2,r2,r4
 400aeb8:	488e983a 	sll	r7,r9,r2
 400aebc:	310ad83a 	srl	r5,r6,r4
 400aec0:	3084983a 	sll	r2,r6,r2
 400aec4:	4912d83a 	srl	r9,r9,r4
 400aec8:	394ab03a 	or	r5,r7,r5
 400aecc:	1004c03a 	cmpne	r2,r2,zero
 400aed0:	288ab03a 	or	r5,r5,r2
 400aed4:	003f5306 	br	400ac24 <__alt_data_end+0xff00ac24>
 400aed8:	4448b03a 	or	r4,r8,r17
 400aedc:	20003e26 	beq	r4,zero,400afd8 <__adddf3+0x61c>
 400aee0:	00c6303a 	nor	r3,zero,r3
 400aee4:	18003a1e 	bne	r3,zero,400afd0 <__adddf3+0x614>
 400aee8:	3463c83a 	sub	r17,r6,r17
 400aeec:	4a07c83a 	sub	r3,r9,r8
 400aef0:	344d803a 	cmpltu	r6,r6,r17
 400aef4:	1991c83a 	sub	r8,r3,r6
 400aef8:	1021883a 	mov	r16,r2
 400aefc:	3825883a 	mov	r18,r7
 400af00:	003f0a06 	br	400ab2c <__alt_data_end+0xff00ab2c>
 400af04:	2023883a 	mov	r17,r4
 400af08:	003f0d06 	br	400ab40 <__alt_data_end+0xff00ab40>
 400af0c:	0081ffc4 	movi	r2,2047
 400af10:	80bf3f1e 	bne	r16,r2,400ac10 <__alt_data_end+0xff00ac10>
 400af14:	003ec806 	br	400aa38 <__alt_data_end+0xff00aa38>
 400af18:	0005883a 	mov	r2,zero
 400af1c:	003fb106 	br	400ade4 <__alt_data_end+0xff00ade4>
 400af20:	0007883a 	mov	r3,zero
 400af24:	003fbc06 	br	400ae18 <__alt_data_end+0xff00ae18>
 400af28:	4444b03a 	or	r2,r8,r17
 400af2c:	8000871e 	bne	r16,zero,400b14c <__adddf3+0x790>
 400af30:	1000ba26 	beq	r2,zero,400b21c <__adddf3+0x860>
 400af34:	4984b03a 	or	r2,r9,r6
 400af38:	103ebf26 	beq	r2,zero,400aa38 <__alt_data_end+0xff00aa38>
 400af3c:	8985883a 	add	r2,r17,r6
 400af40:	4247883a 	add	r3,r8,r9
 400af44:	1451803a 	cmpltu	r8,r2,r17
 400af48:	40d1883a 	add	r8,r8,r3
 400af4c:	40c0202c 	andhi	r3,r8,128
 400af50:	1023883a 	mov	r17,r2
 400af54:	183f1a26 	beq	r3,zero,400abc0 <__alt_data_end+0xff00abc0>
 400af58:	00bfe034 	movhi	r2,65408
 400af5c:	10bfffc4 	addi	r2,r2,-1
 400af60:	2021883a 	mov	r16,r4
 400af64:	4090703a 	and	r8,r8,r2
 400af68:	003eb306 	br	400aa38 <__alt_data_end+0xff00aa38>
 400af6c:	4444b03a 	or	r2,r8,r17
 400af70:	8000291e 	bne	r16,zero,400b018 <__adddf3+0x65c>
 400af74:	10004b1e 	bne	r2,zero,400b0a4 <__adddf3+0x6e8>
 400af78:	4990b03a 	or	r8,r9,r6
 400af7c:	40008b26 	beq	r8,zero,400b1ac <__adddf3+0x7f0>
 400af80:	4811883a 	mov	r8,r9
 400af84:	3023883a 	mov	r17,r6
 400af88:	3825883a 	mov	r18,r7
 400af8c:	003eaa06 	br	400aa38 <__alt_data_end+0xff00aa38>
 400af90:	1021883a 	mov	r16,r2
 400af94:	0011883a 	mov	r8,zero
 400af98:	0005883a 	mov	r2,zero
 400af9c:	003f0f06 	br	400abdc <__alt_data_end+0xff00abdc>
 400afa0:	217ff804 	addi	r5,r4,-32
 400afa4:	00800804 	movi	r2,32
 400afa8:	494ad83a 	srl	r5,r9,r5
 400afac:	20807d26 	beq	r4,r2,400b1a4 <__adddf3+0x7e8>
 400afb0:	00801004 	movi	r2,64
 400afb4:	1109c83a 	sub	r4,r2,r4
 400afb8:	4912983a 	sll	r9,r9,r4
 400afbc:	498cb03a 	or	r6,r9,r6
 400afc0:	300cc03a 	cmpne	r6,r6,zero
 400afc4:	298ab03a 	or	r5,r5,r6
 400afc8:	0013883a 	mov	r9,zero
 400afcc:	003f1506 	br	400ac24 <__alt_data_end+0xff00ac24>
 400afd0:	0101ffc4 	movi	r4,2047
 400afd4:	113f9a1e 	bne	r2,r4,400ae40 <__alt_data_end+0xff00ae40>
 400afd8:	4811883a 	mov	r8,r9
 400afdc:	3023883a 	mov	r17,r6
 400afe0:	1021883a 	mov	r16,r2
 400afe4:	3825883a 	mov	r18,r7
 400afe8:	003e9306 	br	400aa38 <__alt_data_end+0xff00aa38>
 400afec:	8000161e 	bne	r16,zero,400b048 <__adddf3+0x68c>
 400aff0:	444ab03a 	or	r5,r8,r17
 400aff4:	28005126 	beq	r5,zero,400b13c <__adddf3+0x780>
 400aff8:	0108303a 	nor	r4,zero,r4
 400affc:	20004d1e 	bne	r4,zero,400b134 <__adddf3+0x778>
 400b000:	89a3883a 	add	r17,r17,r6
 400b004:	4253883a 	add	r9,r8,r9
 400b008:	898d803a 	cmpltu	r6,r17,r6
 400b00c:	3251883a 	add	r8,r6,r9
 400b010:	1021883a 	mov	r16,r2
 400b014:	003f0806 	br	400ac38 <__alt_data_end+0xff00ac38>
 400b018:	1000301e 	bne	r2,zero,400b0dc <__adddf3+0x720>
 400b01c:	4984b03a 	or	r2,r9,r6
 400b020:	10007126 	beq	r2,zero,400b1e8 <__adddf3+0x82c>
 400b024:	4811883a 	mov	r8,r9
 400b028:	3023883a 	mov	r17,r6
 400b02c:	3825883a 	mov	r18,r7
 400b030:	0401ffc4 	movi	r16,2047
 400b034:	003e8006 	br	400aa38 <__alt_data_end+0xff00aa38>
 400b038:	4462b03a 	or	r17,r8,r17
 400b03c:	8822c03a 	cmpne	r17,r17,zero
 400b040:	0007883a 	mov	r3,zero
 400b044:	003f8b06 	br	400ae74 <__alt_data_end+0xff00ae74>
 400b048:	0141ffc4 	movi	r5,2047
 400b04c:	11403b26 	beq	r2,r5,400b13c <__adddf3+0x780>
 400b050:	0109c83a 	sub	r4,zero,r4
 400b054:	42002034 	orhi	r8,r8,128
 400b058:	01400e04 	movi	r5,56
 400b05c:	29006716 	blt	r5,r4,400b1fc <__adddf3+0x840>
 400b060:	014007c4 	movi	r5,31
 400b064:	29007016 	blt	r5,r4,400b228 <__adddf3+0x86c>
 400b068:	01400804 	movi	r5,32
 400b06c:	290bc83a 	sub	r5,r5,r4
 400b070:	4154983a 	sll	r10,r8,r5
 400b074:	890ed83a 	srl	r7,r17,r4
 400b078:	894a983a 	sll	r5,r17,r5
 400b07c:	4108d83a 	srl	r4,r8,r4
 400b080:	51e2b03a 	or	r17,r10,r7
 400b084:	280ac03a 	cmpne	r5,r5,zero
 400b088:	8962b03a 	or	r17,r17,r5
 400b08c:	89a3883a 	add	r17,r17,r6
 400b090:	2253883a 	add	r9,r4,r9
 400b094:	898d803a 	cmpltu	r6,r17,r6
 400b098:	3251883a 	add	r8,r6,r9
 400b09c:	1021883a 	mov	r16,r2
 400b0a0:	003ee506 	br	400ac38 <__alt_data_end+0xff00ac38>
 400b0a4:	4984b03a 	or	r2,r9,r6
 400b0a8:	103e6326 	beq	r2,zero,400aa38 <__alt_data_end+0xff00aa38>
 400b0ac:	8987c83a 	sub	r3,r17,r6
 400b0b0:	88c9803a 	cmpltu	r4,r17,r3
 400b0b4:	4245c83a 	sub	r2,r8,r9
 400b0b8:	1105c83a 	sub	r2,r2,r4
 400b0bc:	1100202c 	andhi	r4,r2,128
 400b0c0:	203ebb26 	beq	r4,zero,400abb0 <__alt_data_end+0xff00abb0>
 400b0c4:	3463c83a 	sub	r17,r6,r17
 400b0c8:	4a07c83a 	sub	r3,r9,r8
 400b0cc:	344d803a 	cmpltu	r6,r6,r17
 400b0d0:	1991c83a 	sub	r8,r3,r6
 400b0d4:	3825883a 	mov	r18,r7
 400b0d8:	003e5706 	br	400aa38 <__alt_data_end+0xff00aa38>
 400b0dc:	4984b03a 	or	r2,r9,r6
 400b0e0:	10002e26 	beq	r2,zero,400b19c <__adddf3+0x7e0>
 400b0e4:	4004d0fa 	srli	r2,r8,3
 400b0e8:	8822d0fa 	srli	r17,r17,3
 400b0ec:	4010977a 	slli	r8,r8,29
 400b0f0:	10c0022c 	andhi	r3,r2,8
 400b0f4:	4462b03a 	or	r17,r8,r17
 400b0f8:	18000826 	beq	r3,zero,400b11c <__adddf3+0x760>
 400b0fc:	4808d0fa 	srli	r4,r9,3
 400b100:	20c0022c 	andhi	r3,r4,8
 400b104:	1800051e 	bne	r3,zero,400b11c <__adddf3+0x760>
 400b108:	300cd0fa 	srli	r6,r6,3
 400b10c:	4806977a 	slli	r3,r9,29
 400b110:	2005883a 	mov	r2,r4
 400b114:	3825883a 	mov	r18,r7
 400b118:	19a2b03a 	or	r17,r3,r6
 400b11c:	8810d77a 	srli	r8,r17,29
 400b120:	100490fa 	slli	r2,r2,3
 400b124:	882290fa 	slli	r17,r17,3
 400b128:	0401ffc4 	movi	r16,2047
 400b12c:	4090b03a 	or	r8,r8,r2
 400b130:	003e4106 	br	400aa38 <__alt_data_end+0xff00aa38>
 400b134:	0141ffc4 	movi	r5,2047
 400b138:	117fc71e 	bne	r2,r5,400b058 <__alt_data_end+0xff00b058>
 400b13c:	4811883a 	mov	r8,r9
 400b140:	3023883a 	mov	r17,r6
 400b144:	1021883a 	mov	r16,r2
 400b148:	003e3b06 	br	400aa38 <__alt_data_end+0xff00aa38>
 400b14c:	10002f26 	beq	r2,zero,400b20c <__adddf3+0x850>
 400b150:	4984b03a 	or	r2,r9,r6
 400b154:	10001126 	beq	r2,zero,400b19c <__adddf3+0x7e0>
 400b158:	4004d0fa 	srli	r2,r8,3
 400b15c:	8822d0fa 	srli	r17,r17,3
 400b160:	4010977a 	slli	r8,r8,29
 400b164:	10c0022c 	andhi	r3,r2,8
 400b168:	4462b03a 	or	r17,r8,r17
 400b16c:	183feb26 	beq	r3,zero,400b11c <__alt_data_end+0xff00b11c>
 400b170:	4808d0fa 	srli	r4,r9,3
 400b174:	20c0022c 	andhi	r3,r4,8
 400b178:	183fe81e 	bne	r3,zero,400b11c <__alt_data_end+0xff00b11c>
 400b17c:	300cd0fa 	srli	r6,r6,3
 400b180:	4806977a 	slli	r3,r9,29
 400b184:	2005883a 	mov	r2,r4
 400b188:	19a2b03a 	or	r17,r3,r6
 400b18c:	003fe306 	br	400b11c <__alt_data_end+0xff00b11c>
 400b190:	0011883a 	mov	r8,zero
 400b194:	0005883a 	mov	r2,zero
 400b198:	003e3f06 	br	400aa98 <__alt_data_end+0xff00aa98>
 400b19c:	0401ffc4 	movi	r16,2047
 400b1a0:	003e2506 	br	400aa38 <__alt_data_end+0xff00aa38>
 400b1a4:	0013883a 	mov	r9,zero
 400b1a8:	003f8406 	br	400afbc <__alt_data_end+0xff00afbc>
 400b1ac:	0005883a 	mov	r2,zero
 400b1b0:	0007883a 	mov	r3,zero
 400b1b4:	003e8906 	br	400abdc <__alt_data_end+0xff00abdc>
 400b1b8:	197ff804 	addi	r5,r3,-32
 400b1bc:	01000804 	movi	r4,32
 400b1c0:	414ad83a 	srl	r5,r8,r5
 400b1c4:	19002426 	beq	r3,r4,400b258 <__adddf3+0x89c>
 400b1c8:	01001004 	movi	r4,64
 400b1cc:	20c7c83a 	sub	r3,r4,r3
 400b1d0:	40c6983a 	sll	r3,r8,r3
 400b1d4:	1c46b03a 	or	r3,r3,r17
 400b1d8:	1806c03a 	cmpne	r3,r3,zero
 400b1dc:	28e2b03a 	or	r17,r5,r3
 400b1e0:	0007883a 	mov	r3,zero
 400b1e4:	003f2306 	br	400ae74 <__alt_data_end+0xff00ae74>
 400b1e8:	0007883a 	mov	r3,zero
 400b1ec:	5811883a 	mov	r8,r11
 400b1f0:	00bfffc4 	movi	r2,-1
 400b1f4:	0401ffc4 	movi	r16,2047
 400b1f8:	003e7806 	br	400abdc <__alt_data_end+0xff00abdc>
 400b1fc:	4462b03a 	or	r17,r8,r17
 400b200:	8822c03a 	cmpne	r17,r17,zero
 400b204:	0009883a 	mov	r4,zero
 400b208:	003fa006 	br	400b08c <__alt_data_end+0xff00b08c>
 400b20c:	4811883a 	mov	r8,r9
 400b210:	3023883a 	mov	r17,r6
 400b214:	0401ffc4 	movi	r16,2047
 400b218:	003e0706 	br	400aa38 <__alt_data_end+0xff00aa38>
 400b21c:	4811883a 	mov	r8,r9
 400b220:	3023883a 	mov	r17,r6
 400b224:	003e0406 	br	400aa38 <__alt_data_end+0xff00aa38>
 400b228:	21fff804 	addi	r7,r4,-32
 400b22c:	01400804 	movi	r5,32
 400b230:	41ced83a 	srl	r7,r8,r7
 400b234:	21400a26 	beq	r4,r5,400b260 <__adddf3+0x8a4>
 400b238:	01401004 	movi	r5,64
 400b23c:	2909c83a 	sub	r4,r5,r4
 400b240:	4108983a 	sll	r4,r8,r4
 400b244:	2448b03a 	or	r4,r4,r17
 400b248:	2008c03a 	cmpne	r4,r4,zero
 400b24c:	3922b03a 	or	r17,r7,r4
 400b250:	0009883a 	mov	r4,zero
 400b254:	003f8d06 	br	400b08c <__alt_data_end+0xff00b08c>
 400b258:	0007883a 	mov	r3,zero
 400b25c:	003fdd06 	br	400b1d4 <__alt_data_end+0xff00b1d4>
 400b260:	0009883a 	mov	r4,zero
 400b264:	003ff706 	br	400b244 <__alt_data_end+0xff00b244>

0400b268 <__divdf3>:
 400b268:	defff204 	addi	sp,sp,-56
 400b26c:	dd400915 	stw	r21,36(sp)
 400b270:	282ad53a 	srli	r21,r5,20
 400b274:	dd000815 	stw	r20,32(sp)
 400b278:	2828d7fa 	srli	r20,r5,31
 400b27c:	dc000415 	stw	r16,16(sp)
 400b280:	04000434 	movhi	r16,16
 400b284:	df000c15 	stw	fp,48(sp)
 400b288:	843fffc4 	addi	r16,r16,-1
 400b28c:	dfc00d15 	stw	ra,52(sp)
 400b290:	ddc00b15 	stw	r23,44(sp)
 400b294:	dd800a15 	stw	r22,40(sp)
 400b298:	dcc00715 	stw	r19,28(sp)
 400b29c:	dc800615 	stw	r18,24(sp)
 400b2a0:	dc400515 	stw	r17,20(sp)
 400b2a4:	ad41ffcc 	andi	r21,r21,2047
 400b2a8:	2c20703a 	and	r16,r5,r16
 400b2ac:	a7003fcc 	andi	fp,r20,255
 400b2b0:	a8006126 	beq	r21,zero,400b438 <__divdf3+0x1d0>
 400b2b4:	0081ffc4 	movi	r2,2047
 400b2b8:	2025883a 	mov	r18,r4
 400b2bc:	a8803726 	beq	r21,r2,400b39c <__divdf3+0x134>
 400b2c0:	80800434 	orhi	r2,r16,16
 400b2c4:	100490fa 	slli	r2,r2,3
 400b2c8:	2020d77a 	srli	r16,r4,29
 400b2cc:	202490fa 	slli	r18,r4,3
 400b2d0:	ad7f0044 	addi	r21,r21,-1023
 400b2d4:	80a0b03a 	or	r16,r16,r2
 400b2d8:	0027883a 	mov	r19,zero
 400b2dc:	0013883a 	mov	r9,zero
 400b2e0:	3804d53a 	srli	r2,r7,20
 400b2e4:	382cd7fa 	srli	r22,r7,31
 400b2e8:	04400434 	movhi	r17,16
 400b2ec:	8c7fffc4 	addi	r17,r17,-1
 400b2f0:	1081ffcc 	andi	r2,r2,2047
 400b2f4:	3011883a 	mov	r8,r6
 400b2f8:	3c62703a 	and	r17,r7,r17
 400b2fc:	b5c03fcc 	andi	r23,r22,255
 400b300:	10006c26 	beq	r2,zero,400b4b4 <__divdf3+0x24c>
 400b304:	00c1ffc4 	movi	r3,2047
 400b308:	10c06426 	beq	r2,r3,400b49c <__divdf3+0x234>
 400b30c:	88c00434 	orhi	r3,r17,16
 400b310:	180690fa 	slli	r3,r3,3
 400b314:	3022d77a 	srli	r17,r6,29
 400b318:	301090fa 	slli	r8,r6,3
 400b31c:	10bf0044 	addi	r2,r2,-1023
 400b320:	88e2b03a 	or	r17,r17,r3
 400b324:	000f883a 	mov	r7,zero
 400b328:	a58cf03a 	xor	r6,r20,r22
 400b32c:	3cc8b03a 	or	r4,r7,r19
 400b330:	a8abc83a 	sub	r21,r21,r2
 400b334:	008003c4 	movi	r2,15
 400b338:	3007883a 	mov	r3,r6
 400b33c:	34c03fcc 	andi	r19,r6,255
 400b340:	11009036 	bltu	r2,r4,400b584 <__divdf3+0x31c>
 400b344:	200890ba 	slli	r4,r4,2
 400b348:	00810074 	movhi	r2,1025
 400b34c:	10acd704 	addi	r2,r2,-19620
 400b350:	2089883a 	add	r4,r4,r2
 400b354:	20800017 	ldw	r2,0(r4)
 400b358:	1000683a 	jmp	r2
 400b35c:	0400b584 	movi	r16,726
 400b360:	0400b3d4 	movui	r16,719
 400b364:	0400b574 	movhi	r16,725
 400b368:	0400b3c8 	cmpgei	r16,zero,719
 400b36c:	0400b574 	movhi	r16,725
 400b370:	0400b548 	cmpgei	r16,zero,725
 400b374:	0400b574 	movhi	r16,725
 400b378:	0400b3c8 	cmpgei	r16,zero,719
 400b37c:	0400b3d4 	movui	r16,719
 400b380:	0400b3d4 	movui	r16,719
 400b384:	0400b548 	cmpgei	r16,zero,725
 400b388:	0400b3c8 	cmpgei	r16,zero,719
 400b38c:	0400b3b8 	rdprs	r16,zero,718
 400b390:	0400b3b8 	rdprs	r16,zero,718
 400b394:	0400b3b8 	rdprs	r16,zero,718
 400b398:	0400b868 	cmpgeui	r16,zero,737
 400b39c:	2404b03a 	or	r2,r4,r16
 400b3a0:	1000661e 	bne	r2,zero,400b53c <__divdf3+0x2d4>
 400b3a4:	04c00204 	movi	r19,8
 400b3a8:	0021883a 	mov	r16,zero
 400b3ac:	0025883a 	mov	r18,zero
 400b3b0:	02400084 	movi	r9,2
 400b3b4:	003fca06 	br	400b2e0 <__alt_data_end+0xff00b2e0>
 400b3b8:	8023883a 	mov	r17,r16
 400b3bc:	9011883a 	mov	r8,r18
 400b3c0:	e02f883a 	mov	r23,fp
 400b3c4:	480f883a 	mov	r7,r9
 400b3c8:	00800084 	movi	r2,2
 400b3cc:	3881311e 	bne	r7,r2,400b894 <__divdf3+0x62c>
 400b3d0:	b827883a 	mov	r19,r23
 400b3d4:	98c0004c 	andi	r3,r19,1
 400b3d8:	0081ffc4 	movi	r2,2047
 400b3dc:	000b883a 	mov	r5,zero
 400b3e0:	0025883a 	mov	r18,zero
 400b3e4:	1004953a 	slli	r2,r2,20
 400b3e8:	18c03fcc 	andi	r3,r3,255
 400b3ec:	04400434 	movhi	r17,16
 400b3f0:	8c7fffc4 	addi	r17,r17,-1
 400b3f4:	180697fa 	slli	r3,r3,31
 400b3f8:	2c4a703a 	and	r5,r5,r17
 400b3fc:	288ab03a 	or	r5,r5,r2
 400b400:	28c6b03a 	or	r3,r5,r3
 400b404:	9005883a 	mov	r2,r18
 400b408:	dfc00d17 	ldw	ra,52(sp)
 400b40c:	df000c17 	ldw	fp,48(sp)
 400b410:	ddc00b17 	ldw	r23,44(sp)
 400b414:	dd800a17 	ldw	r22,40(sp)
 400b418:	dd400917 	ldw	r21,36(sp)
 400b41c:	dd000817 	ldw	r20,32(sp)
 400b420:	dcc00717 	ldw	r19,28(sp)
 400b424:	dc800617 	ldw	r18,24(sp)
 400b428:	dc400517 	ldw	r17,20(sp)
 400b42c:	dc000417 	ldw	r16,16(sp)
 400b430:	dec00e04 	addi	sp,sp,56
 400b434:	f800283a 	ret
 400b438:	2404b03a 	or	r2,r4,r16
 400b43c:	2027883a 	mov	r19,r4
 400b440:	10003926 	beq	r2,zero,400b528 <__divdf3+0x2c0>
 400b444:	80012e26 	beq	r16,zero,400b900 <__divdf3+0x698>
 400b448:	8009883a 	mov	r4,r16
 400b44c:	d9800315 	stw	r6,12(sp)
 400b450:	d9c00215 	stw	r7,8(sp)
 400b454:	400cfc00 	call	400cfc0 <__clzsi2>
 400b458:	d9800317 	ldw	r6,12(sp)
 400b45c:	d9c00217 	ldw	r7,8(sp)
 400b460:	113ffd44 	addi	r4,r2,-11
 400b464:	00c00704 	movi	r3,28
 400b468:	19012116 	blt	r3,r4,400b8f0 <__divdf3+0x688>
 400b46c:	00c00744 	movi	r3,29
 400b470:	147ffe04 	addi	r17,r2,-8
 400b474:	1907c83a 	sub	r3,r3,r4
 400b478:	8460983a 	sll	r16,r16,r17
 400b47c:	98c6d83a 	srl	r3,r19,r3
 400b480:	9c64983a 	sll	r18,r19,r17
 400b484:	1c20b03a 	or	r16,r3,r16
 400b488:	1080fcc4 	addi	r2,r2,1011
 400b48c:	00abc83a 	sub	r21,zero,r2
 400b490:	0027883a 	mov	r19,zero
 400b494:	0013883a 	mov	r9,zero
 400b498:	003f9106 	br	400b2e0 <__alt_data_end+0xff00b2e0>
 400b49c:	3446b03a 	or	r3,r6,r17
 400b4a0:	18001f1e 	bne	r3,zero,400b520 <__divdf3+0x2b8>
 400b4a4:	0023883a 	mov	r17,zero
 400b4a8:	0011883a 	mov	r8,zero
 400b4ac:	01c00084 	movi	r7,2
 400b4b0:	003f9d06 	br	400b328 <__alt_data_end+0xff00b328>
 400b4b4:	3446b03a 	or	r3,r6,r17
 400b4b8:	18001526 	beq	r3,zero,400b510 <__divdf3+0x2a8>
 400b4bc:	88011b26 	beq	r17,zero,400b92c <__divdf3+0x6c4>
 400b4c0:	8809883a 	mov	r4,r17
 400b4c4:	d9800315 	stw	r6,12(sp)
 400b4c8:	da400115 	stw	r9,4(sp)
 400b4cc:	400cfc00 	call	400cfc0 <__clzsi2>
 400b4d0:	d9800317 	ldw	r6,12(sp)
 400b4d4:	da400117 	ldw	r9,4(sp)
 400b4d8:	113ffd44 	addi	r4,r2,-11
 400b4dc:	00c00704 	movi	r3,28
 400b4e0:	19010e16 	blt	r3,r4,400b91c <__divdf3+0x6b4>
 400b4e4:	00c00744 	movi	r3,29
 400b4e8:	123ffe04 	addi	r8,r2,-8
 400b4ec:	1907c83a 	sub	r3,r3,r4
 400b4f0:	8a22983a 	sll	r17,r17,r8
 400b4f4:	30c6d83a 	srl	r3,r6,r3
 400b4f8:	3210983a 	sll	r8,r6,r8
 400b4fc:	1c62b03a 	or	r17,r3,r17
 400b500:	1080fcc4 	addi	r2,r2,1011
 400b504:	0085c83a 	sub	r2,zero,r2
 400b508:	000f883a 	mov	r7,zero
 400b50c:	003f8606 	br	400b328 <__alt_data_end+0xff00b328>
 400b510:	0023883a 	mov	r17,zero
 400b514:	0011883a 	mov	r8,zero
 400b518:	01c00044 	movi	r7,1
 400b51c:	003f8206 	br	400b328 <__alt_data_end+0xff00b328>
 400b520:	01c000c4 	movi	r7,3
 400b524:	003f8006 	br	400b328 <__alt_data_end+0xff00b328>
 400b528:	04c00104 	movi	r19,4
 400b52c:	0021883a 	mov	r16,zero
 400b530:	0025883a 	mov	r18,zero
 400b534:	02400044 	movi	r9,1
 400b538:	003f6906 	br	400b2e0 <__alt_data_end+0xff00b2e0>
 400b53c:	04c00304 	movi	r19,12
 400b540:	024000c4 	movi	r9,3
 400b544:	003f6606 	br	400b2e0 <__alt_data_end+0xff00b2e0>
 400b548:	01400434 	movhi	r5,16
 400b54c:	0007883a 	mov	r3,zero
 400b550:	297fffc4 	addi	r5,r5,-1
 400b554:	04bfffc4 	movi	r18,-1
 400b558:	0081ffc4 	movi	r2,2047
 400b55c:	003fa106 	br	400b3e4 <__alt_data_end+0xff00b3e4>
 400b560:	00c00044 	movi	r3,1
 400b564:	1887c83a 	sub	r3,r3,r2
 400b568:	01000e04 	movi	r4,56
 400b56c:	20c1210e 	bge	r4,r3,400b9f4 <__divdf3+0x78c>
 400b570:	98c0004c 	andi	r3,r19,1
 400b574:	0005883a 	mov	r2,zero
 400b578:	000b883a 	mov	r5,zero
 400b57c:	0025883a 	mov	r18,zero
 400b580:	003f9806 	br	400b3e4 <__alt_data_end+0xff00b3e4>
 400b584:	8c00fd36 	bltu	r17,r16,400b97c <__divdf3+0x714>
 400b588:	8440fb26 	beq	r16,r17,400b978 <__divdf3+0x710>
 400b58c:	8007883a 	mov	r3,r16
 400b590:	ad7fffc4 	addi	r21,r21,-1
 400b594:	0021883a 	mov	r16,zero
 400b598:	4004d63a 	srli	r2,r8,24
 400b59c:	8822923a 	slli	r17,r17,8
 400b5a0:	1809883a 	mov	r4,r3
 400b5a4:	402c923a 	slli	r22,r8,8
 400b5a8:	88b8b03a 	or	fp,r17,r2
 400b5ac:	e028d43a 	srli	r20,fp,16
 400b5b0:	d8c00015 	stw	r3,0(sp)
 400b5b4:	e5ffffcc 	andi	r23,fp,65535
 400b5b8:	a00b883a 	mov	r5,r20
 400b5bc:	400a9000 	call	400a900 <__udivsi3>
 400b5c0:	d8c00017 	ldw	r3,0(sp)
 400b5c4:	a00b883a 	mov	r5,r20
 400b5c8:	d8800315 	stw	r2,12(sp)
 400b5cc:	1809883a 	mov	r4,r3
 400b5d0:	400a9640 	call	400a964 <__umodsi3>
 400b5d4:	d9800317 	ldw	r6,12(sp)
 400b5d8:	1006943a 	slli	r3,r2,16
 400b5dc:	9004d43a 	srli	r2,r18,16
 400b5e0:	b9a3383a 	mul	r17,r23,r6
 400b5e4:	10c4b03a 	or	r2,r2,r3
 400b5e8:	1440062e 	bgeu	r2,r17,400b604 <__divdf3+0x39c>
 400b5ec:	1705883a 	add	r2,r2,fp
 400b5f0:	30ffffc4 	addi	r3,r6,-1
 400b5f4:	1700ee36 	bltu	r2,fp,400b9b0 <__divdf3+0x748>
 400b5f8:	1440ed2e 	bgeu	r2,r17,400b9b0 <__divdf3+0x748>
 400b5fc:	31bfff84 	addi	r6,r6,-2
 400b600:	1705883a 	add	r2,r2,fp
 400b604:	1463c83a 	sub	r17,r2,r17
 400b608:	a00b883a 	mov	r5,r20
 400b60c:	8809883a 	mov	r4,r17
 400b610:	d9800315 	stw	r6,12(sp)
 400b614:	400a9000 	call	400a900 <__udivsi3>
 400b618:	a00b883a 	mov	r5,r20
 400b61c:	8809883a 	mov	r4,r17
 400b620:	d8800215 	stw	r2,8(sp)
 400b624:	400a9640 	call	400a964 <__umodsi3>
 400b628:	d9c00217 	ldw	r7,8(sp)
 400b62c:	1004943a 	slli	r2,r2,16
 400b630:	94bfffcc 	andi	r18,r18,65535
 400b634:	b9d1383a 	mul	r8,r23,r7
 400b638:	90a4b03a 	or	r18,r18,r2
 400b63c:	d9800317 	ldw	r6,12(sp)
 400b640:	9200062e 	bgeu	r18,r8,400b65c <__divdf3+0x3f4>
 400b644:	9725883a 	add	r18,r18,fp
 400b648:	38bfffc4 	addi	r2,r7,-1
 400b64c:	9700d636 	bltu	r18,fp,400b9a8 <__divdf3+0x740>
 400b650:	9200d52e 	bgeu	r18,r8,400b9a8 <__divdf3+0x740>
 400b654:	39ffff84 	addi	r7,r7,-2
 400b658:	9725883a 	add	r18,r18,fp
 400b65c:	3004943a 	slli	r2,r6,16
 400b660:	b012d43a 	srli	r9,r22,16
 400b664:	b1bfffcc 	andi	r6,r22,65535
 400b668:	11e2b03a 	or	r17,r2,r7
 400b66c:	8806d43a 	srli	r3,r17,16
 400b670:	893fffcc 	andi	r4,r17,65535
 400b674:	218b383a 	mul	r5,r4,r6
 400b678:	30c5383a 	mul	r2,r6,r3
 400b67c:	2249383a 	mul	r4,r4,r9
 400b680:	280ed43a 	srli	r7,r5,16
 400b684:	9225c83a 	sub	r18,r18,r8
 400b688:	2089883a 	add	r4,r4,r2
 400b68c:	3909883a 	add	r4,r7,r4
 400b690:	1a47383a 	mul	r3,r3,r9
 400b694:	2080022e 	bgeu	r4,r2,400b6a0 <__divdf3+0x438>
 400b698:	00800074 	movhi	r2,1
 400b69c:	1887883a 	add	r3,r3,r2
 400b6a0:	2004d43a 	srli	r2,r4,16
 400b6a4:	2008943a 	slli	r4,r4,16
 400b6a8:	297fffcc 	andi	r5,r5,65535
 400b6ac:	10c7883a 	add	r3,r2,r3
 400b6b0:	2149883a 	add	r4,r4,r5
 400b6b4:	90c0a536 	bltu	r18,r3,400b94c <__divdf3+0x6e4>
 400b6b8:	90c0bf26 	beq	r18,r3,400b9b8 <__divdf3+0x750>
 400b6bc:	90c7c83a 	sub	r3,r18,r3
 400b6c0:	810fc83a 	sub	r7,r16,r4
 400b6c4:	81e5803a 	cmpltu	r18,r16,r7
 400b6c8:	1ca5c83a 	sub	r18,r3,r18
 400b6cc:	e480c126 	beq	fp,r18,400b9d4 <__divdf3+0x76c>
 400b6d0:	a00b883a 	mov	r5,r20
 400b6d4:	9009883a 	mov	r4,r18
 400b6d8:	d9800315 	stw	r6,12(sp)
 400b6dc:	d9c00215 	stw	r7,8(sp)
 400b6e0:	da400115 	stw	r9,4(sp)
 400b6e4:	400a9000 	call	400a900 <__udivsi3>
 400b6e8:	a00b883a 	mov	r5,r20
 400b6ec:	9009883a 	mov	r4,r18
 400b6f0:	d8800015 	stw	r2,0(sp)
 400b6f4:	400a9640 	call	400a964 <__umodsi3>
 400b6f8:	d9c00217 	ldw	r7,8(sp)
 400b6fc:	da000017 	ldw	r8,0(sp)
 400b700:	1006943a 	slli	r3,r2,16
 400b704:	3804d43a 	srli	r2,r7,16
 400b708:	ba21383a 	mul	r16,r23,r8
 400b70c:	d9800317 	ldw	r6,12(sp)
 400b710:	10c4b03a 	or	r2,r2,r3
 400b714:	da400117 	ldw	r9,4(sp)
 400b718:	1400062e 	bgeu	r2,r16,400b734 <__divdf3+0x4cc>
 400b71c:	1705883a 	add	r2,r2,fp
 400b720:	40ffffc4 	addi	r3,r8,-1
 400b724:	1700ad36 	bltu	r2,fp,400b9dc <__divdf3+0x774>
 400b728:	1400ac2e 	bgeu	r2,r16,400b9dc <__divdf3+0x774>
 400b72c:	423fff84 	addi	r8,r8,-2
 400b730:	1705883a 	add	r2,r2,fp
 400b734:	1421c83a 	sub	r16,r2,r16
 400b738:	a00b883a 	mov	r5,r20
 400b73c:	8009883a 	mov	r4,r16
 400b740:	d9800315 	stw	r6,12(sp)
 400b744:	d9c00215 	stw	r7,8(sp)
 400b748:	da000015 	stw	r8,0(sp)
 400b74c:	da400115 	stw	r9,4(sp)
 400b750:	400a9000 	call	400a900 <__udivsi3>
 400b754:	8009883a 	mov	r4,r16
 400b758:	a00b883a 	mov	r5,r20
 400b75c:	1025883a 	mov	r18,r2
 400b760:	400a9640 	call	400a964 <__umodsi3>
 400b764:	d9c00217 	ldw	r7,8(sp)
 400b768:	1004943a 	slli	r2,r2,16
 400b76c:	bcaf383a 	mul	r23,r23,r18
 400b770:	393fffcc 	andi	r4,r7,65535
 400b774:	2088b03a 	or	r4,r4,r2
 400b778:	d9800317 	ldw	r6,12(sp)
 400b77c:	da000017 	ldw	r8,0(sp)
 400b780:	da400117 	ldw	r9,4(sp)
 400b784:	25c0062e 	bgeu	r4,r23,400b7a0 <__divdf3+0x538>
 400b788:	2709883a 	add	r4,r4,fp
 400b78c:	90bfffc4 	addi	r2,r18,-1
 400b790:	27009436 	bltu	r4,fp,400b9e4 <__divdf3+0x77c>
 400b794:	25c0932e 	bgeu	r4,r23,400b9e4 <__divdf3+0x77c>
 400b798:	94bfff84 	addi	r18,r18,-2
 400b79c:	2709883a 	add	r4,r4,fp
 400b7a0:	4004943a 	slli	r2,r8,16
 400b7a4:	25efc83a 	sub	r23,r4,r23
 400b7a8:	1490b03a 	or	r8,r2,r18
 400b7ac:	4008d43a 	srli	r4,r8,16
 400b7b0:	40ffffcc 	andi	r3,r8,65535
 400b7b4:	30c5383a 	mul	r2,r6,r3
 400b7b8:	1a47383a 	mul	r3,r3,r9
 400b7bc:	310d383a 	mul	r6,r6,r4
 400b7c0:	100ad43a 	srli	r5,r2,16
 400b7c4:	4913383a 	mul	r9,r9,r4
 400b7c8:	1987883a 	add	r3,r3,r6
 400b7cc:	28c7883a 	add	r3,r5,r3
 400b7d0:	1980022e 	bgeu	r3,r6,400b7dc <__divdf3+0x574>
 400b7d4:	01000074 	movhi	r4,1
 400b7d8:	4913883a 	add	r9,r9,r4
 400b7dc:	1808d43a 	srli	r4,r3,16
 400b7e0:	1806943a 	slli	r3,r3,16
 400b7e4:	10bfffcc 	andi	r2,r2,65535
 400b7e8:	2253883a 	add	r9,r4,r9
 400b7ec:	1887883a 	add	r3,r3,r2
 400b7f0:	ba403836 	bltu	r23,r9,400b8d4 <__divdf3+0x66c>
 400b7f4:	ba403626 	beq	r23,r9,400b8d0 <__divdf3+0x668>
 400b7f8:	42000054 	ori	r8,r8,1
 400b7fc:	a880ffc4 	addi	r2,r21,1023
 400b800:	00bf570e 	bge	zero,r2,400b560 <__alt_data_end+0xff00b560>
 400b804:	40c001cc 	andi	r3,r8,7
 400b808:	18000726 	beq	r3,zero,400b828 <__divdf3+0x5c0>
 400b80c:	40c003cc 	andi	r3,r8,15
 400b810:	01000104 	movi	r4,4
 400b814:	19000426 	beq	r3,r4,400b828 <__divdf3+0x5c0>
 400b818:	4107883a 	add	r3,r8,r4
 400b81c:	1a11803a 	cmpltu	r8,r3,r8
 400b820:	8a23883a 	add	r17,r17,r8
 400b824:	1811883a 	mov	r8,r3
 400b828:	88c0402c 	andhi	r3,r17,256
 400b82c:	18000426 	beq	r3,zero,400b840 <__divdf3+0x5d8>
 400b830:	00ffc034 	movhi	r3,65280
 400b834:	18ffffc4 	addi	r3,r3,-1
 400b838:	a8810004 	addi	r2,r21,1024
 400b83c:	88e2703a 	and	r17,r17,r3
 400b840:	00c1ff84 	movi	r3,2046
 400b844:	18bee316 	blt	r3,r2,400b3d4 <__alt_data_end+0xff00b3d4>
 400b848:	8824977a 	slli	r18,r17,29
 400b84c:	4010d0fa 	srli	r8,r8,3
 400b850:	8822927a 	slli	r17,r17,9
 400b854:	1081ffcc 	andi	r2,r2,2047
 400b858:	9224b03a 	or	r18,r18,r8
 400b85c:	880ad33a 	srli	r5,r17,12
 400b860:	98c0004c 	andi	r3,r19,1
 400b864:	003edf06 	br	400b3e4 <__alt_data_end+0xff00b3e4>
 400b868:	8080022c 	andhi	r2,r16,8
 400b86c:	10001226 	beq	r2,zero,400b8b8 <__divdf3+0x650>
 400b870:	8880022c 	andhi	r2,r17,8
 400b874:	1000101e 	bne	r2,zero,400b8b8 <__divdf3+0x650>
 400b878:	00800434 	movhi	r2,16
 400b87c:	89400234 	orhi	r5,r17,8
 400b880:	10bfffc4 	addi	r2,r2,-1
 400b884:	b007883a 	mov	r3,r22
 400b888:	288a703a 	and	r5,r5,r2
 400b88c:	4025883a 	mov	r18,r8
 400b890:	003f3106 	br	400b558 <__alt_data_end+0xff00b558>
 400b894:	008000c4 	movi	r2,3
 400b898:	3880a626 	beq	r7,r2,400bb34 <__divdf3+0x8cc>
 400b89c:	00800044 	movi	r2,1
 400b8a0:	3880521e 	bne	r7,r2,400b9ec <__divdf3+0x784>
 400b8a4:	b807883a 	mov	r3,r23
 400b8a8:	0005883a 	mov	r2,zero
 400b8ac:	000b883a 	mov	r5,zero
 400b8b0:	0025883a 	mov	r18,zero
 400b8b4:	003ecb06 	br	400b3e4 <__alt_data_end+0xff00b3e4>
 400b8b8:	00800434 	movhi	r2,16
 400b8bc:	81400234 	orhi	r5,r16,8
 400b8c0:	10bfffc4 	addi	r2,r2,-1
 400b8c4:	a007883a 	mov	r3,r20
 400b8c8:	288a703a 	and	r5,r5,r2
 400b8cc:	003f2206 	br	400b558 <__alt_data_end+0xff00b558>
 400b8d0:	183fca26 	beq	r3,zero,400b7fc <__alt_data_end+0xff00b7fc>
 400b8d4:	e5ef883a 	add	r23,fp,r23
 400b8d8:	40bfffc4 	addi	r2,r8,-1
 400b8dc:	bf00392e 	bgeu	r23,fp,400b9c4 <__divdf3+0x75c>
 400b8e0:	1011883a 	mov	r8,r2
 400b8e4:	ba7fc41e 	bne	r23,r9,400b7f8 <__alt_data_end+0xff00b7f8>
 400b8e8:	b0ffc31e 	bne	r22,r3,400b7f8 <__alt_data_end+0xff00b7f8>
 400b8ec:	003fc306 	br	400b7fc <__alt_data_end+0xff00b7fc>
 400b8f0:	143ff604 	addi	r16,r2,-40
 400b8f4:	9c20983a 	sll	r16,r19,r16
 400b8f8:	0025883a 	mov	r18,zero
 400b8fc:	003ee206 	br	400b488 <__alt_data_end+0xff00b488>
 400b900:	d9800315 	stw	r6,12(sp)
 400b904:	d9c00215 	stw	r7,8(sp)
 400b908:	400cfc00 	call	400cfc0 <__clzsi2>
 400b90c:	10800804 	addi	r2,r2,32
 400b910:	d9c00217 	ldw	r7,8(sp)
 400b914:	d9800317 	ldw	r6,12(sp)
 400b918:	003ed106 	br	400b460 <__alt_data_end+0xff00b460>
 400b91c:	147ff604 	addi	r17,r2,-40
 400b920:	3462983a 	sll	r17,r6,r17
 400b924:	0011883a 	mov	r8,zero
 400b928:	003ef506 	br	400b500 <__alt_data_end+0xff00b500>
 400b92c:	3009883a 	mov	r4,r6
 400b930:	d9800315 	stw	r6,12(sp)
 400b934:	da400115 	stw	r9,4(sp)
 400b938:	400cfc00 	call	400cfc0 <__clzsi2>
 400b93c:	10800804 	addi	r2,r2,32
 400b940:	da400117 	ldw	r9,4(sp)
 400b944:	d9800317 	ldw	r6,12(sp)
 400b948:	003ee306 	br	400b4d8 <__alt_data_end+0xff00b4d8>
 400b94c:	85a1883a 	add	r16,r16,r22
 400b950:	8585803a 	cmpltu	r2,r16,r22
 400b954:	1705883a 	add	r2,r2,fp
 400b958:	14a5883a 	add	r18,r2,r18
 400b95c:	88bfffc4 	addi	r2,r17,-1
 400b960:	e4800c2e 	bgeu	fp,r18,400b994 <__divdf3+0x72c>
 400b964:	90c03e36 	bltu	r18,r3,400ba60 <__divdf3+0x7f8>
 400b968:	1c806926 	beq	r3,r18,400bb10 <__divdf3+0x8a8>
 400b96c:	90c7c83a 	sub	r3,r18,r3
 400b970:	1023883a 	mov	r17,r2
 400b974:	003f5206 	br	400b6c0 <__alt_data_end+0xff00b6c0>
 400b978:	923f0436 	bltu	r18,r8,400b58c <__alt_data_end+0xff00b58c>
 400b97c:	800897fa 	slli	r4,r16,31
 400b980:	9004d07a 	srli	r2,r18,1
 400b984:	8006d07a 	srli	r3,r16,1
 400b988:	902097fa 	slli	r16,r18,31
 400b98c:	20a4b03a 	or	r18,r4,r2
 400b990:	003f0106 	br	400b598 <__alt_data_end+0xff00b598>
 400b994:	e4bff51e 	bne	fp,r18,400b96c <__alt_data_end+0xff00b96c>
 400b998:	85bff22e 	bgeu	r16,r22,400b964 <__alt_data_end+0xff00b964>
 400b99c:	e0c7c83a 	sub	r3,fp,r3
 400b9a0:	1023883a 	mov	r17,r2
 400b9a4:	003f4606 	br	400b6c0 <__alt_data_end+0xff00b6c0>
 400b9a8:	100f883a 	mov	r7,r2
 400b9ac:	003f2b06 	br	400b65c <__alt_data_end+0xff00b65c>
 400b9b0:	180d883a 	mov	r6,r3
 400b9b4:	003f1306 	br	400b604 <__alt_data_end+0xff00b604>
 400b9b8:	813fe436 	bltu	r16,r4,400b94c <__alt_data_end+0xff00b94c>
 400b9bc:	0007883a 	mov	r3,zero
 400b9c0:	003f3f06 	br	400b6c0 <__alt_data_end+0xff00b6c0>
 400b9c4:	ba402c36 	bltu	r23,r9,400ba78 <__divdf3+0x810>
 400b9c8:	4dc05426 	beq	r9,r23,400bb1c <__divdf3+0x8b4>
 400b9cc:	1011883a 	mov	r8,r2
 400b9d0:	003f8906 	br	400b7f8 <__alt_data_end+0xff00b7f8>
 400b9d4:	023fffc4 	movi	r8,-1
 400b9d8:	003f8806 	br	400b7fc <__alt_data_end+0xff00b7fc>
 400b9dc:	1811883a 	mov	r8,r3
 400b9e0:	003f5406 	br	400b734 <__alt_data_end+0xff00b734>
 400b9e4:	1025883a 	mov	r18,r2
 400b9e8:	003f6d06 	br	400b7a0 <__alt_data_end+0xff00b7a0>
 400b9ec:	b827883a 	mov	r19,r23
 400b9f0:	003f8206 	br	400b7fc <__alt_data_end+0xff00b7fc>
 400b9f4:	010007c4 	movi	r4,31
 400b9f8:	20c02616 	blt	r4,r3,400ba94 <__divdf3+0x82c>
 400b9fc:	00800804 	movi	r2,32
 400ba00:	10c5c83a 	sub	r2,r2,r3
 400ba04:	888a983a 	sll	r5,r17,r2
 400ba08:	40c8d83a 	srl	r4,r8,r3
 400ba0c:	4084983a 	sll	r2,r8,r2
 400ba10:	88e2d83a 	srl	r17,r17,r3
 400ba14:	2906b03a 	or	r3,r5,r4
 400ba18:	1004c03a 	cmpne	r2,r2,zero
 400ba1c:	1886b03a 	or	r3,r3,r2
 400ba20:	188001cc 	andi	r2,r3,7
 400ba24:	10000726 	beq	r2,zero,400ba44 <__divdf3+0x7dc>
 400ba28:	188003cc 	andi	r2,r3,15
 400ba2c:	01000104 	movi	r4,4
 400ba30:	11000426 	beq	r2,r4,400ba44 <__divdf3+0x7dc>
 400ba34:	1805883a 	mov	r2,r3
 400ba38:	10c00104 	addi	r3,r2,4
 400ba3c:	1885803a 	cmpltu	r2,r3,r2
 400ba40:	88a3883a 	add	r17,r17,r2
 400ba44:	8880202c 	andhi	r2,r17,128
 400ba48:	10002726 	beq	r2,zero,400bae8 <__divdf3+0x880>
 400ba4c:	98c0004c 	andi	r3,r19,1
 400ba50:	00800044 	movi	r2,1
 400ba54:	000b883a 	mov	r5,zero
 400ba58:	0025883a 	mov	r18,zero
 400ba5c:	003e6106 	br	400b3e4 <__alt_data_end+0xff00b3e4>
 400ba60:	85a1883a 	add	r16,r16,r22
 400ba64:	8585803a 	cmpltu	r2,r16,r22
 400ba68:	1705883a 	add	r2,r2,fp
 400ba6c:	14a5883a 	add	r18,r2,r18
 400ba70:	8c7fff84 	addi	r17,r17,-2
 400ba74:	003f1106 	br	400b6bc <__alt_data_end+0xff00b6bc>
 400ba78:	b589883a 	add	r4,r22,r22
 400ba7c:	25ad803a 	cmpltu	r22,r4,r22
 400ba80:	b739883a 	add	fp,r22,fp
 400ba84:	40bfff84 	addi	r2,r8,-2
 400ba88:	bf2f883a 	add	r23,r23,fp
 400ba8c:	202d883a 	mov	r22,r4
 400ba90:	003f9306 	br	400b8e0 <__alt_data_end+0xff00b8e0>
 400ba94:	013ff844 	movi	r4,-31
 400ba98:	2085c83a 	sub	r2,r4,r2
 400ba9c:	8888d83a 	srl	r4,r17,r2
 400baa0:	00800804 	movi	r2,32
 400baa4:	18802126 	beq	r3,r2,400bb2c <__divdf3+0x8c4>
 400baa8:	00801004 	movi	r2,64
 400baac:	10c5c83a 	sub	r2,r2,r3
 400bab0:	8884983a 	sll	r2,r17,r2
 400bab4:	1204b03a 	or	r2,r2,r8
 400bab8:	1004c03a 	cmpne	r2,r2,zero
 400babc:	2084b03a 	or	r2,r4,r2
 400bac0:	144001cc 	andi	r17,r2,7
 400bac4:	88000d1e 	bne	r17,zero,400bafc <__divdf3+0x894>
 400bac8:	000b883a 	mov	r5,zero
 400bacc:	1024d0fa 	srli	r18,r2,3
 400bad0:	98c0004c 	andi	r3,r19,1
 400bad4:	0005883a 	mov	r2,zero
 400bad8:	9464b03a 	or	r18,r18,r17
 400badc:	003e4106 	br	400b3e4 <__alt_data_end+0xff00b3e4>
 400bae0:	1007883a 	mov	r3,r2
 400bae4:	0023883a 	mov	r17,zero
 400bae8:	880a927a 	slli	r5,r17,9
 400baec:	1805883a 	mov	r2,r3
 400baf0:	8822977a 	slli	r17,r17,29
 400baf4:	280ad33a 	srli	r5,r5,12
 400baf8:	003ff406 	br	400bacc <__alt_data_end+0xff00bacc>
 400bafc:	10c003cc 	andi	r3,r2,15
 400bb00:	01000104 	movi	r4,4
 400bb04:	193ff626 	beq	r3,r4,400bae0 <__alt_data_end+0xff00bae0>
 400bb08:	0023883a 	mov	r17,zero
 400bb0c:	003fca06 	br	400ba38 <__alt_data_end+0xff00ba38>
 400bb10:	813fd336 	bltu	r16,r4,400ba60 <__alt_data_end+0xff00ba60>
 400bb14:	1023883a 	mov	r17,r2
 400bb18:	003fa806 	br	400b9bc <__alt_data_end+0xff00b9bc>
 400bb1c:	b0ffd636 	bltu	r22,r3,400ba78 <__alt_data_end+0xff00ba78>
 400bb20:	1011883a 	mov	r8,r2
 400bb24:	b0ff341e 	bne	r22,r3,400b7f8 <__alt_data_end+0xff00b7f8>
 400bb28:	003f3406 	br	400b7fc <__alt_data_end+0xff00b7fc>
 400bb2c:	0005883a 	mov	r2,zero
 400bb30:	003fe006 	br	400bab4 <__alt_data_end+0xff00bab4>
 400bb34:	00800434 	movhi	r2,16
 400bb38:	89400234 	orhi	r5,r17,8
 400bb3c:	10bfffc4 	addi	r2,r2,-1
 400bb40:	b807883a 	mov	r3,r23
 400bb44:	288a703a 	and	r5,r5,r2
 400bb48:	4025883a 	mov	r18,r8
 400bb4c:	003e8206 	br	400b558 <__alt_data_end+0xff00b558>

0400bb50 <__eqdf2>:
 400bb50:	2804d53a 	srli	r2,r5,20
 400bb54:	3806d53a 	srli	r3,r7,20
 400bb58:	02000434 	movhi	r8,16
 400bb5c:	423fffc4 	addi	r8,r8,-1
 400bb60:	1081ffcc 	andi	r2,r2,2047
 400bb64:	0281ffc4 	movi	r10,2047
 400bb68:	2a12703a 	and	r9,r5,r8
 400bb6c:	18c1ffcc 	andi	r3,r3,2047
 400bb70:	3a10703a 	and	r8,r7,r8
 400bb74:	280ad7fa 	srli	r5,r5,31
 400bb78:	380ed7fa 	srli	r7,r7,31
 400bb7c:	12801026 	beq	r2,r10,400bbc0 <__eqdf2+0x70>
 400bb80:	0281ffc4 	movi	r10,2047
 400bb84:	1a800a26 	beq	r3,r10,400bbb0 <__eqdf2+0x60>
 400bb88:	10c00226 	beq	r2,r3,400bb94 <__eqdf2+0x44>
 400bb8c:	00800044 	movi	r2,1
 400bb90:	f800283a 	ret
 400bb94:	4a3ffd1e 	bne	r9,r8,400bb8c <__alt_data_end+0xff00bb8c>
 400bb98:	21bffc1e 	bne	r4,r6,400bb8c <__alt_data_end+0xff00bb8c>
 400bb9c:	29c00c26 	beq	r5,r7,400bbd0 <__eqdf2+0x80>
 400bba0:	103ffa1e 	bne	r2,zero,400bb8c <__alt_data_end+0xff00bb8c>
 400bba4:	2244b03a 	or	r2,r4,r9
 400bba8:	1004c03a 	cmpne	r2,r2,zero
 400bbac:	f800283a 	ret
 400bbb0:	3214b03a 	or	r10,r6,r8
 400bbb4:	503ff426 	beq	r10,zero,400bb88 <__alt_data_end+0xff00bb88>
 400bbb8:	00800044 	movi	r2,1
 400bbbc:	f800283a 	ret
 400bbc0:	2254b03a 	or	r10,r4,r9
 400bbc4:	503fee26 	beq	r10,zero,400bb80 <__alt_data_end+0xff00bb80>
 400bbc8:	00800044 	movi	r2,1
 400bbcc:	f800283a 	ret
 400bbd0:	0005883a 	mov	r2,zero
 400bbd4:	f800283a 	ret

0400bbd8 <__gedf2>:
 400bbd8:	2804d53a 	srli	r2,r5,20
 400bbdc:	3806d53a 	srli	r3,r7,20
 400bbe0:	02000434 	movhi	r8,16
 400bbe4:	423fffc4 	addi	r8,r8,-1
 400bbe8:	1081ffcc 	andi	r2,r2,2047
 400bbec:	0241ffc4 	movi	r9,2047
 400bbf0:	2a14703a 	and	r10,r5,r8
 400bbf4:	18c1ffcc 	andi	r3,r3,2047
 400bbf8:	3a10703a 	and	r8,r7,r8
 400bbfc:	280ad7fa 	srli	r5,r5,31
 400bc00:	380ed7fa 	srli	r7,r7,31
 400bc04:	12401d26 	beq	r2,r9,400bc7c <__gedf2+0xa4>
 400bc08:	0241ffc4 	movi	r9,2047
 400bc0c:	1a401226 	beq	r3,r9,400bc58 <__gedf2+0x80>
 400bc10:	1000081e 	bne	r2,zero,400bc34 <__gedf2+0x5c>
 400bc14:	2296b03a 	or	r11,r4,r10
 400bc18:	5813003a 	cmpeq	r9,r11,zero
 400bc1c:	1800091e 	bne	r3,zero,400bc44 <__gedf2+0x6c>
 400bc20:	3218b03a 	or	r12,r6,r8
 400bc24:	6000071e 	bne	r12,zero,400bc44 <__gedf2+0x6c>
 400bc28:	0005883a 	mov	r2,zero
 400bc2c:	5800101e 	bne	r11,zero,400bc70 <__gedf2+0x98>
 400bc30:	f800283a 	ret
 400bc34:	18000c1e 	bne	r3,zero,400bc68 <__gedf2+0x90>
 400bc38:	3212b03a 	or	r9,r6,r8
 400bc3c:	48000c26 	beq	r9,zero,400bc70 <__gedf2+0x98>
 400bc40:	0013883a 	mov	r9,zero
 400bc44:	39c03fcc 	andi	r7,r7,255
 400bc48:	48000826 	beq	r9,zero,400bc6c <__gedf2+0x94>
 400bc4c:	38000926 	beq	r7,zero,400bc74 <__gedf2+0x9c>
 400bc50:	00800044 	movi	r2,1
 400bc54:	f800283a 	ret
 400bc58:	3212b03a 	or	r9,r6,r8
 400bc5c:	483fec26 	beq	r9,zero,400bc10 <__alt_data_end+0xff00bc10>
 400bc60:	00bfff84 	movi	r2,-2
 400bc64:	f800283a 	ret
 400bc68:	39c03fcc 	andi	r7,r7,255
 400bc6c:	29c00626 	beq	r5,r7,400bc88 <__gedf2+0xb0>
 400bc70:	283ff726 	beq	r5,zero,400bc50 <__alt_data_end+0xff00bc50>
 400bc74:	00bfffc4 	movi	r2,-1
 400bc78:	f800283a 	ret
 400bc7c:	2292b03a 	or	r9,r4,r10
 400bc80:	483fe126 	beq	r9,zero,400bc08 <__alt_data_end+0xff00bc08>
 400bc84:	003ff606 	br	400bc60 <__alt_data_end+0xff00bc60>
 400bc88:	18bff916 	blt	r3,r2,400bc70 <__alt_data_end+0xff00bc70>
 400bc8c:	10c00316 	blt	r2,r3,400bc9c <__gedf2+0xc4>
 400bc90:	42bff736 	bltu	r8,r10,400bc70 <__alt_data_end+0xff00bc70>
 400bc94:	52000326 	beq	r10,r8,400bca4 <__gedf2+0xcc>
 400bc98:	5200042e 	bgeu	r10,r8,400bcac <__gedf2+0xd4>
 400bc9c:	283fec1e 	bne	r5,zero,400bc50 <__alt_data_end+0xff00bc50>
 400bca0:	003ff406 	br	400bc74 <__alt_data_end+0xff00bc74>
 400bca4:	313ff236 	bltu	r6,r4,400bc70 <__alt_data_end+0xff00bc70>
 400bca8:	21bffc36 	bltu	r4,r6,400bc9c <__alt_data_end+0xff00bc9c>
 400bcac:	0005883a 	mov	r2,zero
 400bcb0:	f800283a 	ret

0400bcb4 <__ledf2>:
 400bcb4:	2804d53a 	srli	r2,r5,20
 400bcb8:	3810d53a 	srli	r8,r7,20
 400bcbc:	00c00434 	movhi	r3,16
 400bcc0:	18ffffc4 	addi	r3,r3,-1
 400bcc4:	1081ffcc 	andi	r2,r2,2047
 400bcc8:	0241ffc4 	movi	r9,2047
 400bccc:	28d4703a 	and	r10,r5,r3
 400bcd0:	4201ffcc 	andi	r8,r8,2047
 400bcd4:	38c6703a 	and	r3,r7,r3
 400bcd8:	280ad7fa 	srli	r5,r5,31
 400bcdc:	380ed7fa 	srli	r7,r7,31
 400bce0:	12401f26 	beq	r2,r9,400bd60 <__ledf2+0xac>
 400bce4:	0241ffc4 	movi	r9,2047
 400bce8:	42401426 	beq	r8,r9,400bd3c <__ledf2+0x88>
 400bcec:	1000091e 	bne	r2,zero,400bd14 <__ledf2+0x60>
 400bcf0:	2296b03a 	or	r11,r4,r10
 400bcf4:	5813003a 	cmpeq	r9,r11,zero
 400bcf8:	29403fcc 	andi	r5,r5,255
 400bcfc:	40000a1e 	bne	r8,zero,400bd28 <__ledf2+0x74>
 400bd00:	30d8b03a 	or	r12,r6,r3
 400bd04:	6000081e 	bne	r12,zero,400bd28 <__ledf2+0x74>
 400bd08:	0005883a 	mov	r2,zero
 400bd0c:	5800111e 	bne	r11,zero,400bd54 <__ledf2+0xa0>
 400bd10:	f800283a 	ret
 400bd14:	29403fcc 	andi	r5,r5,255
 400bd18:	40000c1e 	bne	r8,zero,400bd4c <__ledf2+0x98>
 400bd1c:	30d2b03a 	or	r9,r6,r3
 400bd20:	48000c26 	beq	r9,zero,400bd54 <__ledf2+0xa0>
 400bd24:	0013883a 	mov	r9,zero
 400bd28:	39c03fcc 	andi	r7,r7,255
 400bd2c:	48000826 	beq	r9,zero,400bd50 <__ledf2+0x9c>
 400bd30:	38001126 	beq	r7,zero,400bd78 <__ledf2+0xc4>
 400bd34:	00800044 	movi	r2,1
 400bd38:	f800283a 	ret
 400bd3c:	30d2b03a 	or	r9,r6,r3
 400bd40:	483fea26 	beq	r9,zero,400bcec <__alt_data_end+0xff00bcec>
 400bd44:	00800084 	movi	r2,2
 400bd48:	f800283a 	ret
 400bd4c:	39c03fcc 	andi	r7,r7,255
 400bd50:	39400726 	beq	r7,r5,400bd70 <__ledf2+0xbc>
 400bd54:	2800081e 	bne	r5,zero,400bd78 <__ledf2+0xc4>
 400bd58:	00800044 	movi	r2,1
 400bd5c:	f800283a 	ret
 400bd60:	2292b03a 	or	r9,r4,r10
 400bd64:	483fdf26 	beq	r9,zero,400bce4 <__alt_data_end+0xff00bce4>
 400bd68:	00800084 	movi	r2,2
 400bd6c:	f800283a 	ret
 400bd70:	4080030e 	bge	r8,r2,400bd80 <__ledf2+0xcc>
 400bd74:	383fef26 	beq	r7,zero,400bd34 <__alt_data_end+0xff00bd34>
 400bd78:	00bfffc4 	movi	r2,-1
 400bd7c:	f800283a 	ret
 400bd80:	123feb16 	blt	r2,r8,400bd30 <__alt_data_end+0xff00bd30>
 400bd84:	1abff336 	bltu	r3,r10,400bd54 <__alt_data_end+0xff00bd54>
 400bd88:	50c00326 	beq	r10,r3,400bd98 <__ledf2+0xe4>
 400bd8c:	50c0042e 	bgeu	r10,r3,400bda0 <__ledf2+0xec>
 400bd90:	283fe81e 	bne	r5,zero,400bd34 <__alt_data_end+0xff00bd34>
 400bd94:	003ff806 	br	400bd78 <__alt_data_end+0xff00bd78>
 400bd98:	313fee36 	bltu	r6,r4,400bd54 <__alt_data_end+0xff00bd54>
 400bd9c:	21bffc36 	bltu	r4,r6,400bd90 <__alt_data_end+0xff00bd90>
 400bda0:	0005883a 	mov	r2,zero
 400bda4:	f800283a 	ret

0400bda8 <__muldf3>:
 400bda8:	defff304 	addi	sp,sp,-52
 400bdac:	2804d53a 	srli	r2,r5,20
 400bdb0:	dd800915 	stw	r22,36(sp)
 400bdb4:	282cd7fa 	srli	r22,r5,31
 400bdb8:	dc000315 	stw	r16,12(sp)
 400bdbc:	04000434 	movhi	r16,16
 400bdc0:	dd400815 	stw	r21,32(sp)
 400bdc4:	dc800515 	stw	r18,20(sp)
 400bdc8:	843fffc4 	addi	r16,r16,-1
 400bdcc:	dfc00c15 	stw	ra,48(sp)
 400bdd0:	df000b15 	stw	fp,44(sp)
 400bdd4:	ddc00a15 	stw	r23,40(sp)
 400bdd8:	dd000715 	stw	r20,28(sp)
 400bddc:	dcc00615 	stw	r19,24(sp)
 400bde0:	dc400415 	stw	r17,16(sp)
 400bde4:	1481ffcc 	andi	r18,r2,2047
 400bde8:	2c20703a 	and	r16,r5,r16
 400bdec:	b02b883a 	mov	r21,r22
 400bdf0:	b2403fcc 	andi	r9,r22,255
 400bdf4:	90006026 	beq	r18,zero,400bf78 <__muldf3+0x1d0>
 400bdf8:	0081ffc4 	movi	r2,2047
 400bdfc:	2029883a 	mov	r20,r4
 400be00:	90803626 	beq	r18,r2,400bedc <__muldf3+0x134>
 400be04:	80800434 	orhi	r2,r16,16
 400be08:	100490fa 	slli	r2,r2,3
 400be0c:	2020d77a 	srli	r16,r4,29
 400be10:	202890fa 	slli	r20,r4,3
 400be14:	94bf0044 	addi	r18,r18,-1023
 400be18:	80a0b03a 	or	r16,r16,r2
 400be1c:	0027883a 	mov	r19,zero
 400be20:	0039883a 	mov	fp,zero
 400be24:	3804d53a 	srli	r2,r7,20
 400be28:	382ed7fa 	srli	r23,r7,31
 400be2c:	04400434 	movhi	r17,16
 400be30:	8c7fffc4 	addi	r17,r17,-1
 400be34:	1081ffcc 	andi	r2,r2,2047
 400be38:	3011883a 	mov	r8,r6
 400be3c:	3c62703a 	and	r17,r7,r17
 400be40:	ba803fcc 	andi	r10,r23,255
 400be44:	10006d26 	beq	r2,zero,400bffc <__muldf3+0x254>
 400be48:	00c1ffc4 	movi	r3,2047
 400be4c:	10c06526 	beq	r2,r3,400bfe4 <__muldf3+0x23c>
 400be50:	88c00434 	orhi	r3,r17,16
 400be54:	180690fa 	slli	r3,r3,3
 400be58:	3022d77a 	srli	r17,r6,29
 400be5c:	301090fa 	slli	r8,r6,3
 400be60:	10bf0044 	addi	r2,r2,-1023
 400be64:	88e2b03a 	or	r17,r17,r3
 400be68:	000b883a 	mov	r5,zero
 400be6c:	9085883a 	add	r2,r18,r2
 400be70:	2cc8b03a 	or	r4,r5,r19
 400be74:	00c003c4 	movi	r3,15
 400be78:	bdacf03a 	xor	r22,r23,r22
 400be7c:	12c00044 	addi	r11,r2,1
 400be80:	19009936 	bltu	r3,r4,400c0e8 <__muldf3+0x340>
 400be84:	200890ba 	slli	r4,r4,2
 400be88:	00c10074 	movhi	r3,1025
 400be8c:	18efa704 	addi	r3,r3,-16740
 400be90:	20c9883a 	add	r4,r4,r3
 400be94:	20c00017 	ldw	r3,0(r4)
 400be98:	1800683a 	jmp	r3
 400be9c:	0400c0e8 	cmpgeui	r16,zero,771
 400bea0:	0400befc 	xorhi	r16,zero,763
 400bea4:	0400befc 	xorhi	r16,zero,763
 400bea8:	0400bef8 	rdprs	r16,zero,763
 400beac:	0400c0c4 	movi	r16,771
 400beb0:	0400c0c4 	movi	r16,771
 400beb4:	0400c0ac 	andhi	r16,zero,770
 400beb8:	0400bef8 	rdprs	r16,zero,763
 400bebc:	0400c0c4 	movi	r16,771
 400bec0:	0400c0ac 	andhi	r16,zero,770
 400bec4:	0400c0c4 	movi	r16,771
 400bec8:	0400bef8 	rdprs	r16,zero,763
 400becc:	0400c0d4 	movui	r16,771
 400bed0:	0400c0d4 	movui	r16,771
 400bed4:	0400c0d4 	movui	r16,771
 400bed8:	0400c2f0 	cmpltui	r16,zero,779
 400bedc:	2404b03a 	or	r2,r4,r16
 400bee0:	10006f1e 	bne	r2,zero,400c0a0 <__muldf3+0x2f8>
 400bee4:	04c00204 	movi	r19,8
 400bee8:	0021883a 	mov	r16,zero
 400beec:	0029883a 	mov	r20,zero
 400bef0:	07000084 	movi	fp,2
 400bef4:	003fcb06 	br	400be24 <__alt_data_end+0xff00be24>
 400bef8:	502d883a 	mov	r22,r10
 400befc:	00800084 	movi	r2,2
 400bf00:	28805726 	beq	r5,r2,400c060 <__muldf3+0x2b8>
 400bf04:	008000c4 	movi	r2,3
 400bf08:	28816626 	beq	r5,r2,400c4a4 <__muldf3+0x6fc>
 400bf0c:	00800044 	movi	r2,1
 400bf10:	2881411e 	bne	r5,r2,400c418 <__muldf3+0x670>
 400bf14:	b02b883a 	mov	r21,r22
 400bf18:	0005883a 	mov	r2,zero
 400bf1c:	000b883a 	mov	r5,zero
 400bf20:	0029883a 	mov	r20,zero
 400bf24:	1004953a 	slli	r2,r2,20
 400bf28:	a8c03fcc 	andi	r3,r21,255
 400bf2c:	04400434 	movhi	r17,16
 400bf30:	8c7fffc4 	addi	r17,r17,-1
 400bf34:	180697fa 	slli	r3,r3,31
 400bf38:	2c4a703a 	and	r5,r5,r17
 400bf3c:	288ab03a 	or	r5,r5,r2
 400bf40:	28c6b03a 	or	r3,r5,r3
 400bf44:	a005883a 	mov	r2,r20
 400bf48:	dfc00c17 	ldw	ra,48(sp)
 400bf4c:	df000b17 	ldw	fp,44(sp)
 400bf50:	ddc00a17 	ldw	r23,40(sp)
 400bf54:	dd800917 	ldw	r22,36(sp)
 400bf58:	dd400817 	ldw	r21,32(sp)
 400bf5c:	dd000717 	ldw	r20,28(sp)
 400bf60:	dcc00617 	ldw	r19,24(sp)
 400bf64:	dc800517 	ldw	r18,20(sp)
 400bf68:	dc400417 	ldw	r17,16(sp)
 400bf6c:	dc000317 	ldw	r16,12(sp)
 400bf70:	dec00d04 	addi	sp,sp,52
 400bf74:	f800283a 	ret
 400bf78:	2404b03a 	or	r2,r4,r16
 400bf7c:	2027883a 	mov	r19,r4
 400bf80:	10004226 	beq	r2,zero,400c08c <__muldf3+0x2e4>
 400bf84:	8000fc26 	beq	r16,zero,400c378 <__muldf3+0x5d0>
 400bf88:	8009883a 	mov	r4,r16
 400bf8c:	d9800215 	stw	r6,8(sp)
 400bf90:	d9c00015 	stw	r7,0(sp)
 400bf94:	da400115 	stw	r9,4(sp)
 400bf98:	400cfc00 	call	400cfc0 <__clzsi2>
 400bf9c:	d9800217 	ldw	r6,8(sp)
 400bfa0:	d9c00017 	ldw	r7,0(sp)
 400bfa4:	da400117 	ldw	r9,4(sp)
 400bfa8:	113ffd44 	addi	r4,r2,-11
 400bfac:	00c00704 	movi	r3,28
 400bfb0:	1900ed16 	blt	r3,r4,400c368 <__muldf3+0x5c0>
 400bfb4:	00c00744 	movi	r3,29
 400bfb8:	147ffe04 	addi	r17,r2,-8
 400bfbc:	1907c83a 	sub	r3,r3,r4
 400bfc0:	8460983a 	sll	r16,r16,r17
 400bfc4:	98c6d83a 	srl	r3,r19,r3
 400bfc8:	9c68983a 	sll	r20,r19,r17
 400bfcc:	1c20b03a 	or	r16,r3,r16
 400bfd0:	1080fcc4 	addi	r2,r2,1011
 400bfd4:	00a5c83a 	sub	r18,zero,r2
 400bfd8:	0027883a 	mov	r19,zero
 400bfdc:	0039883a 	mov	fp,zero
 400bfe0:	003f9006 	br	400be24 <__alt_data_end+0xff00be24>
 400bfe4:	3446b03a 	or	r3,r6,r17
 400bfe8:	1800261e 	bne	r3,zero,400c084 <__muldf3+0x2dc>
 400bfec:	0023883a 	mov	r17,zero
 400bff0:	0011883a 	mov	r8,zero
 400bff4:	01400084 	movi	r5,2
 400bff8:	003f9c06 	br	400be6c <__alt_data_end+0xff00be6c>
 400bffc:	3446b03a 	or	r3,r6,r17
 400c000:	18001c26 	beq	r3,zero,400c074 <__muldf3+0x2cc>
 400c004:	8800ce26 	beq	r17,zero,400c340 <__muldf3+0x598>
 400c008:	8809883a 	mov	r4,r17
 400c00c:	d9800215 	stw	r6,8(sp)
 400c010:	da400115 	stw	r9,4(sp)
 400c014:	da800015 	stw	r10,0(sp)
 400c018:	400cfc00 	call	400cfc0 <__clzsi2>
 400c01c:	d9800217 	ldw	r6,8(sp)
 400c020:	da400117 	ldw	r9,4(sp)
 400c024:	da800017 	ldw	r10,0(sp)
 400c028:	113ffd44 	addi	r4,r2,-11
 400c02c:	00c00704 	movi	r3,28
 400c030:	1900bf16 	blt	r3,r4,400c330 <__muldf3+0x588>
 400c034:	00c00744 	movi	r3,29
 400c038:	123ffe04 	addi	r8,r2,-8
 400c03c:	1907c83a 	sub	r3,r3,r4
 400c040:	8a22983a 	sll	r17,r17,r8
 400c044:	30c6d83a 	srl	r3,r6,r3
 400c048:	3210983a 	sll	r8,r6,r8
 400c04c:	1c62b03a 	or	r17,r3,r17
 400c050:	1080fcc4 	addi	r2,r2,1011
 400c054:	0085c83a 	sub	r2,zero,r2
 400c058:	000b883a 	mov	r5,zero
 400c05c:	003f8306 	br	400be6c <__alt_data_end+0xff00be6c>
 400c060:	b02b883a 	mov	r21,r22
 400c064:	0081ffc4 	movi	r2,2047
 400c068:	000b883a 	mov	r5,zero
 400c06c:	0029883a 	mov	r20,zero
 400c070:	003fac06 	br	400bf24 <__alt_data_end+0xff00bf24>
 400c074:	0023883a 	mov	r17,zero
 400c078:	0011883a 	mov	r8,zero
 400c07c:	01400044 	movi	r5,1
 400c080:	003f7a06 	br	400be6c <__alt_data_end+0xff00be6c>
 400c084:	014000c4 	movi	r5,3
 400c088:	003f7806 	br	400be6c <__alt_data_end+0xff00be6c>
 400c08c:	04c00104 	movi	r19,4
 400c090:	0021883a 	mov	r16,zero
 400c094:	0029883a 	mov	r20,zero
 400c098:	07000044 	movi	fp,1
 400c09c:	003f6106 	br	400be24 <__alt_data_end+0xff00be24>
 400c0a0:	04c00304 	movi	r19,12
 400c0a4:	070000c4 	movi	fp,3
 400c0a8:	003f5e06 	br	400be24 <__alt_data_end+0xff00be24>
 400c0ac:	01400434 	movhi	r5,16
 400c0b0:	002b883a 	mov	r21,zero
 400c0b4:	297fffc4 	addi	r5,r5,-1
 400c0b8:	053fffc4 	movi	r20,-1
 400c0bc:	0081ffc4 	movi	r2,2047
 400c0c0:	003f9806 	br	400bf24 <__alt_data_end+0xff00bf24>
 400c0c4:	8023883a 	mov	r17,r16
 400c0c8:	a011883a 	mov	r8,r20
 400c0cc:	e00b883a 	mov	r5,fp
 400c0d0:	003f8a06 	br	400befc <__alt_data_end+0xff00befc>
 400c0d4:	8023883a 	mov	r17,r16
 400c0d8:	a011883a 	mov	r8,r20
 400c0dc:	482d883a 	mov	r22,r9
 400c0e0:	e00b883a 	mov	r5,fp
 400c0e4:	003f8506 	br	400befc <__alt_data_end+0xff00befc>
 400c0e8:	a00ad43a 	srli	r5,r20,16
 400c0ec:	401ad43a 	srli	r13,r8,16
 400c0f0:	a53fffcc 	andi	r20,r20,65535
 400c0f4:	423fffcc 	andi	r8,r8,65535
 400c0f8:	4519383a 	mul	r12,r8,r20
 400c0fc:	4147383a 	mul	r3,r8,r5
 400c100:	6d09383a 	mul	r4,r13,r20
 400c104:	600cd43a 	srli	r6,r12,16
 400c108:	2b5d383a 	mul	r14,r5,r13
 400c10c:	20c9883a 	add	r4,r4,r3
 400c110:	310d883a 	add	r6,r6,r4
 400c114:	30c0022e 	bgeu	r6,r3,400c120 <__muldf3+0x378>
 400c118:	00c00074 	movhi	r3,1
 400c11c:	70dd883a 	add	r14,r14,r3
 400c120:	8826d43a 	srli	r19,r17,16
 400c124:	8bffffcc 	andi	r15,r17,65535
 400c128:	7d23383a 	mul	r17,r15,r20
 400c12c:	7949383a 	mul	r4,r15,r5
 400c130:	9d29383a 	mul	r20,r19,r20
 400c134:	8814d43a 	srli	r10,r17,16
 400c138:	3012943a 	slli	r9,r6,16
 400c13c:	a129883a 	add	r20,r20,r4
 400c140:	633fffcc 	andi	r12,r12,65535
 400c144:	5515883a 	add	r10,r10,r20
 400c148:	3006d43a 	srli	r3,r6,16
 400c14c:	4b13883a 	add	r9,r9,r12
 400c150:	2ccb383a 	mul	r5,r5,r19
 400c154:	5100022e 	bgeu	r10,r4,400c160 <__muldf3+0x3b8>
 400c158:	01000074 	movhi	r4,1
 400c15c:	290b883a 	add	r5,r5,r4
 400c160:	802ad43a 	srli	r21,r16,16
 400c164:	843fffcc 	andi	r16,r16,65535
 400c168:	440d383a 	mul	r6,r8,r16
 400c16c:	4565383a 	mul	r18,r8,r21
 400c170:	8349383a 	mul	r4,r16,r13
 400c174:	500e943a 	slli	r7,r10,16
 400c178:	3010d43a 	srli	r8,r6,16
 400c17c:	5028d43a 	srli	r20,r10,16
 400c180:	2489883a 	add	r4,r4,r18
 400c184:	8abfffcc 	andi	r10,r17,65535
 400c188:	3a95883a 	add	r10,r7,r10
 400c18c:	4119883a 	add	r12,r8,r4
 400c190:	a169883a 	add	r20,r20,r5
 400c194:	1a87883a 	add	r3,r3,r10
 400c198:	6d5b383a 	mul	r13,r13,r21
 400c19c:	6480022e 	bgeu	r12,r18,400c1a8 <__muldf3+0x400>
 400c1a0:	01000074 	movhi	r4,1
 400c1a4:	691b883a 	add	r13,r13,r4
 400c1a8:	7c25383a 	mul	r18,r15,r16
 400c1ac:	7d4b383a 	mul	r5,r15,r21
 400c1b0:	84cf383a 	mul	r7,r16,r19
 400c1b4:	901ed43a 	srli	r15,r18,16
 400c1b8:	6008d43a 	srli	r4,r12,16
 400c1bc:	6010943a 	slli	r8,r12,16
 400c1c0:	394f883a 	add	r7,r7,r5
 400c1c4:	333fffcc 	andi	r12,r6,65535
 400c1c8:	79df883a 	add	r15,r15,r7
 400c1cc:	235b883a 	add	r13,r4,r13
 400c1d0:	9d63383a 	mul	r17,r19,r21
 400c1d4:	4309883a 	add	r4,r8,r12
 400c1d8:	7940022e 	bgeu	r15,r5,400c1e4 <__muldf3+0x43c>
 400c1dc:	01400074 	movhi	r5,1
 400c1e0:	8963883a 	add	r17,r17,r5
 400c1e4:	780a943a 	slli	r5,r15,16
 400c1e8:	91bfffcc 	andi	r6,r18,65535
 400c1ec:	70c7883a 	add	r3,r14,r3
 400c1f0:	298d883a 	add	r6,r5,r6
 400c1f4:	1a8f803a 	cmpltu	r7,r3,r10
 400c1f8:	350b883a 	add	r5,r6,r20
 400c1fc:	20c7883a 	add	r3,r4,r3
 400c200:	3955883a 	add	r10,r7,r5
 400c204:	1909803a 	cmpltu	r4,r3,r4
 400c208:	6a91883a 	add	r8,r13,r10
 400c20c:	780cd43a 	srli	r6,r15,16
 400c210:	2219883a 	add	r12,r4,r8
 400c214:	2d0b803a 	cmpltu	r5,r5,r20
 400c218:	51cf803a 	cmpltu	r7,r10,r7
 400c21c:	29ceb03a 	or	r7,r5,r7
 400c220:	4351803a 	cmpltu	r8,r8,r13
 400c224:	610b803a 	cmpltu	r5,r12,r4
 400c228:	4148b03a 	or	r4,r8,r5
 400c22c:	398f883a 	add	r7,r7,r6
 400c230:	3909883a 	add	r4,r7,r4
 400c234:	1810927a 	slli	r8,r3,9
 400c238:	2449883a 	add	r4,r4,r17
 400c23c:	2008927a 	slli	r4,r4,9
 400c240:	6022d5fa 	srli	r17,r12,23
 400c244:	1806d5fa 	srli	r3,r3,23
 400c248:	4252b03a 	or	r9,r8,r9
 400c24c:	600a927a 	slli	r5,r12,9
 400c250:	4810c03a 	cmpne	r8,r9,zero
 400c254:	2462b03a 	or	r17,r4,r17
 400c258:	40c6b03a 	or	r3,r8,r3
 400c25c:	8900402c 	andhi	r4,r17,256
 400c260:	1950b03a 	or	r8,r3,r5
 400c264:	20000726 	beq	r4,zero,400c284 <__muldf3+0x4dc>
 400c268:	4006d07a 	srli	r3,r8,1
 400c26c:	880497fa 	slli	r2,r17,31
 400c270:	4200004c 	andi	r8,r8,1
 400c274:	8822d07a 	srli	r17,r17,1
 400c278:	1a10b03a 	or	r8,r3,r8
 400c27c:	1210b03a 	or	r8,r2,r8
 400c280:	5805883a 	mov	r2,r11
 400c284:	1140ffc4 	addi	r5,r2,1023
 400c288:	0140440e 	bge	zero,r5,400c39c <__muldf3+0x5f4>
 400c28c:	40c001cc 	andi	r3,r8,7
 400c290:	18000726 	beq	r3,zero,400c2b0 <__muldf3+0x508>
 400c294:	40c003cc 	andi	r3,r8,15
 400c298:	01000104 	movi	r4,4
 400c29c:	19000426 	beq	r3,r4,400c2b0 <__muldf3+0x508>
 400c2a0:	4107883a 	add	r3,r8,r4
 400c2a4:	1a11803a 	cmpltu	r8,r3,r8
 400c2a8:	8a23883a 	add	r17,r17,r8
 400c2ac:	1811883a 	mov	r8,r3
 400c2b0:	88c0402c 	andhi	r3,r17,256
 400c2b4:	18000426 	beq	r3,zero,400c2c8 <__muldf3+0x520>
 400c2b8:	11410004 	addi	r5,r2,1024
 400c2bc:	00bfc034 	movhi	r2,65280
 400c2c0:	10bfffc4 	addi	r2,r2,-1
 400c2c4:	88a2703a 	and	r17,r17,r2
 400c2c8:	0081ff84 	movi	r2,2046
 400c2cc:	117f6416 	blt	r2,r5,400c060 <__alt_data_end+0xff00c060>
 400c2d0:	8828977a 	slli	r20,r17,29
 400c2d4:	4010d0fa 	srli	r8,r8,3
 400c2d8:	8822927a 	slli	r17,r17,9
 400c2dc:	2881ffcc 	andi	r2,r5,2047
 400c2e0:	a228b03a 	or	r20,r20,r8
 400c2e4:	880ad33a 	srli	r5,r17,12
 400c2e8:	b02b883a 	mov	r21,r22
 400c2ec:	003f0d06 	br	400bf24 <__alt_data_end+0xff00bf24>
 400c2f0:	8080022c 	andhi	r2,r16,8
 400c2f4:	10000926 	beq	r2,zero,400c31c <__muldf3+0x574>
 400c2f8:	8880022c 	andhi	r2,r17,8
 400c2fc:	1000071e 	bne	r2,zero,400c31c <__muldf3+0x574>
 400c300:	00800434 	movhi	r2,16
 400c304:	89400234 	orhi	r5,r17,8
 400c308:	10bfffc4 	addi	r2,r2,-1
 400c30c:	b82b883a 	mov	r21,r23
 400c310:	288a703a 	and	r5,r5,r2
 400c314:	4029883a 	mov	r20,r8
 400c318:	003f6806 	br	400c0bc <__alt_data_end+0xff00c0bc>
 400c31c:	00800434 	movhi	r2,16
 400c320:	81400234 	orhi	r5,r16,8
 400c324:	10bfffc4 	addi	r2,r2,-1
 400c328:	288a703a 	and	r5,r5,r2
 400c32c:	003f6306 	br	400c0bc <__alt_data_end+0xff00c0bc>
 400c330:	147ff604 	addi	r17,r2,-40
 400c334:	3462983a 	sll	r17,r6,r17
 400c338:	0011883a 	mov	r8,zero
 400c33c:	003f4406 	br	400c050 <__alt_data_end+0xff00c050>
 400c340:	3009883a 	mov	r4,r6
 400c344:	d9800215 	stw	r6,8(sp)
 400c348:	da400115 	stw	r9,4(sp)
 400c34c:	da800015 	stw	r10,0(sp)
 400c350:	400cfc00 	call	400cfc0 <__clzsi2>
 400c354:	10800804 	addi	r2,r2,32
 400c358:	da800017 	ldw	r10,0(sp)
 400c35c:	da400117 	ldw	r9,4(sp)
 400c360:	d9800217 	ldw	r6,8(sp)
 400c364:	003f3006 	br	400c028 <__alt_data_end+0xff00c028>
 400c368:	143ff604 	addi	r16,r2,-40
 400c36c:	9c20983a 	sll	r16,r19,r16
 400c370:	0029883a 	mov	r20,zero
 400c374:	003f1606 	br	400bfd0 <__alt_data_end+0xff00bfd0>
 400c378:	d9800215 	stw	r6,8(sp)
 400c37c:	d9c00015 	stw	r7,0(sp)
 400c380:	da400115 	stw	r9,4(sp)
 400c384:	400cfc00 	call	400cfc0 <__clzsi2>
 400c388:	10800804 	addi	r2,r2,32
 400c38c:	da400117 	ldw	r9,4(sp)
 400c390:	d9c00017 	ldw	r7,0(sp)
 400c394:	d9800217 	ldw	r6,8(sp)
 400c398:	003f0306 	br	400bfa8 <__alt_data_end+0xff00bfa8>
 400c39c:	00c00044 	movi	r3,1
 400c3a0:	1947c83a 	sub	r3,r3,r5
 400c3a4:	00800e04 	movi	r2,56
 400c3a8:	10feda16 	blt	r2,r3,400bf14 <__alt_data_end+0xff00bf14>
 400c3ac:	008007c4 	movi	r2,31
 400c3b0:	10c01b16 	blt	r2,r3,400c420 <__muldf3+0x678>
 400c3b4:	00800804 	movi	r2,32
 400c3b8:	10c5c83a 	sub	r2,r2,r3
 400c3bc:	888a983a 	sll	r5,r17,r2
 400c3c0:	40c8d83a 	srl	r4,r8,r3
 400c3c4:	4084983a 	sll	r2,r8,r2
 400c3c8:	88e2d83a 	srl	r17,r17,r3
 400c3cc:	2906b03a 	or	r3,r5,r4
 400c3d0:	1004c03a 	cmpne	r2,r2,zero
 400c3d4:	1886b03a 	or	r3,r3,r2
 400c3d8:	188001cc 	andi	r2,r3,7
 400c3dc:	10000726 	beq	r2,zero,400c3fc <__muldf3+0x654>
 400c3e0:	188003cc 	andi	r2,r3,15
 400c3e4:	01000104 	movi	r4,4
 400c3e8:	11000426 	beq	r2,r4,400c3fc <__muldf3+0x654>
 400c3ec:	1805883a 	mov	r2,r3
 400c3f0:	10c00104 	addi	r3,r2,4
 400c3f4:	1885803a 	cmpltu	r2,r3,r2
 400c3f8:	88a3883a 	add	r17,r17,r2
 400c3fc:	8880202c 	andhi	r2,r17,128
 400c400:	10001c26 	beq	r2,zero,400c474 <__muldf3+0x6cc>
 400c404:	b02b883a 	mov	r21,r22
 400c408:	00800044 	movi	r2,1
 400c40c:	000b883a 	mov	r5,zero
 400c410:	0029883a 	mov	r20,zero
 400c414:	003ec306 	br	400bf24 <__alt_data_end+0xff00bf24>
 400c418:	5805883a 	mov	r2,r11
 400c41c:	003f9906 	br	400c284 <__alt_data_end+0xff00c284>
 400c420:	00bff844 	movi	r2,-31
 400c424:	1145c83a 	sub	r2,r2,r5
 400c428:	8888d83a 	srl	r4,r17,r2
 400c42c:	00800804 	movi	r2,32
 400c430:	18801a26 	beq	r3,r2,400c49c <__muldf3+0x6f4>
 400c434:	00801004 	movi	r2,64
 400c438:	10c5c83a 	sub	r2,r2,r3
 400c43c:	8884983a 	sll	r2,r17,r2
 400c440:	1204b03a 	or	r2,r2,r8
 400c444:	1004c03a 	cmpne	r2,r2,zero
 400c448:	2084b03a 	or	r2,r4,r2
 400c44c:	144001cc 	andi	r17,r2,7
 400c450:	88000d1e 	bne	r17,zero,400c488 <__muldf3+0x6e0>
 400c454:	000b883a 	mov	r5,zero
 400c458:	1028d0fa 	srli	r20,r2,3
 400c45c:	b02b883a 	mov	r21,r22
 400c460:	0005883a 	mov	r2,zero
 400c464:	a468b03a 	or	r20,r20,r17
 400c468:	003eae06 	br	400bf24 <__alt_data_end+0xff00bf24>
 400c46c:	1007883a 	mov	r3,r2
 400c470:	0023883a 	mov	r17,zero
 400c474:	880a927a 	slli	r5,r17,9
 400c478:	1805883a 	mov	r2,r3
 400c47c:	8822977a 	slli	r17,r17,29
 400c480:	280ad33a 	srli	r5,r5,12
 400c484:	003ff406 	br	400c458 <__alt_data_end+0xff00c458>
 400c488:	10c003cc 	andi	r3,r2,15
 400c48c:	01000104 	movi	r4,4
 400c490:	193ff626 	beq	r3,r4,400c46c <__alt_data_end+0xff00c46c>
 400c494:	0023883a 	mov	r17,zero
 400c498:	003fd506 	br	400c3f0 <__alt_data_end+0xff00c3f0>
 400c49c:	0005883a 	mov	r2,zero
 400c4a0:	003fe706 	br	400c440 <__alt_data_end+0xff00c440>
 400c4a4:	00800434 	movhi	r2,16
 400c4a8:	89400234 	orhi	r5,r17,8
 400c4ac:	10bfffc4 	addi	r2,r2,-1
 400c4b0:	b02b883a 	mov	r21,r22
 400c4b4:	288a703a 	and	r5,r5,r2
 400c4b8:	4029883a 	mov	r20,r8
 400c4bc:	003eff06 	br	400c0bc <__alt_data_end+0xff00c0bc>

0400c4c0 <__subdf3>:
 400c4c0:	02000434 	movhi	r8,16
 400c4c4:	423fffc4 	addi	r8,r8,-1
 400c4c8:	defffb04 	addi	sp,sp,-20
 400c4cc:	2a14703a 	and	r10,r5,r8
 400c4d0:	3812d53a 	srli	r9,r7,20
 400c4d4:	3a10703a 	and	r8,r7,r8
 400c4d8:	2006d77a 	srli	r3,r4,29
 400c4dc:	3004d77a 	srli	r2,r6,29
 400c4e0:	dc000015 	stw	r16,0(sp)
 400c4e4:	501490fa 	slli	r10,r10,3
 400c4e8:	2820d53a 	srli	r16,r5,20
 400c4ec:	401090fa 	slli	r8,r8,3
 400c4f0:	dc800215 	stw	r18,8(sp)
 400c4f4:	dc400115 	stw	r17,4(sp)
 400c4f8:	dfc00415 	stw	ra,16(sp)
 400c4fc:	202290fa 	slli	r17,r4,3
 400c500:	dcc00315 	stw	r19,12(sp)
 400c504:	4a41ffcc 	andi	r9,r9,2047
 400c508:	0101ffc4 	movi	r4,2047
 400c50c:	2824d7fa 	srli	r18,r5,31
 400c510:	8401ffcc 	andi	r16,r16,2047
 400c514:	50c6b03a 	or	r3,r10,r3
 400c518:	380ed7fa 	srli	r7,r7,31
 400c51c:	408ab03a 	or	r5,r8,r2
 400c520:	300c90fa 	slli	r6,r6,3
 400c524:	49009626 	beq	r9,r4,400c780 <__subdf3+0x2c0>
 400c528:	39c0005c 	xori	r7,r7,1
 400c52c:	8245c83a 	sub	r2,r16,r9
 400c530:	3c807426 	beq	r7,r18,400c704 <__subdf3+0x244>
 400c534:	0080af0e 	bge	zero,r2,400c7f4 <__subdf3+0x334>
 400c538:	48002a1e 	bne	r9,zero,400c5e4 <__subdf3+0x124>
 400c53c:	2988b03a 	or	r4,r5,r6
 400c540:	20009a1e 	bne	r4,zero,400c7ac <__subdf3+0x2ec>
 400c544:	888001cc 	andi	r2,r17,7
 400c548:	10000726 	beq	r2,zero,400c568 <__subdf3+0xa8>
 400c54c:	888003cc 	andi	r2,r17,15
 400c550:	01000104 	movi	r4,4
 400c554:	11000426 	beq	r2,r4,400c568 <__subdf3+0xa8>
 400c558:	890b883a 	add	r5,r17,r4
 400c55c:	2c63803a 	cmpltu	r17,r5,r17
 400c560:	1c47883a 	add	r3,r3,r17
 400c564:	2823883a 	mov	r17,r5
 400c568:	1880202c 	andhi	r2,r3,128
 400c56c:	10005926 	beq	r2,zero,400c6d4 <__subdf3+0x214>
 400c570:	84000044 	addi	r16,r16,1
 400c574:	0081ffc4 	movi	r2,2047
 400c578:	8080be26 	beq	r16,r2,400c874 <__subdf3+0x3b4>
 400c57c:	017fe034 	movhi	r5,65408
 400c580:	297fffc4 	addi	r5,r5,-1
 400c584:	1946703a 	and	r3,r3,r5
 400c588:	1804977a 	slli	r2,r3,29
 400c58c:	1806927a 	slli	r3,r3,9
 400c590:	8822d0fa 	srli	r17,r17,3
 400c594:	8401ffcc 	andi	r16,r16,2047
 400c598:	180ad33a 	srli	r5,r3,12
 400c59c:	9100004c 	andi	r4,r18,1
 400c5a0:	1444b03a 	or	r2,r2,r17
 400c5a4:	80c1ffcc 	andi	r3,r16,2047
 400c5a8:	1820953a 	slli	r16,r3,20
 400c5ac:	20c03fcc 	andi	r3,r4,255
 400c5b0:	180897fa 	slli	r4,r3,31
 400c5b4:	00c00434 	movhi	r3,16
 400c5b8:	18ffffc4 	addi	r3,r3,-1
 400c5bc:	28c6703a 	and	r3,r5,r3
 400c5c0:	1c06b03a 	or	r3,r3,r16
 400c5c4:	1906b03a 	or	r3,r3,r4
 400c5c8:	dfc00417 	ldw	ra,16(sp)
 400c5cc:	dcc00317 	ldw	r19,12(sp)
 400c5d0:	dc800217 	ldw	r18,8(sp)
 400c5d4:	dc400117 	ldw	r17,4(sp)
 400c5d8:	dc000017 	ldw	r16,0(sp)
 400c5dc:	dec00504 	addi	sp,sp,20
 400c5e0:	f800283a 	ret
 400c5e4:	0101ffc4 	movi	r4,2047
 400c5e8:	813fd626 	beq	r16,r4,400c544 <__alt_data_end+0xff00c544>
 400c5ec:	29402034 	orhi	r5,r5,128
 400c5f0:	01000e04 	movi	r4,56
 400c5f4:	2080a316 	blt	r4,r2,400c884 <__subdf3+0x3c4>
 400c5f8:	010007c4 	movi	r4,31
 400c5fc:	2080c616 	blt	r4,r2,400c918 <__subdf3+0x458>
 400c600:	01000804 	movi	r4,32
 400c604:	2089c83a 	sub	r4,r4,r2
 400c608:	2910983a 	sll	r8,r5,r4
 400c60c:	308ed83a 	srl	r7,r6,r2
 400c610:	3108983a 	sll	r4,r6,r4
 400c614:	2884d83a 	srl	r2,r5,r2
 400c618:	41ccb03a 	or	r6,r8,r7
 400c61c:	2008c03a 	cmpne	r4,r4,zero
 400c620:	310cb03a 	or	r6,r6,r4
 400c624:	898dc83a 	sub	r6,r17,r6
 400c628:	89a3803a 	cmpltu	r17,r17,r6
 400c62c:	1887c83a 	sub	r3,r3,r2
 400c630:	1c47c83a 	sub	r3,r3,r17
 400c634:	3023883a 	mov	r17,r6
 400c638:	1880202c 	andhi	r2,r3,128
 400c63c:	10002326 	beq	r2,zero,400c6cc <__subdf3+0x20c>
 400c640:	04c02034 	movhi	r19,128
 400c644:	9cffffc4 	addi	r19,r19,-1
 400c648:	1ce6703a 	and	r19,r3,r19
 400c64c:	98007a26 	beq	r19,zero,400c838 <__subdf3+0x378>
 400c650:	9809883a 	mov	r4,r19
 400c654:	400cfc00 	call	400cfc0 <__clzsi2>
 400c658:	113ffe04 	addi	r4,r2,-8
 400c65c:	00c007c4 	movi	r3,31
 400c660:	19007b16 	blt	r3,r4,400c850 <__subdf3+0x390>
 400c664:	00800804 	movi	r2,32
 400c668:	1105c83a 	sub	r2,r2,r4
 400c66c:	8884d83a 	srl	r2,r17,r2
 400c670:	9906983a 	sll	r3,r19,r4
 400c674:	8922983a 	sll	r17,r17,r4
 400c678:	10c4b03a 	or	r2,r2,r3
 400c67c:	24007816 	blt	r4,r16,400c860 <__subdf3+0x3a0>
 400c680:	2421c83a 	sub	r16,r4,r16
 400c684:	80c00044 	addi	r3,r16,1
 400c688:	010007c4 	movi	r4,31
 400c68c:	20c09516 	blt	r4,r3,400c8e4 <__subdf3+0x424>
 400c690:	01400804 	movi	r5,32
 400c694:	28cbc83a 	sub	r5,r5,r3
 400c698:	88c8d83a 	srl	r4,r17,r3
 400c69c:	8962983a 	sll	r17,r17,r5
 400c6a0:	114a983a 	sll	r5,r2,r5
 400c6a4:	10c6d83a 	srl	r3,r2,r3
 400c6a8:	8804c03a 	cmpne	r2,r17,zero
 400c6ac:	290ab03a 	or	r5,r5,r4
 400c6b0:	28a2b03a 	or	r17,r5,r2
 400c6b4:	0021883a 	mov	r16,zero
 400c6b8:	003fa206 	br	400c544 <__alt_data_end+0xff00c544>
 400c6bc:	2090b03a 	or	r8,r4,r2
 400c6c0:	40018e26 	beq	r8,zero,400ccfc <__subdf3+0x83c>
 400c6c4:	1007883a 	mov	r3,r2
 400c6c8:	2023883a 	mov	r17,r4
 400c6cc:	888001cc 	andi	r2,r17,7
 400c6d0:	103f9e1e 	bne	r2,zero,400c54c <__alt_data_end+0xff00c54c>
 400c6d4:	1804977a 	slli	r2,r3,29
 400c6d8:	8822d0fa 	srli	r17,r17,3
 400c6dc:	1810d0fa 	srli	r8,r3,3
 400c6e0:	9100004c 	andi	r4,r18,1
 400c6e4:	1444b03a 	or	r2,r2,r17
 400c6e8:	00c1ffc4 	movi	r3,2047
 400c6ec:	80c02826 	beq	r16,r3,400c790 <__subdf3+0x2d0>
 400c6f0:	01400434 	movhi	r5,16
 400c6f4:	297fffc4 	addi	r5,r5,-1
 400c6f8:	80e0703a 	and	r16,r16,r3
 400c6fc:	414a703a 	and	r5,r8,r5
 400c700:	003fa806 	br	400c5a4 <__alt_data_end+0xff00c5a4>
 400c704:	0080630e 	bge	zero,r2,400c894 <__subdf3+0x3d4>
 400c708:	48003026 	beq	r9,zero,400c7cc <__subdf3+0x30c>
 400c70c:	0101ffc4 	movi	r4,2047
 400c710:	813f8c26 	beq	r16,r4,400c544 <__alt_data_end+0xff00c544>
 400c714:	29402034 	orhi	r5,r5,128
 400c718:	01000e04 	movi	r4,56
 400c71c:	2080a90e 	bge	r4,r2,400c9c4 <__subdf3+0x504>
 400c720:	298cb03a 	or	r6,r5,r6
 400c724:	3012c03a 	cmpne	r9,r6,zero
 400c728:	0005883a 	mov	r2,zero
 400c72c:	4c53883a 	add	r9,r9,r17
 400c730:	4c63803a 	cmpltu	r17,r9,r17
 400c734:	10c7883a 	add	r3,r2,r3
 400c738:	88c7883a 	add	r3,r17,r3
 400c73c:	4823883a 	mov	r17,r9
 400c740:	1880202c 	andhi	r2,r3,128
 400c744:	1000d026 	beq	r2,zero,400ca88 <__subdf3+0x5c8>
 400c748:	84000044 	addi	r16,r16,1
 400c74c:	0081ffc4 	movi	r2,2047
 400c750:	8080fe26 	beq	r16,r2,400cb4c <__subdf3+0x68c>
 400c754:	00bfe034 	movhi	r2,65408
 400c758:	10bfffc4 	addi	r2,r2,-1
 400c75c:	1886703a 	and	r3,r3,r2
 400c760:	880ad07a 	srli	r5,r17,1
 400c764:	180497fa 	slli	r2,r3,31
 400c768:	8900004c 	andi	r4,r17,1
 400c76c:	2922b03a 	or	r17,r5,r4
 400c770:	1806d07a 	srli	r3,r3,1
 400c774:	1462b03a 	or	r17,r2,r17
 400c778:	3825883a 	mov	r18,r7
 400c77c:	003f7106 	br	400c544 <__alt_data_end+0xff00c544>
 400c780:	2984b03a 	or	r2,r5,r6
 400c784:	103f6826 	beq	r2,zero,400c528 <__alt_data_end+0xff00c528>
 400c788:	39c03fcc 	andi	r7,r7,255
 400c78c:	003f6706 	br	400c52c <__alt_data_end+0xff00c52c>
 400c790:	4086b03a 	or	r3,r8,r2
 400c794:	18015226 	beq	r3,zero,400cce0 <__subdf3+0x820>
 400c798:	00c00434 	movhi	r3,16
 400c79c:	41400234 	orhi	r5,r8,8
 400c7a0:	18ffffc4 	addi	r3,r3,-1
 400c7a4:	28ca703a 	and	r5,r5,r3
 400c7a8:	003f7e06 	br	400c5a4 <__alt_data_end+0xff00c5a4>
 400c7ac:	10bfffc4 	addi	r2,r2,-1
 400c7b0:	1000491e 	bne	r2,zero,400c8d8 <__subdf3+0x418>
 400c7b4:	898fc83a 	sub	r7,r17,r6
 400c7b8:	89e3803a 	cmpltu	r17,r17,r7
 400c7bc:	1947c83a 	sub	r3,r3,r5
 400c7c0:	1c47c83a 	sub	r3,r3,r17
 400c7c4:	3823883a 	mov	r17,r7
 400c7c8:	003f9b06 	br	400c638 <__alt_data_end+0xff00c638>
 400c7cc:	2988b03a 	or	r4,r5,r6
 400c7d0:	203f5c26 	beq	r4,zero,400c544 <__alt_data_end+0xff00c544>
 400c7d4:	10bfffc4 	addi	r2,r2,-1
 400c7d8:	1000931e 	bne	r2,zero,400ca28 <__subdf3+0x568>
 400c7dc:	898d883a 	add	r6,r17,r6
 400c7e0:	3463803a 	cmpltu	r17,r6,r17
 400c7e4:	1947883a 	add	r3,r3,r5
 400c7e8:	88c7883a 	add	r3,r17,r3
 400c7ec:	3023883a 	mov	r17,r6
 400c7f0:	003fd306 	br	400c740 <__alt_data_end+0xff00c740>
 400c7f4:	1000541e 	bne	r2,zero,400c948 <__subdf3+0x488>
 400c7f8:	80800044 	addi	r2,r16,1
 400c7fc:	1081ffcc 	andi	r2,r2,2047
 400c800:	01000044 	movi	r4,1
 400c804:	2080a20e 	bge	r4,r2,400ca90 <__subdf3+0x5d0>
 400c808:	8989c83a 	sub	r4,r17,r6
 400c80c:	8905803a 	cmpltu	r2,r17,r4
 400c810:	1967c83a 	sub	r19,r3,r5
 400c814:	98a7c83a 	sub	r19,r19,r2
 400c818:	9880202c 	andhi	r2,r19,128
 400c81c:	10006326 	beq	r2,zero,400c9ac <__subdf3+0x4ec>
 400c820:	3463c83a 	sub	r17,r6,r17
 400c824:	28c7c83a 	sub	r3,r5,r3
 400c828:	344d803a 	cmpltu	r6,r6,r17
 400c82c:	19a7c83a 	sub	r19,r3,r6
 400c830:	3825883a 	mov	r18,r7
 400c834:	983f861e 	bne	r19,zero,400c650 <__alt_data_end+0xff00c650>
 400c838:	8809883a 	mov	r4,r17
 400c83c:	400cfc00 	call	400cfc0 <__clzsi2>
 400c840:	10800804 	addi	r2,r2,32
 400c844:	113ffe04 	addi	r4,r2,-8
 400c848:	00c007c4 	movi	r3,31
 400c84c:	193f850e 	bge	r3,r4,400c664 <__alt_data_end+0xff00c664>
 400c850:	10bff604 	addi	r2,r2,-40
 400c854:	8884983a 	sll	r2,r17,r2
 400c858:	0023883a 	mov	r17,zero
 400c85c:	243f880e 	bge	r4,r16,400c680 <__alt_data_end+0xff00c680>
 400c860:	00ffe034 	movhi	r3,65408
 400c864:	18ffffc4 	addi	r3,r3,-1
 400c868:	8121c83a 	sub	r16,r16,r4
 400c86c:	10c6703a 	and	r3,r2,r3
 400c870:	003f3406 	br	400c544 <__alt_data_end+0xff00c544>
 400c874:	9100004c 	andi	r4,r18,1
 400c878:	000b883a 	mov	r5,zero
 400c87c:	0005883a 	mov	r2,zero
 400c880:	003f4806 	br	400c5a4 <__alt_data_end+0xff00c5a4>
 400c884:	298cb03a 	or	r6,r5,r6
 400c888:	300cc03a 	cmpne	r6,r6,zero
 400c88c:	0005883a 	mov	r2,zero
 400c890:	003f6406 	br	400c624 <__alt_data_end+0xff00c624>
 400c894:	10009a1e 	bne	r2,zero,400cb00 <__subdf3+0x640>
 400c898:	82400044 	addi	r9,r16,1
 400c89c:	4881ffcc 	andi	r2,r9,2047
 400c8a0:	02800044 	movi	r10,1
 400c8a4:	5080670e 	bge	r10,r2,400ca44 <__subdf3+0x584>
 400c8a8:	0081ffc4 	movi	r2,2047
 400c8ac:	4880af26 	beq	r9,r2,400cb6c <__subdf3+0x6ac>
 400c8b0:	898d883a 	add	r6,r17,r6
 400c8b4:	1945883a 	add	r2,r3,r5
 400c8b8:	3447803a 	cmpltu	r3,r6,r17
 400c8bc:	1887883a 	add	r3,r3,r2
 400c8c0:	182297fa 	slli	r17,r3,31
 400c8c4:	300cd07a 	srli	r6,r6,1
 400c8c8:	1806d07a 	srli	r3,r3,1
 400c8cc:	4821883a 	mov	r16,r9
 400c8d0:	89a2b03a 	or	r17,r17,r6
 400c8d4:	003f1b06 	br	400c544 <__alt_data_end+0xff00c544>
 400c8d8:	0101ffc4 	movi	r4,2047
 400c8dc:	813f441e 	bne	r16,r4,400c5f0 <__alt_data_end+0xff00c5f0>
 400c8e0:	003f1806 	br	400c544 <__alt_data_end+0xff00c544>
 400c8e4:	843ff844 	addi	r16,r16,-31
 400c8e8:	01400804 	movi	r5,32
 400c8ec:	1408d83a 	srl	r4,r2,r16
 400c8f0:	19405026 	beq	r3,r5,400ca34 <__subdf3+0x574>
 400c8f4:	01401004 	movi	r5,64
 400c8f8:	28c7c83a 	sub	r3,r5,r3
 400c8fc:	10c4983a 	sll	r2,r2,r3
 400c900:	88a2b03a 	or	r17,r17,r2
 400c904:	8822c03a 	cmpne	r17,r17,zero
 400c908:	2462b03a 	or	r17,r4,r17
 400c90c:	0007883a 	mov	r3,zero
 400c910:	0021883a 	mov	r16,zero
 400c914:	003f6d06 	br	400c6cc <__alt_data_end+0xff00c6cc>
 400c918:	11fff804 	addi	r7,r2,-32
 400c91c:	01000804 	movi	r4,32
 400c920:	29ced83a 	srl	r7,r5,r7
 400c924:	11004526 	beq	r2,r4,400ca3c <__subdf3+0x57c>
 400c928:	01001004 	movi	r4,64
 400c92c:	2089c83a 	sub	r4,r4,r2
 400c930:	2904983a 	sll	r2,r5,r4
 400c934:	118cb03a 	or	r6,r2,r6
 400c938:	300cc03a 	cmpne	r6,r6,zero
 400c93c:	398cb03a 	or	r6,r7,r6
 400c940:	0005883a 	mov	r2,zero
 400c944:	003f3706 	br	400c624 <__alt_data_end+0xff00c624>
 400c948:	80002a26 	beq	r16,zero,400c9f4 <__subdf3+0x534>
 400c94c:	0101ffc4 	movi	r4,2047
 400c950:	49006626 	beq	r9,r4,400caec <__subdf3+0x62c>
 400c954:	0085c83a 	sub	r2,zero,r2
 400c958:	18c02034 	orhi	r3,r3,128
 400c95c:	01000e04 	movi	r4,56
 400c960:	20807e16 	blt	r4,r2,400cb5c <__subdf3+0x69c>
 400c964:	010007c4 	movi	r4,31
 400c968:	2080e716 	blt	r4,r2,400cd08 <__subdf3+0x848>
 400c96c:	01000804 	movi	r4,32
 400c970:	2089c83a 	sub	r4,r4,r2
 400c974:	1914983a 	sll	r10,r3,r4
 400c978:	8890d83a 	srl	r8,r17,r2
 400c97c:	8908983a 	sll	r4,r17,r4
 400c980:	1884d83a 	srl	r2,r3,r2
 400c984:	5222b03a 	or	r17,r10,r8
 400c988:	2006c03a 	cmpne	r3,r4,zero
 400c98c:	88e2b03a 	or	r17,r17,r3
 400c990:	3463c83a 	sub	r17,r6,r17
 400c994:	2885c83a 	sub	r2,r5,r2
 400c998:	344d803a 	cmpltu	r6,r6,r17
 400c99c:	1187c83a 	sub	r3,r2,r6
 400c9a0:	4821883a 	mov	r16,r9
 400c9a4:	3825883a 	mov	r18,r7
 400c9a8:	003f2306 	br	400c638 <__alt_data_end+0xff00c638>
 400c9ac:	24d0b03a 	or	r8,r4,r19
 400c9b0:	40001b1e 	bne	r8,zero,400ca20 <__subdf3+0x560>
 400c9b4:	0005883a 	mov	r2,zero
 400c9b8:	0009883a 	mov	r4,zero
 400c9bc:	0021883a 	mov	r16,zero
 400c9c0:	003f4906 	br	400c6e8 <__alt_data_end+0xff00c6e8>
 400c9c4:	010007c4 	movi	r4,31
 400c9c8:	20803a16 	blt	r4,r2,400cab4 <__subdf3+0x5f4>
 400c9cc:	01000804 	movi	r4,32
 400c9d0:	2089c83a 	sub	r4,r4,r2
 400c9d4:	2912983a 	sll	r9,r5,r4
 400c9d8:	3090d83a 	srl	r8,r6,r2
 400c9dc:	3108983a 	sll	r4,r6,r4
 400c9e0:	2884d83a 	srl	r2,r5,r2
 400c9e4:	4a12b03a 	or	r9,r9,r8
 400c9e8:	2008c03a 	cmpne	r4,r4,zero
 400c9ec:	4912b03a 	or	r9,r9,r4
 400c9f0:	003f4e06 	br	400c72c <__alt_data_end+0xff00c72c>
 400c9f4:	1c48b03a 	or	r4,r3,r17
 400c9f8:	20003c26 	beq	r4,zero,400caec <__subdf3+0x62c>
 400c9fc:	0084303a 	nor	r2,zero,r2
 400ca00:	1000381e 	bne	r2,zero,400cae4 <__subdf3+0x624>
 400ca04:	3463c83a 	sub	r17,r6,r17
 400ca08:	28c5c83a 	sub	r2,r5,r3
 400ca0c:	344d803a 	cmpltu	r6,r6,r17
 400ca10:	1187c83a 	sub	r3,r2,r6
 400ca14:	4821883a 	mov	r16,r9
 400ca18:	3825883a 	mov	r18,r7
 400ca1c:	003f0606 	br	400c638 <__alt_data_end+0xff00c638>
 400ca20:	2023883a 	mov	r17,r4
 400ca24:	003f0906 	br	400c64c <__alt_data_end+0xff00c64c>
 400ca28:	0101ffc4 	movi	r4,2047
 400ca2c:	813f3a1e 	bne	r16,r4,400c718 <__alt_data_end+0xff00c718>
 400ca30:	003ec406 	br	400c544 <__alt_data_end+0xff00c544>
 400ca34:	0005883a 	mov	r2,zero
 400ca38:	003fb106 	br	400c900 <__alt_data_end+0xff00c900>
 400ca3c:	0005883a 	mov	r2,zero
 400ca40:	003fbc06 	br	400c934 <__alt_data_end+0xff00c934>
 400ca44:	1c44b03a 	or	r2,r3,r17
 400ca48:	80008e1e 	bne	r16,zero,400cc84 <__subdf3+0x7c4>
 400ca4c:	1000c826 	beq	r2,zero,400cd70 <__subdf3+0x8b0>
 400ca50:	2984b03a 	or	r2,r5,r6
 400ca54:	103ebb26 	beq	r2,zero,400c544 <__alt_data_end+0xff00c544>
 400ca58:	8989883a 	add	r4,r17,r6
 400ca5c:	1945883a 	add	r2,r3,r5
 400ca60:	2447803a 	cmpltu	r3,r4,r17
 400ca64:	1887883a 	add	r3,r3,r2
 400ca68:	1880202c 	andhi	r2,r3,128
 400ca6c:	2023883a 	mov	r17,r4
 400ca70:	103f1626 	beq	r2,zero,400c6cc <__alt_data_end+0xff00c6cc>
 400ca74:	00bfe034 	movhi	r2,65408
 400ca78:	10bfffc4 	addi	r2,r2,-1
 400ca7c:	5021883a 	mov	r16,r10
 400ca80:	1886703a 	and	r3,r3,r2
 400ca84:	003eaf06 	br	400c544 <__alt_data_end+0xff00c544>
 400ca88:	3825883a 	mov	r18,r7
 400ca8c:	003f0f06 	br	400c6cc <__alt_data_end+0xff00c6cc>
 400ca90:	1c44b03a 	or	r2,r3,r17
 400ca94:	8000251e 	bne	r16,zero,400cb2c <__subdf3+0x66c>
 400ca98:	1000661e 	bne	r2,zero,400cc34 <__subdf3+0x774>
 400ca9c:	2990b03a 	or	r8,r5,r6
 400caa0:	40009626 	beq	r8,zero,400ccfc <__subdf3+0x83c>
 400caa4:	2807883a 	mov	r3,r5
 400caa8:	3023883a 	mov	r17,r6
 400caac:	3825883a 	mov	r18,r7
 400cab0:	003ea406 	br	400c544 <__alt_data_end+0xff00c544>
 400cab4:	127ff804 	addi	r9,r2,-32
 400cab8:	01000804 	movi	r4,32
 400cabc:	2a52d83a 	srl	r9,r5,r9
 400cac0:	11008c26 	beq	r2,r4,400ccf4 <__subdf3+0x834>
 400cac4:	01001004 	movi	r4,64
 400cac8:	2085c83a 	sub	r2,r4,r2
 400cacc:	2884983a 	sll	r2,r5,r2
 400cad0:	118cb03a 	or	r6,r2,r6
 400cad4:	300cc03a 	cmpne	r6,r6,zero
 400cad8:	4992b03a 	or	r9,r9,r6
 400cadc:	0005883a 	mov	r2,zero
 400cae0:	003f1206 	br	400c72c <__alt_data_end+0xff00c72c>
 400cae4:	0101ffc4 	movi	r4,2047
 400cae8:	493f9c1e 	bne	r9,r4,400c95c <__alt_data_end+0xff00c95c>
 400caec:	2807883a 	mov	r3,r5
 400caf0:	3023883a 	mov	r17,r6
 400caf4:	4821883a 	mov	r16,r9
 400caf8:	3825883a 	mov	r18,r7
 400cafc:	003e9106 	br	400c544 <__alt_data_end+0xff00c544>
 400cb00:	80001f1e 	bne	r16,zero,400cb80 <__subdf3+0x6c0>
 400cb04:	1c48b03a 	or	r4,r3,r17
 400cb08:	20005a26 	beq	r4,zero,400cc74 <__subdf3+0x7b4>
 400cb0c:	0084303a 	nor	r2,zero,r2
 400cb10:	1000561e 	bne	r2,zero,400cc6c <__subdf3+0x7ac>
 400cb14:	89a3883a 	add	r17,r17,r6
 400cb18:	1945883a 	add	r2,r3,r5
 400cb1c:	898d803a 	cmpltu	r6,r17,r6
 400cb20:	3087883a 	add	r3,r6,r2
 400cb24:	4821883a 	mov	r16,r9
 400cb28:	003f0506 	br	400c740 <__alt_data_end+0xff00c740>
 400cb2c:	10002b1e 	bne	r2,zero,400cbdc <__subdf3+0x71c>
 400cb30:	2984b03a 	or	r2,r5,r6
 400cb34:	10008026 	beq	r2,zero,400cd38 <__subdf3+0x878>
 400cb38:	2807883a 	mov	r3,r5
 400cb3c:	3023883a 	mov	r17,r6
 400cb40:	3825883a 	mov	r18,r7
 400cb44:	0401ffc4 	movi	r16,2047
 400cb48:	003e7e06 	br	400c544 <__alt_data_end+0xff00c544>
 400cb4c:	3809883a 	mov	r4,r7
 400cb50:	0011883a 	mov	r8,zero
 400cb54:	0005883a 	mov	r2,zero
 400cb58:	003ee306 	br	400c6e8 <__alt_data_end+0xff00c6e8>
 400cb5c:	1c62b03a 	or	r17,r3,r17
 400cb60:	8822c03a 	cmpne	r17,r17,zero
 400cb64:	0005883a 	mov	r2,zero
 400cb68:	003f8906 	br	400c990 <__alt_data_end+0xff00c990>
 400cb6c:	3809883a 	mov	r4,r7
 400cb70:	4821883a 	mov	r16,r9
 400cb74:	0011883a 	mov	r8,zero
 400cb78:	0005883a 	mov	r2,zero
 400cb7c:	003eda06 	br	400c6e8 <__alt_data_end+0xff00c6e8>
 400cb80:	0101ffc4 	movi	r4,2047
 400cb84:	49003b26 	beq	r9,r4,400cc74 <__subdf3+0x7b4>
 400cb88:	0085c83a 	sub	r2,zero,r2
 400cb8c:	18c02034 	orhi	r3,r3,128
 400cb90:	01000e04 	movi	r4,56
 400cb94:	20806e16 	blt	r4,r2,400cd50 <__subdf3+0x890>
 400cb98:	010007c4 	movi	r4,31
 400cb9c:	20807716 	blt	r4,r2,400cd7c <__subdf3+0x8bc>
 400cba0:	01000804 	movi	r4,32
 400cba4:	2089c83a 	sub	r4,r4,r2
 400cba8:	1914983a 	sll	r10,r3,r4
 400cbac:	8890d83a 	srl	r8,r17,r2
 400cbb0:	8908983a 	sll	r4,r17,r4
 400cbb4:	1884d83a 	srl	r2,r3,r2
 400cbb8:	5222b03a 	or	r17,r10,r8
 400cbbc:	2006c03a 	cmpne	r3,r4,zero
 400cbc0:	88e2b03a 	or	r17,r17,r3
 400cbc4:	89a3883a 	add	r17,r17,r6
 400cbc8:	1145883a 	add	r2,r2,r5
 400cbcc:	898d803a 	cmpltu	r6,r17,r6
 400cbd0:	3087883a 	add	r3,r6,r2
 400cbd4:	4821883a 	mov	r16,r9
 400cbd8:	003ed906 	br	400c740 <__alt_data_end+0xff00c740>
 400cbdc:	2984b03a 	or	r2,r5,r6
 400cbe0:	10004226 	beq	r2,zero,400ccec <__subdf3+0x82c>
 400cbe4:	1808d0fa 	srli	r4,r3,3
 400cbe8:	8822d0fa 	srli	r17,r17,3
 400cbec:	1806977a 	slli	r3,r3,29
 400cbf0:	2080022c 	andhi	r2,r4,8
 400cbf4:	1c62b03a 	or	r17,r3,r17
 400cbf8:	10000826 	beq	r2,zero,400cc1c <__subdf3+0x75c>
 400cbfc:	2812d0fa 	srli	r9,r5,3
 400cc00:	4880022c 	andhi	r2,r9,8
 400cc04:	1000051e 	bne	r2,zero,400cc1c <__subdf3+0x75c>
 400cc08:	300cd0fa 	srli	r6,r6,3
 400cc0c:	2804977a 	slli	r2,r5,29
 400cc10:	4809883a 	mov	r4,r9
 400cc14:	3825883a 	mov	r18,r7
 400cc18:	11a2b03a 	or	r17,r2,r6
 400cc1c:	8806d77a 	srli	r3,r17,29
 400cc20:	200890fa 	slli	r4,r4,3
 400cc24:	882290fa 	slli	r17,r17,3
 400cc28:	0401ffc4 	movi	r16,2047
 400cc2c:	1906b03a 	or	r3,r3,r4
 400cc30:	003e4406 	br	400c544 <__alt_data_end+0xff00c544>
 400cc34:	2984b03a 	or	r2,r5,r6
 400cc38:	103e4226 	beq	r2,zero,400c544 <__alt_data_end+0xff00c544>
 400cc3c:	8989c83a 	sub	r4,r17,r6
 400cc40:	8911803a 	cmpltu	r8,r17,r4
 400cc44:	1945c83a 	sub	r2,r3,r5
 400cc48:	1205c83a 	sub	r2,r2,r8
 400cc4c:	1200202c 	andhi	r8,r2,128
 400cc50:	403e9a26 	beq	r8,zero,400c6bc <__alt_data_end+0xff00c6bc>
 400cc54:	3463c83a 	sub	r17,r6,r17
 400cc58:	28c5c83a 	sub	r2,r5,r3
 400cc5c:	344d803a 	cmpltu	r6,r6,r17
 400cc60:	1187c83a 	sub	r3,r2,r6
 400cc64:	3825883a 	mov	r18,r7
 400cc68:	003e3606 	br	400c544 <__alt_data_end+0xff00c544>
 400cc6c:	0101ffc4 	movi	r4,2047
 400cc70:	493fc71e 	bne	r9,r4,400cb90 <__alt_data_end+0xff00cb90>
 400cc74:	2807883a 	mov	r3,r5
 400cc78:	3023883a 	mov	r17,r6
 400cc7c:	4821883a 	mov	r16,r9
 400cc80:	003e3006 	br	400c544 <__alt_data_end+0xff00c544>
 400cc84:	10003626 	beq	r2,zero,400cd60 <__subdf3+0x8a0>
 400cc88:	2984b03a 	or	r2,r5,r6
 400cc8c:	10001726 	beq	r2,zero,400ccec <__subdf3+0x82c>
 400cc90:	1808d0fa 	srli	r4,r3,3
 400cc94:	8822d0fa 	srli	r17,r17,3
 400cc98:	1806977a 	slli	r3,r3,29
 400cc9c:	2080022c 	andhi	r2,r4,8
 400cca0:	1c62b03a 	or	r17,r3,r17
 400cca4:	10000726 	beq	r2,zero,400ccc4 <__subdf3+0x804>
 400cca8:	2812d0fa 	srli	r9,r5,3
 400ccac:	4880022c 	andhi	r2,r9,8
 400ccb0:	1000041e 	bne	r2,zero,400ccc4 <__subdf3+0x804>
 400ccb4:	300cd0fa 	srli	r6,r6,3
 400ccb8:	2804977a 	slli	r2,r5,29
 400ccbc:	4809883a 	mov	r4,r9
 400ccc0:	11a2b03a 	or	r17,r2,r6
 400ccc4:	8806d77a 	srli	r3,r17,29
 400ccc8:	200890fa 	slli	r4,r4,3
 400cccc:	882290fa 	slli	r17,r17,3
 400ccd0:	3825883a 	mov	r18,r7
 400ccd4:	1906b03a 	or	r3,r3,r4
 400ccd8:	0401ffc4 	movi	r16,2047
 400ccdc:	003e1906 	br	400c544 <__alt_data_end+0xff00c544>
 400cce0:	000b883a 	mov	r5,zero
 400cce4:	0005883a 	mov	r2,zero
 400cce8:	003e2e06 	br	400c5a4 <__alt_data_end+0xff00c5a4>
 400ccec:	0401ffc4 	movi	r16,2047
 400ccf0:	003e1406 	br	400c544 <__alt_data_end+0xff00c544>
 400ccf4:	0005883a 	mov	r2,zero
 400ccf8:	003f7506 	br	400cad0 <__alt_data_end+0xff00cad0>
 400ccfc:	0005883a 	mov	r2,zero
 400cd00:	0009883a 	mov	r4,zero
 400cd04:	003e7806 	br	400c6e8 <__alt_data_end+0xff00c6e8>
 400cd08:	123ff804 	addi	r8,r2,-32
 400cd0c:	01000804 	movi	r4,32
 400cd10:	1a10d83a 	srl	r8,r3,r8
 400cd14:	11002526 	beq	r2,r4,400cdac <__subdf3+0x8ec>
 400cd18:	01001004 	movi	r4,64
 400cd1c:	2085c83a 	sub	r2,r4,r2
 400cd20:	1884983a 	sll	r2,r3,r2
 400cd24:	1444b03a 	or	r2,r2,r17
 400cd28:	1004c03a 	cmpne	r2,r2,zero
 400cd2c:	40a2b03a 	or	r17,r8,r2
 400cd30:	0005883a 	mov	r2,zero
 400cd34:	003f1606 	br	400c990 <__alt_data_end+0xff00c990>
 400cd38:	02000434 	movhi	r8,16
 400cd3c:	0009883a 	mov	r4,zero
 400cd40:	423fffc4 	addi	r8,r8,-1
 400cd44:	00bfffc4 	movi	r2,-1
 400cd48:	0401ffc4 	movi	r16,2047
 400cd4c:	003e6606 	br	400c6e8 <__alt_data_end+0xff00c6e8>
 400cd50:	1c62b03a 	or	r17,r3,r17
 400cd54:	8822c03a 	cmpne	r17,r17,zero
 400cd58:	0005883a 	mov	r2,zero
 400cd5c:	003f9906 	br	400cbc4 <__alt_data_end+0xff00cbc4>
 400cd60:	2807883a 	mov	r3,r5
 400cd64:	3023883a 	mov	r17,r6
 400cd68:	0401ffc4 	movi	r16,2047
 400cd6c:	003df506 	br	400c544 <__alt_data_end+0xff00c544>
 400cd70:	2807883a 	mov	r3,r5
 400cd74:	3023883a 	mov	r17,r6
 400cd78:	003df206 	br	400c544 <__alt_data_end+0xff00c544>
 400cd7c:	123ff804 	addi	r8,r2,-32
 400cd80:	01000804 	movi	r4,32
 400cd84:	1a10d83a 	srl	r8,r3,r8
 400cd88:	11000a26 	beq	r2,r4,400cdb4 <__subdf3+0x8f4>
 400cd8c:	01001004 	movi	r4,64
 400cd90:	2085c83a 	sub	r2,r4,r2
 400cd94:	1884983a 	sll	r2,r3,r2
 400cd98:	1444b03a 	or	r2,r2,r17
 400cd9c:	1004c03a 	cmpne	r2,r2,zero
 400cda0:	40a2b03a 	or	r17,r8,r2
 400cda4:	0005883a 	mov	r2,zero
 400cda8:	003f8606 	br	400cbc4 <__alt_data_end+0xff00cbc4>
 400cdac:	0005883a 	mov	r2,zero
 400cdb0:	003fdc06 	br	400cd24 <__alt_data_end+0xff00cd24>
 400cdb4:	0005883a 	mov	r2,zero
 400cdb8:	003ff706 	br	400cd98 <__alt_data_end+0xff00cd98>

0400cdbc <__fixdfsi>:
 400cdbc:	280cd53a 	srli	r6,r5,20
 400cdc0:	00c00434 	movhi	r3,16
 400cdc4:	18ffffc4 	addi	r3,r3,-1
 400cdc8:	3181ffcc 	andi	r6,r6,2047
 400cdcc:	01c0ff84 	movi	r7,1022
 400cdd0:	28c6703a 	and	r3,r5,r3
 400cdd4:	280ad7fa 	srli	r5,r5,31
 400cdd8:	3980120e 	bge	r7,r6,400ce24 <__fixdfsi+0x68>
 400cddc:	00810744 	movi	r2,1053
 400cde0:	11800c16 	blt	r2,r6,400ce14 <__fixdfsi+0x58>
 400cde4:	00810cc4 	movi	r2,1075
 400cde8:	1185c83a 	sub	r2,r2,r6
 400cdec:	01c007c4 	movi	r7,31
 400cdf0:	18c00434 	orhi	r3,r3,16
 400cdf4:	38800d16 	blt	r7,r2,400ce2c <__fixdfsi+0x70>
 400cdf8:	31befb44 	addi	r6,r6,-1043
 400cdfc:	2084d83a 	srl	r2,r4,r2
 400ce00:	1986983a 	sll	r3,r3,r6
 400ce04:	1884b03a 	or	r2,r3,r2
 400ce08:	28000726 	beq	r5,zero,400ce28 <__fixdfsi+0x6c>
 400ce0c:	0085c83a 	sub	r2,zero,r2
 400ce10:	f800283a 	ret
 400ce14:	00a00034 	movhi	r2,32768
 400ce18:	10bfffc4 	addi	r2,r2,-1
 400ce1c:	2885883a 	add	r2,r5,r2
 400ce20:	f800283a 	ret
 400ce24:	0005883a 	mov	r2,zero
 400ce28:	f800283a 	ret
 400ce2c:	008104c4 	movi	r2,1043
 400ce30:	1185c83a 	sub	r2,r2,r6
 400ce34:	1884d83a 	srl	r2,r3,r2
 400ce38:	003ff306 	br	400ce08 <__alt_data_end+0xff00ce08>

0400ce3c <__floatsidf>:
 400ce3c:	defffd04 	addi	sp,sp,-12
 400ce40:	dfc00215 	stw	ra,8(sp)
 400ce44:	dc400115 	stw	r17,4(sp)
 400ce48:	dc000015 	stw	r16,0(sp)
 400ce4c:	20002b26 	beq	r4,zero,400cefc <__floatsidf+0xc0>
 400ce50:	2023883a 	mov	r17,r4
 400ce54:	2020d7fa 	srli	r16,r4,31
 400ce58:	20002d16 	blt	r4,zero,400cf10 <__floatsidf+0xd4>
 400ce5c:	8809883a 	mov	r4,r17
 400ce60:	400cfc00 	call	400cfc0 <__clzsi2>
 400ce64:	01410784 	movi	r5,1054
 400ce68:	288bc83a 	sub	r5,r5,r2
 400ce6c:	01010cc4 	movi	r4,1075
 400ce70:	2149c83a 	sub	r4,r4,r5
 400ce74:	00c007c4 	movi	r3,31
 400ce78:	1900160e 	bge	r3,r4,400ced4 <__floatsidf+0x98>
 400ce7c:	00c104c4 	movi	r3,1043
 400ce80:	1947c83a 	sub	r3,r3,r5
 400ce84:	88c6983a 	sll	r3,r17,r3
 400ce88:	00800434 	movhi	r2,16
 400ce8c:	10bfffc4 	addi	r2,r2,-1
 400ce90:	1886703a 	and	r3,r3,r2
 400ce94:	2941ffcc 	andi	r5,r5,2047
 400ce98:	800d883a 	mov	r6,r16
 400ce9c:	0005883a 	mov	r2,zero
 400cea0:	280a953a 	slli	r5,r5,20
 400cea4:	31803fcc 	andi	r6,r6,255
 400cea8:	01000434 	movhi	r4,16
 400ceac:	300c97fa 	slli	r6,r6,31
 400ceb0:	213fffc4 	addi	r4,r4,-1
 400ceb4:	1906703a 	and	r3,r3,r4
 400ceb8:	1946b03a 	or	r3,r3,r5
 400cebc:	1986b03a 	or	r3,r3,r6
 400cec0:	dfc00217 	ldw	ra,8(sp)
 400cec4:	dc400117 	ldw	r17,4(sp)
 400cec8:	dc000017 	ldw	r16,0(sp)
 400cecc:	dec00304 	addi	sp,sp,12
 400ced0:	f800283a 	ret
 400ced4:	00c002c4 	movi	r3,11
 400ced8:	1887c83a 	sub	r3,r3,r2
 400cedc:	88c6d83a 	srl	r3,r17,r3
 400cee0:	8904983a 	sll	r2,r17,r4
 400cee4:	01000434 	movhi	r4,16
 400cee8:	213fffc4 	addi	r4,r4,-1
 400ceec:	2941ffcc 	andi	r5,r5,2047
 400cef0:	1906703a 	and	r3,r3,r4
 400cef4:	800d883a 	mov	r6,r16
 400cef8:	003fe906 	br	400cea0 <__alt_data_end+0xff00cea0>
 400cefc:	000d883a 	mov	r6,zero
 400cf00:	000b883a 	mov	r5,zero
 400cf04:	0007883a 	mov	r3,zero
 400cf08:	0005883a 	mov	r2,zero
 400cf0c:	003fe406 	br	400cea0 <__alt_data_end+0xff00cea0>
 400cf10:	0123c83a 	sub	r17,zero,r4
 400cf14:	003fd106 	br	400ce5c <__alt_data_end+0xff00ce5c>

0400cf18 <__floatunsidf>:
 400cf18:	defffe04 	addi	sp,sp,-8
 400cf1c:	dc000015 	stw	r16,0(sp)
 400cf20:	dfc00115 	stw	ra,4(sp)
 400cf24:	2021883a 	mov	r16,r4
 400cf28:	20002226 	beq	r4,zero,400cfb4 <__floatunsidf+0x9c>
 400cf2c:	400cfc00 	call	400cfc0 <__clzsi2>
 400cf30:	01010784 	movi	r4,1054
 400cf34:	2089c83a 	sub	r4,r4,r2
 400cf38:	01810cc4 	movi	r6,1075
 400cf3c:	310dc83a 	sub	r6,r6,r4
 400cf40:	00c007c4 	movi	r3,31
 400cf44:	1980120e 	bge	r3,r6,400cf90 <__floatunsidf+0x78>
 400cf48:	00c104c4 	movi	r3,1043
 400cf4c:	1907c83a 	sub	r3,r3,r4
 400cf50:	80ca983a 	sll	r5,r16,r3
 400cf54:	00800434 	movhi	r2,16
 400cf58:	10bfffc4 	addi	r2,r2,-1
 400cf5c:	2101ffcc 	andi	r4,r4,2047
 400cf60:	0021883a 	mov	r16,zero
 400cf64:	288a703a 	and	r5,r5,r2
 400cf68:	2008953a 	slli	r4,r4,20
 400cf6c:	00c00434 	movhi	r3,16
 400cf70:	18ffffc4 	addi	r3,r3,-1
 400cf74:	28c6703a 	and	r3,r5,r3
 400cf78:	8005883a 	mov	r2,r16
 400cf7c:	1906b03a 	or	r3,r3,r4
 400cf80:	dfc00117 	ldw	ra,4(sp)
 400cf84:	dc000017 	ldw	r16,0(sp)
 400cf88:	dec00204 	addi	sp,sp,8
 400cf8c:	f800283a 	ret
 400cf90:	00c002c4 	movi	r3,11
 400cf94:	188bc83a 	sub	r5,r3,r2
 400cf98:	814ad83a 	srl	r5,r16,r5
 400cf9c:	00c00434 	movhi	r3,16
 400cfa0:	18ffffc4 	addi	r3,r3,-1
 400cfa4:	81a0983a 	sll	r16,r16,r6
 400cfa8:	2101ffcc 	andi	r4,r4,2047
 400cfac:	28ca703a 	and	r5,r5,r3
 400cfb0:	003fed06 	br	400cf68 <__alt_data_end+0xff00cf68>
 400cfb4:	0009883a 	mov	r4,zero
 400cfb8:	000b883a 	mov	r5,zero
 400cfbc:	003fea06 	br	400cf68 <__alt_data_end+0xff00cf68>

0400cfc0 <__clzsi2>:
 400cfc0:	00bfffd4 	movui	r2,65535
 400cfc4:	11000536 	bltu	r2,r4,400cfdc <__clzsi2+0x1c>
 400cfc8:	00803fc4 	movi	r2,255
 400cfcc:	11000f36 	bltu	r2,r4,400d00c <__clzsi2+0x4c>
 400cfd0:	00800804 	movi	r2,32
 400cfd4:	0007883a 	mov	r3,zero
 400cfd8:	00000506 	br	400cff0 <__clzsi2+0x30>
 400cfdc:	00804034 	movhi	r2,256
 400cfe0:	10bfffc4 	addi	r2,r2,-1
 400cfe4:	11000c2e 	bgeu	r2,r4,400d018 <__clzsi2+0x58>
 400cfe8:	00800204 	movi	r2,8
 400cfec:	00c00604 	movi	r3,24
 400cff0:	20c8d83a 	srl	r4,r4,r3
 400cff4:	00c10074 	movhi	r3,1025
 400cff8:	18ff7f04 	addi	r3,r3,-516
 400cffc:	1909883a 	add	r4,r3,r4
 400d000:	20c00003 	ldbu	r3,0(r4)
 400d004:	10c5c83a 	sub	r2,r2,r3
 400d008:	f800283a 	ret
 400d00c:	00800604 	movi	r2,24
 400d010:	00c00204 	movi	r3,8
 400d014:	003ff606 	br	400cff0 <__alt_data_end+0xff00cff0>
 400d018:	00800404 	movi	r2,16
 400d01c:	1007883a 	mov	r3,r2
 400d020:	003ff306 	br	400cff0 <__alt_data_end+0xff00cff0>

0400d024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d024:	defffe04 	addi	sp,sp,-8
 400d028:	dfc00115 	stw	ra,4(sp)
 400d02c:	df000015 	stw	fp,0(sp)
 400d030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d034:	d0a00e17 	ldw	r2,-32712(gp)
 400d038:	10000326 	beq	r2,zero,400d048 <alt_get_errno+0x24>
 400d03c:	d0a00e17 	ldw	r2,-32712(gp)
 400d040:	103ee83a 	callr	r2
 400d044:	00000106 	br	400d04c <alt_get_errno+0x28>
 400d048:	d0a6df04 	addi	r2,gp,-25732
}
 400d04c:	e037883a 	mov	sp,fp
 400d050:	dfc00117 	ldw	ra,4(sp)
 400d054:	df000017 	ldw	fp,0(sp)
 400d058:	dec00204 	addi	sp,sp,8
 400d05c:	f800283a 	ret

0400d060 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400d060:	defffb04 	addi	sp,sp,-20
 400d064:	dfc00415 	stw	ra,16(sp)
 400d068:	df000315 	stw	fp,12(sp)
 400d06c:	df000304 	addi	fp,sp,12
 400d070:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400d074:	e0bfff17 	ldw	r2,-4(fp)
 400d078:	10000616 	blt	r2,zero,400d094 <close+0x34>
 400d07c:	e0bfff17 	ldw	r2,-4(fp)
 400d080:	10c00324 	muli	r3,r2,12
 400d084:	00810074 	movhi	r2,1025
 400d088:	10820004 	addi	r2,r2,2048
 400d08c:	1885883a 	add	r2,r3,r2
 400d090:	00000106 	br	400d098 <close+0x38>
 400d094:	0005883a 	mov	r2,zero
 400d098:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400d09c:	e0bffd17 	ldw	r2,-12(fp)
 400d0a0:	10001926 	beq	r2,zero,400d108 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400d0a4:	e0bffd17 	ldw	r2,-12(fp)
 400d0a8:	10800017 	ldw	r2,0(r2)
 400d0ac:	10800417 	ldw	r2,16(r2)
 400d0b0:	10000626 	beq	r2,zero,400d0cc <close+0x6c>
 400d0b4:	e0bffd17 	ldw	r2,-12(fp)
 400d0b8:	10800017 	ldw	r2,0(r2)
 400d0bc:	10800417 	ldw	r2,16(r2)
 400d0c0:	e13ffd17 	ldw	r4,-12(fp)
 400d0c4:	103ee83a 	callr	r2
 400d0c8:	00000106 	br	400d0d0 <close+0x70>
 400d0cc:	0005883a 	mov	r2,zero
 400d0d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400d0d4:	e13fff17 	ldw	r4,-4(fp)
 400d0d8:	400d7680 	call	400d768 <alt_release_fd>
    if (rval < 0)
 400d0dc:	e0bffe17 	ldw	r2,-8(fp)
 400d0e0:	1000070e 	bge	r2,zero,400d100 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400d0e4:	400d0240 	call	400d024 <alt_get_errno>
 400d0e8:	1007883a 	mov	r3,r2
 400d0ec:	e0bffe17 	ldw	r2,-8(fp)
 400d0f0:	0085c83a 	sub	r2,zero,r2
 400d0f4:	18800015 	stw	r2,0(r3)
      return -1;
 400d0f8:	00bfffc4 	movi	r2,-1
 400d0fc:	00000706 	br	400d11c <close+0xbc>
    }
    return 0;
 400d100:	0005883a 	mov	r2,zero
 400d104:	00000506 	br	400d11c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d108:	400d0240 	call	400d024 <alt_get_errno>
 400d10c:	1007883a 	mov	r3,r2
 400d110:	00801444 	movi	r2,81
 400d114:	18800015 	stw	r2,0(r3)
    return -1;
 400d118:	00bfffc4 	movi	r2,-1
  }
}
 400d11c:	e037883a 	mov	sp,fp
 400d120:	dfc00117 	ldw	ra,4(sp)
 400d124:	df000017 	ldw	fp,0(sp)
 400d128:	dec00204 	addi	sp,sp,8
 400d12c:	f800283a 	ret

0400d130 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400d130:	defffe04 	addi	sp,sp,-8
 400d134:	df000115 	stw	fp,4(sp)
 400d138:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400d13c:	e03fff15 	stw	zero,-4(fp)
 400d140:	00000506 	br	400d158 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400d144:	e0bfff17 	ldw	r2,-4(fp)
 400d148:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400d14c:	e0bfff17 	ldw	r2,-4(fp)
 400d150:	10800804 	addi	r2,r2,32
 400d154:	e0bfff15 	stw	r2,-4(fp)
 400d158:	e0bfff17 	ldw	r2,-4(fp)
 400d15c:	10a00030 	cmpltui	r2,r2,32768
 400d160:	103ff81e 	bne	r2,zero,400d144 <__alt_data_end+0xff00d144>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400d164:	0001883a 	nop
 400d168:	e037883a 	mov	sp,fp
 400d16c:	df000017 	ldw	fp,0(sp)
 400d170:	dec00104 	addi	sp,sp,4
 400d174:	f800283a 	ret

0400d178 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400d178:	defffc04 	addi	sp,sp,-16
 400d17c:	df000315 	stw	fp,12(sp)
 400d180:	df000304 	addi	fp,sp,12
 400d184:	e13ffd15 	stw	r4,-12(fp)
 400d188:	e17ffe15 	stw	r5,-8(fp)
 400d18c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400d190:	e0bfff17 	ldw	r2,-4(fp)
}
 400d194:	e037883a 	mov	sp,fp
 400d198:	df000017 	ldw	fp,0(sp)
 400d19c:	dec00104 	addi	sp,sp,4
 400d1a0:	f800283a 	ret

0400d1a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d1a4:	defffe04 	addi	sp,sp,-8
 400d1a8:	dfc00115 	stw	ra,4(sp)
 400d1ac:	df000015 	stw	fp,0(sp)
 400d1b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d1b4:	d0a00e17 	ldw	r2,-32712(gp)
 400d1b8:	10000326 	beq	r2,zero,400d1c8 <alt_get_errno+0x24>
 400d1bc:	d0a00e17 	ldw	r2,-32712(gp)
 400d1c0:	103ee83a 	callr	r2
 400d1c4:	00000106 	br	400d1cc <alt_get_errno+0x28>
 400d1c8:	d0a6df04 	addi	r2,gp,-25732
}
 400d1cc:	e037883a 	mov	sp,fp
 400d1d0:	dfc00117 	ldw	ra,4(sp)
 400d1d4:	df000017 	ldw	fp,0(sp)
 400d1d8:	dec00204 	addi	sp,sp,8
 400d1dc:	f800283a 	ret

0400d1e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400d1e0:	defffb04 	addi	sp,sp,-20
 400d1e4:	dfc00415 	stw	ra,16(sp)
 400d1e8:	df000315 	stw	fp,12(sp)
 400d1ec:	df000304 	addi	fp,sp,12
 400d1f0:	e13ffe15 	stw	r4,-8(fp)
 400d1f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d1f8:	e0bffe17 	ldw	r2,-8(fp)
 400d1fc:	10000616 	blt	r2,zero,400d218 <fstat+0x38>
 400d200:	e0bffe17 	ldw	r2,-8(fp)
 400d204:	10c00324 	muli	r3,r2,12
 400d208:	00810074 	movhi	r2,1025
 400d20c:	10820004 	addi	r2,r2,2048
 400d210:	1885883a 	add	r2,r3,r2
 400d214:	00000106 	br	400d21c <fstat+0x3c>
 400d218:	0005883a 	mov	r2,zero
 400d21c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400d220:	e0bffd17 	ldw	r2,-12(fp)
 400d224:	10001026 	beq	r2,zero,400d268 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400d228:	e0bffd17 	ldw	r2,-12(fp)
 400d22c:	10800017 	ldw	r2,0(r2)
 400d230:	10800817 	ldw	r2,32(r2)
 400d234:	10000726 	beq	r2,zero,400d254 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400d238:	e0bffd17 	ldw	r2,-12(fp)
 400d23c:	10800017 	ldw	r2,0(r2)
 400d240:	10800817 	ldw	r2,32(r2)
 400d244:	e17fff17 	ldw	r5,-4(fp)
 400d248:	e13ffd17 	ldw	r4,-12(fp)
 400d24c:	103ee83a 	callr	r2
 400d250:	00000a06 	br	400d27c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400d254:	e0bfff17 	ldw	r2,-4(fp)
 400d258:	00c80004 	movi	r3,8192
 400d25c:	10c00115 	stw	r3,4(r2)
      return 0;
 400d260:	0005883a 	mov	r2,zero
 400d264:	00000506 	br	400d27c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d268:	400d1a40 	call	400d1a4 <alt_get_errno>
 400d26c:	1007883a 	mov	r3,r2
 400d270:	00801444 	movi	r2,81
 400d274:	18800015 	stw	r2,0(r3)
    return -1;
 400d278:	00bfffc4 	movi	r2,-1
  }
}
 400d27c:	e037883a 	mov	sp,fp
 400d280:	dfc00117 	ldw	ra,4(sp)
 400d284:	df000017 	ldw	fp,0(sp)
 400d288:	dec00204 	addi	sp,sp,8
 400d28c:	f800283a 	ret

0400d290 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d290:	defffe04 	addi	sp,sp,-8
 400d294:	dfc00115 	stw	ra,4(sp)
 400d298:	df000015 	stw	fp,0(sp)
 400d29c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d2a0:	d0a00e17 	ldw	r2,-32712(gp)
 400d2a4:	10000326 	beq	r2,zero,400d2b4 <alt_get_errno+0x24>
 400d2a8:	d0a00e17 	ldw	r2,-32712(gp)
 400d2ac:	103ee83a 	callr	r2
 400d2b0:	00000106 	br	400d2b8 <alt_get_errno+0x28>
 400d2b4:	d0a6df04 	addi	r2,gp,-25732
}
 400d2b8:	e037883a 	mov	sp,fp
 400d2bc:	dfc00117 	ldw	ra,4(sp)
 400d2c0:	df000017 	ldw	fp,0(sp)
 400d2c4:	dec00204 	addi	sp,sp,8
 400d2c8:	f800283a 	ret

0400d2cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400d2cc:	deffed04 	addi	sp,sp,-76
 400d2d0:	dfc01215 	stw	ra,72(sp)
 400d2d4:	df001115 	stw	fp,68(sp)
 400d2d8:	df001104 	addi	fp,sp,68
 400d2dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d2e0:	e0bfff17 	ldw	r2,-4(fp)
 400d2e4:	10000616 	blt	r2,zero,400d300 <isatty+0x34>
 400d2e8:	e0bfff17 	ldw	r2,-4(fp)
 400d2ec:	10c00324 	muli	r3,r2,12
 400d2f0:	00810074 	movhi	r2,1025
 400d2f4:	10820004 	addi	r2,r2,2048
 400d2f8:	1885883a 	add	r2,r3,r2
 400d2fc:	00000106 	br	400d304 <isatty+0x38>
 400d300:	0005883a 	mov	r2,zero
 400d304:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400d308:	e0bfef17 	ldw	r2,-68(fp)
 400d30c:	10000e26 	beq	r2,zero,400d348 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400d310:	e0bfef17 	ldw	r2,-68(fp)
 400d314:	10800017 	ldw	r2,0(r2)
 400d318:	10800817 	ldw	r2,32(r2)
 400d31c:	1000021e 	bne	r2,zero,400d328 <isatty+0x5c>
    {
      return 1;
 400d320:	00800044 	movi	r2,1
 400d324:	00000d06 	br	400d35c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400d328:	e0bff004 	addi	r2,fp,-64
 400d32c:	100b883a 	mov	r5,r2
 400d330:	e13fff17 	ldw	r4,-4(fp)
 400d334:	400d1e00 	call	400d1e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400d338:	e0bff117 	ldw	r2,-60(fp)
 400d33c:	10880020 	cmpeqi	r2,r2,8192
 400d340:	10803fcc 	andi	r2,r2,255
 400d344:	00000506 	br	400d35c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d348:	400d2900 	call	400d290 <alt_get_errno>
 400d34c:	1007883a 	mov	r3,r2
 400d350:	00801444 	movi	r2,81
 400d354:	18800015 	stw	r2,0(r3)
    return 0;
 400d358:	0005883a 	mov	r2,zero
  }
}
 400d35c:	e037883a 	mov	sp,fp
 400d360:	dfc00117 	ldw	ra,4(sp)
 400d364:	df000017 	ldw	fp,0(sp)
 400d368:	dec00204 	addi	sp,sp,8
 400d36c:	f800283a 	ret

0400d370 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400d370:	defffc04 	addi	sp,sp,-16
 400d374:	df000315 	stw	fp,12(sp)
 400d378:	df000304 	addi	fp,sp,12
 400d37c:	e13ffd15 	stw	r4,-12(fp)
 400d380:	e17ffe15 	stw	r5,-8(fp)
 400d384:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400d388:	e0fffe17 	ldw	r3,-8(fp)
 400d38c:	e0bffd17 	ldw	r2,-12(fp)
 400d390:	18800c26 	beq	r3,r2,400d3c4 <alt_load_section+0x54>
  {
    while( to != end )
 400d394:	00000806 	br	400d3b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400d398:	e0bffe17 	ldw	r2,-8(fp)
 400d39c:	10c00104 	addi	r3,r2,4
 400d3a0:	e0fffe15 	stw	r3,-8(fp)
 400d3a4:	e0fffd17 	ldw	r3,-12(fp)
 400d3a8:	19000104 	addi	r4,r3,4
 400d3ac:	e13ffd15 	stw	r4,-12(fp)
 400d3b0:	18c00017 	ldw	r3,0(r3)
 400d3b4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400d3b8:	e0fffe17 	ldw	r3,-8(fp)
 400d3bc:	e0bfff17 	ldw	r2,-4(fp)
 400d3c0:	18bff51e 	bne	r3,r2,400d398 <__alt_data_end+0xff00d398>
    {
      *to++ = *from++;
    }
  }
}
 400d3c4:	0001883a 	nop
 400d3c8:	e037883a 	mov	sp,fp
 400d3cc:	df000017 	ldw	fp,0(sp)
 400d3d0:	dec00104 	addi	sp,sp,4
 400d3d4:	f800283a 	ret

0400d3d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400d3d8:	defffe04 	addi	sp,sp,-8
 400d3dc:	dfc00115 	stw	ra,4(sp)
 400d3e0:	df000015 	stw	fp,0(sp)
 400d3e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400d3e8:	01810074 	movhi	r6,1025
 400d3ec:	31869104 	addi	r6,r6,6724
 400d3f0:	01410074 	movhi	r5,1025
 400d3f4:	297fcd04 	addi	r5,r5,-204
 400d3f8:	01010074 	movhi	r4,1025
 400d3fc:	21069104 	addi	r4,r4,6724
 400d400:	400d3700 	call	400d370 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400d404:	01810034 	movhi	r6,1024
 400d408:	31809104 	addi	r6,r6,580
 400d40c:	01410034 	movhi	r5,1024
 400d410:	29400804 	addi	r5,r5,32
 400d414:	01010034 	movhi	r4,1024
 400d418:	21000804 	addi	r4,r4,32
 400d41c:	400d3700 	call	400d370 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400d420:	01810074 	movhi	r6,1025
 400d424:	31bfcd04 	addi	r6,r6,-204
 400d428:	01410074 	movhi	r5,1025
 400d42c:	297ed404 	addi	r5,r5,-1200
 400d430:	01010074 	movhi	r4,1025
 400d434:	213ed404 	addi	r4,r4,-1200
 400d438:	400d3700 	call	400d370 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400d43c:	400d1300 	call	400d130 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400d440:	400ecb40 	call	400ecb4 <alt_icache_flush_all>
}
 400d444:	0001883a 	nop
 400d448:	e037883a 	mov	sp,fp
 400d44c:	dfc00117 	ldw	ra,4(sp)
 400d450:	df000017 	ldw	fp,0(sp)
 400d454:	dec00204 	addi	sp,sp,8
 400d458:	f800283a 	ret

0400d45c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d45c:	defffe04 	addi	sp,sp,-8
 400d460:	dfc00115 	stw	ra,4(sp)
 400d464:	df000015 	stw	fp,0(sp)
 400d468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d46c:	d0a00e17 	ldw	r2,-32712(gp)
 400d470:	10000326 	beq	r2,zero,400d480 <alt_get_errno+0x24>
 400d474:	d0a00e17 	ldw	r2,-32712(gp)
 400d478:	103ee83a 	callr	r2
 400d47c:	00000106 	br	400d484 <alt_get_errno+0x28>
 400d480:	d0a6df04 	addi	r2,gp,-25732
}
 400d484:	e037883a 	mov	sp,fp
 400d488:	dfc00117 	ldw	ra,4(sp)
 400d48c:	df000017 	ldw	fp,0(sp)
 400d490:	dec00204 	addi	sp,sp,8
 400d494:	f800283a 	ret

0400d498 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400d498:	defff904 	addi	sp,sp,-28
 400d49c:	dfc00615 	stw	ra,24(sp)
 400d4a0:	df000515 	stw	fp,20(sp)
 400d4a4:	df000504 	addi	fp,sp,20
 400d4a8:	e13ffd15 	stw	r4,-12(fp)
 400d4ac:	e17ffe15 	stw	r5,-8(fp)
 400d4b0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400d4b4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d4b8:	e0bffd17 	ldw	r2,-12(fp)
 400d4bc:	10000616 	blt	r2,zero,400d4d8 <lseek+0x40>
 400d4c0:	e0bffd17 	ldw	r2,-12(fp)
 400d4c4:	10c00324 	muli	r3,r2,12
 400d4c8:	00810074 	movhi	r2,1025
 400d4cc:	10820004 	addi	r2,r2,2048
 400d4d0:	1885883a 	add	r2,r3,r2
 400d4d4:	00000106 	br	400d4dc <lseek+0x44>
 400d4d8:	0005883a 	mov	r2,zero
 400d4dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400d4e0:	e0bffc17 	ldw	r2,-16(fp)
 400d4e4:	10001026 	beq	r2,zero,400d528 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400d4e8:	e0bffc17 	ldw	r2,-16(fp)
 400d4ec:	10800017 	ldw	r2,0(r2)
 400d4f0:	10800717 	ldw	r2,28(r2)
 400d4f4:	10000926 	beq	r2,zero,400d51c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400d4f8:	e0bffc17 	ldw	r2,-16(fp)
 400d4fc:	10800017 	ldw	r2,0(r2)
 400d500:	10800717 	ldw	r2,28(r2)
 400d504:	e1bfff17 	ldw	r6,-4(fp)
 400d508:	e17ffe17 	ldw	r5,-8(fp)
 400d50c:	e13ffc17 	ldw	r4,-16(fp)
 400d510:	103ee83a 	callr	r2
 400d514:	e0bffb15 	stw	r2,-20(fp)
 400d518:	00000506 	br	400d530 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400d51c:	00bfde84 	movi	r2,-134
 400d520:	e0bffb15 	stw	r2,-20(fp)
 400d524:	00000206 	br	400d530 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400d528:	00bfebc4 	movi	r2,-81
 400d52c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400d530:	e0bffb17 	ldw	r2,-20(fp)
 400d534:	1000070e 	bge	r2,zero,400d554 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400d538:	400d45c0 	call	400d45c <alt_get_errno>
 400d53c:	1007883a 	mov	r3,r2
 400d540:	e0bffb17 	ldw	r2,-20(fp)
 400d544:	0085c83a 	sub	r2,zero,r2
 400d548:	18800015 	stw	r2,0(r3)
    rc = -1;
 400d54c:	00bfffc4 	movi	r2,-1
 400d550:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400d554:	e0bffb17 	ldw	r2,-20(fp)
}
 400d558:	e037883a 	mov	sp,fp
 400d55c:	dfc00117 	ldw	ra,4(sp)
 400d560:	df000017 	ldw	fp,0(sp)
 400d564:	dec00204 	addi	sp,sp,8
 400d568:	f800283a 	ret

0400d56c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400d56c:	defffd04 	addi	sp,sp,-12
 400d570:	dfc00215 	stw	ra,8(sp)
 400d574:	df000115 	stw	fp,4(sp)
 400d578:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400d57c:	0009883a 	mov	r4,zero
 400d580:	400da880 	call	400da88 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400d584:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400d588:	400dac00 	call	400dac0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400d58c:	01810074 	movhi	r6,1025
 400d590:	31bfc204 	addi	r6,r6,-248
 400d594:	01410074 	movhi	r5,1025
 400d598:	297fc204 	addi	r5,r5,-248
 400d59c:	01010074 	movhi	r4,1025
 400d5a0:	213fc204 	addi	r4,r4,-248
 400d5a4:	400f04c0 	call	400f04c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400d5a8:	400eb640 	call	400eb64 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400d5ac:	01010074 	movhi	r4,1025
 400d5b0:	213af104 	addi	r4,r4,-5180
 400d5b4:	400f7bc0 	call	400f7bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400d5b8:	d0a6e017 	ldw	r2,-25728(gp)
 400d5bc:	d0e6e117 	ldw	r3,-25724(gp)
 400d5c0:	d126e217 	ldw	r4,-25720(gp)
 400d5c4:	200d883a 	mov	r6,r4
 400d5c8:	180b883a 	mov	r5,r3
 400d5cc:	1009883a 	mov	r4,r2
 400d5d0:	40004580 	call	4000458 <main>
 400d5d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400d5d8:	01000044 	movi	r4,1
 400d5dc:	400d0600 	call	400d060 <close>
  exit (result);
 400d5e0:	e13fff17 	ldw	r4,-4(fp)
 400d5e4:	400f7d00 	call	400f7d0 <exit>

0400d5e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400d5e8:	defffe04 	addi	sp,sp,-8
 400d5ec:	df000115 	stw	fp,4(sp)
 400d5f0:	df000104 	addi	fp,sp,4
 400d5f4:	e13fff15 	stw	r4,-4(fp)
}
 400d5f8:	0001883a 	nop
 400d5fc:	e037883a 	mov	sp,fp
 400d600:	df000017 	ldw	fp,0(sp)
 400d604:	dec00104 	addi	sp,sp,4
 400d608:	f800283a 	ret

0400d60c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400d60c:	defffe04 	addi	sp,sp,-8
 400d610:	df000115 	stw	fp,4(sp)
 400d614:	df000104 	addi	fp,sp,4
 400d618:	e13fff15 	stw	r4,-4(fp)
}
 400d61c:	0001883a 	nop
 400d620:	e037883a 	mov	sp,fp
 400d624:	df000017 	ldw	fp,0(sp)
 400d628:	dec00104 	addi	sp,sp,4
 400d62c:	f800283a 	ret

0400d630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d630:	defffe04 	addi	sp,sp,-8
 400d634:	dfc00115 	stw	ra,4(sp)
 400d638:	df000015 	stw	fp,0(sp)
 400d63c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d640:	d0a00e17 	ldw	r2,-32712(gp)
 400d644:	10000326 	beq	r2,zero,400d654 <alt_get_errno+0x24>
 400d648:	d0a00e17 	ldw	r2,-32712(gp)
 400d64c:	103ee83a 	callr	r2
 400d650:	00000106 	br	400d658 <alt_get_errno+0x28>
 400d654:	d0a6df04 	addi	r2,gp,-25732
}
 400d658:	e037883a 	mov	sp,fp
 400d65c:	dfc00117 	ldw	ra,4(sp)
 400d660:	df000017 	ldw	fp,0(sp)
 400d664:	dec00204 	addi	sp,sp,8
 400d668:	f800283a 	ret

0400d66c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400d66c:	defff904 	addi	sp,sp,-28
 400d670:	dfc00615 	stw	ra,24(sp)
 400d674:	df000515 	stw	fp,20(sp)
 400d678:	df000504 	addi	fp,sp,20
 400d67c:	e13ffd15 	stw	r4,-12(fp)
 400d680:	e17ffe15 	stw	r5,-8(fp)
 400d684:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d688:	e0bffd17 	ldw	r2,-12(fp)
 400d68c:	10000616 	blt	r2,zero,400d6a8 <read+0x3c>
 400d690:	e0bffd17 	ldw	r2,-12(fp)
 400d694:	10c00324 	muli	r3,r2,12
 400d698:	00810074 	movhi	r2,1025
 400d69c:	10820004 	addi	r2,r2,2048
 400d6a0:	1885883a 	add	r2,r3,r2
 400d6a4:	00000106 	br	400d6ac <read+0x40>
 400d6a8:	0005883a 	mov	r2,zero
 400d6ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400d6b0:	e0bffb17 	ldw	r2,-20(fp)
 400d6b4:	10002226 	beq	r2,zero,400d740 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d6b8:	e0bffb17 	ldw	r2,-20(fp)
 400d6bc:	10800217 	ldw	r2,8(r2)
 400d6c0:	108000cc 	andi	r2,r2,3
 400d6c4:	10800060 	cmpeqi	r2,r2,1
 400d6c8:	1000181e 	bne	r2,zero,400d72c <read+0xc0>
        (fd->dev->read))
 400d6cc:	e0bffb17 	ldw	r2,-20(fp)
 400d6d0:	10800017 	ldw	r2,0(r2)
 400d6d4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d6d8:	10001426 	beq	r2,zero,400d72c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400d6dc:	e0bffb17 	ldw	r2,-20(fp)
 400d6e0:	10800017 	ldw	r2,0(r2)
 400d6e4:	10800517 	ldw	r2,20(r2)
 400d6e8:	e0ffff17 	ldw	r3,-4(fp)
 400d6ec:	180d883a 	mov	r6,r3
 400d6f0:	e17ffe17 	ldw	r5,-8(fp)
 400d6f4:	e13ffb17 	ldw	r4,-20(fp)
 400d6f8:	103ee83a 	callr	r2
 400d6fc:	e0bffc15 	stw	r2,-16(fp)
 400d700:	e0bffc17 	ldw	r2,-16(fp)
 400d704:	1000070e 	bge	r2,zero,400d724 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400d708:	400d6300 	call	400d630 <alt_get_errno>
 400d70c:	1007883a 	mov	r3,r2
 400d710:	e0bffc17 	ldw	r2,-16(fp)
 400d714:	0085c83a 	sub	r2,zero,r2
 400d718:	18800015 	stw	r2,0(r3)
          return -1;
 400d71c:	00bfffc4 	movi	r2,-1
 400d720:	00000c06 	br	400d754 <read+0xe8>
        }
        return rval;
 400d724:	e0bffc17 	ldw	r2,-16(fp)
 400d728:	00000a06 	br	400d754 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400d72c:	400d6300 	call	400d630 <alt_get_errno>
 400d730:	1007883a 	mov	r3,r2
 400d734:	00800344 	movi	r2,13
 400d738:	18800015 	stw	r2,0(r3)
 400d73c:	00000406 	br	400d750 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400d740:	400d6300 	call	400d630 <alt_get_errno>
 400d744:	1007883a 	mov	r3,r2
 400d748:	00801444 	movi	r2,81
 400d74c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400d750:	00bfffc4 	movi	r2,-1
}
 400d754:	e037883a 	mov	sp,fp
 400d758:	dfc00117 	ldw	ra,4(sp)
 400d75c:	df000017 	ldw	fp,0(sp)
 400d760:	dec00204 	addi	sp,sp,8
 400d764:	f800283a 	ret

0400d768 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400d768:	defffe04 	addi	sp,sp,-8
 400d76c:	df000115 	stw	fp,4(sp)
 400d770:	df000104 	addi	fp,sp,4
 400d774:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400d778:	e0bfff17 	ldw	r2,-4(fp)
 400d77c:	108000d0 	cmplti	r2,r2,3
 400d780:	10000d1e 	bne	r2,zero,400d7b8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400d784:	00810074 	movhi	r2,1025
 400d788:	10820004 	addi	r2,r2,2048
 400d78c:	e0ffff17 	ldw	r3,-4(fp)
 400d790:	18c00324 	muli	r3,r3,12
 400d794:	10c5883a 	add	r2,r2,r3
 400d798:	10800204 	addi	r2,r2,8
 400d79c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400d7a0:	00810074 	movhi	r2,1025
 400d7a4:	10820004 	addi	r2,r2,2048
 400d7a8:	e0ffff17 	ldw	r3,-4(fp)
 400d7ac:	18c00324 	muli	r3,r3,12
 400d7b0:	10c5883a 	add	r2,r2,r3
 400d7b4:	10000015 	stw	zero,0(r2)
  }
}
 400d7b8:	0001883a 	nop
 400d7bc:	e037883a 	mov	sp,fp
 400d7c0:	df000017 	ldw	fp,0(sp)
 400d7c4:	dec00104 	addi	sp,sp,4
 400d7c8:	f800283a 	ret

0400d7cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400d7cc:	defff904 	addi	sp,sp,-28
 400d7d0:	df000615 	stw	fp,24(sp)
 400d7d4:	df000604 	addi	fp,sp,24
 400d7d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d7dc:	0005303a 	rdctl	r2,status
 400d7e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d7e4:	e0fffe17 	ldw	r3,-8(fp)
 400d7e8:	00bfff84 	movi	r2,-2
 400d7ec:	1884703a 	and	r2,r3,r2
 400d7f0:	1001703a 	wrctl	status,r2
  
  return context;
 400d7f4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400d7f8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400d7fc:	d0a00f17 	ldw	r2,-32708(gp)
 400d800:	10c000c4 	addi	r3,r2,3
 400d804:	00bfff04 	movi	r2,-4
 400d808:	1884703a 	and	r2,r3,r2
 400d80c:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400d810:	d0e00f17 	ldw	r3,-32708(gp)
 400d814:	e0bfff17 	ldw	r2,-4(fp)
 400d818:	1887883a 	add	r3,r3,r2
 400d81c:	00814034 	movhi	r2,1280
 400d820:	10800004 	addi	r2,r2,0
 400d824:	10c0062e 	bgeu	r2,r3,400d840 <sbrk+0x74>
 400d828:	e0bffb17 	ldw	r2,-20(fp)
 400d82c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d830:	e0bffa17 	ldw	r2,-24(fp)
 400d834:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400d838:	00bfffc4 	movi	r2,-1
 400d83c:	00000b06 	br	400d86c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400d840:	d0a00f17 	ldw	r2,-32708(gp)
 400d844:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400d848:	d0e00f17 	ldw	r3,-32708(gp)
 400d84c:	e0bfff17 	ldw	r2,-4(fp)
 400d850:	1885883a 	add	r2,r3,r2
 400d854:	d0a00f15 	stw	r2,-32708(gp)
 400d858:	e0bffb17 	ldw	r2,-20(fp)
 400d85c:	e0bffc15 	stw	r2,-16(fp)
 400d860:	e0bffc17 	ldw	r2,-16(fp)
 400d864:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400d868:	e0bffd17 	ldw	r2,-12(fp)
} 
 400d86c:	e037883a 	mov	sp,fp
 400d870:	df000017 	ldw	fp,0(sp)
 400d874:	dec00104 	addi	sp,sp,4
 400d878:	f800283a 	ret

0400d87c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d87c:	defffe04 	addi	sp,sp,-8
 400d880:	dfc00115 	stw	ra,4(sp)
 400d884:	df000015 	stw	fp,0(sp)
 400d888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d88c:	d0a00e17 	ldw	r2,-32712(gp)
 400d890:	10000326 	beq	r2,zero,400d8a0 <alt_get_errno+0x24>
 400d894:	d0a00e17 	ldw	r2,-32712(gp)
 400d898:	103ee83a 	callr	r2
 400d89c:	00000106 	br	400d8a4 <alt_get_errno+0x28>
 400d8a0:	d0a6df04 	addi	r2,gp,-25732
}
 400d8a4:	e037883a 	mov	sp,fp
 400d8a8:	dfc00117 	ldw	ra,4(sp)
 400d8ac:	df000017 	ldw	fp,0(sp)
 400d8b0:	dec00204 	addi	sp,sp,8
 400d8b4:	f800283a 	ret

0400d8b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400d8b8:	defff904 	addi	sp,sp,-28
 400d8bc:	dfc00615 	stw	ra,24(sp)
 400d8c0:	df000515 	stw	fp,20(sp)
 400d8c4:	df000504 	addi	fp,sp,20
 400d8c8:	e13ffd15 	stw	r4,-12(fp)
 400d8cc:	e17ffe15 	stw	r5,-8(fp)
 400d8d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d8d4:	e0bffd17 	ldw	r2,-12(fp)
 400d8d8:	10000616 	blt	r2,zero,400d8f4 <write+0x3c>
 400d8dc:	e0bffd17 	ldw	r2,-12(fp)
 400d8e0:	10c00324 	muli	r3,r2,12
 400d8e4:	00810074 	movhi	r2,1025
 400d8e8:	10820004 	addi	r2,r2,2048
 400d8ec:	1885883a 	add	r2,r3,r2
 400d8f0:	00000106 	br	400d8f8 <write+0x40>
 400d8f4:	0005883a 	mov	r2,zero
 400d8f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400d8fc:	e0bffb17 	ldw	r2,-20(fp)
 400d900:	10002126 	beq	r2,zero,400d988 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400d904:	e0bffb17 	ldw	r2,-20(fp)
 400d908:	10800217 	ldw	r2,8(r2)
 400d90c:	108000cc 	andi	r2,r2,3
 400d910:	10001826 	beq	r2,zero,400d974 <write+0xbc>
 400d914:	e0bffb17 	ldw	r2,-20(fp)
 400d918:	10800017 	ldw	r2,0(r2)
 400d91c:	10800617 	ldw	r2,24(r2)
 400d920:	10001426 	beq	r2,zero,400d974 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400d924:	e0bffb17 	ldw	r2,-20(fp)
 400d928:	10800017 	ldw	r2,0(r2)
 400d92c:	10800617 	ldw	r2,24(r2)
 400d930:	e0ffff17 	ldw	r3,-4(fp)
 400d934:	180d883a 	mov	r6,r3
 400d938:	e17ffe17 	ldw	r5,-8(fp)
 400d93c:	e13ffb17 	ldw	r4,-20(fp)
 400d940:	103ee83a 	callr	r2
 400d944:	e0bffc15 	stw	r2,-16(fp)
 400d948:	e0bffc17 	ldw	r2,-16(fp)
 400d94c:	1000070e 	bge	r2,zero,400d96c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400d950:	400d87c0 	call	400d87c <alt_get_errno>
 400d954:	1007883a 	mov	r3,r2
 400d958:	e0bffc17 	ldw	r2,-16(fp)
 400d95c:	0085c83a 	sub	r2,zero,r2
 400d960:	18800015 	stw	r2,0(r3)
        return -1;
 400d964:	00bfffc4 	movi	r2,-1
 400d968:	00000c06 	br	400d99c <write+0xe4>
      }
      return rval;
 400d96c:	e0bffc17 	ldw	r2,-16(fp)
 400d970:	00000a06 	br	400d99c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400d974:	400d87c0 	call	400d87c <alt_get_errno>
 400d978:	1007883a 	mov	r3,r2
 400d97c:	00800344 	movi	r2,13
 400d980:	18800015 	stw	r2,0(r3)
 400d984:	00000406 	br	400d998 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400d988:	400d87c0 	call	400d87c <alt_get_errno>
 400d98c:	1007883a 	mov	r3,r2
 400d990:	00801444 	movi	r2,81
 400d994:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400d998:	00bfffc4 	movi	r2,-1
}
 400d99c:	e037883a 	mov	sp,fp
 400d9a0:	dfc00117 	ldw	ra,4(sp)
 400d9a4:	df000017 	ldw	fp,0(sp)
 400d9a8:	dec00204 	addi	sp,sp,8
 400d9ac:	f800283a 	ret

0400d9b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400d9b0:	defffd04 	addi	sp,sp,-12
 400d9b4:	dfc00215 	stw	ra,8(sp)
 400d9b8:	df000115 	stw	fp,4(sp)
 400d9bc:	df000104 	addi	fp,sp,4
 400d9c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400d9c4:	d1600b04 	addi	r5,gp,-32724
 400d9c8:	e13fff17 	ldw	r4,-4(fp)
 400d9cc:	400eac00 	call	400eac0 <alt_dev_llist_insert>
}
 400d9d0:	e037883a 	mov	sp,fp
 400d9d4:	dfc00117 	ldw	ra,4(sp)
 400d9d8:	df000017 	ldw	fp,0(sp)
 400d9dc:	dec00204 	addi	sp,sp,8
 400d9e0:	f800283a 	ret

0400d9e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d9e4:	defffe04 	addi	sp,sp,-8
 400d9e8:	dfc00115 	stw	ra,4(sp)
 400d9ec:	df000015 	stw	fp,0(sp)
 400d9f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d9f4:	d0a00e17 	ldw	r2,-32712(gp)
 400d9f8:	10000326 	beq	r2,zero,400da08 <alt_get_errno+0x24>
 400d9fc:	d0a00e17 	ldw	r2,-32712(gp)
 400da00:	103ee83a 	callr	r2
 400da04:	00000106 	br	400da0c <alt_get_errno+0x28>
 400da08:	d0a6df04 	addi	r2,gp,-25732
}
 400da0c:	e037883a 	mov	sp,fp
 400da10:	dfc00117 	ldw	ra,4(sp)
 400da14:	df000017 	ldw	fp,0(sp)
 400da18:	dec00204 	addi	sp,sp,8
 400da1c:	f800283a 	ret

0400da20 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 400da20:	defffc04 	addi	sp,sp,-16
 400da24:	dfc00315 	stw	ra,12(sp)
 400da28:	df000215 	stw	fp,8(sp)
 400da2c:	df000204 	addi	fp,sp,8
 400da30:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 400da34:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 400da38:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 400da3c:	e0bffe17 	ldw	r2,-8(fp)
 400da40:	1000051e 	bne	r2,zero,400da58 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 400da44:	d1601004 	addi	r5,gp,-32704
 400da48:	e13fff17 	ldw	r4,-4(fp)
 400da4c:	400eac00 	call	400eac0 <alt_dev_llist_insert>
 400da50:	e0bffe15 	stw	r2,-8(fp)
 400da54:	00000606 	br	400da70 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 400da58:	400d9e40 	call	400d9e4 <alt_get_errno>
 400da5c:	1007883a 	mov	r3,r2
 400da60:	00800304 	movi	r2,12
 400da64:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 400da68:	00bffd04 	movi	r2,-12
 400da6c:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 400da70:	e0bffe17 	ldw	r2,-8(fp)
}
 400da74:	e037883a 	mov	sp,fp
 400da78:	dfc00117 	ldw	ra,4(sp)
 400da7c:	df000017 	ldw	fp,0(sp)
 400da80:	dec00204 	addi	sp,sp,8
 400da84:	f800283a 	ret

0400da88 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400da88:	defffd04 	addi	sp,sp,-12
 400da8c:	dfc00215 	stw	ra,8(sp)
 400da90:	df000115 	stw	fp,4(sp)
 400da94:	df000104 	addi	fp,sp,4
 400da98:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 400da9c:	400f4c00 	call	400f4c0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400daa0:	00800044 	movi	r2,1
 400daa4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400daa8:	0001883a 	nop
 400daac:	e037883a 	mov	sp,fp
 400dab0:	dfc00117 	ldw	ra,4(sp)
 400dab4:	df000017 	ldw	fp,0(sp)
 400dab8:	dec00204 	addi	sp,sp,8
 400dabc:	f800283a 	ret

0400dac0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400dac0:	defffe04 	addi	sp,sp,-8
 400dac4:	dfc00115 	stw	ra,4(sp)
 400dac8:	df000015 	stw	fp,0(sp)
 400dacc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 400dad0:	01c01904 	movi	r7,100
 400dad4:	000d883a 	mov	r6,zero
 400dad8:	000b883a 	mov	r5,zero
 400dadc:	01020034 	movhi	r4,2048
 400dae0:	21040004 	addi	r4,r4,4096
 400dae4:	400e8dc0 	call	400e8dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART0, jtag_uart0);
 400dae8:	01800044 	movi	r6,1
 400daec:	000b883a 	mov	r5,zero
 400daf0:	01010074 	movhi	r4,1025
 400daf4:	21026a04 	addi	r4,r4,2472
 400daf8:	400dc940 	call	400dc94 <altera_avalon_jtag_uart_init>
 400dafc:	01010074 	movhi	r4,1025
 400db00:	21026004 	addi	r4,r4,2432
 400db04:	400d9b00 	call	400d9b0 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX, mutex);
 400db08:	01010074 	movhi	r4,1025
 400db0c:	21067804 	addi	r4,r4,6624
 400db10:	400da200 	call	400da20 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 400db14:	0001883a 	nop
}
 400db18:	0001883a 	nop
 400db1c:	e037883a 	mov	sp,fp
 400db20:	dfc00117 	ldw	ra,4(sp)
 400db24:	df000017 	ldw	fp,0(sp)
 400db28:	dec00204 	addi	sp,sp,8
 400db2c:	f800283a 	ret

0400db30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400db30:	defffa04 	addi	sp,sp,-24
 400db34:	dfc00515 	stw	ra,20(sp)
 400db38:	df000415 	stw	fp,16(sp)
 400db3c:	df000404 	addi	fp,sp,16
 400db40:	e13ffd15 	stw	r4,-12(fp)
 400db44:	e17ffe15 	stw	r5,-8(fp)
 400db48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400db4c:	e0bffd17 	ldw	r2,-12(fp)
 400db50:	10800017 	ldw	r2,0(r2)
 400db54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400db58:	e0bffc17 	ldw	r2,-16(fp)
 400db5c:	10c00a04 	addi	r3,r2,40
 400db60:	e0bffd17 	ldw	r2,-12(fp)
 400db64:	10800217 	ldw	r2,8(r2)
 400db68:	100f883a 	mov	r7,r2
 400db6c:	e1bfff17 	ldw	r6,-4(fp)
 400db70:	e17ffe17 	ldw	r5,-8(fp)
 400db74:	1809883a 	mov	r4,r3
 400db78:	400e1580 	call	400e158 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400db7c:	e037883a 	mov	sp,fp
 400db80:	dfc00117 	ldw	ra,4(sp)
 400db84:	df000017 	ldw	fp,0(sp)
 400db88:	dec00204 	addi	sp,sp,8
 400db8c:	f800283a 	ret

0400db90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400db90:	defffa04 	addi	sp,sp,-24
 400db94:	dfc00515 	stw	ra,20(sp)
 400db98:	df000415 	stw	fp,16(sp)
 400db9c:	df000404 	addi	fp,sp,16
 400dba0:	e13ffd15 	stw	r4,-12(fp)
 400dba4:	e17ffe15 	stw	r5,-8(fp)
 400dba8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400dbac:	e0bffd17 	ldw	r2,-12(fp)
 400dbb0:	10800017 	ldw	r2,0(r2)
 400dbb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400dbb8:	e0bffc17 	ldw	r2,-16(fp)
 400dbbc:	10c00a04 	addi	r3,r2,40
 400dbc0:	e0bffd17 	ldw	r2,-12(fp)
 400dbc4:	10800217 	ldw	r2,8(r2)
 400dbc8:	100f883a 	mov	r7,r2
 400dbcc:	e1bfff17 	ldw	r6,-4(fp)
 400dbd0:	e17ffe17 	ldw	r5,-8(fp)
 400dbd4:	1809883a 	mov	r4,r3
 400dbd8:	400e3740 	call	400e374 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400dbdc:	e037883a 	mov	sp,fp
 400dbe0:	dfc00117 	ldw	ra,4(sp)
 400dbe4:	df000017 	ldw	fp,0(sp)
 400dbe8:	dec00204 	addi	sp,sp,8
 400dbec:	f800283a 	ret

0400dbf0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400dbf0:	defffc04 	addi	sp,sp,-16
 400dbf4:	dfc00315 	stw	ra,12(sp)
 400dbf8:	df000215 	stw	fp,8(sp)
 400dbfc:	df000204 	addi	fp,sp,8
 400dc00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400dc04:	e0bfff17 	ldw	r2,-4(fp)
 400dc08:	10800017 	ldw	r2,0(r2)
 400dc0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400dc10:	e0bffe17 	ldw	r2,-8(fp)
 400dc14:	10c00a04 	addi	r3,r2,40
 400dc18:	e0bfff17 	ldw	r2,-4(fp)
 400dc1c:	10800217 	ldw	r2,8(r2)
 400dc20:	100b883a 	mov	r5,r2
 400dc24:	1809883a 	mov	r4,r3
 400dc28:	400e0000 	call	400e000 <altera_avalon_jtag_uart_close>
}
 400dc2c:	e037883a 	mov	sp,fp
 400dc30:	dfc00117 	ldw	ra,4(sp)
 400dc34:	df000017 	ldw	fp,0(sp)
 400dc38:	dec00204 	addi	sp,sp,8
 400dc3c:	f800283a 	ret

0400dc40 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400dc40:	defffa04 	addi	sp,sp,-24
 400dc44:	dfc00515 	stw	ra,20(sp)
 400dc48:	df000415 	stw	fp,16(sp)
 400dc4c:	df000404 	addi	fp,sp,16
 400dc50:	e13ffd15 	stw	r4,-12(fp)
 400dc54:	e17ffe15 	stw	r5,-8(fp)
 400dc58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400dc5c:	e0bffd17 	ldw	r2,-12(fp)
 400dc60:	10800017 	ldw	r2,0(r2)
 400dc64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400dc68:	e0bffc17 	ldw	r2,-16(fp)
 400dc6c:	10800a04 	addi	r2,r2,40
 400dc70:	e1bfff17 	ldw	r6,-4(fp)
 400dc74:	e17ffe17 	ldw	r5,-8(fp)
 400dc78:	1009883a 	mov	r4,r2
 400dc7c:	400e0680 	call	400e068 <altera_avalon_jtag_uart_ioctl>
}
 400dc80:	e037883a 	mov	sp,fp
 400dc84:	dfc00117 	ldw	ra,4(sp)
 400dc88:	df000017 	ldw	fp,0(sp)
 400dc8c:	dec00204 	addi	sp,sp,8
 400dc90:	f800283a 	ret

0400dc94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400dc94:	defffa04 	addi	sp,sp,-24
 400dc98:	dfc00515 	stw	ra,20(sp)
 400dc9c:	df000415 	stw	fp,16(sp)
 400dca0:	df000404 	addi	fp,sp,16
 400dca4:	e13ffd15 	stw	r4,-12(fp)
 400dca8:	e17ffe15 	stw	r5,-8(fp)
 400dcac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400dcb0:	e0bffd17 	ldw	r2,-12(fp)
 400dcb4:	00c00044 	movi	r3,1
 400dcb8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400dcbc:	e0bffd17 	ldw	r2,-12(fp)
 400dcc0:	10800017 	ldw	r2,0(r2)
 400dcc4:	10800104 	addi	r2,r2,4
 400dcc8:	1007883a 	mov	r3,r2
 400dccc:	e0bffd17 	ldw	r2,-12(fp)
 400dcd0:	10800817 	ldw	r2,32(r2)
 400dcd4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400dcd8:	e0bffe17 	ldw	r2,-8(fp)
 400dcdc:	e0ffff17 	ldw	r3,-4(fp)
 400dce0:	d8000015 	stw	zero,0(sp)
 400dce4:	e1fffd17 	ldw	r7,-12(fp)
 400dce8:	01810074 	movhi	r6,1025
 400dcec:	31b75504 	addi	r6,r6,-8876
 400dcf0:	180b883a 	mov	r5,r3
 400dcf4:	1009883a 	mov	r4,r2
 400dcf8:	400ece80 	call	400ece8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400dcfc:	e0bffd17 	ldw	r2,-12(fp)
 400dd00:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400dd04:	e0bffd17 	ldw	r2,-12(fp)
 400dd08:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400dd0c:	d0e6e417 	ldw	r3,-25712(gp)
 400dd10:	e1fffd17 	ldw	r7,-12(fp)
 400dd14:	01810074 	movhi	r6,1025
 400dd18:	31b7d804 	addi	r6,r6,-8352
 400dd1c:	180b883a 	mov	r5,r3
 400dd20:	1009883a 	mov	r4,r2
 400dd24:	400e9580 	call	400e958 <alt_alarm_start>
 400dd28:	1000040e 	bge	r2,zero,400dd3c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400dd2c:	e0fffd17 	ldw	r3,-12(fp)
 400dd30:	00a00034 	movhi	r2,32768
 400dd34:	10bfffc4 	addi	r2,r2,-1
 400dd38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400dd3c:	0001883a 	nop
 400dd40:	e037883a 	mov	sp,fp
 400dd44:	dfc00117 	ldw	ra,4(sp)
 400dd48:	df000017 	ldw	fp,0(sp)
 400dd4c:	dec00204 	addi	sp,sp,8
 400dd50:	f800283a 	ret

0400dd54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400dd54:	defff804 	addi	sp,sp,-32
 400dd58:	df000715 	stw	fp,28(sp)
 400dd5c:	df000704 	addi	fp,sp,28
 400dd60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400dd64:	e0bfff17 	ldw	r2,-4(fp)
 400dd68:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400dd6c:	e0bffb17 	ldw	r2,-20(fp)
 400dd70:	10800017 	ldw	r2,0(r2)
 400dd74:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400dd78:	e0bffc17 	ldw	r2,-16(fp)
 400dd7c:	10800104 	addi	r2,r2,4
 400dd80:	10800037 	ldwio	r2,0(r2)
 400dd84:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400dd88:	e0bffd17 	ldw	r2,-12(fp)
 400dd8c:	1080c00c 	andi	r2,r2,768
 400dd90:	10006d26 	beq	r2,zero,400df48 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400dd94:	e0bffd17 	ldw	r2,-12(fp)
 400dd98:	1080400c 	andi	r2,r2,256
 400dd9c:	10003526 	beq	r2,zero,400de74 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400dda0:	00800074 	movhi	r2,1
 400dda4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400dda8:	e0bffb17 	ldw	r2,-20(fp)
 400ddac:	10800a17 	ldw	r2,40(r2)
 400ddb0:	10800044 	addi	r2,r2,1
 400ddb4:	1081ffcc 	andi	r2,r2,2047
 400ddb8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400ddbc:	e0bffb17 	ldw	r2,-20(fp)
 400ddc0:	10c00b17 	ldw	r3,44(r2)
 400ddc4:	e0bffe17 	ldw	r2,-8(fp)
 400ddc8:	18801526 	beq	r3,r2,400de20 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400ddcc:	e0bffc17 	ldw	r2,-16(fp)
 400ddd0:	10800037 	ldwio	r2,0(r2)
 400ddd4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400ddd8:	e0bff917 	ldw	r2,-28(fp)
 400dddc:	10a0000c 	andi	r2,r2,32768
 400dde0:	10001126 	beq	r2,zero,400de28 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400dde4:	e0bffb17 	ldw	r2,-20(fp)
 400dde8:	10800a17 	ldw	r2,40(r2)
 400ddec:	e0fff917 	ldw	r3,-28(fp)
 400ddf0:	1809883a 	mov	r4,r3
 400ddf4:	e0fffb17 	ldw	r3,-20(fp)
 400ddf8:	1885883a 	add	r2,r3,r2
 400ddfc:	10800e04 	addi	r2,r2,56
 400de00:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400de04:	e0bffb17 	ldw	r2,-20(fp)
 400de08:	10800a17 	ldw	r2,40(r2)
 400de0c:	10800044 	addi	r2,r2,1
 400de10:	10c1ffcc 	andi	r3,r2,2047
 400de14:	e0bffb17 	ldw	r2,-20(fp)
 400de18:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400de1c:	003fe206 	br	400dda8 <__alt_data_end+0xff00dda8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400de20:	0001883a 	nop
 400de24:	00000106 	br	400de2c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400de28:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400de2c:	e0bff917 	ldw	r2,-28(fp)
 400de30:	10bfffec 	andhi	r2,r2,65535
 400de34:	10000f26 	beq	r2,zero,400de74 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400de38:	e0bffb17 	ldw	r2,-20(fp)
 400de3c:	10c00817 	ldw	r3,32(r2)
 400de40:	00bfff84 	movi	r2,-2
 400de44:	1886703a 	and	r3,r3,r2
 400de48:	e0bffb17 	ldw	r2,-20(fp)
 400de4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400de50:	e0bffc17 	ldw	r2,-16(fp)
 400de54:	10800104 	addi	r2,r2,4
 400de58:	1007883a 	mov	r3,r2
 400de5c:	e0bffb17 	ldw	r2,-20(fp)
 400de60:	10800817 	ldw	r2,32(r2)
 400de64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400de68:	e0bffc17 	ldw	r2,-16(fp)
 400de6c:	10800104 	addi	r2,r2,4
 400de70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400de74:	e0bffd17 	ldw	r2,-12(fp)
 400de78:	1080800c 	andi	r2,r2,512
 400de7c:	103fbe26 	beq	r2,zero,400dd78 <__alt_data_end+0xff00dd78>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400de80:	e0bffd17 	ldw	r2,-12(fp)
 400de84:	1004d43a 	srli	r2,r2,16
 400de88:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400de8c:	00001406 	br	400dee0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400de90:	e0bffc17 	ldw	r2,-16(fp)
 400de94:	e0fffb17 	ldw	r3,-20(fp)
 400de98:	18c00d17 	ldw	r3,52(r3)
 400de9c:	e13ffb17 	ldw	r4,-20(fp)
 400dea0:	20c7883a 	add	r3,r4,r3
 400dea4:	18c20e04 	addi	r3,r3,2104
 400dea8:	18c00003 	ldbu	r3,0(r3)
 400deac:	18c03fcc 	andi	r3,r3,255
 400deb0:	18c0201c 	xori	r3,r3,128
 400deb4:	18ffe004 	addi	r3,r3,-128
 400deb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400debc:	e0bffb17 	ldw	r2,-20(fp)
 400dec0:	10800d17 	ldw	r2,52(r2)
 400dec4:	10800044 	addi	r2,r2,1
 400dec8:	10c1ffcc 	andi	r3,r2,2047
 400decc:	e0bffb17 	ldw	r2,-20(fp)
 400ded0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400ded4:	e0bffa17 	ldw	r2,-24(fp)
 400ded8:	10bfffc4 	addi	r2,r2,-1
 400dedc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400dee0:	e0bffa17 	ldw	r2,-24(fp)
 400dee4:	10000526 	beq	r2,zero,400defc <altera_avalon_jtag_uart_irq+0x1a8>
 400dee8:	e0bffb17 	ldw	r2,-20(fp)
 400deec:	10c00d17 	ldw	r3,52(r2)
 400def0:	e0bffb17 	ldw	r2,-20(fp)
 400def4:	10800c17 	ldw	r2,48(r2)
 400def8:	18bfe51e 	bne	r3,r2,400de90 <__alt_data_end+0xff00de90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400defc:	e0bffa17 	ldw	r2,-24(fp)
 400df00:	103f9d26 	beq	r2,zero,400dd78 <__alt_data_end+0xff00dd78>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400df04:	e0bffb17 	ldw	r2,-20(fp)
 400df08:	10c00817 	ldw	r3,32(r2)
 400df0c:	00bfff44 	movi	r2,-3
 400df10:	1886703a 	and	r3,r3,r2
 400df14:	e0bffb17 	ldw	r2,-20(fp)
 400df18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400df1c:	e0bffb17 	ldw	r2,-20(fp)
 400df20:	10800017 	ldw	r2,0(r2)
 400df24:	10800104 	addi	r2,r2,4
 400df28:	1007883a 	mov	r3,r2
 400df2c:	e0bffb17 	ldw	r2,-20(fp)
 400df30:	10800817 	ldw	r2,32(r2)
 400df34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400df38:	e0bffc17 	ldw	r2,-16(fp)
 400df3c:	10800104 	addi	r2,r2,4
 400df40:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400df44:	003f8c06 	br	400dd78 <__alt_data_end+0xff00dd78>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400df48:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400df4c:	0001883a 	nop
 400df50:	e037883a 	mov	sp,fp
 400df54:	df000017 	ldw	fp,0(sp)
 400df58:	dec00104 	addi	sp,sp,4
 400df5c:	f800283a 	ret

0400df60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400df60:	defff804 	addi	sp,sp,-32
 400df64:	df000715 	stw	fp,28(sp)
 400df68:	df000704 	addi	fp,sp,28
 400df6c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400df70:	e0bffb17 	ldw	r2,-20(fp)
 400df74:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400df78:	e0bff917 	ldw	r2,-28(fp)
 400df7c:	10800017 	ldw	r2,0(r2)
 400df80:	10800104 	addi	r2,r2,4
 400df84:	10800037 	ldwio	r2,0(r2)
 400df88:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400df8c:	e0bffa17 	ldw	r2,-24(fp)
 400df90:	1081000c 	andi	r2,r2,1024
 400df94:	10000b26 	beq	r2,zero,400dfc4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400df98:	e0bff917 	ldw	r2,-28(fp)
 400df9c:	10800017 	ldw	r2,0(r2)
 400dfa0:	10800104 	addi	r2,r2,4
 400dfa4:	1007883a 	mov	r3,r2
 400dfa8:	e0bff917 	ldw	r2,-28(fp)
 400dfac:	10800817 	ldw	r2,32(r2)
 400dfb0:	10810014 	ori	r2,r2,1024
 400dfb4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400dfb8:	e0bff917 	ldw	r2,-28(fp)
 400dfbc:	10000915 	stw	zero,36(r2)
 400dfc0:	00000a06 	br	400dfec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400dfc4:	e0bff917 	ldw	r2,-28(fp)
 400dfc8:	10c00917 	ldw	r3,36(r2)
 400dfcc:	00a00034 	movhi	r2,32768
 400dfd0:	10bfff04 	addi	r2,r2,-4
 400dfd4:	10c00536 	bltu	r2,r3,400dfec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400dfd8:	e0bff917 	ldw	r2,-28(fp)
 400dfdc:	10800917 	ldw	r2,36(r2)
 400dfe0:	10c00044 	addi	r3,r2,1
 400dfe4:	e0bff917 	ldw	r2,-28(fp)
 400dfe8:	10c00915 	stw	r3,36(r2)
 400dfec:	d0a6e417 	ldw	r2,-25712(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400dff0:	e037883a 	mov	sp,fp
 400dff4:	df000017 	ldw	fp,0(sp)
 400dff8:	dec00104 	addi	sp,sp,4
 400dffc:	f800283a 	ret

0400e000 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400e000:	defffd04 	addi	sp,sp,-12
 400e004:	df000215 	stw	fp,8(sp)
 400e008:	df000204 	addi	fp,sp,8
 400e00c:	e13ffe15 	stw	r4,-8(fp)
 400e010:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400e014:	00000506 	br	400e02c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400e018:	e0bfff17 	ldw	r2,-4(fp)
 400e01c:	1090000c 	andi	r2,r2,16384
 400e020:	10000226 	beq	r2,zero,400e02c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400e024:	00bffd44 	movi	r2,-11
 400e028:	00000b06 	br	400e058 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400e02c:	e0bffe17 	ldw	r2,-8(fp)
 400e030:	10c00d17 	ldw	r3,52(r2)
 400e034:	e0bffe17 	ldw	r2,-8(fp)
 400e038:	10800c17 	ldw	r2,48(r2)
 400e03c:	18800526 	beq	r3,r2,400e054 <altera_avalon_jtag_uart_close+0x54>
 400e040:	e0bffe17 	ldw	r2,-8(fp)
 400e044:	10c00917 	ldw	r3,36(r2)
 400e048:	e0bffe17 	ldw	r2,-8(fp)
 400e04c:	10800117 	ldw	r2,4(r2)
 400e050:	18bff136 	bltu	r3,r2,400e018 <__alt_data_end+0xff00e018>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400e054:	0005883a 	mov	r2,zero
}
 400e058:	e037883a 	mov	sp,fp
 400e05c:	df000017 	ldw	fp,0(sp)
 400e060:	dec00104 	addi	sp,sp,4
 400e064:	f800283a 	ret

0400e068 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400e068:	defffa04 	addi	sp,sp,-24
 400e06c:	df000515 	stw	fp,20(sp)
 400e070:	df000504 	addi	fp,sp,20
 400e074:	e13ffd15 	stw	r4,-12(fp)
 400e078:	e17ffe15 	stw	r5,-8(fp)
 400e07c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400e080:	00bff9c4 	movi	r2,-25
 400e084:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400e088:	e0bffe17 	ldw	r2,-8(fp)
 400e08c:	10da8060 	cmpeqi	r3,r2,27137
 400e090:	1800031e 	bne	r3,zero,400e0a0 <altera_avalon_jtag_uart_ioctl+0x38>
 400e094:	109a80a0 	cmpeqi	r2,r2,27138
 400e098:	1000181e 	bne	r2,zero,400e0fc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400e09c:	00002906 	br	400e144 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400e0a0:	e0bffd17 	ldw	r2,-12(fp)
 400e0a4:	10c00117 	ldw	r3,4(r2)
 400e0a8:	00a00034 	movhi	r2,32768
 400e0ac:	10bfffc4 	addi	r2,r2,-1
 400e0b0:	18802126 	beq	r3,r2,400e138 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400e0b4:	e0bfff17 	ldw	r2,-4(fp)
 400e0b8:	10800017 	ldw	r2,0(r2)
 400e0bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400e0c0:	e0bffc17 	ldw	r2,-16(fp)
 400e0c4:	10800090 	cmplti	r2,r2,2
 400e0c8:	1000061e 	bne	r2,zero,400e0e4 <altera_avalon_jtag_uart_ioctl+0x7c>
 400e0cc:	e0fffc17 	ldw	r3,-16(fp)
 400e0d0:	00a00034 	movhi	r2,32768
 400e0d4:	10bfffc4 	addi	r2,r2,-1
 400e0d8:	18800226 	beq	r3,r2,400e0e4 <altera_avalon_jtag_uart_ioctl+0x7c>
 400e0dc:	e0bffc17 	ldw	r2,-16(fp)
 400e0e0:	00000206 	br	400e0ec <altera_avalon_jtag_uart_ioctl+0x84>
 400e0e4:	00a00034 	movhi	r2,32768
 400e0e8:	10bfff84 	addi	r2,r2,-2
 400e0ec:	e0fffd17 	ldw	r3,-12(fp)
 400e0f0:	18800115 	stw	r2,4(r3)
      rc = 0;
 400e0f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400e0f8:	00000f06 	br	400e138 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400e0fc:	e0bffd17 	ldw	r2,-12(fp)
 400e100:	10c00117 	ldw	r3,4(r2)
 400e104:	00a00034 	movhi	r2,32768
 400e108:	10bfffc4 	addi	r2,r2,-1
 400e10c:	18800c26 	beq	r3,r2,400e140 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400e110:	e0bffd17 	ldw	r2,-12(fp)
 400e114:	10c00917 	ldw	r3,36(r2)
 400e118:	e0bffd17 	ldw	r2,-12(fp)
 400e11c:	10800117 	ldw	r2,4(r2)
 400e120:	1885803a 	cmpltu	r2,r3,r2
 400e124:	10c03fcc 	andi	r3,r2,255
 400e128:	e0bfff17 	ldw	r2,-4(fp)
 400e12c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400e130:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400e134:	00000206 	br	400e140 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400e138:	0001883a 	nop
 400e13c:	00000106 	br	400e144 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400e140:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400e144:	e0bffb17 	ldw	r2,-20(fp)
}
 400e148:	e037883a 	mov	sp,fp
 400e14c:	df000017 	ldw	fp,0(sp)
 400e150:	dec00104 	addi	sp,sp,4
 400e154:	f800283a 	ret

0400e158 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400e158:	defff304 	addi	sp,sp,-52
 400e15c:	dfc00c15 	stw	ra,48(sp)
 400e160:	df000b15 	stw	fp,44(sp)
 400e164:	df000b04 	addi	fp,sp,44
 400e168:	e13ffc15 	stw	r4,-16(fp)
 400e16c:	e17ffd15 	stw	r5,-12(fp)
 400e170:	e1bffe15 	stw	r6,-8(fp)
 400e174:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400e178:	e0bffd17 	ldw	r2,-12(fp)
 400e17c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400e180:	00004706 	br	400e2a0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400e184:	e0bffc17 	ldw	r2,-16(fp)
 400e188:	10800a17 	ldw	r2,40(r2)
 400e18c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400e190:	e0bffc17 	ldw	r2,-16(fp)
 400e194:	10800b17 	ldw	r2,44(r2)
 400e198:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400e19c:	e0fff717 	ldw	r3,-36(fp)
 400e1a0:	e0bff817 	ldw	r2,-32(fp)
 400e1a4:	18800536 	bltu	r3,r2,400e1bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400e1a8:	e0fff717 	ldw	r3,-36(fp)
 400e1ac:	e0bff817 	ldw	r2,-32(fp)
 400e1b0:	1885c83a 	sub	r2,r3,r2
 400e1b4:	e0bff615 	stw	r2,-40(fp)
 400e1b8:	00000406 	br	400e1cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400e1bc:	00c20004 	movi	r3,2048
 400e1c0:	e0bff817 	ldw	r2,-32(fp)
 400e1c4:	1885c83a 	sub	r2,r3,r2
 400e1c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400e1cc:	e0bff617 	ldw	r2,-40(fp)
 400e1d0:	10001e26 	beq	r2,zero,400e24c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400e1d4:	e0fffe17 	ldw	r3,-8(fp)
 400e1d8:	e0bff617 	ldw	r2,-40(fp)
 400e1dc:	1880022e 	bgeu	r3,r2,400e1e8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400e1e0:	e0bffe17 	ldw	r2,-8(fp)
 400e1e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400e1e8:	e0bffc17 	ldw	r2,-16(fp)
 400e1ec:	10c00e04 	addi	r3,r2,56
 400e1f0:	e0bff817 	ldw	r2,-32(fp)
 400e1f4:	1885883a 	add	r2,r3,r2
 400e1f8:	e1bff617 	ldw	r6,-40(fp)
 400e1fc:	100b883a 	mov	r5,r2
 400e200:	e13ff517 	ldw	r4,-44(fp)
 400e204:	40060680 	call	4006068 <memcpy>
      ptr   += n;
 400e208:	e0fff517 	ldw	r3,-44(fp)
 400e20c:	e0bff617 	ldw	r2,-40(fp)
 400e210:	1885883a 	add	r2,r3,r2
 400e214:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400e218:	e0fffe17 	ldw	r3,-8(fp)
 400e21c:	e0bff617 	ldw	r2,-40(fp)
 400e220:	1885c83a 	sub	r2,r3,r2
 400e224:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e228:	e0fff817 	ldw	r3,-32(fp)
 400e22c:	e0bff617 	ldw	r2,-40(fp)
 400e230:	1885883a 	add	r2,r3,r2
 400e234:	10c1ffcc 	andi	r3,r2,2047
 400e238:	e0bffc17 	ldw	r2,-16(fp)
 400e23c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400e240:	e0bffe17 	ldw	r2,-8(fp)
 400e244:	00bfcf16 	blt	zero,r2,400e184 <__alt_data_end+0xff00e184>
 400e248:	00000106 	br	400e250 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400e24c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400e250:	e0fff517 	ldw	r3,-44(fp)
 400e254:	e0bffd17 	ldw	r2,-12(fp)
 400e258:	1880141e 	bne	r3,r2,400e2ac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400e25c:	e0bfff17 	ldw	r2,-4(fp)
 400e260:	1090000c 	andi	r2,r2,16384
 400e264:	1000131e 	bne	r2,zero,400e2b4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400e268:	0001883a 	nop
 400e26c:	e0bffc17 	ldw	r2,-16(fp)
 400e270:	10c00a17 	ldw	r3,40(r2)
 400e274:	e0bff717 	ldw	r2,-36(fp)
 400e278:	1880051e 	bne	r3,r2,400e290 <altera_avalon_jtag_uart_read+0x138>
 400e27c:	e0bffc17 	ldw	r2,-16(fp)
 400e280:	10c00917 	ldw	r3,36(r2)
 400e284:	e0bffc17 	ldw	r2,-16(fp)
 400e288:	10800117 	ldw	r2,4(r2)
 400e28c:	18bff736 	bltu	r3,r2,400e26c <__alt_data_end+0xff00e26c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400e290:	e0bffc17 	ldw	r2,-16(fp)
 400e294:	10c00a17 	ldw	r3,40(r2)
 400e298:	e0bff717 	ldw	r2,-36(fp)
 400e29c:	18800726 	beq	r3,r2,400e2bc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400e2a0:	e0bffe17 	ldw	r2,-8(fp)
 400e2a4:	00bfb716 	blt	zero,r2,400e184 <__alt_data_end+0xff00e184>
 400e2a8:	00000506 	br	400e2c0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400e2ac:	0001883a 	nop
 400e2b0:	00000306 	br	400e2c0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400e2b4:	0001883a 	nop
 400e2b8:	00000106 	br	400e2c0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400e2bc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400e2c0:	e0fff517 	ldw	r3,-44(fp)
 400e2c4:	e0bffd17 	ldw	r2,-12(fp)
 400e2c8:	18801826 	beq	r3,r2,400e32c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e2cc:	0005303a 	rdctl	r2,status
 400e2d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e2d4:	e0fffb17 	ldw	r3,-20(fp)
 400e2d8:	00bfff84 	movi	r2,-2
 400e2dc:	1884703a 	and	r2,r3,r2
 400e2e0:	1001703a 	wrctl	status,r2
  
  return context;
 400e2e4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400e2e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400e2ec:	e0bffc17 	ldw	r2,-16(fp)
 400e2f0:	10800817 	ldw	r2,32(r2)
 400e2f4:	10c00054 	ori	r3,r2,1
 400e2f8:	e0bffc17 	ldw	r2,-16(fp)
 400e2fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400e300:	e0bffc17 	ldw	r2,-16(fp)
 400e304:	10800017 	ldw	r2,0(r2)
 400e308:	10800104 	addi	r2,r2,4
 400e30c:	1007883a 	mov	r3,r2
 400e310:	e0bffc17 	ldw	r2,-16(fp)
 400e314:	10800817 	ldw	r2,32(r2)
 400e318:	18800035 	stwio	r2,0(r3)
 400e31c:	e0bffa17 	ldw	r2,-24(fp)
 400e320:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e324:	e0bff917 	ldw	r2,-28(fp)
 400e328:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400e32c:	e0fff517 	ldw	r3,-44(fp)
 400e330:	e0bffd17 	ldw	r2,-12(fp)
 400e334:	18800426 	beq	r3,r2,400e348 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400e338:	e0fff517 	ldw	r3,-44(fp)
 400e33c:	e0bffd17 	ldw	r2,-12(fp)
 400e340:	1885c83a 	sub	r2,r3,r2
 400e344:	00000606 	br	400e360 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400e348:	e0bfff17 	ldw	r2,-4(fp)
 400e34c:	1090000c 	andi	r2,r2,16384
 400e350:	10000226 	beq	r2,zero,400e35c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400e354:	00bffd44 	movi	r2,-11
 400e358:	00000106 	br	400e360 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400e35c:	00bffec4 	movi	r2,-5
}
 400e360:	e037883a 	mov	sp,fp
 400e364:	dfc00117 	ldw	ra,4(sp)
 400e368:	df000017 	ldw	fp,0(sp)
 400e36c:	dec00204 	addi	sp,sp,8
 400e370:	f800283a 	ret

0400e374 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400e374:	defff304 	addi	sp,sp,-52
 400e378:	dfc00c15 	stw	ra,48(sp)
 400e37c:	df000b15 	stw	fp,44(sp)
 400e380:	df000b04 	addi	fp,sp,44
 400e384:	e13ffc15 	stw	r4,-16(fp)
 400e388:	e17ffd15 	stw	r5,-12(fp)
 400e38c:	e1bffe15 	stw	r6,-8(fp)
 400e390:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400e394:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400e398:	e0bffd17 	ldw	r2,-12(fp)
 400e39c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400e3a0:	00003706 	br	400e480 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400e3a4:	e0bffc17 	ldw	r2,-16(fp)
 400e3a8:	10800c17 	ldw	r2,48(r2)
 400e3ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400e3b0:	e0bffc17 	ldw	r2,-16(fp)
 400e3b4:	10800d17 	ldw	r2,52(r2)
 400e3b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400e3bc:	e0fff917 	ldw	r3,-28(fp)
 400e3c0:	e0bff517 	ldw	r2,-44(fp)
 400e3c4:	1880062e 	bgeu	r3,r2,400e3e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400e3c8:	e0fff517 	ldw	r3,-44(fp)
 400e3cc:	e0bff917 	ldw	r2,-28(fp)
 400e3d0:	1885c83a 	sub	r2,r3,r2
 400e3d4:	10bfffc4 	addi	r2,r2,-1
 400e3d8:	e0bff615 	stw	r2,-40(fp)
 400e3dc:	00000b06 	br	400e40c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400e3e0:	e0bff517 	ldw	r2,-44(fp)
 400e3e4:	10000526 	beq	r2,zero,400e3fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400e3e8:	00c20004 	movi	r3,2048
 400e3ec:	e0bff917 	ldw	r2,-28(fp)
 400e3f0:	1885c83a 	sub	r2,r3,r2
 400e3f4:	e0bff615 	stw	r2,-40(fp)
 400e3f8:	00000406 	br	400e40c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400e3fc:	00c1ffc4 	movi	r3,2047
 400e400:	e0bff917 	ldw	r2,-28(fp)
 400e404:	1885c83a 	sub	r2,r3,r2
 400e408:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400e40c:	e0bff617 	ldw	r2,-40(fp)
 400e410:	10001e26 	beq	r2,zero,400e48c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400e414:	e0fffe17 	ldw	r3,-8(fp)
 400e418:	e0bff617 	ldw	r2,-40(fp)
 400e41c:	1880022e 	bgeu	r3,r2,400e428 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400e420:	e0bffe17 	ldw	r2,-8(fp)
 400e424:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400e428:	e0bffc17 	ldw	r2,-16(fp)
 400e42c:	10c20e04 	addi	r3,r2,2104
 400e430:	e0bff917 	ldw	r2,-28(fp)
 400e434:	1885883a 	add	r2,r3,r2
 400e438:	e1bff617 	ldw	r6,-40(fp)
 400e43c:	e17ffd17 	ldw	r5,-12(fp)
 400e440:	1009883a 	mov	r4,r2
 400e444:	40060680 	call	4006068 <memcpy>
      ptr   += n;
 400e448:	e0fffd17 	ldw	r3,-12(fp)
 400e44c:	e0bff617 	ldw	r2,-40(fp)
 400e450:	1885883a 	add	r2,r3,r2
 400e454:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400e458:	e0fffe17 	ldw	r3,-8(fp)
 400e45c:	e0bff617 	ldw	r2,-40(fp)
 400e460:	1885c83a 	sub	r2,r3,r2
 400e464:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e468:	e0fff917 	ldw	r3,-28(fp)
 400e46c:	e0bff617 	ldw	r2,-40(fp)
 400e470:	1885883a 	add	r2,r3,r2
 400e474:	10c1ffcc 	andi	r3,r2,2047
 400e478:	e0bffc17 	ldw	r2,-16(fp)
 400e47c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400e480:	e0bffe17 	ldw	r2,-8(fp)
 400e484:	00bfc716 	blt	zero,r2,400e3a4 <__alt_data_end+0xff00e3a4>
 400e488:	00000106 	br	400e490 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400e48c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e490:	0005303a 	rdctl	r2,status
 400e494:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e498:	e0fffb17 	ldw	r3,-20(fp)
 400e49c:	00bfff84 	movi	r2,-2
 400e4a0:	1884703a 	and	r2,r3,r2
 400e4a4:	1001703a 	wrctl	status,r2
  
  return context;
 400e4a8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400e4ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400e4b0:	e0bffc17 	ldw	r2,-16(fp)
 400e4b4:	10800817 	ldw	r2,32(r2)
 400e4b8:	10c00094 	ori	r3,r2,2
 400e4bc:	e0bffc17 	ldw	r2,-16(fp)
 400e4c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400e4c4:	e0bffc17 	ldw	r2,-16(fp)
 400e4c8:	10800017 	ldw	r2,0(r2)
 400e4cc:	10800104 	addi	r2,r2,4
 400e4d0:	1007883a 	mov	r3,r2
 400e4d4:	e0bffc17 	ldw	r2,-16(fp)
 400e4d8:	10800817 	ldw	r2,32(r2)
 400e4dc:	18800035 	stwio	r2,0(r3)
 400e4e0:	e0bffa17 	ldw	r2,-24(fp)
 400e4e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e4e8:	e0bff817 	ldw	r2,-32(fp)
 400e4ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400e4f0:	e0bffe17 	ldw	r2,-8(fp)
 400e4f4:	0080100e 	bge	zero,r2,400e538 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400e4f8:	e0bfff17 	ldw	r2,-4(fp)
 400e4fc:	1090000c 	andi	r2,r2,16384
 400e500:	1000101e 	bne	r2,zero,400e544 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400e504:	0001883a 	nop
 400e508:	e0bffc17 	ldw	r2,-16(fp)
 400e50c:	10c00d17 	ldw	r3,52(r2)
 400e510:	e0bff517 	ldw	r2,-44(fp)
 400e514:	1880051e 	bne	r3,r2,400e52c <altera_avalon_jtag_uart_write+0x1b8>
 400e518:	e0bffc17 	ldw	r2,-16(fp)
 400e51c:	10c00917 	ldw	r3,36(r2)
 400e520:	e0bffc17 	ldw	r2,-16(fp)
 400e524:	10800117 	ldw	r2,4(r2)
 400e528:	18bff736 	bltu	r3,r2,400e508 <__alt_data_end+0xff00e508>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400e52c:	e0bffc17 	ldw	r2,-16(fp)
 400e530:	10800917 	ldw	r2,36(r2)
 400e534:	1000051e 	bne	r2,zero,400e54c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400e538:	e0bffe17 	ldw	r2,-8(fp)
 400e53c:	00bfd016 	blt	zero,r2,400e480 <__alt_data_end+0xff00e480>
 400e540:	00000306 	br	400e550 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400e544:	0001883a 	nop
 400e548:	00000106 	br	400e550 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400e54c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400e550:	e0fffd17 	ldw	r3,-12(fp)
 400e554:	e0bff717 	ldw	r2,-36(fp)
 400e558:	18800426 	beq	r3,r2,400e56c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400e55c:	e0fffd17 	ldw	r3,-12(fp)
 400e560:	e0bff717 	ldw	r2,-36(fp)
 400e564:	1885c83a 	sub	r2,r3,r2
 400e568:	00000606 	br	400e584 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400e56c:	e0bfff17 	ldw	r2,-4(fp)
 400e570:	1090000c 	andi	r2,r2,16384
 400e574:	10000226 	beq	r2,zero,400e580 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400e578:	00bffd44 	movi	r2,-11
 400e57c:	00000106 	br	400e584 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400e580:	00bffec4 	movi	r2,-5
}
 400e584:	e037883a 	mov	sp,fp
 400e588:	dfc00117 	ldw	ra,4(sp)
 400e58c:	df000017 	ldw	fp,0(sp)
 400e590:	dec00204 	addi	sp,sp,8
 400e594:	f800283a 	ret

0400e598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e598:	defffe04 	addi	sp,sp,-8
 400e59c:	dfc00115 	stw	ra,4(sp)
 400e5a0:	df000015 	stw	fp,0(sp)
 400e5a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e5a8:	d0a00e17 	ldw	r2,-32712(gp)
 400e5ac:	10000326 	beq	r2,zero,400e5bc <alt_get_errno+0x24>
 400e5b0:	d0a00e17 	ldw	r2,-32712(gp)
 400e5b4:	103ee83a 	callr	r2
 400e5b8:	00000106 	br	400e5c0 <alt_get_errno+0x28>
 400e5bc:	d0a6df04 	addi	r2,gp,-25732
}
 400e5c0:	e037883a 	mov	sp,fp
 400e5c4:	dfc00117 	ldw	ra,4(sp)
 400e5c8:	df000017 	ldw	fp,0(sp)
 400e5cc:	dec00204 	addi	sp,sp,8
 400e5d0:	f800283a 	ret

0400e5d4 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400e5d4:	defff904 	addi	sp,sp,-28
 400e5d8:	df000615 	stw	fp,24(sp)
 400e5dc:	df000604 	addi	fp,sp,24
 400e5e0:	e13ffe15 	stw	r4,-8(fp)
 400e5e4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 400e5e8:	00bfffc4 	movi	r2,-1
 400e5ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 400e5f0:	0005317a 	rdctl	r2,cpuid
 400e5f4:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 400e5f8:	e0bffb17 	ldw	r2,-20(fp)
 400e5fc:	1006943a 	slli	r3,r2,16
 400e600:	e0bfff17 	ldw	r2,-4(fp)
 400e604:	1884b03a 	or	r2,r3,r2
 400e608:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 400e60c:	e0bffe17 	ldw	r2,-8(fp)
 400e610:	10800317 	ldw	r2,12(r2)
 400e614:	e0fffc17 	ldw	r3,-16(fp)
 400e618:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400e61c:	e0bffe17 	ldw	r2,-8(fp)
 400e620:	10800317 	ldw	r2,12(r2)
 400e624:	10800037 	ldwio	r2,0(r2)
 400e628:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 400e62c:	e0fffd17 	ldw	r3,-12(fp)
 400e630:	e0bffc17 	ldw	r2,-16(fp)
 400e634:	1880011e 	bne	r3,r2,400e63c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 400e638:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 400e63c:	e0bffa17 	ldw	r2,-24(fp)
}
 400e640:	e037883a 	mov	sp,fp
 400e644:	df000017 	ldw	fp,0(sp)
 400e648:	dec00104 	addi	sp,sp,4
 400e64c:	f800283a 	ret

0400e650 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 400e650:	defffc04 	addi	sp,sp,-16
 400e654:	dfc00315 	stw	ra,12(sp)
 400e658:	df000215 	stw	fp,8(sp)
 400e65c:	df000204 	addi	fp,sp,8
 400e660:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 400e664:	d1601004 	addi	r5,gp,-32704
 400e668:	e13fff17 	ldw	r4,-4(fp)
 400e66c:	400ec240 	call	400ec24 <alt_find_dev>
 400e670:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 400e674:	e0bffe17 	ldw	r2,-8(fp)
 400e678:	1000041e 	bne	r2,zero,400e68c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 400e67c:	400e5980 	call	400e598 <alt_get_errno>
 400e680:	1007883a 	mov	r3,r2
 400e684:	008004c4 	movi	r2,19
 400e688:	18800015 	stw	r2,0(r3)
  }

  return dev;
 400e68c:	e0bffe17 	ldw	r2,-8(fp)
}
 400e690:	e037883a 	mov	sp,fp
 400e694:	dfc00117 	ldw	ra,4(sp)
 400e698:	df000017 	ldw	fp,0(sp)
 400e69c:	dec00204 	addi	sp,sp,8
 400e6a0:	f800283a 	ret

0400e6a4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 400e6a4:	defffe04 	addi	sp,sp,-8
 400e6a8:	df000115 	stw	fp,4(sp)
 400e6ac:	df000104 	addi	fp,sp,4
 400e6b0:	e13fff15 	stw	r4,-4(fp)
  return;
 400e6b4:	0001883a 	nop
}
 400e6b8:	e037883a 	mov	sp,fp
 400e6bc:	df000017 	ldw	fp,0(sp)
 400e6c0:	dec00104 	addi	sp,sp,4
 400e6c4:	f800283a 	ret

0400e6c8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 400e6c8:	defffc04 	addi	sp,sp,-16
 400e6cc:	dfc00315 	stw	ra,12(sp)
 400e6d0:	df000215 	stw	fp,8(sp)
 400e6d4:	df000204 	addi	fp,sp,8
 400e6d8:	e13ffe15 	stw	r4,-8(fp)
 400e6dc:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 400e6e0:	0001883a 	nop
 400e6e4:	e17fff17 	ldw	r5,-4(fp)
 400e6e8:	e13ffe17 	ldw	r4,-8(fp)
 400e6ec:	400e5d40 	call	400e5d4 <alt_mutex_trylock>
 400e6f0:	103ffc1e 	bne	r2,zero,400e6e4 <__alt_data_end+0xff00e6e4>
}
 400e6f4:	0001883a 	nop
 400e6f8:	e037883a 	mov	sp,fp
 400e6fc:	dfc00117 	ldw	ra,4(sp)
 400e700:	df000017 	ldw	fp,0(sp)
 400e704:	dec00204 	addi	sp,sp,8
 400e708:	f800283a 	ret

0400e70c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400e70c:	defffa04 	addi	sp,sp,-24
 400e710:	dfc00515 	stw	ra,20(sp)
 400e714:	df000415 	stw	fp,16(sp)
 400e718:	df000404 	addi	fp,sp,16
 400e71c:	e13ffd15 	stw	r4,-12(fp)
 400e720:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 400e724:	e17ffe17 	ldw	r5,-8(fp)
 400e728:	e13ffd17 	ldw	r4,-12(fp)
 400e72c:	400e5d40 	call	400e5d4 <alt_mutex_trylock>
 400e730:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 400e734:	e0bffc17 	ldw	r2,-16(fp)
}
 400e738:	e037883a 	mov	sp,fp
 400e73c:	dfc00117 	ldw	ra,4(sp)
 400e740:	df000017 	ldw	fp,0(sp)
 400e744:	dec00204 	addi	sp,sp,8
 400e748:	f800283a 	ret

0400e74c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 400e74c:	defffd04 	addi	sp,sp,-12
 400e750:	df000215 	stw	fp,8(sp)
 400e754:	df000204 	addi	fp,sp,8
 400e758:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 400e75c:	0005317a 	rdctl	r2,cpuid
 400e760:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 400e764:	e0bfff17 	ldw	r2,-4(fp)
 400e768:	10800317 	ldw	r2,12(r2)
 400e76c:	10800104 	addi	r2,r2,4
 400e770:	00c00044 	movi	r3,1
 400e774:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 400e778:	e0bfff17 	ldw	r2,-4(fp)
 400e77c:	10800317 	ldw	r2,12(r2)
 400e780:	e0fffe17 	ldw	r3,-8(fp)
 400e784:	1806943a 	slli	r3,r3,16
 400e788:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 400e78c:	0001883a 	nop
 400e790:	e037883a 	mov	sp,fp
 400e794:	df000017 	ldw	fp,0(sp)
 400e798:	dec00104 	addi	sp,sp,4
 400e79c:	f800283a 	ret

0400e7a0 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 400e7a0:	defff904 	addi	sp,sp,-28
 400e7a4:	df000615 	stw	fp,24(sp)
 400e7a8:	df000604 	addi	fp,sp,24
 400e7ac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 400e7b0:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 400e7b4:	0005317a 	rdctl	r2,cpuid
 400e7b8:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400e7bc:	e0bfff17 	ldw	r2,-4(fp)
 400e7c0:	10800317 	ldw	r2,12(r2)
 400e7c4:	10800037 	ldwio	r2,0(r2)
 400e7c8:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 400e7cc:	e0bffc17 	ldw	r2,-16(fp)
 400e7d0:	1004d43a 	srli	r2,r2,16
 400e7d4:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 400e7d8:	e0fffd17 	ldw	r3,-12(fp)
 400e7dc:	e0bffb17 	ldw	r2,-20(fp)
 400e7e0:	1880071e 	bne	r3,r2,400e800 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 400e7e4:	e0bffc17 	ldw	r2,-16(fp)
 400e7e8:	10bfffcc 	andi	r2,r2,65535
 400e7ec:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 400e7f0:	e0bffe17 	ldw	r2,-8(fp)
 400e7f4:	10000226 	beq	r2,zero,400e800 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 400e7f8:	00800044 	movi	r2,1
 400e7fc:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 400e800:	e0bffa17 	ldw	r2,-24(fp)
}
 400e804:	e037883a 	mov	sp,fp
 400e808:	df000017 	ldw	fp,0(sp)
 400e80c:	dec00104 	addi	sp,sp,4
 400e810:	f800283a 	ret

0400e814 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 400e814:	defffc04 	addi	sp,sp,-16
 400e818:	df000315 	stw	fp,12(sp)
 400e81c:	df000304 	addi	fp,sp,12
 400e820:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 400e824:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 400e828:	e0bfff17 	ldw	r2,-4(fp)
 400e82c:	10800317 	ldw	r2,12(r2)
 400e830:	10800104 	addi	r2,r2,4
 400e834:	10800037 	ldwio	r2,0(r2)
 400e838:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 400e83c:	e0bffe17 	ldw	r2,-8(fp)
 400e840:	1080004c 	andi	r2,r2,1
 400e844:	10000226 	beq	r2,zero,400e850 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 400e848:	00800044 	movi	r2,1
 400e84c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 400e850:	e0bffd17 	ldw	r2,-12(fp)
}
 400e854:	e037883a 	mov	sp,fp
 400e858:	df000017 	ldw	fp,0(sp)
 400e85c:	dec00104 	addi	sp,sp,4
 400e860:	f800283a 	ret

0400e864 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400e864:	defffa04 	addi	sp,sp,-24
 400e868:	dfc00515 	stw	ra,20(sp)
 400e86c:	df000415 	stw	fp,16(sp)
 400e870:	df000404 	addi	fp,sp,16
 400e874:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 400e878:	0007883a 	mov	r3,zero
 400e87c:	e0bfff17 	ldw	r2,-4(fp)
 400e880:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400e884:	e0bfff17 	ldw	r2,-4(fp)
 400e888:	10800104 	addi	r2,r2,4
 400e88c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e890:	0005303a 	rdctl	r2,status
 400e894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e898:	e0fffd17 	ldw	r3,-12(fp)
 400e89c:	00bfff84 	movi	r2,-2
 400e8a0:	1884703a 	and	r2,r3,r2
 400e8a4:	1001703a 	wrctl	status,r2
  
  return context;
 400e8a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 400e8ac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 400e8b0:	400f3b80 	call	400f3b8 <alt_tick>
 400e8b4:	e0bffc17 	ldw	r2,-16(fp)
 400e8b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e8bc:	e0bffe17 	ldw	r2,-8(fp)
 400e8c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 400e8c4:	0001883a 	nop
 400e8c8:	e037883a 	mov	sp,fp
 400e8cc:	dfc00117 	ldw	ra,4(sp)
 400e8d0:	df000017 	ldw	fp,0(sp)
 400e8d4:	dec00204 	addi	sp,sp,8
 400e8d8:	f800283a 	ret

0400e8dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 400e8dc:	defff804 	addi	sp,sp,-32
 400e8e0:	dfc00715 	stw	ra,28(sp)
 400e8e4:	df000615 	stw	fp,24(sp)
 400e8e8:	df000604 	addi	fp,sp,24
 400e8ec:	e13ffc15 	stw	r4,-16(fp)
 400e8f0:	e17ffd15 	stw	r5,-12(fp)
 400e8f4:	e1bffe15 	stw	r6,-8(fp)
 400e8f8:	e1ffff15 	stw	r7,-4(fp)
 400e8fc:	e0bfff17 	ldw	r2,-4(fp)
 400e900:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 400e904:	d0a6e417 	ldw	r2,-25712(gp)
 400e908:	1000021e 	bne	r2,zero,400e914 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 400e90c:	e0bffb17 	ldw	r2,-20(fp)
 400e910:	d0a6e415 	stw	r2,-25712(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 400e914:	e0bffc17 	ldw	r2,-16(fp)
 400e918:	10800104 	addi	r2,r2,4
 400e91c:	00c001c4 	movi	r3,7
 400e920:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 400e924:	d8000015 	stw	zero,0(sp)
 400e928:	e1fffc17 	ldw	r7,-16(fp)
 400e92c:	01810074 	movhi	r6,1025
 400e930:	31ba1904 	addi	r6,r6,-6044
 400e934:	e17ffe17 	ldw	r5,-8(fp)
 400e938:	e13ffd17 	ldw	r4,-12(fp)
 400e93c:	400ece80 	call	400ece8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 400e940:	0001883a 	nop
 400e944:	e037883a 	mov	sp,fp
 400e948:	dfc00117 	ldw	ra,4(sp)
 400e94c:	df000017 	ldw	fp,0(sp)
 400e950:	dec00204 	addi	sp,sp,8
 400e954:	f800283a 	ret

0400e958 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400e958:	defff504 	addi	sp,sp,-44
 400e95c:	df000a15 	stw	fp,40(sp)
 400e960:	df000a04 	addi	fp,sp,40
 400e964:	e13ffc15 	stw	r4,-16(fp)
 400e968:	e17ffd15 	stw	r5,-12(fp)
 400e96c:	e1bffe15 	stw	r6,-8(fp)
 400e970:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400e974:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400e978:	d0a6e417 	ldw	r2,-25712(gp)
  
  if (alt_ticks_per_second ())
 400e97c:	10003c26 	beq	r2,zero,400ea70 <alt_alarm_start+0x118>
  {
    if (alarm)
 400e980:	e0bffc17 	ldw	r2,-16(fp)
 400e984:	10003826 	beq	r2,zero,400ea68 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400e988:	e0bffc17 	ldw	r2,-16(fp)
 400e98c:	e0fffe17 	ldw	r3,-8(fp)
 400e990:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400e994:	e0bffc17 	ldw	r2,-16(fp)
 400e998:	e0ffff17 	ldw	r3,-4(fp)
 400e99c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e9a0:	0005303a 	rdctl	r2,status
 400e9a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e9a8:	e0fff917 	ldw	r3,-28(fp)
 400e9ac:	00bfff84 	movi	r2,-2
 400e9b0:	1884703a 	and	r2,r3,r2
 400e9b4:	1001703a 	wrctl	status,r2
  
  return context;
 400e9b8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400e9bc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400e9c0:	d0a6e517 	ldw	r2,-25708(gp)
      
      current_nticks = alt_nticks();
 400e9c4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400e9c8:	e0fffd17 	ldw	r3,-12(fp)
 400e9cc:	e0bff617 	ldw	r2,-40(fp)
 400e9d0:	1885883a 	add	r2,r3,r2
 400e9d4:	10c00044 	addi	r3,r2,1
 400e9d8:	e0bffc17 	ldw	r2,-16(fp)
 400e9dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400e9e0:	e0bffc17 	ldw	r2,-16(fp)
 400e9e4:	10c00217 	ldw	r3,8(r2)
 400e9e8:	e0bff617 	ldw	r2,-40(fp)
 400e9ec:	1880042e 	bgeu	r3,r2,400ea00 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400e9f0:	e0bffc17 	ldw	r2,-16(fp)
 400e9f4:	00c00044 	movi	r3,1
 400e9f8:	10c00405 	stb	r3,16(r2)
 400e9fc:	00000206 	br	400ea08 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400ea00:	e0bffc17 	ldw	r2,-16(fp)
 400ea04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400ea08:	e0bffc17 	ldw	r2,-16(fp)
 400ea0c:	d0e01304 	addi	r3,gp,-32692
 400ea10:	e0fffa15 	stw	r3,-24(fp)
 400ea14:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400ea18:	e0bffb17 	ldw	r2,-20(fp)
 400ea1c:	e0fffa17 	ldw	r3,-24(fp)
 400ea20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400ea24:	e0bffa17 	ldw	r2,-24(fp)
 400ea28:	10c00017 	ldw	r3,0(r2)
 400ea2c:	e0bffb17 	ldw	r2,-20(fp)
 400ea30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400ea34:	e0bffa17 	ldw	r2,-24(fp)
 400ea38:	10800017 	ldw	r2,0(r2)
 400ea3c:	e0fffb17 	ldw	r3,-20(fp)
 400ea40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400ea44:	e0bffa17 	ldw	r2,-24(fp)
 400ea48:	e0fffb17 	ldw	r3,-20(fp)
 400ea4c:	10c00015 	stw	r3,0(r2)
 400ea50:	e0bff817 	ldw	r2,-32(fp)
 400ea54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ea58:	e0bff717 	ldw	r2,-36(fp)
 400ea5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400ea60:	0005883a 	mov	r2,zero
 400ea64:	00000306 	br	400ea74 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400ea68:	00bffa84 	movi	r2,-22
 400ea6c:	00000106 	br	400ea74 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400ea70:	00bfde84 	movi	r2,-134
  }
}
 400ea74:	e037883a 	mov	sp,fp
 400ea78:	df000017 	ldw	fp,0(sp)
 400ea7c:	dec00104 	addi	sp,sp,4
 400ea80:	f800283a 	ret

0400ea84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ea84:	defffe04 	addi	sp,sp,-8
 400ea88:	dfc00115 	stw	ra,4(sp)
 400ea8c:	df000015 	stw	fp,0(sp)
 400ea90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ea94:	d0a00e17 	ldw	r2,-32712(gp)
 400ea98:	10000326 	beq	r2,zero,400eaa8 <alt_get_errno+0x24>
 400ea9c:	d0a00e17 	ldw	r2,-32712(gp)
 400eaa0:	103ee83a 	callr	r2
 400eaa4:	00000106 	br	400eaac <alt_get_errno+0x28>
 400eaa8:	d0a6df04 	addi	r2,gp,-25732
}
 400eaac:	e037883a 	mov	sp,fp
 400eab0:	dfc00117 	ldw	ra,4(sp)
 400eab4:	df000017 	ldw	fp,0(sp)
 400eab8:	dec00204 	addi	sp,sp,8
 400eabc:	f800283a 	ret

0400eac0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400eac0:	defffa04 	addi	sp,sp,-24
 400eac4:	dfc00515 	stw	ra,20(sp)
 400eac8:	df000415 	stw	fp,16(sp)
 400eacc:	df000404 	addi	fp,sp,16
 400ead0:	e13ffe15 	stw	r4,-8(fp)
 400ead4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400ead8:	e0bffe17 	ldw	r2,-8(fp)
 400eadc:	10000326 	beq	r2,zero,400eaec <alt_dev_llist_insert+0x2c>
 400eae0:	e0bffe17 	ldw	r2,-8(fp)
 400eae4:	10800217 	ldw	r2,8(r2)
 400eae8:	1000061e 	bne	r2,zero,400eb04 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400eaec:	400ea840 	call	400ea84 <alt_get_errno>
 400eaf0:	1007883a 	mov	r3,r2
 400eaf4:	00800584 	movi	r2,22
 400eaf8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400eafc:	00bffa84 	movi	r2,-22
 400eb00:	00001306 	br	400eb50 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400eb04:	e0bffe17 	ldw	r2,-8(fp)
 400eb08:	e0ffff17 	ldw	r3,-4(fp)
 400eb0c:	e0fffc15 	stw	r3,-16(fp)
 400eb10:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400eb14:	e0bffd17 	ldw	r2,-12(fp)
 400eb18:	e0fffc17 	ldw	r3,-16(fp)
 400eb1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400eb20:	e0bffc17 	ldw	r2,-16(fp)
 400eb24:	10c00017 	ldw	r3,0(r2)
 400eb28:	e0bffd17 	ldw	r2,-12(fp)
 400eb2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400eb30:	e0bffc17 	ldw	r2,-16(fp)
 400eb34:	10800017 	ldw	r2,0(r2)
 400eb38:	e0fffd17 	ldw	r3,-12(fp)
 400eb3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400eb40:	e0bffc17 	ldw	r2,-16(fp)
 400eb44:	e0fffd17 	ldw	r3,-12(fp)
 400eb48:	10c00015 	stw	r3,0(r2)

  return 0;  
 400eb4c:	0005883a 	mov	r2,zero
}
 400eb50:	e037883a 	mov	sp,fp
 400eb54:	dfc00117 	ldw	ra,4(sp)
 400eb58:	df000017 	ldw	fp,0(sp)
 400eb5c:	dec00204 	addi	sp,sp,8
 400eb60:	f800283a 	ret

0400eb64 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400eb64:	defffd04 	addi	sp,sp,-12
 400eb68:	dfc00215 	stw	ra,8(sp)
 400eb6c:	df000115 	stw	fp,4(sp)
 400eb70:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400eb74:	00810074 	movhi	r2,1025
 400eb78:	10bed304 	addi	r2,r2,-1204
 400eb7c:	e0bfff15 	stw	r2,-4(fp)
 400eb80:	00000606 	br	400eb9c <_do_ctors+0x38>
        (*ctor) (); 
 400eb84:	e0bfff17 	ldw	r2,-4(fp)
 400eb88:	10800017 	ldw	r2,0(r2)
 400eb8c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400eb90:	e0bfff17 	ldw	r2,-4(fp)
 400eb94:	10bfff04 	addi	r2,r2,-4
 400eb98:	e0bfff15 	stw	r2,-4(fp)
 400eb9c:	e0ffff17 	ldw	r3,-4(fp)
 400eba0:	00810074 	movhi	r2,1025
 400eba4:	10bed404 	addi	r2,r2,-1200
 400eba8:	18bff62e 	bgeu	r3,r2,400eb84 <__alt_data_end+0xff00eb84>
        (*ctor) (); 
}
 400ebac:	0001883a 	nop
 400ebb0:	e037883a 	mov	sp,fp
 400ebb4:	dfc00117 	ldw	ra,4(sp)
 400ebb8:	df000017 	ldw	fp,0(sp)
 400ebbc:	dec00204 	addi	sp,sp,8
 400ebc0:	f800283a 	ret

0400ebc4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400ebc4:	defffd04 	addi	sp,sp,-12
 400ebc8:	dfc00215 	stw	ra,8(sp)
 400ebcc:	df000115 	stw	fp,4(sp)
 400ebd0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400ebd4:	00810074 	movhi	r2,1025
 400ebd8:	10bed304 	addi	r2,r2,-1204
 400ebdc:	e0bfff15 	stw	r2,-4(fp)
 400ebe0:	00000606 	br	400ebfc <_do_dtors+0x38>
        (*dtor) (); 
 400ebe4:	e0bfff17 	ldw	r2,-4(fp)
 400ebe8:	10800017 	ldw	r2,0(r2)
 400ebec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400ebf0:	e0bfff17 	ldw	r2,-4(fp)
 400ebf4:	10bfff04 	addi	r2,r2,-4
 400ebf8:	e0bfff15 	stw	r2,-4(fp)
 400ebfc:	e0ffff17 	ldw	r3,-4(fp)
 400ec00:	00810074 	movhi	r2,1025
 400ec04:	10bed404 	addi	r2,r2,-1200
 400ec08:	18bff62e 	bgeu	r3,r2,400ebe4 <__alt_data_end+0xff00ebe4>
        (*dtor) (); 
}
 400ec0c:	0001883a 	nop
 400ec10:	e037883a 	mov	sp,fp
 400ec14:	dfc00117 	ldw	ra,4(sp)
 400ec18:	df000017 	ldw	fp,0(sp)
 400ec1c:	dec00204 	addi	sp,sp,8
 400ec20:	f800283a 	ret

0400ec24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400ec24:	defffa04 	addi	sp,sp,-24
 400ec28:	dfc00515 	stw	ra,20(sp)
 400ec2c:	df000415 	stw	fp,16(sp)
 400ec30:	df000404 	addi	fp,sp,16
 400ec34:	e13ffe15 	stw	r4,-8(fp)
 400ec38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400ec3c:	e0bfff17 	ldw	r2,-4(fp)
 400ec40:	10800017 	ldw	r2,0(r2)
 400ec44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400ec48:	e13ffe17 	ldw	r4,-8(fp)
 400ec4c:	40006dc0 	call	40006dc <strlen>
 400ec50:	10800044 	addi	r2,r2,1
 400ec54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ec58:	00000d06 	br	400ec90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400ec5c:	e0bffc17 	ldw	r2,-16(fp)
 400ec60:	10800217 	ldw	r2,8(r2)
 400ec64:	e0fffd17 	ldw	r3,-12(fp)
 400ec68:	180d883a 	mov	r6,r3
 400ec6c:	e17ffe17 	ldw	r5,-8(fp)
 400ec70:	1009883a 	mov	r4,r2
 400ec74:	400f8080 	call	400f808 <memcmp>
 400ec78:	1000021e 	bne	r2,zero,400ec84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400ec7c:	e0bffc17 	ldw	r2,-16(fp)
 400ec80:	00000706 	br	400eca0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400ec84:	e0bffc17 	ldw	r2,-16(fp)
 400ec88:	10800017 	ldw	r2,0(r2)
 400ec8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ec90:	e0fffc17 	ldw	r3,-16(fp)
 400ec94:	e0bfff17 	ldw	r2,-4(fp)
 400ec98:	18bff01e 	bne	r3,r2,400ec5c <__alt_data_end+0xff00ec5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400ec9c:	0005883a 	mov	r2,zero
}
 400eca0:	e037883a 	mov	sp,fp
 400eca4:	dfc00117 	ldw	ra,4(sp)
 400eca8:	df000017 	ldw	fp,0(sp)
 400ecac:	dec00204 	addi	sp,sp,8
 400ecb0:	f800283a 	ret

0400ecb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400ecb4:	defffe04 	addi	sp,sp,-8
 400ecb8:	dfc00115 	stw	ra,4(sp)
 400ecbc:	df000015 	stw	fp,0(sp)
 400ecc0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400ecc4:	01600014 	movui	r5,32768
 400ecc8:	0009883a 	mov	r4,zero
 400eccc:	400f6900 	call	400f690 <alt_icache_flush>
#endif
}
 400ecd0:	0001883a 	nop
 400ecd4:	e037883a 	mov	sp,fp
 400ecd8:	dfc00117 	ldw	ra,4(sp)
 400ecdc:	df000017 	ldw	fp,0(sp)
 400ece0:	dec00204 	addi	sp,sp,8
 400ece4:	f800283a 	ret

0400ece8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400ece8:	defff904 	addi	sp,sp,-28
 400ecec:	dfc00615 	stw	ra,24(sp)
 400ecf0:	df000515 	stw	fp,20(sp)
 400ecf4:	df000504 	addi	fp,sp,20
 400ecf8:	e13ffc15 	stw	r4,-16(fp)
 400ecfc:	e17ffd15 	stw	r5,-12(fp)
 400ed00:	e1bffe15 	stw	r6,-8(fp)
 400ed04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400ed08:	e0800217 	ldw	r2,8(fp)
 400ed0c:	d8800015 	stw	r2,0(sp)
 400ed10:	e1ffff17 	ldw	r7,-4(fp)
 400ed14:	e1bffe17 	ldw	r6,-8(fp)
 400ed18:	e17ffd17 	ldw	r5,-12(fp)
 400ed1c:	e13ffc17 	ldw	r4,-16(fp)
 400ed20:	400ee980 	call	400ee98 <alt_iic_isr_register>
}  
 400ed24:	e037883a 	mov	sp,fp
 400ed28:	dfc00117 	ldw	ra,4(sp)
 400ed2c:	df000017 	ldw	fp,0(sp)
 400ed30:	dec00204 	addi	sp,sp,8
 400ed34:	f800283a 	ret

0400ed38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400ed38:	defff904 	addi	sp,sp,-28
 400ed3c:	df000615 	stw	fp,24(sp)
 400ed40:	df000604 	addi	fp,sp,24
 400ed44:	e13ffe15 	stw	r4,-8(fp)
 400ed48:	e17fff15 	stw	r5,-4(fp)
 400ed4c:	e0bfff17 	ldw	r2,-4(fp)
 400ed50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ed54:	0005303a 	rdctl	r2,status
 400ed58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ed5c:	e0fffb17 	ldw	r3,-20(fp)
 400ed60:	00bfff84 	movi	r2,-2
 400ed64:	1884703a 	and	r2,r3,r2
 400ed68:	1001703a 	wrctl	status,r2
  
  return context;
 400ed6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400ed70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400ed74:	00c00044 	movi	r3,1
 400ed78:	e0bffa17 	ldw	r2,-24(fp)
 400ed7c:	1884983a 	sll	r2,r3,r2
 400ed80:	1007883a 	mov	r3,r2
 400ed84:	d0a6e317 	ldw	r2,-25716(gp)
 400ed88:	1884b03a 	or	r2,r3,r2
 400ed8c:	d0a6e315 	stw	r2,-25716(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400ed90:	d0a6e317 	ldw	r2,-25716(gp)
 400ed94:	100170fa 	wrctl	ienable,r2
 400ed98:	e0bffc17 	ldw	r2,-16(fp)
 400ed9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400eda0:	e0bffd17 	ldw	r2,-12(fp)
 400eda4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400eda8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400edac:	0001883a 	nop
}
 400edb0:	e037883a 	mov	sp,fp
 400edb4:	df000017 	ldw	fp,0(sp)
 400edb8:	dec00104 	addi	sp,sp,4
 400edbc:	f800283a 	ret

0400edc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400edc0:	defff904 	addi	sp,sp,-28
 400edc4:	df000615 	stw	fp,24(sp)
 400edc8:	df000604 	addi	fp,sp,24
 400edcc:	e13ffe15 	stw	r4,-8(fp)
 400edd0:	e17fff15 	stw	r5,-4(fp)
 400edd4:	e0bfff17 	ldw	r2,-4(fp)
 400edd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eddc:	0005303a 	rdctl	r2,status
 400ede0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ede4:	e0fffb17 	ldw	r3,-20(fp)
 400ede8:	00bfff84 	movi	r2,-2
 400edec:	1884703a 	and	r2,r3,r2
 400edf0:	1001703a 	wrctl	status,r2
  
  return context;
 400edf4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400edf8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400edfc:	00c00044 	movi	r3,1
 400ee00:	e0bffa17 	ldw	r2,-24(fp)
 400ee04:	1884983a 	sll	r2,r3,r2
 400ee08:	0084303a 	nor	r2,zero,r2
 400ee0c:	1007883a 	mov	r3,r2
 400ee10:	d0a6e317 	ldw	r2,-25716(gp)
 400ee14:	1884703a 	and	r2,r3,r2
 400ee18:	d0a6e315 	stw	r2,-25716(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400ee1c:	d0a6e317 	ldw	r2,-25716(gp)
 400ee20:	100170fa 	wrctl	ienable,r2
 400ee24:	e0bffc17 	ldw	r2,-16(fp)
 400ee28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ee2c:	e0bffd17 	ldw	r2,-12(fp)
 400ee30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400ee34:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400ee38:	0001883a 	nop
}
 400ee3c:	e037883a 	mov	sp,fp
 400ee40:	df000017 	ldw	fp,0(sp)
 400ee44:	dec00104 	addi	sp,sp,4
 400ee48:	f800283a 	ret

0400ee4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400ee4c:	defffc04 	addi	sp,sp,-16
 400ee50:	df000315 	stw	fp,12(sp)
 400ee54:	df000304 	addi	fp,sp,12
 400ee58:	e13ffe15 	stw	r4,-8(fp)
 400ee5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400ee60:	000530fa 	rdctl	r2,ienable
 400ee64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400ee68:	00c00044 	movi	r3,1
 400ee6c:	e0bfff17 	ldw	r2,-4(fp)
 400ee70:	1884983a 	sll	r2,r3,r2
 400ee74:	1007883a 	mov	r3,r2
 400ee78:	e0bffd17 	ldw	r2,-12(fp)
 400ee7c:	1884703a 	and	r2,r3,r2
 400ee80:	1004c03a 	cmpne	r2,r2,zero
 400ee84:	10803fcc 	andi	r2,r2,255
}
 400ee88:	e037883a 	mov	sp,fp
 400ee8c:	df000017 	ldw	fp,0(sp)
 400ee90:	dec00104 	addi	sp,sp,4
 400ee94:	f800283a 	ret

0400ee98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400ee98:	defff504 	addi	sp,sp,-44
 400ee9c:	dfc00a15 	stw	ra,40(sp)
 400eea0:	df000915 	stw	fp,36(sp)
 400eea4:	df000904 	addi	fp,sp,36
 400eea8:	e13ffc15 	stw	r4,-16(fp)
 400eeac:	e17ffd15 	stw	r5,-12(fp)
 400eeb0:	e1bffe15 	stw	r6,-8(fp)
 400eeb4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400eeb8:	00bffa84 	movi	r2,-22
 400eebc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400eec0:	e0bffd17 	ldw	r2,-12(fp)
 400eec4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400eec8:	e0bff817 	ldw	r2,-32(fp)
 400eecc:	10800808 	cmpgei	r2,r2,32
 400eed0:	1000271e 	bne	r2,zero,400ef70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eed4:	0005303a 	rdctl	r2,status
 400eed8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eedc:	e0fffb17 	ldw	r3,-20(fp)
 400eee0:	00bfff84 	movi	r2,-2
 400eee4:	1884703a 	and	r2,r3,r2
 400eee8:	1001703a 	wrctl	status,r2
  
  return context;
 400eeec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400eef0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400eef4:	00810074 	movhi	r2,1025
 400eef8:	108d6d04 	addi	r2,r2,13748
 400eefc:	e0fff817 	ldw	r3,-32(fp)
 400ef00:	180690fa 	slli	r3,r3,3
 400ef04:	10c5883a 	add	r2,r2,r3
 400ef08:	e0fffe17 	ldw	r3,-8(fp)
 400ef0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400ef10:	00810074 	movhi	r2,1025
 400ef14:	108d6d04 	addi	r2,r2,13748
 400ef18:	e0fff817 	ldw	r3,-32(fp)
 400ef1c:	180690fa 	slli	r3,r3,3
 400ef20:	10c5883a 	add	r2,r2,r3
 400ef24:	10800104 	addi	r2,r2,4
 400ef28:	e0ffff17 	ldw	r3,-4(fp)
 400ef2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400ef30:	e0bffe17 	ldw	r2,-8(fp)
 400ef34:	10000526 	beq	r2,zero,400ef4c <alt_iic_isr_register+0xb4>
 400ef38:	e0bff817 	ldw	r2,-32(fp)
 400ef3c:	100b883a 	mov	r5,r2
 400ef40:	e13ffc17 	ldw	r4,-16(fp)
 400ef44:	400ed380 	call	400ed38 <alt_ic_irq_enable>
 400ef48:	00000406 	br	400ef5c <alt_iic_isr_register+0xc4>
 400ef4c:	e0bff817 	ldw	r2,-32(fp)
 400ef50:	100b883a 	mov	r5,r2
 400ef54:	e13ffc17 	ldw	r4,-16(fp)
 400ef58:	400edc00 	call	400edc0 <alt_ic_irq_disable>
 400ef5c:	e0bff715 	stw	r2,-36(fp)
 400ef60:	e0bffa17 	ldw	r2,-24(fp)
 400ef64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef68:	e0bff917 	ldw	r2,-28(fp)
 400ef6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400ef70:	e0bff717 	ldw	r2,-36(fp)
}
 400ef74:	e037883a 	mov	sp,fp
 400ef78:	dfc00117 	ldw	ra,4(sp)
 400ef7c:	df000017 	ldw	fp,0(sp)
 400ef80:	dec00204 	addi	sp,sp,8
 400ef84:	f800283a 	ret

0400ef88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400ef88:	defff904 	addi	sp,sp,-28
 400ef8c:	dfc00615 	stw	ra,24(sp)
 400ef90:	df000515 	stw	fp,20(sp)
 400ef94:	df000504 	addi	fp,sp,20
 400ef98:	e13ffc15 	stw	r4,-16(fp)
 400ef9c:	e17ffd15 	stw	r5,-12(fp)
 400efa0:	e1bffe15 	stw	r6,-8(fp)
 400efa4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400efa8:	e1bfff17 	ldw	r6,-4(fp)
 400efac:	e17ffe17 	ldw	r5,-8(fp)
 400efb0:	e13ffd17 	ldw	r4,-12(fp)
 400efb4:	400f1c80 	call	400f1c8 <open>
 400efb8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400efbc:	e0bffb17 	ldw	r2,-20(fp)
 400efc0:	10001c16 	blt	r2,zero,400f034 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 400efc4:	00810074 	movhi	r2,1025
 400efc8:	10820004 	addi	r2,r2,2048
 400efcc:	e0fffb17 	ldw	r3,-20(fp)
 400efd0:	18c00324 	muli	r3,r3,12
 400efd4:	10c5883a 	add	r2,r2,r3
 400efd8:	10c00017 	ldw	r3,0(r2)
 400efdc:	e0bffc17 	ldw	r2,-16(fp)
 400efe0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400efe4:	00810074 	movhi	r2,1025
 400efe8:	10820004 	addi	r2,r2,2048
 400efec:	e0fffb17 	ldw	r3,-20(fp)
 400eff0:	18c00324 	muli	r3,r3,12
 400eff4:	10c5883a 	add	r2,r2,r3
 400eff8:	10800104 	addi	r2,r2,4
 400effc:	10c00017 	ldw	r3,0(r2)
 400f000:	e0bffc17 	ldw	r2,-16(fp)
 400f004:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400f008:	00810074 	movhi	r2,1025
 400f00c:	10820004 	addi	r2,r2,2048
 400f010:	e0fffb17 	ldw	r3,-20(fp)
 400f014:	18c00324 	muli	r3,r3,12
 400f018:	10c5883a 	add	r2,r2,r3
 400f01c:	10800204 	addi	r2,r2,8
 400f020:	10c00017 	ldw	r3,0(r2)
 400f024:	e0bffc17 	ldw	r2,-16(fp)
 400f028:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400f02c:	e13ffb17 	ldw	r4,-20(fp)
 400f030:	400d7680 	call	400d768 <alt_release_fd>
  }
} 
 400f034:	0001883a 	nop
 400f038:	e037883a 	mov	sp,fp
 400f03c:	dfc00117 	ldw	ra,4(sp)
 400f040:	df000017 	ldw	fp,0(sp)
 400f044:	dec00204 	addi	sp,sp,8
 400f048:	f800283a 	ret

0400f04c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400f04c:	defffb04 	addi	sp,sp,-20
 400f050:	dfc00415 	stw	ra,16(sp)
 400f054:	df000315 	stw	fp,12(sp)
 400f058:	df000304 	addi	fp,sp,12
 400f05c:	e13ffd15 	stw	r4,-12(fp)
 400f060:	e17ffe15 	stw	r5,-8(fp)
 400f064:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400f068:	01c07fc4 	movi	r7,511
 400f06c:	01800044 	movi	r6,1
 400f070:	e17ffd17 	ldw	r5,-12(fp)
 400f074:	01010074 	movhi	r4,1025
 400f078:	21020304 	addi	r4,r4,2060
 400f07c:	400ef880 	call	400ef88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400f080:	01c07fc4 	movi	r7,511
 400f084:	000d883a 	mov	r6,zero
 400f088:	e17ffe17 	ldw	r5,-8(fp)
 400f08c:	01010074 	movhi	r4,1025
 400f090:	21020004 	addi	r4,r4,2048
 400f094:	400ef880 	call	400ef88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400f098:	01c07fc4 	movi	r7,511
 400f09c:	01800044 	movi	r6,1
 400f0a0:	e17fff17 	ldw	r5,-4(fp)
 400f0a4:	01010074 	movhi	r4,1025
 400f0a8:	21020604 	addi	r4,r4,2072
 400f0ac:	400ef880 	call	400ef88 <alt_open_fd>
}  
 400f0b0:	0001883a 	nop
 400f0b4:	e037883a 	mov	sp,fp
 400f0b8:	dfc00117 	ldw	ra,4(sp)
 400f0bc:	df000017 	ldw	fp,0(sp)
 400f0c0:	dec00204 	addi	sp,sp,8
 400f0c4:	f800283a 	ret

0400f0c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f0c8:	defffe04 	addi	sp,sp,-8
 400f0cc:	dfc00115 	stw	ra,4(sp)
 400f0d0:	df000015 	stw	fp,0(sp)
 400f0d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f0d8:	d0a00e17 	ldw	r2,-32712(gp)
 400f0dc:	10000326 	beq	r2,zero,400f0ec <alt_get_errno+0x24>
 400f0e0:	d0a00e17 	ldw	r2,-32712(gp)
 400f0e4:	103ee83a 	callr	r2
 400f0e8:	00000106 	br	400f0f0 <alt_get_errno+0x28>
 400f0ec:	d0a6df04 	addi	r2,gp,-25732
}
 400f0f0:	e037883a 	mov	sp,fp
 400f0f4:	dfc00117 	ldw	ra,4(sp)
 400f0f8:	df000017 	ldw	fp,0(sp)
 400f0fc:	dec00204 	addi	sp,sp,8
 400f100:	f800283a 	ret

0400f104 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400f104:	defffd04 	addi	sp,sp,-12
 400f108:	df000215 	stw	fp,8(sp)
 400f10c:	df000204 	addi	fp,sp,8
 400f110:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400f114:	e0bfff17 	ldw	r2,-4(fp)
 400f118:	10800217 	ldw	r2,8(r2)
 400f11c:	10d00034 	orhi	r3,r2,16384
 400f120:	e0bfff17 	ldw	r2,-4(fp)
 400f124:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400f128:	e03ffe15 	stw	zero,-8(fp)
 400f12c:	00001d06 	br	400f1a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400f130:	00810074 	movhi	r2,1025
 400f134:	10820004 	addi	r2,r2,2048
 400f138:	e0fffe17 	ldw	r3,-8(fp)
 400f13c:	18c00324 	muli	r3,r3,12
 400f140:	10c5883a 	add	r2,r2,r3
 400f144:	10c00017 	ldw	r3,0(r2)
 400f148:	e0bfff17 	ldw	r2,-4(fp)
 400f14c:	10800017 	ldw	r2,0(r2)
 400f150:	1880111e 	bne	r3,r2,400f198 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400f154:	00810074 	movhi	r2,1025
 400f158:	10820004 	addi	r2,r2,2048
 400f15c:	e0fffe17 	ldw	r3,-8(fp)
 400f160:	18c00324 	muli	r3,r3,12
 400f164:	10c5883a 	add	r2,r2,r3
 400f168:	10800204 	addi	r2,r2,8
 400f16c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400f170:	1000090e 	bge	r2,zero,400f198 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400f174:	e0bffe17 	ldw	r2,-8(fp)
 400f178:	10c00324 	muli	r3,r2,12
 400f17c:	00810074 	movhi	r2,1025
 400f180:	10820004 	addi	r2,r2,2048
 400f184:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400f188:	e0bfff17 	ldw	r2,-4(fp)
 400f18c:	18800226 	beq	r3,r2,400f198 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400f190:	00bffcc4 	movi	r2,-13
 400f194:	00000806 	br	400f1b8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400f198:	e0bffe17 	ldw	r2,-8(fp)
 400f19c:	10800044 	addi	r2,r2,1
 400f1a0:	e0bffe15 	stw	r2,-8(fp)
 400f1a4:	d0a00d17 	ldw	r2,-32716(gp)
 400f1a8:	1007883a 	mov	r3,r2
 400f1ac:	e0bffe17 	ldw	r2,-8(fp)
 400f1b0:	18bfdf2e 	bgeu	r3,r2,400f130 <__alt_data_end+0xff00f130>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400f1b4:	0005883a 	mov	r2,zero
}
 400f1b8:	e037883a 	mov	sp,fp
 400f1bc:	df000017 	ldw	fp,0(sp)
 400f1c0:	dec00104 	addi	sp,sp,4
 400f1c4:	f800283a 	ret

0400f1c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400f1c8:	defff604 	addi	sp,sp,-40
 400f1cc:	dfc00915 	stw	ra,36(sp)
 400f1d0:	df000815 	stw	fp,32(sp)
 400f1d4:	df000804 	addi	fp,sp,32
 400f1d8:	e13ffd15 	stw	r4,-12(fp)
 400f1dc:	e17ffe15 	stw	r5,-8(fp)
 400f1e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400f1e4:	00bfffc4 	movi	r2,-1
 400f1e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400f1ec:	00bffb44 	movi	r2,-19
 400f1f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400f1f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400f1f8:	d1600b04 	addi	r5,gp,-32724
 400f1fc:	e13ffd17 	ldw	r4,-12(fp)
 400f200:	400ec240 	call	400ec24 <alt_find_dev>
 400f204:	e0bff815 	stw	r2,-32(fp)
 400f208:	e0bff817 	ldw	r2,-32(fp)
 400f20c:	1000051e 	bne	r2,zero,400f224 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400f210:	e13ffd17 	ldw	r4,-12(fp)
 400f214:	400f4e40 	call	400f4e4 <alt_find_file>
 400f218:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400f21c:	00800044 	movi	r2,1
 400f220:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400f224:	e0bff817 	ldw	r2,-32(fp)
 400f228:	10002926 	beq	r2,zero,400f2d0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400f22c:	e13ff817 	ldw	r4,-32(fp)
 400f230:	400f5ec0 	call	400f5ec <alt_get_fd>
 400f234:	e0bff915 	stw	r2,-28(fp)
 400f238:	e0bff917 	ldw	r2,-28(fp)
 400f23c:	1000030e 	bge	r2,zero,400f24c <open+0x84>
    {
      status = index;
 400f240:	e0bff917 	ldw	r2,-28(fp)
 400f244:	e0bffa15 	stw	r2,-24(fp)
 400f248:	00002306 	br	400f2d8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 400f24c:	e0bff917 	ldw	r2,-28(fp)
 400f250:	10c00324 	muli	r3,r2,12
 400f254:	00810074 	movhi	r2,1025
 400f258:	10820004 	addi	r2,r2,2048
 400f25c:	1885883a 	add	r2,r3,r2
 400f260:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400f264:	e0fffe17 	ldw	r3,-8(fp)
 400f268:	00900034 	movhi	r2,16384
 400f26c:	10bfffc4 	addi	r2,r2,-1
 400f270:	1886703a 	and	r3,r3,r2
 400f274:	e0bffc17 	ldw	r2,-16(fp)
 400f278:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400f27c:	e0bffb17 	ldw	r2,-20(fp)
 400f280:	1000051e 	bne	r2,zero,400f298 <open+0xd0>
 400f284:	e13ffc17 	ldw	r4,-16(fp)
 400f288:	400f1040 	call	400f104 <alt_file_locked>
 400f28c:	e0bffa15 	stw	r2,-24(fp)
 400f290:	e0bffa17 	ldw	r2,-24(fp)
 400f294:	10001016 	blt	r2,zero,400f2d8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400f298:	e0bff817 	ldw	r2,-32(fp)
 400f29c:	10800317 	ldw	r2,12(r2)
 400f2a0:	10000826 	beq	r2,zero,400f2c4 <open+0xfc>
 400f2a4:	e0bff817 	ldw	r2,-32(fp)
 400f2a8:	10800317 	ldw	r2,12(r2)
 400f2ac:	e1ffff17 	ldw	r7,-4(fp)
 400f2b0:	e1bffe17 	ldw	r6,-8(fp)
 400f2b4:	e17ffd17 	ldw	r5,-12(fp)
 400f2b8:	e13ffc17 	ldw	r4,-16(fp)
 400f2bc:	103ee83a 	callr	r2
 400f2c0:	00000106 	br	400f2c8 <open+0x100>
 400f2c4:	0005883a 	mov	r2,zero
 400f2c8:	e0bffa15 	stw	r2,-24(fp)
 400f2cc:	00000206 	br	400f2d8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400f2d0:	00bffb44 	movi	r2,-19
 400f2d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400f2d8:	e0bffa17 	ldw	r2,-24(fp)
 400f2dc:	1000090e 	bge	r2,zero,400f304 <open+0x13c>
  {
    alt_release_fd (index);  
 400f2e0:	e13ff917 	ldw	r4,-28(fp)
 400f2e4:	400d7680 	call	400d768 <alt_release_fd>
    ALT_ERRNO = -status;
 400f2e8:	400f0c80 	call	400f0c8 <alt_get_errno>
 400f2ec:	1007883a 	mov	r3,r2
 400f2f0:	e0bffa17 	ldw	r2,-24(fp)
 400f2f4:	0085c83a 	sub	r2,zero,r2
 400f2f8:	18800015 	stw	r2,0(r3)
    return -1;
 400f2fc:	00bfffc4 	movi	r2,-1
 400f300:	00000106 	br	400f308 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 400f304:	e0bff917 	ldw	r2,-28(fp)
}
 400f308:	e037883a 	mov	sp,fp
 400f30c:	dfc00117 	ldw	ra,4(sp)
 400f310:	df000017 	ldw	fp,0(sp)
 400f314:	dec00204 	addi	sp,sp,8
 400f318:	f800283a 	ret

0400f31c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400f31c:	defffa04 	addi	sp,sp,-24
 400f320:	df000515 	stw	fp,20(sp)
 400f324:	df000504 	addi	fp,sp,20
 400f328:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f32c:	0005303a 	rdctl	r2,status
 400f330:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f334:	e0fffc17 	ldw	r3,-16(fp)
 400f338:	00bfff84 	movi	r2,-2
 400f33c:	1884703a 	and	r2,r3,r2
 400f340:	1001703a 	wrctl	status,r2
  
  return context;
 400f344:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400f348:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400f34c:	e0bfff17 	ldw	r2,-4(fp)
 400f350:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400f354:	e0bffd17 	ldw	r2,-12(fp)
 400f358:	10800017 	ldw	r2,0(r2)
 400f35c:	e0fffd17 	ldw	r3,-12(fp)
 400f360:	18c00117 	ldw	r3,4(r3)
 400f364:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400f368:	e0bffd17 	ldw	r2,-12(fp)
 400f36c:	10800117 	ldw	r2,4(r2)
 400f370:	e0fffd17 	ldw	r3,-12(fp)
 400f374:	18c00017 	ldw	r3,0(r3)
 400f378:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400f37c:	e0bffd17 	ldw	r2,-12(fp)
 400f380:	e0fffd17 	ldw	r3,-12(fp)
 400f384:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400f388:	e0bffd17 	ldw	r2,-12(fp)
 400f38c:	e0fffd17 	ldw	r3,-12(fp)
 400f390:	10c00015 	stw	r3,0(r2)
 400f394:	e0bffb17 	ldw	r2,-20(fp)
 400f398:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f39c:	e0bffe17 	ldw	r2,-8(fp)
 400f3a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400f3a4:	0001883a 	nop
 400f3a8:	e037883a 	mov	sp,fp
 400f3ac:	df000017 	ldw	fp,0(sp)
 400f3b0:	dec00104 	addi	sp,sp,4
 400f3b4:	f800283a 	ret

0400f3b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400f3b8:	defffb04 	addi	sp,sp,-20
 400f3bc:	dfc00415 	stw	ra,16(sp)
 400f3c0:	df000315 	stw	fp,12(sp)
 400f3c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400f3c8:	d0a01317 	ldw	r2,-32692(gp)
 400f3cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400f3d0:	d0a6e517 	ldw	r2,-25708(gp)
 400f3d4:	10800044 	addi	r2,r2,1
 400f3d8:	d0a6e515 	stw	r2,-25708(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400f3dc:	00002e06 	br	400f498 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400f3e0:	e0bffd17 	ldw	r2,-12(fp)
 400f3e4:	10800017 	ldw	r2,0(r2)
 400f3e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400f3ec:	e0bffd17 	ldw	r2,-12(fp)
 400f3f0:	10800403 	ldbu	r2,16(r2)
 400f3f4:	10803fcc 	andi	r2,r2,255
 400f3f8:	10000426 	beq	r2,zero,400f40c <alt_tick+0x54>
 400f3fc:	d0a6e517 	ldw	r2,-25708(gp)
 400f400:	1000021e 	bne	r2,zero,400f40c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400f404:	e0bffd17 	ldw	r2,-12(fp)
 400f408:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400f40c:	e0bffd17 	ldw	r2,-12(fp)
 400f410:	10800217 	ldw	r2,8(r2)
 400f414:	d0e6e517 	ldw	r3,-25708(gp)
 400f418:	18801d36 	bltu	r3,r2,400f490 <alt_tick+0xd8>
 400f41c:	e0bffd17 	ldw	r2,-12(fp)
 400f420:	10800403 	ldbu	r2,16(r2)
 400f424:	10803fcc 	andi	r2,r2,255
 400f428:	1000191e 	bne	r2,zero,400f490 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400f42c:	e0bffd17 	ldw	r2,-12(fp)
 400f430:	10800317 	ldw	r2,12(r2)
 400f434:	e0fffd17 	ldw	r3,-12(fp)
 400f438:	18c00517 	ldw	r3,20(r3)
 400f43c:	1809883a 	mov	r4,r3
 400f440:	103ee83a 	callr	r2
 400f444:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400f448:	e0bfff17 	ldw	r2,-4(fp)
 400f44c:	1000031e 	bne	r2,zero,400f45c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400f450:	e13ffd17 	ldw	r4,-12(fp)
 400f454:	400f31c0 	call	400f31c <alt_alarm_stop>
 400f458:	00000d06 	br	400f490 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400f45c:	e0bffd17 	ldw	r2,-12(fp)
 400f460:	10c00217 	ldw	r3,8(r2)
 400f464:	e0bfff17 	ldw	r2,-4(fp)
 400f468:	1887883a 	add	r3,r3,r2
 400f46c:	e0bffd17 	ldw	r2,-12(fp)
 400f470:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400f474:	e0bffd17 	ldw	r2,-12(fp)
 400f478:	10c00217 	ldw	r3,8(r2)
 400f47c:	d0a6e517 	ldw	r2,-25708(gp)
 400f480:	1880032e 	bgeu	r3,r2,400f490 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400f484:	e0bffd17 	ldw	r2,-12(fp)
 400f488:	00c00044 	movi	r3,1
 400f48c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400f490:	e0bffe17 	ldw	r2,-8(fp)
 400f494:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400f498:	e0fffd17 	ldw	r3,-12(fp)
 400f49c:	d0a01304 	addi	r2,gp,-32692
 400f4a0:	18bfcf1e 	bne	r3,r2,400f3e0 <__alt_data_end+0xff00f3e0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400f4a4:	0001883a 	nop
}
 400f4a8:	0001883a 	nop
 400f4ac:	e037883a 	mov	sp,fp
 400f4b0:	dfc00117 	ldw	ra,4(sp)
 400f4b4:	df000017 	ldw	fp,0(sp)
 400f4b8:	dec00204 	addi	sp,sp,8
 400f4bc:	f800283a 	ret

0400f4c0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400f4c0:	deffff04 	addi	sp,sp,-4
 400f4c4:	df000015 	stw	fp,0(sp)
 400f4c8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400f4cc:	000170fa 	wrctl	ienable,zero
}
 400f4d0:	0001883a 	nop
 400f4d4:	e037883a 	mov	sp,fp
 400f4d8:	df000017 	ldw	fp,0(sp)
 400f4dc:	dec00104 	addi	sp,sp,4
 400f4e0:	f800283a 	ret

0400f4e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400f4e4:	defffb04 	addi	sp,sp,-20
 400f4e8:	dfc00415 	stw	ra,16(sp)
 400f4ec:	df000315 	stw	fp,12(sp)
 400f4f0:	df000304 	addi	fp,sp,12
 400f4f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400f4f8:	d0a00917 	ldw	r2,-32732(gp)
 400f4fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400f500:	00003106 	br	400f5c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400f504:	e0bffd17 	ldw	r2,-12(fp)
 400f508:	10800217 	ldw	r2,8(r2)
 400f50c:	1009883a 	mov	r4,r2
 400f510:	40006dc0 	call	40006dc <strlen>
 400f514:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400f518:	e0bffd17 	ldw	r2,-12(fp)
 400f51c:	10c00217 	ldw	r3,8(r2)
 400f520:	e0bffe17 	ldw	r2,-8(fp)
 400f524:	10bfffc4 	addi	r2,r2,-1
 400f528:	1885883a 	add	r2,r3,r2
 400f52c:	10800003 	ldbu	r2,0(r2)
 400f530:	10803fcc 	andi	r2,r2,255
 400f534:	1080201c 	xori	r2,r2,128
 400f538:	10bfe004 	addi	r2,r2,-128
 400f53c:	10800bd8 	cmpnei	r2,r2,47
 400f540:	1000031e 	bne	r2,zero,400f550 <alt_find_file+0x6c>
    {
      len -= 1;
 400f544:	e0bffe17 	ldw	r2,-8(fp)
 400f548:	10bfffc4 	addi	r2,r2,-1
 400f54c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400f550:	e0bffe17 	ldw	r2,-8(fp)
 400f554:	e0ffff17 	ldw	r3,-4(fp)
 400f558:	1885883a 	add	r2,r3,r2
 400f55c:	10800003 	ldbu	r2,0(r2)
 400f560:	10803fcc 	andi	r2,r2,255
 400f564:	1080201c 	xori	r2,r2,128
 400f568:	10bfe004 	addi	r2,r2,-128
 400f56c:	10800be0 	cmpeqi	r2,r2,47
 400f570:	1000081e 	bne	r2,zero,400f594 <alt_find_file+0xb0>
 400f574:	e0bffe17 	ldw	r2,-8(fp)
 400f578:	e0ffff17 	ldw	r3,-4(fp)
 400f57c:	1885883a 	add	r2,r3,r2
 400f580:	10800003 	ldbu	r2,0(r2)
 400f584:	10803fcc 	andi	r2,r2,255
 400f588:	1080201c 	xori	r2,r2,128
 400f58c:	10bfe004 	addi	r2,r2,-128
 400f590:	10000a1e 	bne	r2,zero,400f5bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400f594:	e0bffd17 	ldw	r2,-12(fp)
 400f598:	10800217 	ldw	r2,8(r2)
 400f59c:	e0fffe17 	ldw	r3,-8(fp)
 400f5a0:	180d883a 	mov	r6,r3
 400f5a4:	e17fff17 	ldw	r5,-4(fp)
 400f5a8:	1009883a 	mov	r4,r2
 400f5ac:	400f8080 	call	400f808 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400f5b0:	1000021e 	bne	r2,zero,400f5bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400f5b4:	e0bffd17 	ldw	r2,-12(fp)
 400f5b8:	00000706 	br	400f5d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400f5bc:	e0bffd17 	ldw	r2,-12(fp)
 400f5c0:	10800017 	ldw	r2,0(r2)
 400f5c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400f5c8:	e0fffd17 	ldw	r3,-12(fp)
 400f5cc:	d0a00904 	addi	r2,gp,-32732
 400f5d0:	18bfcc1e 	bne	r3,r2,400f504 <__alt_data_end+0xff00f504>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400f5d4:	0005883a 	mov	r2,zero
}
 400f5d8:	e037883a 	mov	sp,fp
 400f5dc:	dfc00117 	ldw	ra,4(sp)
 400f5e0:	df000017 	ldw	fp,0(sp)
 400f5e4:	dec00204 	addi	sp,sp,8
 400f5e8:	f800283a 	ret

0400f5ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400f5ec:	defffc04 	addi	sp,sp,-16
 400f5f0:	df000315 	stw	fp,12(sp)
 400f5f4:	df000304 	addi	fp,sp,12
 400f5f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400f5fc:	00bffa04 	movi	r2,-24
 400f600:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400f604:	e03ffd15 	stw	zero,-12(fp)
 400f608:	00001906 	br	400f670 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 400f60c:	00810074 	movhi	r2,1025
 400f610:	10820004 	addi	r2,r2,2048
 400f614:	e0fffd17 	ldw	r3,-12(fp)
 400f618:	18c00324 	muli	r3,r3,12
 400f61c:	10c5883a 	add	r2,r2,r3
 400f620:	10800017 	ldw	r2,0(r2)
 400f624:	10000f1e 	bne	r2,zero,400f664 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 400f628:	00810074 	movhi	r2,1025
 400f62c:	10820004 	addi	r2,r2,2048
 400f630:	e0fffd17 	ldw	r3,-12(fp)
 400f634:	18c00324 	muli	r3,r3,12
 400f638:	10c5883a 	add	r2,r2,r3
 400f63c:	e0ffff17 	ldw	r3,-4(fp)
 400f640:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400f644:	d0e00d17 	ldw	r3,-32716(gp)
 400f648:	e0bffd17 	ldw	r2,-12(fp)
 400f64c:	1880020e 	bge	r3,r2,400f658 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 400f650:	e0bffd17 	ldw	r2,-12(fp)
 400f654:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 400f658:	e0bffd17 	ldw	r2,-12(fp)
 400f65c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400f660:	00000606 	br	400f67c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400f664:	e0bffd17 	ldw	r2,-12(fp)
 400f668:	10800044 	addi	r2,r2,1
 400f66c:	e0bffd15 	stw	r2,-12(fp)
 400f670:	e0bffd17 	ldw	r2,-12(fp)
 400f674:	10800810 	cmplti	r2,r2,32
 400f678:	103fe41e 	bne	r2,zero,400f60c <__alt_data_end+0xff00f60c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400f67c:	e0bffe17 	ldw	r2,-8(fp)
}
 400f680:	e037883a 	mov	sp,fp
 400f684:	df000017 	ldw	fp,0(sp)
 400f688:	dec00104 	addi	sp,sp,4
 400f68c:	f800283a 	ret

0400f690 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400f690:	defffb04 	addi	sp,sp,-20
 400f694:	df000415 	stw	fp,16(sp)
 400f698:	df000404 	addi	fp,sp,16
 400f69c:	e13ffe15 	stw	r4,-8(fp)
 400f6a0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400f6a4:	e0bfff17 	ldw	r2,-4(fp)
 400f6a8:	10a00070 	cmpltui	r2,r2,32769
 400f6ac:	1000021e 	bne	r2,zero,400f6b8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 400f6b0:	00a00014 	movui	r2,32768
 400f6b4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400f6b8:	e0fffe17 	ldw	r3,-8(fp)
 400f6bc:	e0bfff17 	ldw	r2,-4(fp)
 400f6c0:	1885883a 	add	r2,r3,r2
 400f6c4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400f6c8:	e0bffe17 	ldw	r2,-8(fp)
 400f6cc:	e0bffc15 	stw	r2,-16(fp)
 400f6d0:	00000506 	br	400f6e8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400f6d4:	e0bffc17 	ldw	r2,-16(fp)
 400f6d8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400f6dc:	e0bffc17 	ldw	r2,-16(fp)
 400f6e0:	10800804 	addi	r2,r2,32
 400f6e4:	e0bffc15 	stw	r2,-16(fp)
 400f6e8:	e0fffc17 	ldw	r3,-16(fp)
 400f6ec:	e0bffd17 	ldw	r2,-12(fp)
 400f6f0:	18bff836 	bltu	r3,r2,400f6d4 <__alt_data_end+0xff00f6d4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400f6f4:	e0bffe17 	ldw	r2,-8(fp)
 400f6f8:	108007cc 	andi	r2,r2,31
 400f6fc:	10000226 	beq	r2,zero,400f708 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400f700:	e0bffc17 	ldw	r2,-16(fp)
 400f704:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400f708:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400f70c:	0001883a 	nop
 400f710:	e037883a 	mov	sp,fp
 400f714:	df000017 	ldw	fp,0(sp)
 400f718:	dec00104 	addi	sp,sp,4
 400f71c:	f800283a 	ret

0400f720 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400f720:	defffe04 	addi	sp,sp,-8
 400f724:	df000115 	stw	fp,4(sp)
 400f728:	df000104 	addi	fp,sp,4
 400f72c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400f730:	e0bfff17 	ldw	r2,-4(fp)
 400f734:	10bffe84 	addi	r2,r2,-6
 400f738:	10c00428 	cmpgeui	r3,r2,16
 400f73c:	18001a1e 	bne	r3,zero,400f7a8 <alt_exception_cause_generated_bad_addr+0x88>
 400f740:	100690ba 	slli	r3,r2,2
 400f744:	00810074 	movhi	r2,1025
 400f748:	10bdd604 	addi	r2,r2,-2216
 400f74c:	1885883a 	add	r2,r3,r2
 400f750:	10800017 	ldw	r2,0(r2)
 400f754:	1000683a 	jmp	r2
 400f758:	0400f798 	cmpnei	r16,zero,990
 400f75c:	0400f798 	cmpnei	r16,zero,990
 400f760:	0400f7a8 	cmpgeui	r16,zero,990
 400f764:	0400f7a8 	cmpgeui	r16,zero,990
 400f768:	0400f7a8 	cmpgeui	r16,zero,990
 400f76c:	0400f798 	cmpnei	r16,zero,990
 400f770:	0400f7a0 	cmpeqi	r16,zero,990
 400f774:	0400f7a8 	cmpgeui	r16,zero,990
 400f778:	0400f798 	cmpnei	r16,zero,990
 400f77c:	0400f798 	cmpnei	r16,zero,990
 400f780:	0400f7a8 	cmpgeui	r16,zero,990
 400f784:	0400f798 	cmpnei	r16,zero,990
 400f788:	0400f7a0 	cmpeqi	r16,zero,990
 400f78c:	0400f7a8 	cmpgeui	r16,zero,990
 400f790:	0400f7a8 	cmpgeui	r16,zero,990
 400f794:	0400f798 	cmpnei	r16,zero,990
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400f798:	00800044 	movi	r2,1
 400f79c:	00000306 	br	400f7ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400f7a0:	0005883a 	mov	r2,zero
 400f7a4:	00000106 	br	400f7ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400f7a8:	0005883a 	mov	r2,zero
  }
}
 400f7ac:	e037883a 	mov	sp,fp
 400f7b0:	df000017 	ldw	fp,0(sp)
 400f7b4:	dec00104 	addi	sp,sp,4
 400f7b8:	f800283a 	ret

0400f7bc <atexit>:
 400f7bc:	200b883a 	mov	r5,r4
 400f7c0:	000f883a 	mov	r7,zero
 400f7c4:	000d883a 	mov	r6,zero
 400f7c8:	0009883a 	mov	r4,zero
 400f7cc:	400f8841 	jmpi	400f884 <__register_exitproc>

0400f7d0 <exit>:
 400f7d0:	defffe04 	addi	sp,sp,-8
 400f7d4:	000b883a 	mov	r5,zero
 400f7d8:	dc000015 	stw	r16,0(sp)
 400f7dc:	dfc00115 	stw	ra,4(sp)
 400f7e0:	2021883a 	mov	r16,r4
 400f7e4:	400f99c0 	call	400f99c <__call_exitprocs>
 400f7e8:	00810074 	movhi	r2,1025
 400f7ec:	10867f04 	addi	r2,r2,6652
 400f7f0:	11000017 	ldw	r4,0(r2)
 400f7f4:	20800f17 	ldw	r2,60(r4)
 400f7f8:	10000126 	beq	r2,zero,400f800 <exit+0x30>
 400f7fc:	103ee83a 	callr	r2
 400f800:	8009883a 	mov	r4,r16
 400f804:	400fb1c0 	call	400fb1c <_exit>

0400f808 <memcmp>:
 400f808:	01c000c4 	movi	r7,3
 400f80c:	3980192e 	bgeu	r7,r6,400f874 <memcmp+0x6c>
 400f810:	2144b03a 	or	r2,r4,r5
 400f814:	11c4703a 	and	r2,r2,r7
 400f818:	10000f26 	beq	r2,zero,400f858 <memcmp+0x50>
 400f81c:	20800003 	ldbu	r2,0(r4)
 400f820:	28c00003 	ldbu	r3,0(r5)
 400f824:	10c0151e 	bne	r2,r3,400f87c <memcmp+0x74>
 400f828:	31bfff84 	addi	r6,r6,-2
 400f82c:	01ffffc4 	movi	r7,-1
 400f830:	00000406 	br	400f844 <memcmp+0x3c>
 400f834:	20800003 	ldbu	r2,0(r4)
 400f838:	28c00003 	ldbu	r3,0(r5)
 400f83c:	31bfffc4 	addi	r6,r6,-1
 400f840:	10c00e1e 	bne	r2,r3,400f87c <memcmp+0x74>
 400f844:	21000044 	addi	r4,r4,1
 400f848:	29400044 	addi	r5,r5,1
 400f84c:	31fff91e 	bne	r6,r7,400f834 <__alt_data_end+0xff00f834>
 400f850:	0005883a 	mov	r2,zero
 400f854:	f800283a 	ret
 400f858:	20c00017 	ldw	r3,0(r4)
 400f85c:	28800017 	ldw	r2,0(r5)
 400f860:	18bfee1e 	bne	r3,r2,400f81c <__alt_data_end+0xff00f81c>
 400f864:	31bfff04 	addi	r6,r6,-4
 400f868:	21000104 	addi	r4,r4,4
 400f86c:	29400104 	addi	r5,r5,4
 400f870:	39bff936 	bltu	r7,r6,400f858 <__alt_data_end+0xff00f858>
 400f874:	303fe91e 	bne	r6,zero,400f81c <__alt_data_end+0xff00f81c>
 400f878:	003ff506 	br	400f850 <__alt_data_end+0xff00f850>
 400f87c:	10c5c83a 	sub	r2,r2,r3
 400f880:	f800283a 	ret

0400f884 <__register_exitproc>:
 400f884:	defffa04 	addi	sp,sp,-24
 400f888:	dc000315 	stw	r16,12(sp)
 400f88c:	04010074 	movhi	r16,1025
 400f890:	84067f04 	addi	r16,r16,6652
 400f894:	80c00017 	ldw	r3,0(r16)
 400f898:	dc400415 	stw	r17,16(sp)
 400f89c:	dfc00515 	stw	ra,20(sp)
 400f8a0:	18805217 	ldw	r2,328(r3)
 400f8a4:	2023883a 	mov	r17,r4
 400f8a8:	10003726 	beq	r2,zero,400f988 <__register_exitproc+0x104>
 400f8ac:	10c00117 	ldw	r3,4(r2)
 400f8b0:	010007c4 	movi	r4,31
 400f8b4:	20c00e16 	blt	r4,r3,400f8f0 <__register_exitproc+0x6c>
 400f8b8:	1a000044 	addi	r8,r3,1
 400f8bc:	8800221e 	bne	r17,zero,400f948 <__register_exitproc+0xc4>
 400f8c0:	18c00084 	addi	r3,r3,2
 400f8c4:	18c7883a 	add	r3,r3,r3
 400f8c8:	18c7883a 	add	r3,r3,r3
 400f8cc:	12000115 	stw	r8,4(r2)
 400f8d0:	10c7883a 	add	r3,r2,r3
 400f8d4:	19400015 	stw	r5,0(r3)
 400f8d8:	0005883a 	mov	r2,zero
 400f8dc:	dfc00517 	ldw	ra,20(sp)
 400f8e0:	dc400417 	ldw	r17,16(sp)
 400f8e4:	dc000317 	ldw	r16,12(sp)
 400f8e8:	dec00604 	addi	sp,sp,24
 400f8ec:	f800283a 	ret
 400f8f0:	00800034 	movhi	r2,0
 400f8f4:	10800004 	addi	r2,r2,0
 400f8f8:	10002626 	beq	r2,zero,400f994 <__register_exitproc+0x110>
 400f8fc:	01006404 	movi	r4,400
 400f900:	d9400015 	stw	r5,0(sp)
 400f904:	d9800115 	stw	r6,4(sp)
 400f908:	d9c00215 	stw	r7,8(sp)
 400f90c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 400f910:	d9400017 	ldw	r5,0(sp)
 400f914:	d9800117 	ldw	r6,4(sp)
 400f918:	d9c00217 	ldw	r7,8(sp)
 400f91c:	10001d26 	beq	r2,zero,400f994 <__register_exitproc+0x110>
 400f920:	81000017 	ldw	r4,0(r16)
 400f924:	10000115 	stw	zero,4(r2)
 400f928:	02000044 	movi	r8,1
 400f92c:	22405217 	ldw	r9,328(r4)
 400f930:	0007883a 	mov	r3,zero
 400f934:	12400015 	stw	r9,0(r2)
 400f938:	20805215 	stw	r2,328(r4)
 400f93c:	10006215 	stw	zero,392(r2)
 400f940:	10006315 	stw	zero,396(r2)
 400f944:	883fde26 	beq	r17,zero,400f8c0 <__alt_data_end+0xff00f8c0>
 400f948:	18c9883a 	add	r4,r3,r3
 400f94c:	2109883a 	add	r4,r4,r4
 400f950:	1109883a 	add	r4,r2,r4
 400f954:	21802215 	stw	r6,136(r4)
 400f958:	01800044 	movi	r6,1
 400f95c:	12406217 	ldw	r9,392(r2)
 400f960:	30cc983a 	sll	r6,r6,r3
 400f964:	4992b03a 	or	r9,r9,r6
 400f968:	12406215 	stw	r9,392(r2)
 400f96c:	21c04215 	stw	r7,264(r4)
 400f970:	01000084 	movi	r4,2
 400f974:	893fd21e 	bne	r17,r4,400f8c0 <__alt_data_end+0xff00f8c0>
 400f978:	11006317 	ldw	r4,396(r2)
 400f97c:	218cb03a 	or	r6,r4,r6
 400f980:	11806315 	stw	r6,396(r2)
 400f984:	003fce06 	br	400f8c0 <__alt_data_end+0xff00f8c0>
 400f988:	18805304 	addi	r2,r3,332
 400f98c:	18805215 	stw	r2,328(r3)
 400f990:	003fc606 	br	400f8ac <__alt_data_end+0xff00f8ac>
 400f994:	00bfffc4 	movi	r2,-1
 400f998:	003fd006 	br	400f8dc <__alt_data_end+0xff00f8dc>

0400f99c <__call_exitprocs>:
 400f99c:	defff504 	addi	sp,sp,-44
 400f9a0:	df000915 	stw	fp,36(sp)
 400f9a4:	dd400615 	stw	r21,24(sp)
 400f9a8:	dc800315 	stw	r18,12(sp)
 400f9ac:	dfc00a15 	stw	ra,40(sp)
 400f9b0:	ddc00815 	stw	r23,32(sp)
 400f9b4:	dd800715 	stw	r22,28(sp)
 400f9b8:	dd000515 	stw	r20,20(sp)
 400f9bc:	dcc00415 	stw	r19,16(sp)
 400f9c0:	dc400215 	stw	r17,8(sp)
 400f9c4:	dc000115 	stw	r16,4(sp)
 400f9c8:	d9000015 	stw	r4,0(sp)
 400f9cc:	2839883a 	mov	fp,r5
 400f9d0:	04800044 	movi	r18,1
 400f9d4:	057fffc4 	movi	r21,-1
 400f9d8:	00810074 	movhi	r2,1025
 400f9dc:	10867f04 	addi	r2,r2,6652
 400f9e0:	12000017 	ldw	r8,0(r2)
 400f9e4:	45005217 	ldw	r20,328(r8)
 400f9e8:	44c05204 	addi	r19,r8,328
 400f9ec:	a0001c26 	beq	r20,zero,400fa60 <__call_exitprocs+0xc4>
 400f9f0:	a0800117 	ldw	r2,4(r20)
 400f9f4:	15ffffc4 	addi	r23,r2,-1
 400f9f8:	b8000d16 	blt	r23,zero,400fa30 <__call_exitprocs+0x94>
 400f9fc:	14000044 	addi	r16,r2,1
 400fa00:	8421883a 	add	r16,r16,r16
 400fa04:	8421883a 	add	r16,r16,r16
 400fa08:	84402004 	addi	r17,r16,128
 400fa0c:	a463883a 	add	r17,r20,r17
 400fa10:	a421883a 	add	r16,r20,r16
 400fa14:	e0001e26 	beq	fp,zero,400fa90 <__call_exitprocs+0xf4>
 400fa18:	80804017 	ldw	r2,256(r16)
 400fa1c:	e0801c26 	beq	fp,r2,400fa90 <__call_exitprocs+0xf4>
 400fa20:	bdffffc4 	addi	r23,r23,-1
 400fa24:	843fff04 	addi	r16,r16,-4
 400fa28:	8c7fff04 	addi	r17,r17,-4
 400fa2c:	bd7ff91e 	bne	r23,r21,400fa14 <__alt_data_end+0xff00fa14>
 400fa30:	00800034 	movhi	r2,0
 400fa34:	10800004 	addi	r2,r2,0
 400fa38:	10000926 	beq	r2,zero,400fa60 <__call_exitprocs+0xc4>
 400fa3c:	a0800117 	ldw	r2,4(r20)
 400fa40:	1000301e 	bne	r2,zero,400fb04 <__call_exitprocs+0x168>
 400fa44:	a0800017 	ldw	r2,0(r20)
 400fa48:	10003226 	beq	r2,zero,400fb14 <__call_exitprocs+0x178>
 400fa4c:	a009883a 	mov	r4,r20
 400fa50:	98800015 	stw	r2,0(r19)
 400fa54:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 400fa58:	9d000017 	ldw	r20,0(r19)
 400fa5c:	a03fe41e 	bne	r20,zero,400f9f0 <__alt_data_end+0xff00f9f0>
 400fa60:	dfc00a17 	ldw	ra,40(sp)
 400fa64:	df000917 	ldw	fp,36(sp)
 400fa68:	ddc00817 	ldw	r23,32(sp)
 400fa6c:	dd800717 	ldw	r22,28(sp)
 400fa70:	dd400617 	ldw	r21,24(sp)
 400fa74:	dd000517 	ldw	r20,20(sp)
 400fa78:	dcc00417 	ldw	r19,16(sp)
 400fa7c:	dc800317 	ldw	r18,12(sp)
 400fa80:	dc400217 	ldw	r17,8(sp)
 400fa84:	dc000117 	ldw	r16,4(sp)
 400fa88:	dec00b04 	addi	sp,sp,44
 400fa8c:	f800283a 	ret
 400fa90:	a0800117 	ldw	r2,4(r20)
 400fa94:	80c00017 	ldw	r3,0(r16)
 400fa98:	10bfffc4 	addi	r2,r2,-1
 400fa9c:	15c01426 	beq	r2,r23,400faf0 <__call_exitprocs+0x154>
 400faa0:	80000015 	stw	zero,0(r16)
 400faa4:	183fde26 	beq	r3,zero,400fa20 <__alt_data_end+0xff00fa20>
 400faa8:	95c8983a 	sll	r4,r18,r23
 400faac:	a0806217 	ldw	r2,392(r20)
 400fab0:	a5800117 	ldw	r22,4(r20)
 400fab4:	2084703a 	and	r2,r4,r2
 400fab8:	10000b26 	beq	r2,zero,400fae8 <__call_exitprocs+0x14c>
 400fabc:	a0806317 	ldw	r2,396(r20)
 400fac0:	2088703a 	and	r4,r4,r2
 400fac4:	20000c1e 	bne	r4,zero,400faf8 <__call_exitprocs+0x15c>
 400fac8:	89400017 	ldw	r5,0(r17)
 400facc:	d9000017 	ldw	r4,0(sp)
 400fad0:	183ee83a 	callr	r3
 400fad4:	a0800117 	ldw	r2,4(r20)
 400fad8:	15bfbf1e 	bne	r2,r22,400f9d8 <__alt_data_end+0xff00f9d8>
 400fadc:	98800017 	ldw	r2,0(r19)
 400fae0:	153fcf26 	beq	r2,r20,400fa20 <__alt_data_end+0xff00fa20>
 400fae4:	003fbc06 	br	400f9d8 <__alt_data_end+0xff00f9d8>
 400fae8:	183ee83a 	callr	r3
 400faec:	003ff906 	br	400fad4 <__alt_data_end+0xff00fad4>
 400faf0:	a5c00115 	stw	r23,4(r20)
 400faf4:	003feb06 	br	400faa4 <__alt_data_end+0xff00faa4>
 400faf8:	89000017 	ldw	r4,0(r17)
 400fafc:	183ee83a 	callr	r3
 400fb00:	003ff406 	br	400fad4 <__alt_data_end+0xff00fad4>
 400fb04:	a0800017 	ldw	r2,0(r20)
 400fb08:	a027883a 	mov	r19,r20
 400fb0c:	1029883a 	mov	r20,r2
 400fb10:	003fb606 	br	400f9ec <__alt_data_end+0xff00f9ec>
 400fb14:	0005883a 	mov	r2,zero
 400fb18:	003ffb06 	br	400fb08 <__alt_data_end+0xff00fb08>

0400fb1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400fb1c:	defffd04 	addi	sp,sp,-12
 400fb20:	df000215 	stw	fp,8(sp)
 400fb24:	df000204 	addi	fp,sp,8
 400fb28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400fb2c:	0001883a 	nop
 400fb30:	e0bfff17 	ldw	r2,-4(fp)
 400fb34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400fb38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400fb3c:	10000226 	beq	r2,zero,400fb48 <_exit+0x2c>
    ALT_SIM_FAIL();
 400fb40:	002af070 	cmpltui	zero,zero,43969
 400fb44:	00000106 	br	400fb4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400fb48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400fb4c:	003fff06 	br	400fb4c <__alt_data_end+0xff00fb4c>
